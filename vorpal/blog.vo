let reverse = xs =>
  loop reverse = xs => rest =>
    if xs is Cons(x, xs)
      reverse(xs, Cons(x, rest))
    else
      rest
  reverse(xs, Nil)

let map = f => xs =>
  loop map = f => xs => acc =>
    if xs is Cons(x, xs)
      map(f, xs, Cons(f(x), acc))
    else
      reverse(acc)
  map(f, xs, Nil)

let read-lines = _ =>
  loop split-lines = curr => lines =>
    let c = read-char!()
    if c is ()
      Cons(curr, lines)
    else if c is "\n"
      split-lines(Nil, Cons(curr, lines))
    else
      split-lines(Cons(c, curr), lines)
  reverse(map(reverse, split-lines(Nil, Nil)))

let append = xs => ys =>
  loop append = xs => ys =>
    if ys is Cons(y, ys)
      append(Cons(y, xs), ys)
    else
      xs
  reverse(append(reverse(xs), ys))

loop wrap = pre => l => post =>
  let pre = Cons(pre, Nil)
  let post = Cons(post, Nil)
  append(pre, append(l, post))

let is-empty = xs =>
  if xs is Cons(x, xs)
    False
  else
    True

let is-heading = l =>
  if l is Cons(x, l')
    if l' is Cons(y, l'')
      if x is "#"
        if y is " "
          Heading(l'')
        else
          Nil
      else
        Nil
    else
      Nil
  else
    Nil

let is-code-block = l =>
  if l is Cons(a, l')
    if l' is Cons(b, l'')
      if l'' is Cons(c, l''')
        if a is "`"
          if b is "`"
            if c is "`"
              if l''' is Nil
                True
              else
                False
            else
              False
          else
            False
        else
          False
      else
        False
    else
      False
  else
    False

let inline-to-html = l =>
  loop inline-to-html = l => style => acc =>
    if l is Cons(c, l)
      if c is "_"
        if style is Em
          inline-to-html(l, None, Cons("</em>", acc))
        else
          inline-to-html(l, Em, Cons("<em>", acc))
      else
        inline-to-html(l, style, Cons(c, acc))
    else
      reverse(acc)
  inline-to-html(l, None, Nil)

let line-to-html = l =>
  if is-empty(l) is True
    Nil
  else if is-heading(l) is Heading(l)
    wrap("<h1>", l, "</h1>\n")
  else
    wrap("<p>", inline-to-html(l), "</p>\n")

let md-to-html = ls =>
  loop md-to-html = ls => style => acc =>
    if ls is Cons(l, ls)
      if style is Code
        if is-code-block(l) is True
          md-to-html(ls, None, Cons(Cons("\n</code></pre>\n", Nil), acc))
        else
          md-to-html(ls, style, Cons(Cons("\n", l), acc))
      else if is-code-block(l) is True
        md-to-html(ls, Code, Cons(Cons("<pre><code>", Nil), acc))
      else
        md-to-html(ls, style, Cons(line-to-html(l), acc))
    else
      reverse(acc)
  md-to-html(ls, None, Nil)

loop flatten = xs =>
  if xs is Cons(x, xs)
    append(x, flatten(xs))
  else
    xs

let html5 = title => body =>
  let pre =
    wrap(
      "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\" />\n<title>",
      title,
      "</title>\n<link rel=\"stylesheet\" href=\"styles/style.css\" />\n</head>\n"
    )
  let body = wrap("<body>\n", flatten(body), "</body>\n")
  append(pre, append(body, Cons("</html>", Nil)))

let lines = read-lines()

loop title = ls =>
  if ls is Cons(l, ls)
    if is-heading(l) is Heading(l)
      l
    else
      title(ls)
  else
    Cons((), Nil)

let title = title(lines)

let body = md-to-html(lines)

let html = html5(title, body)

write-strs!(html)
