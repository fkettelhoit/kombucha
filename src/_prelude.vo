:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:apply = ([:f, :xs] => {
    fold([:f, :x] => { f(x) }, f, reverse(xs))
})
:map = ([:f, :xs] => {
    fold([:xs, :x] => { xs(f(x)) }, [], reverse(xs))
})
:flatten = (:xs => {
    reverse(fold([:acc, :x] => {
        fold([:acc, :x] => { acc(x) }, acc, x)
    }, [], xs))
})
:zip = (:zip ~> { [:acc, :xs, :ys] => {
    __unpack(xs, [:xs, :x] => {
        __unpack(ys, [:ys, :y] => { zip(acc([x, y]), xs, ys) }, {})
    }, {
        __unpack(ys, [:ys, :y] => {}, { acc })
    })
}})([])
:destructure = (:destructure ~> { [:acc, :compound] => {
    __unpack(compound, [:xs, :x] => {
        destructure(acc(x), xs)
    }, {
        [compound, reverse(acc)]
    })
} })([])
:-> = ([:pattern, :body, :value] => {
    :== = (:== ~> { [:a, :b] => {
        __unpack(a, [:xs, :x] => {
            __unpack(b, [:ys, :y] => {
                __compare(x == y, True, { xs == ys }, { False })
            }, {
                False
            })
        }, {
            __compare(a, b, { True }, { False })
        })
    }})
    :second = (:xs => {
        __unpack(xs, [:_, :x] => { x }, { xs })
    })
    :first = (:xs => {
        __unpack(xs, [:xs, :_] => { second(xs) }, { xs })
    })
    :join = fold([:acc, :pair] => {
        :xvar = first(pair)
        :xval = second(pair)
        fold([:_, :pair] => {
            :yvar = first(pair)
            :yval = second(pair)
            __compare(xvar, yvar, {
                __compare(xval == yval, False, {
                    no-match!([[xvar, xval], [yvar, yval]])
                }, {})
            }, {})
        }, [], acc)
        acc(pair)
    }, [])
    :unify = (:unify ~> { [:pattern, :value] => {
        __unpack(pattern, [:type, :pattern] => {
            __compare(type, Binding, {
                [[pattern, value]]
            }, {
                __compare(type, List, {
                    :zipped = zip(pattern, value)
                    __compare(zipped, [], {
                        no-match!([type(pattern), value])
                    }, {
                        reverse(join(flatten(reverse(map(apply(unify), zipped)))))
                    })
                }, {
                    __unpack(type, [:type, :f] => {
                        __compare(type, Compound, {
                            :v = destructure(value)
                            :vf = first(v)
                            :vargs = second(v)
                            :zipped = zip(pattern, vargs)
                            __compare(zipped, [], {
                                no-match!([type(f, pattern), value])
                            }, {
                                reverse(join(flatten(reverse(map(apply(unify), zipped([f, vf]))))))
                            })
                        }, {
                            invalid!(type(f, pattern))
                        })
                    }, {
                        __compare(pattern == value, True, {}, {
                            no-match!([pattern, value])
                        })
                    })
                })
            })
        }, {
            invalid!(pattern)
        })
    }})
    __handle( {
        :args = map(second, unify(pattern, value))
        __compare(args, [], {
            body()
        }, {
            apply(body, args)
        })
    }, no-match!, [:_, :arg] => {
        no-match!(arg)
    })
})
:match = ([:value, :args] => {
    ([["with", :clauses]] -> {
        :result = fold([:result, :clause] => {
            __compare(result, [], {
                __handle({
                    Match(clause(value))
                }, no-match!, [:r, :arg] => {})
            }, {
                result
            })
        }, [], reverse(clauses))
        __unpack(result, [:_, :result] => {
            result
        }, {
            no-match!(value)
        })
    })(args)
})
:zip = ([:xs, :ys] => {
    reverse(zip(xs, ys))
})
:|> = ([:x, :f] => {
    f(x)
})
:deep-flatten = (:deep-flatten ~> { [:acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        deep-flatten(deep-flatten(acc, x), xs)
    }, {
        __compare(xs, [], {
            acc
        }, {
            acc(xs)
        })
    })
}})
:deep-flatten = (:xs => { xs |> deep-flatten([]) |> reverse })
:= = ([:binding, :value, :block] => {
  __unpack(binding, [:type, :arg] => {
    __unpack(type, [:type, :f] => {
      block([] ~> value)
    }, {
      __unpack(value, [:type, :arg] => {
        __compare(type, Value, {
          block(arg)
        }, {
          todo!()
        })
      }, {
        todo!()
      })
    })
  }, {
    must-be-called-as-macro!("="([binding, value, block]))
  })
})