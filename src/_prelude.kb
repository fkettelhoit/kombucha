:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:apply = ([:f, :xs] => {
    fold([:f, :x] => { f(x) }, f, reverse(xs))
})
:map = ([:f, :xs] => {
    fold([:xs, :x] => { xs(f(x)) }, [], reverse(xs))
})
:flatten = (:xs => {
    reverse(fold([:acc, :x] => {
        fold([:acc, :x] => { acc(x) }, acc, x)
    }, [], xs))
})
:zip = (:zip ~> { [:acc, :xs, :ys] => {
    __unpack(xs, [:xs, :x] => {
        __unpack(ys, [:ys, :y] => { zip(acc([x, y]), xs, ys) }, { [] })
    }, {
        __unpack(ys, [:ys, :y] => { [] }, { acc })
    })
}})([])
:destructure = (:destructure ~> { [:acc, :compound] => {
    __unpack(compound, [:xs, :x] => {
        destructure(acc(x), xs)
    }, {
        [compound, reverse(acc)]
    })
} })([])
#-> = ([:pattern, :body, :value] => {
    :== = (:== ~> { [:a, :b] => {
        __unpack(a, [:xs, :x] => {
            __unpack(b, [:ys, :y] => {
                __compare(x == y, True, { xs == ys }, { False })
            }, {
                False
            })
        }, {
            __compare(a, b, { True }, { False })
        })
    }})
    :second = (:xs => {
        __unpack(xs, [:_, :x] => { x }, { xs })
    })
    :first = (:xs => {
        __unpack(xs, [:xs, :_] => { second(xs) }, { xs })
    })
    :join = fold([:acc, :pairs] => {
        __compare(acc, NoMatch, {
            NoMatch
        }, {
            __compare(pairs, NoMatch, {
                NoMatch
            }, {
                fold([:acc, :pair] => {
                    :xvar = first(pair)
                    :xval = second(pair)
                    :acc = fold([:acc, :pair] => {
                        __compare(acc, NoMatch, {
                            NoMatch
                        }, {
                            :yvar = first(pair)
                            :yval = second(pair)
                            __compare(xvar, yvar, {
                                __compare(xval == yval, True, {
                                    acc(pair)
                                }, {
                                    NoMatch
                                })
                            }, {
                                acc(pair)
                            })
                        })
                    }, [], acc)
                    __compare(acc, NoMatch, {
                        NoMatch
                    }, {
                        reverse(acc(pair))
                    })
                }, acc, pairs)
            })
        })
    }, [])
    :unify = (:unify ~> { [:pattern, :value] => {
        __unpack(pattern, [:type, :pattern] => {
            __compare(type, Binding, {
                [[pattern, value]]
            }, {
                __unpack(type, [:type, :f] => {
                    __compare(type, Compound, {
                        :v = destructure(value)
                        :vf = first(v)
                        :vargs = second(v)
                        :zipped = zip(pattern, vargs)
                        __compare(zipped, [], {
                            NoMatch
                        }, {
                            join(reverse(map(apply(unify), zipped([f, vf]))))
                        })
                    }, {
                        invalid!(type(f, pattern))
                    })
                }, {
                    __compare(pattern == value, True, {
                        []
                    }, {
                        NoMatch
                    })
                })
            })
        }, {
            invalid!(pattern)
        })
    }})
    :unified = unify(pattern, value)
    __compare(unified, NoMatch, {
        NoMatch
    }, {
        :args = map(second, unified)
        __compare(args, [], {
            Match(body())
        }, {
            Match(apply(body, args))
        })
    })
})
:match = ([:value, :clauses] => {
    :result = fold([:result, :clause] => {
        __compare(result, NoMatch, {
            clause(value)
        }, {
            result
        })
    }, NoMatch, reverse(clauses))
    __unpack(result, [:_, :result] => {
        result
    }, {
        no-match!(value)
    })
})
:zip = ([:xs, :ys] => {
    reverse(zip(xs, ys))
})
:|> = ([:x, :f] => {
    f(x)
})
:deep-flatten = (:deep-flatten ~> { [:acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        deep-flatten(deep-flatten(acc, x), xs)
    }, {
        __compare(xs, [], {
            acc
        }, {
            acc(xs)
        })
    })
}})
:deep-flatten = (:xs => {
    xs |> deep-flatten([]) |> reverse
})
:first = (:xs => {
    __unpack(xs, [:xs, :x] => { x }, { [] })
})
:rest = (:xs => {
    __unpack(xs, [:xs, :x] => { xs }, { [] })
})
:second = (:xs => {
    first(rest(xs))
})
:third = (:xs => {
    first(rest(rest(xs)))
})
#= = ([:binding, :value, :block] => {
  __unpack(binding, [:type, :arg] => {
    __unpack(type, [:type, :f] => {
      block([] ~> value)
    }, {
      __unpack(value, [:type, :arg] => {
        __compare(type, Value, {
          block(arg)
        }, {
          todo!()
        })
      }, {
        todo!()
      })
    })
  }, {
    must-be-called-as-macro!("="([binding, value, block]))
  })
})
