:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
fold([:acc, :x] => { acc(x) }, [], [A, B, C])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(fold
  (=>
    [ :acc
      :x ]
    { (acc
        x) })
  [  ]
  [ A
    B
    C ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "f" )
                "acc" )
              "xs" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( 0
          ( ( =>
                =>
                  0
              ( ( []
                  "acc" )
                "x" ) )
            =>
              =>
                ( 1
                  0 ) ) )
        [] )
      ( ( ( []
            A )
          B )
        C ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""xs"")
00065: AppFnToArg
00066: PushString(""x"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""f"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""xs"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092:   Return
00093: LoadFn { code: 00091, fvars: 00000 }
00094:   Return
00095: LoadVar(00001)
00096: LoadVar(00000)
00097: AppFnToArg
00098:   Return
00099: LoadFn { code: 00095, fvars: 00001 }
00100:   Return
00101: LoadVar(00000)
00102: LoadFn { code: 00093, fvars: 00000 }
00103: PushString("")
00104: PushString(""acc"")
00105: AppFnToArg
00106: PushString(""x"")
00107: AppFnToArg
00108: AppFnToArg
00109: LoadFn { code: 00099, fvars: 00000 }
00110: AppFnToArg
00111: AppFnToArg
00112: PushString("")
00113: AppFnToArg
00114: PushString("")
00115: PushString("A")
00116: AppFnToArg
00117: PushString("B")
00118: AppFnToArg
00119: PushString("C")
00120: AppFnToArg
00121: AppFnToArg
00122:   Return
00123: LoadFn { code: 00016, fvars: 00000 }
00124: PushString(""fold"")
00125: AppFnToArg
00126: LoadFn { code: 00022, fvars: 00000 }
00127: PushString(""fold"")
00128: AppFnToArg
00129: LoadFn { code: 00079, fvars: 00000 }
00130: AppFnToArg
00131: AppFnToArg
00132: LoadFn { code: 00101, fvars: 00000 }
00133: AppFnToArg
00134:   Return

[C, B, A]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
reverse([A, B, C])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :reverse
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(reverse
  [ A
    B
    C ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "f" )
                "acc" )
              "xs" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "reverse" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( 0
          ( ( ( []
                A )
              B )
            C ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""xs"")
00065: AppFnToArg
00066: PushString(""x"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""f"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""xs"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00001)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""xs"")
00117: AppFnToArg
00118: PushString(""x"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: PushString("")
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadVar(00000)
00130: PushString("")
00131: PushString("A")
00132: AppFnToArg
00133: PushString("B")
00134: AppFnToArg
00135: PushString("C")
00136: AppFnToArg
00137: AppFnToArg
00138:   Return
00139: LoadFn { code: 00097, fvars: 00000 }
00140: PushString(""reverse"")
00141: AppFnToArg
00142: LoadFn { code: 00101, fvars: 00000 }
00143: PushString(""xs"")
00144: AppFnToArg
00145: LoadFn { code: 00113, fvars: 00001 }
00146: AppFnToArg
00147: AppFnToArg
00148: LoadFn { code: 00129, fvars: 00000 }
00149: AppFnToArg
00150:   Return
00151: LoadFn { code: 00016, fvars: 00000 }
00152: PushString(""fold"")
00153: AppFnToArg
00154: LoadFn { code: 00022, fvars: 00000 }
00155: PushString(""fold"")
00156: AppFnToArg
00157: LoadFn { code: 00079, fvars: 00000 }
00158: AppFnToArg
00159: AppFnToArg
00160: LoadFn { code: 00139, fvars: 00000 }
00161: AppFnToArg
00162:   Return

[C, B, A]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:apply = ([:f, :xs] => {
    fold([:f, :x] => { f(x) }, f, reverse(xs))
})
apply([:x, :y, :z] => { Triple(x, y, z) }, [A, B, C])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :reverse
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :apply
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :f
            :x ]
          { (f
              x) })
        f
        (reverse
          xs)) }))
(apply
  (=>
    [ :x
      :y
      :z ]
    { (Triple
        x
        y
        z) })
  [ A
    B
    C ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "f" )
                "acc" )
              "xs" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "reverse" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "apply" )
            ( ( =>
                  =>
                    0
                ( ( []
                    "f" )
                  "xs" ) )
              =>
                =>
                  ( ( ( 3
                        ( ( =>
                              =>
                                0
                            ( ( []
                                "f" )
                              "x" ) )
                          =>
                            =>
                              ( 1
                                0 ) ) )
                      1 )
                    ( 2
                      0 ) ) ) )
          =>
            ( ( 0
                ( ( =>
                      =>
                        0
                    ( ( ( []
                          "x" )
                        "y" )
                      "z" ) )
                  =>
                    =>
                      =>
                        ( ( ( Triple
                              2 )
                            1 )
                          0 ) ) )
              ( ( ( []
                    A )
                  B )
                C ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""xs"")
00065: AppFnToArg
00066: PushString(""x"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""f"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""xs"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00001)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""xs"")
00117: AppFnToArg
00118: PushString(""x"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: PushString("")
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadVar(00000)
00130: LoadVar(00001)
00131: AppFnToArg
00132:   Return
00133: LoadFn { code: 00129, fvars: 00001 }
00134:   Return
00135: LoadFn { code: 00133, fvars: 00000 }
00136:   Return
00137: LoadVar(00000)
00138:   Return
00139: LoadFn { code: 00137, fvars: 00000 }
00140:   Return
00141: LoadVar(00000)
00142:   Return
00143: LoadFn { code: 00141, fvars: 00000 }
00144:   Return
00145: LoadVar(00001)
00146: LoadVar(00000)
00147: AppFnToArg
00148:   Return
00149: LoadFn { code: 00145, fvars: 00001 }
00150:   Return
00151: LoadVar(00003)
00152: LoadFn { code: 00143, fvars: 00000 }
00153: PushString("")
00154: PushString(""f"")
00155: AppFnToArg
00156: PushString(""x"")
00157: AppFnToArg
00158: AppFnToArg
00159: LoadFn { code: 00149, fvars: 00000 }
00160: AppFnToArg
00161: AppFnToArg
00162: LoadVar(00001)
00163: AppFnToArg
00164: LoadVar(00002)
00165: LoadVar(00000)
00166: AppFnToArg
00167: AppFnToArg
00168:   Return
00169: LoadFn { code: 00151, fvars: 00003 }
00170:   Return
00171: LoadVar(00000)
00172:   Return
00173: LoadFn { code: 00171, fvars: 00000 }
00174:   Return
00175: PushString("Triple")
00176: LoadVar(00002)
00177: AppFnToArg
00178: LoadVar(00001)
00179: AppFnToArg
00180: LoadVar(00000)
00181: AppFnToArg
00182:   Return
00183: LoadFn { code: 00175, fvars: 00002 }
00184:   Return
00185: LoadFn { code: 00183, fvars: 00001 }
00186:   Return
00187: LoadVar(00000)
00188: LoadFn { code: 00173, fvars: 00000 }
00189: PushString("")
00190: PushString(""x"")
00191: AppFnToArg
00192: PushString(""y"")
00193: AppFnToArg
00194: PushString(""z"")
00195: AppFnToArg
00196: AppFnToArg
00197: LoadFn { code: 00185, fvars: 00000 }
00198: AppFnToArg
00199: AppFnToArg
00200: PushString("")
00201: PushString("A")
00202: AppFnToArg
00203: PushString("B")
00204: AppFnToArg
00205: PushString("C")
00206: AppFnToArg
00207: AppFnToArg
00208:   Return
00209: LoadFn { code: 00135, fvars: 00000 }
00210: PushString(""apply"")
00211: AppFnToArg
00212: LoadFn { code: 00139, fvars: 00000 }
00213: PushString("")
00214: PushString(""f"")
00215: AppFnToArg
00216: PushString(""xs"")
00217: AppFnToArg
00218: AppFnToArg
00219: LoadFn { code: 00169, fvars: 00002 }
00220: AppFnToArg
00221: AppFnToArg
00222: LoadFn { code: 00187, fvars: 00000 }
00223: AppFnToArg
00224:   Return
00225: LoadFn { code: 00097, fvars: 00000 }
00226: PushString(""reverse"")
00227: AppFnToArg
00228: LoadFn { code: 00101, fvars: 00000 }
00229: PushString(""xs"")
00230: AppFnToArg
00231: LoadFn { code: 00113, fvars: 00001 }
00232: AppFnToArg
00233: AppFnToArg
00234: LoadFn { code: 00209, fvars: 00001 }
00235: AppFnToArg
00236:   Return
00237: LoadFn { code: 00016, fvars: 00000 }
00238: PushString(""fold"")
00239: AppFnToArg
00240: LoadFn { code: 00022, fvars: 00000 }
00241: PushString(""fold"")
00242: AppFnToArg
00243: LoadFn { code: 00079, fvars: 00000 }
00244: AppFnToArg
00245: AppFnToArg
00246: LoadFn { code: 00225, fvars: 00000 }
00247: AppFnToArg
00248:   Return

Triple(A, B, C)

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:map = ([:f, :xs] => {
    fold([:xs, :x] => { xs(f(x)) }, [], reverse(xs))
})
map(:x => { Foo(x) }, [A, B, C])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :reverse
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :map
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              (f
                x)) })
        [  ]
        (reverse
          xs)) }))
(map
  (=>
    :x
    { (Foo
        x) })
  [ A
    B
    C ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "f" )
                "acc" )
              "xs" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "reverse" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "map" )
            ( ( =>
                  =>
                    0
                ( ( []
                    "f" )
                  "xs" ) )
              =>
                =>
                  ( ( ( 3
                        ( ( =>
                              =>
                                0
                            ( ( []
                                "xs" )
                              "x" ) )
                          =>
                            =>
                              ( 1
                                ( 3
                                  0 ) ) ) )
                      [] )
                    ( 2
                      0 ) ) ) )
          =>
            ( ( 0
                ( ( =>
                      =>
                        0
                    "x" )
                  =>
                    ( Foo
                      0 ) ) )
              ( ( ( []
                    A )
                  B )
                C ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""xs"")
00065: AppFnToArg
00066: PushString(""x"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""f"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""xs"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00001)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""xs"")
00117: AppFnToArg
00118: PushString(""x"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: PushString("")
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadVar(00000)
00130: LoadVar(00001)
00131: AppFnToArg
00132:   Return
00133: LoadFn { code: 00129, fvars: 00001 }
00134:   Return
00135: LoadFn { code: 00133, fvars: 00000 }
00136:   Return
00137: LoadVar(00000)
00138:   Return
00139: LoadFn { code: 00137, fvars: 00000 }
00140:   Return
00141: LoadVar(00000)
00142:   Return
00143: LoadFn { code: 00141, fvars: 00000 }
00144:   Return
00145: LoadVar(00001)
00146: LoadVar(00003)
00147: LoadVar(00000)
00148: AppFnToArg
00149: AppFnToArg
00150:   Return
00151: LoadFn { code: 00145, fvars: 00003 }
00152:   Return
00153: LoadVar(00003)
00154: LoadFn { code: 00143, fvars: 00000 }
00155: PushString("")
00156: PushString(""xs"")
00157: AppFnToArg
00158: PushString(""x"")
00159: AppFnToArg
00160: AppFnToArg
00161: LoadFn { code: 00151, fvars: 00002 }
00162: AppFnToArg
00163: AppFnToArg
00164: PushString("")
00165: AppFnToArg
00166: LoadVar(00002)
00167: LoadVar(00000)
00168: AppFnToArg
00169: AppFnToArg
00170:   Return
00171: LoadFn { code: 00153, fvars: 00003 }
00172:   Return
00173: LoadVar(00000)
00174:   Return
00175: LoadFn { code: 00173, fvars: 00000 }
00176:   Return
00177: PushString("Foo")
00178: LoadVar(00000)
00179: AppFnToArg
00180:   Return
00181: LoadVar(00000)
00182: LoadFn { code: 00175, fvars: 00000 }
00183: PushString(""x"")
00184: AppFnToArg
00185: LoadFn { code: 00177, fvars: 00000 }
00186: AppFnToArg
00187: AppFnToArg
00188: PushString("")
00189: PushString("A")
00190: AppFnToArg
00191: PushString("B")
00192: AppFnToArg
00193: PushString("C")
00194: AppFnToArg
00195: AppFnToArg
00196:   Return
00197: LoadFn { code: 00135, fvars: 00000 }
00198: PushString(""map"")
00199: AppFnToArg
00200: LoadFn { code: 00139, fvars: 00000 }
00201: PushString("")
00202: PushString(""f"")
00203: AppFnToArg
00204: PushString(""xs"")
00205: AppFnToArg
00206: AppFnToArg
00207: LoadFn { code: 00171, fvars: 00002 }
00208: AppFnToArg
00209: AppFnToArg
00210: LoadFn { code: 00181, fvars: 00000 }
00211: AppFnToArg
00212:   Return
00213: LoadFn { code: 00097, fvars: 00000 }
00214: PushString(""reverse"")
00215: AppFnToArg
00216: LoadFn { code: 00101, fvars: 00000 }
00217: PushString(""xs"")
00218: AppFnToArg
00219: LoadFn { code: 00113, fvars: 00001 }
00220: AppFnToArg
00221: AppFnToArg
00222: LoadFn { code: 00197, fvars: 00001 }
00223: AppFnToArg
00224:   Return
00225: LoadFn { code: 00016, fvars: 00000 }
00226: PushString(""fold"")
00227: AppFnToArg
00228: LoadFn { code: 00022, fvars: 00000 }
00229: PushString(""fold"")
00230: AppFnToArg
00231: LoadFn { code: 00079, fvars: 00000 }
00232: AppFnToArg
00233: AppFnToArg
00234: LoadFn { code: 00213, fvars: 00000 }
00235: AppFnToArg
00236:   Return

[Foo(A), Foo(B), Foo(C)]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:zip = (:zip ~> { [:acc, :xs, :ys] => {
    __unpack(xs, [:xs, :x] => {
        __unpack(ys, [:ys, :y] => { zip(acc([x, y]), xs, ys) }, {})
    }, {
        __unpack(ys, [:ys, :y] => {}, { acc })
    })
}})
:zip = ([:xs, :ys] => { reverse(zip([], xs, ys)) })
[
    zip([A, B, C], [X, Y, Z])
    zip([A, B, C], [X, Y])
    zip([A, B], [X, Y, Z])
    zip(Foo, [X, Y, Z])
    zip(Foo, Bar)
]

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :reverse
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :zip
  (~>
    :zip
    { (=>
        [ :acc
          :xs
          :ys ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (__unpack
                  ys
                  (=>
                    [ :ys
                      :y ]
                    { (zip
                        (acc
                          [ x
                            y ])
                        xs
                        ys) })
                  {  }) })
            { (__unpack
                ys
                (=>
                  [ :ys
                    :y ]
                  {  })
                { acc }) }) }) }))
(=
  :zip
  (=>
    [ :xs
      :ys ]
    { (reverse
        (zip
          [  ]
          xs
          ys)) }))
[ (zip
    [ A
      B
      C ]
    [ X
      Y
      Z ])
  (zip
    [ A
      B
      C ]
    [ X
      Y ])
  (zip
    [ A
      B ]
    [ X
      Y
      Z ])
  (zip
    Foo
    [ X
      Y
      Z ])
  (zip
    Foo
    Bar) ]

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "f" )
                "acc" )
              "xs" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "reverse" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "zip" )
            ( ( =>
                  =>
                    ~>
                      0
                "zip" )
              =>
                ( ( =>
                      =>
                        0
                    ( ( ( []
                          "acc" )
                        "xs" )
                      "ys" ) )
                  =>
                    =>
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( pop
                                      2
                                      1
                                      0 )
                              1 )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "xs" )
                                  "x" ) )
                              =>
                                =>
                                  ( ( ( =>
                                          =>
                                            =>
                                              ( pop
                                                2
                                                1
                                                0 )
                                        2 )
                                      ( ( =>
                                            =>
                                              0
                                          ( ( []
                                              "ys" )
                                            "y" ) )
                                        =>
                                          =>
                                            ( ( ( 7
                                                  ( 6
                                                    ( ( []
                                                        2 )
                                                      0 ) ) )
                                                3 )
                                              1 ) ) )
                                    =>
                                      [] ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( pop
                                          2
                                          1
                                          0 )
                                  1 )
                                ( ( =>
                                      =>
                                        0
                                    ( ( []
                                        "ys" )
                                      "y" ) )
                                  =>
                                    =>
                                      [] ) )
                              =>
                                4 ) ) ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "zip" )
                ( ( =>
                      =>
                        0
                    ( ( []
                        "xs" )
                      "ys" ) )
                  =>
                    =>
                      ( 3
                        ( ( ( 2
                              [] )
                            1 )
                          0 ) ) ) )
              =>
                ( ( ( ( ( []
                          ( ( 0
                              ( ( ( []
                                    A )
                                  B )
                                C ) )
                            ( ( ( []
                                  X )
                                Y )
                              Z ) ) )
                        ( ( 0
                            ( ( ( []
                                  A )
                                B )
                              C ) )
                          ( ( []
                              X )
                            Y ) ) )
                      ( ( 0
                          ( ( []
                              A )
                            B ) )
                        ( ( ( []
                              X )
                            Y )
                          Z ) ) )
                    ( ( 0
                        Foo )
                      ( ( ( []
                            X )
                          Y )
                        Z ) ) )
                  ( ( 0
                      Foo )
                    Bar ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""xs"")
00065: AppFnToArg
00066: PushString(""x"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""f"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""xs"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00001)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""xs"")
00117: AppFnToArg
00118: PushString(""x"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: PushString("")
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadVar(00000)
00130: LoadVar(00001)
00131: AppFnToArg
00132:   Return
00133: LoadFn { code: 00129, fvars: 00001 }
00134:   Return
00135: LoadFn { code: 00133, fvars: 00000 }
00136:   Return
00137: LoadVar(00000)
00138: LoadFn { code: 00000, fvars: 00000 }
00139: AppArgToFn
00140:   Return
00141: LoadFn { code: 00137, fvars: 00000 }
00142:   Return
00143: LoadVar(00000)
00144:   Return
00145: LoadFn { code: 00143, fvars: 00000 }
00146:   Return
00147: LoadVar(00002)
00148: LoadVar(00001)
00149: LoadVar(00000)
00150: Unpack
00151: AppArgToFn
00152: AppArgToFn
00153:   Return
00154: LoadFn { code: 00147, fvars: 00002 }
00155:   Return
00156: LoadFn { code: 00154, fvars: 00001 }
00157:   Return
00158: LoadVar(00000)
00159:   Return
00160: LoadFn { code: 00158, fvars: 00000 }
00161:   Return
00162: LoadVar(00002)
00163: LoadVar(00001)
00164: LoadVar(00000)
00165: Unpack
00166: AppArgToFn
00167: AppArgToFn
00168:   Return
00169: LoadFn { code: 00162, fvars: 00002 }
00170:   Return
00171: LoadFn { code: 00169, fvars: 00001 }
00172:   Return
00173: LoadVar(00000)
00174:   Return
00175: LoadFn { code: 00173, fvars: 00000 }
00176:   Return
00177: LoadVar(00007)
00178: LoadVar(00006)
00179: PushString("")
00180: LoadVar(00002)
00181: AppFnToArg
00182: LoadVar(00000)
00183: AppFnToArg
00184: AppFnToArg
00185: AppFnToArg
00186: LoadVar(00003)
00187: AppFnToArg
00188: LoadVar(00001)
00189: AppFnToArg
00190:   Return
00191: LoadFn { code: 00177, fvars: 00007 }
00192:   Return
00193: PushString("")
00194:   Return
00195: LoadFn { code: 00171, fvars: 00000 }
00196: LoadVar(00002)
00197: AppFnToArg
00198: LoadFn { code: 00175, fvars: 00000 }
00199: PushString("")
00200: PushString(""ys"")
00201: AppFnToArg
00202: PushString(""y"")
00203: AppFnToArg
00204: AppFnToArg
00205: LoadFn { code: 00191, fvars: 00006 }
00206: AppFnToArg
00207: AppFnToArg
00208: LoadFn { code: 00193, fvars: 00000 }
00209: AppFnToArg
00210:   Return
00211: LoadFn { code: 00195, fvars: 00005 }
00212:   Return
00213: LoadVar(00002)
00214: LoadVar(00001)
00215: LoadVar(00000)
00216: Unpack
00217: AppArgToFn
00218: AppArgToFn
00219:   Return
00220: LoadFn { code: 00213, fvars: 00002 }
00221:   Return
00222: LoadFn { code: 00220, fvars: 00001 }
00223:   Return
00224: LoadVar(00000)
00225:   Return
00226: LoadFn { code: 00224, fvars: 00000 }
00227:   Return
00228: PushString("")
00229:   Return
00230: LoadFn { code: 00228, fvars: 00000 }
00231:   Return
00232: LoadVar(00004)
00233:   Return
00234: LoadFn { code: 00222, fvars: 00000 }
00235: LoadVar(00001)
00236: AppFnToArg
00237: LoadFn { code: 00226, fvars: 00000 }
00238: PushString("")
00239: PushString(""ys"")
00240: AppFnToArg
00241: PushString(""y"")
00242: AppFnToArg
00243: AppFnToArg
00244: LoadFn { code: 00230, fvars: 00000 }
00245: AppFnToArg
00246: AppFnToArg
00247: LoadFn { code: 00232, fvars: 00004 }
00248: AppFnToArg
00249:   Return
00250: LoadFn { code: 00156, fvars: 00000 }
00251: LoadVar(00001)
00252: AppFnToArg
00253: LoadFn { code: 00160, fvars: 00000 }
00254: PushString("")
00255: PushString(""xs"")
00256: AppFnToArg
00257: PushString(""x"")
00258: AppFnToArg
00259: AppFnToArg
00260: LoadFn { code: 00211, fvars: 00004 }
00261: AppFnToArg
00262: AppFnToArg
00263: LoadFn { code: 00234, fvars: 00003 }
00264: AppFnToArg
00265:   Return
00266: LoadFn { code: 00250, fvars: 00003 }
00267:   Return
00268: LoadFn { code: 00266, fvars: 00002 }
00269:   Return
00270: LoadFn { code: 00145, fvars: 00000 }
00271: PushString("")
00272: PushString(""acc"")
00273: AppFnToArg
00274: PushString(""xs"")
00275: AppFnToArg
00276: PushString(""ys"")
00277: AppFnToArg
00278: AppFnToArg
00279: LoadFn { code: 00268, fvars: 00001 }
00280: AppFnToArg
00281:   Return
00282: LoadVar(00000)
00283: LoadVar(00001)
00284: AppFnToArg
00285:   Return
00286: LoadFn { code: 00282, fvars: 00001 }
00287:   Return
00288: LoadFn { code: 00286, fvars: 00000 }
00289:   Return
00290: LoadVar(00000)
00291:   Return
00292: LoadFn { code: 00290, fvars: 00000 }
00293:   Return
00294: LoadVar(00003)
00295: LoadVar(00002)
00296: PushString("")
00297: AppFnToArg
00298: LoadVar(00001)
00299: AppFnToArg
00300: LoadVar(00000)
00301: AppFnToArg
00302: AppFnToArg
00303:   Return
00304: LoadFn { code: 00294, fvars: 00003 }
00305:   Return
00306: PushString("")
00307: LoadVar(00000)
00308: PushString("")
00309: PushString("A")
00310: AppFnToArg
00311: PushString("B")
00312: AppFnToArg
00313: PushString("C")
00314: AppFnToArg
00315: AppFnToArg
00316: PushString("")
00317: PushString("X")
00318: AppFnToArg
00319: PushString("Y")
00320: AppFnToArg
00321: PushString("Z")
00322: AppFnToArg
00323: AppFnToArg
00324: AppFnToArg
00325: LoadVar(00000)
00326: PushString("")
00327: PushString("A")
00328: AppFnToArg
00329: PushString("B")
00330: AppFnToArg
00331: PushString("C")
00332: AppFnToArg
00333: AppFnToArg
00334: PushString("")
00335: PushString("X")
00336: AppFnToArg
00337: PushString("Y")
00338: AppFnToArg
00339: AppFnToArg
00340: AppFnToArg
00341: LoadVar(00000)
00342: PushString("")
00343: PushString("A")
00344: AppFnToArg
00345: PushString("B")
00346: AppFnToArg
00347: AppFnToArg
00348: PushString("")
00349: PushString("X")
00350: AppFnToArg
00351: PushString("Y")
00352: AppFnToArg
00353: PushString("Z")
00354: AppFnToArg
00355: AppFnToArg
00356: AppFnToArg
00357: LoadVar(00000)
00358: PushString("Foo")
00359: AppFnToArg
00360: PushString("")
00361: PushString("X")
00362: AppFnToArg
00363: PushString("Y")
00364: AppFnToArg
00365: PushString("Z")
00366: AppFnToArg
00367: AppFnToArg
00368: AppFnToArg
00369: LoadVar(00000)
00370: PushString("Foo")
00371: AppFnToArg
00372: PushString("Bar")
00373: AppFnToArg
00374: AppFnToArg
00375:   Return
00376: LoadFn { code: 00288, fvars: 00000 }
00377: PushString(""zip"")
00378: AppFnToArg
00379: LoadFn { code: 00292, fvars: 00000 }
00380: PushString("")
00381: PushString(""xs"")
00382: AppFnToArg
00383: PushString(""ys"")
00384: AppFnToArg
00385: AppFnToArg
00386: LoadFn { code: 00304, fvars: 00002 }
00387: AppFnToArg
00388: AppFnToArg
00389: LoadFn { code: 00306, fvars: 00000 }
00390: AppFnToArg
00391:   Return
00392: LoadFn { code: 00135, fvars: 00000 }
00393: PushString(""zip"")
00394: AppFnToArg
00395: LoadFn { code: 00141, fvars: 00000 }
00396: PushString(""zip"")
00397: AppFnToArg
00398: LoadFn { code: 00270, fvars: 00000 }
00399: AppFnToArg
00400: AppFnToArg
00401: LoadFn { code: 00376, fvars: 00001 }
00402: AppFnToArg
00403:   Return
00404: LoadFn { code: 00097, fvars: 00000 }
00405: PushString(""reverse"")
00406: AppFnToArg
00407: LoadFn { code: 00101, fvars: 00000 }
00408: PushString(""xs"")
00409: AppFnToArg
00410: LoadFn { code: 00113, fvars: 00001 }
00411: AppFnToArg
00412: AppFnToArg
00413: LoadFn { code: 00392, fvars: 00000 }
00414: AppFnToArg
00415:   Return
00416: LoadFn { code: 00016, fvars: 00000 }
00417: PushString(""fold"")
00418: AppFnToArg
00419: LoadFn { code: 00022, fvars: 00000 }
00420: PushString(""fold"")
00421: AppFnToArg
00422: LoadFn { code: 00079, fvars: 00000 }
00423: AppFnToArg
00424: AppFnToArg
00425: LoadFn { code: 00404, fvars: 00000 }
00426: AppFnToArg
00427:   Return

[[[A, X], [B, Y], [C, Z]], [], [], [], []]

---

:== = (:== ~> { [:a, :b] => {
    __unpack(a, [:xs, :x] => {
        __unpack(b, [:ys, :y] => {
            __compare(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        __compare(a, b, { True }, { False })
    })
}})
[
    Foo == Foo
    Foo == Bar
    Foo(Bar) == Foo(Bar)
    Foo(Bar) == Foo(Baz)
    :a == :a
    :a == :b
    :f(:a) == :f(:a)
    :f(:a) == :g(:a)
]

(=
  :==
  (~>
    :==
    { (=>
        [ :a
          :b ]
        { (__unpack
            a
            (=>
              [ :xs
                :x ]
              { (__unpack
                  b
                  (=>
                    [ :ys
                      :y ]
                    { (__compare
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (__compare
                a
                b
                { True }
                { False }) }) }) }))
[ (==
    Foo
    Foo)
  (==
    Foo
    Bar)
  (==
    (Foo
      Bar)
    (Foo
      Bar))
  (==
    (Foo
      Bar)
    (Foo
      Baz))
  (==
    :a
    :a)
  (==
    :a
    :b)
  (==
    (:f
      :a)
    (:f
      :a))
  (==
    (:f
      :a)
    (:g
      :a)) ]

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "==" )
    ( ( =>
          =>
            ~>
              0
        "==" )
      =>
        ( ( =>
              =>
                0
            ( ( []
                "a" )
              "b" ) )
          =>
            =>
              ( ( ( =>
                      =>
                        =>
                          ( pop
                            2
                            1
                            0 )
                    1 )
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( pop
                                      2
                                      1
                                      0 )
                              2 )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "ys" )
                                  "y" ) )
                              =>
                                =>
                                  ( ( ( ( =>
                                            =>
                                              =>
                                                =>
                                                  ( if
                                                    3
                                                    2
                                                    1
                                                    0 )
                                          ( ( 6
                                              2 )
                                            0 ) )
                                        True )
                                      =>
                                        ( ( 7
                                            4 )
                                          2 ) )
                                    =>
                                      False ) ) )
                          =>
                            False ) ) )
                =>
                  ( ( ( ( =>
                            =>
                              =>
                                =>
                                  ( if
                                    3
                                    2
                                    1
                                    0 )
                          2 )
                        1 )
                      =>
                        True )
                    =>
                      False ) ) ) ) )
  =>
    ( ( ( ( ( ( ( ( []
                    ( ( 0
                        Foo )
                      Foo ) )
                  ( ( 0
                      Foo )
                    Bar ) )
                ( ( 0
                    ( Foo
                      Bar ) )
                  ( Foo
                    Bar ) ) )
              ( ( 0
                  ( Foo
                    Bar ) )
                ( Foo
                  Baz ) ) )
            ( ( 0
                ( Binding
                  "a" ) )
              ( Binding
                "a" ) ) )
          ( ( 0
              ( Binding
                "a" ) )
            ( Binding
              "b" ) ) )
        ( ( 0
            ( ( Compound
                ( Binding
                  "f" ) )
              ( []
                ( Binding
                  "a" ) ) ) )
          ( ( Compound
              ( Binding
                "f" ) )
            ( []
              ( Binding
                "a" ) ) ) ) )
      ( ( 0
          ( ( Compound
              ( Binding
                "f" ) )
            ( []
              ( Binding
                "a" ) ) ) )
        ( ( Compound
            ( Binding
              "g" ) )
          ( []
            ( Binding
              "a" ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00002)
00044: LoadVar(00001)
00045: LoadVar(00000)
00046: Unpack
00047: AppArgToFn
00048: AppArgToFn
00049:   Return
00050: LoadFn { code: 00043, fvars: 00002 }
00051:   Return
00052: LoadFn { code: 00050, fvars: 00001 }
00053:   Return
00054: LoadVar(00000)
00055:   Return
00056: LoadFn { code: 00054, fvars: 00000 }
00057:   Return
00058: LoadVar(00003)
00059: LoadVar(00002)
00060: LoadVar(00001)
00061: LoadVar(00000)
00062: Cmp
00063: AppArgToFn
00064:   Return
00065: LoadFn { code: 00058, fvars: 00003 }
00066:   Return
00067: LoadFn { code: 00065, fvars: 00002 }
00068:   Return
00069: LoadFn { code: 00067, fvars: 00001 }
00070:   Return
00071: LoadVar(00007)
00072: LoadVar(00004)
00073: AppFnToArg
00074: LoadVar(00002)
00075: AppFnToArg
00076:   Return
00077: PushString("False")
00078:   Return
00079: LoadFn { code: 00069, fvars: 00000 }
00080: LoadVar(00006)
00081: LoadVar(00002)
00082: AppFnToArg
00083: LoadVar(00000)
00084: AppFnToArg
00085: AppFnToArg
00086: PushString("True")
00087: AppFnToArg
00088: LoadFn { code: 00071, fvars: 00007 }
00089: AppFnToArg
00090: LoadFn { code: 00077, fvars: 00000 }
00091: AppFnToArg
00092:   Return
00093: LoadFn { code: 00079, fvars: 00006 }
00094:   Return
00095: PushString("False")
00096:   Return
00097: LoadFn { code: 00052, fvars: 00000 }
00098: LoadVar(00002)
00099: AppFnToArg
00100: LoadFn { code: 00056, fvars: 00000 }
00101: PushString("")
00102: PushString(""ys"")
00103: AppFnToArg
00104: PushString(""y"")
00105: AppFnToArg
00106: AppFnToArg
00107: LoadFn { code: 00093, fvars: 00005 }
00108: AppFnToArg
00109: AppFnToArg
00110: LoadFn { code: 00095, fvars: 00000 }
00111: AppFnToArg
00112:   Return
00113: LoadFn { code: 00097, fvars: 00004 }
00114:   Return
00115: LoadVar(00003)
00116: LoadVar(00002)
00117: LoadVar(00001)
00118: LoadVar(00000)
00119: Cmp
00120: AppArgToFn
00121:   Return
00122: LoadFn { code: 00115, fvars: 00003 }
00123:   Return
00124: LoadFn { code: 00122, fvars: 00002 }
00125:   Return
00126: LoadFn { code: 00124, fvars: 00001 }
00127:   Return
00128: PushString("True")
00129:   Return
00130: PushString("False")
00131:   Return
00132: LoadFn { code: 00126, fvars: 00000 }
00133: LoadVar(00002)
00134: AppFnToArg
00135: LoadVar(00001)
00136: AppFnToArg
00137: LoadFn { code: 00128, fvars: 00000 }
00138: AppFnToArg
00139: LoadFn { code: 00130, fvars: 00000 }
00140: AppFnToArg
00141:   Return
00142: LoadFn { code: 00037, fvars: 00000 }
00143: LoadVar(00001)
00144: AppFnToArg
00145: LoadFn { code: 00041, fvars: 00000 }
00146: PushString("")
00147: PushString(""xs"")
00148: AppFnToArg
00149: PushString(""x"")
00150: AppFnToArg
00151: AppFnToArg
00152: LoadFn { code: 00113, fvars: 00003 }
00153: AppFnToArg
00154: AppFnToArg
00155: LoadFn { code: 00132, fvars: 00002 }
00156: AppFnToArg
00157:   Return
00158: LoadFn { code: 00142, fvars: 00002 }
00159:   Return
00160: LoadFn { code: 00026, fvars: 00000 }
00161: PushString("")
00162: PushString(""a"")
00163: AppFnToArg
00164: PushString(""b"")
00165: AppFnToArg
00166: AppFnToArg
00167: LoadFn { code: 00158, fvars: 00001 }
00168: AppFnToArg
00169:   Return
00170: PushString("")
00171: LoadVar(00000)
00172: PushString("Foo")
00173: AppFnToArg
00174: PushString("Foo")
00175: AppFnToArg
00176: AppFnToArg
00177: LoadVar(00000)
00178: PushString("Foo")
00179: AppFnToArg
00180: PushString("Bar")
00181: AppFnToArg
00182: AppFnToArg
00183: LoadVar(00000)
00184: PushString("Foo")
00185: PushString("Bar")
00186: AppFnToArg
00187: AppFnToArg
00188: PushString("Foo")
00189: PushString("Bar")
00190: AppFnToArg
00191: AppFnToArg
00192: AppFnToArg
00193: LoadVar(00000)
00194: PushString("Foo")
00195: PushString("Bar")
00196: AppFnToArg
00197: AppFnToArg
00198: PushString("Foo")
00199: PushString("Baz")
00200: AppFnToArg
00201: AppFnToArg
00202: AppFnToArg
00203: LoadVar(00000)
00204: PushString("Binding")
00205: PushString(""a"")
00206: AppFnToArg
00207: AppFnToArg
00208: PushString("Binding")
00209: PushString(""a"")
00210: AppFnToArg
00211: AppFnToArg
00212: AppFnToArg
00213: LoadVar(00000)
00214: PushString("Binding")
00215: PushString(""a"")
00216: AppFnToArg
00217: AppFnToArg
00218: PushString("Binding")
00219: PushString(""b"")
00220: AppFnToArg
00221: AppFnToArg
00222: AppFnToArg
00223: LoadVar(00000)
00224: PushString("Compound")
00225: PushString("Binding")
00226: PushString(""f"")
00227: AppFnToArg
00228: AppFnToArg
00229: PushString("")
00230: PushString("Binding")
00231: PushString(""a"")
00232: AppFnToArg
00233: AppFnToArg
00234: AppFnToArg
00235: AppFnToArg
00236: PushString("Compound")
00237: PushString("Binding")
00238: PushString(""f"")
00239: AppFnToArg
00240: AppFnToArg
00241: PushString("")
00242: PushString("Binding")
00243: PushString(""a"")
00244: AppFnToArg
00245: AppFnToArg
00246: AppFnToArg
00247: AppFnToArg
00248: AppFnToArg
00249: LoadVar(00000)
00250: PushString("Compound")
00251: PushString("Binding")
00252: PushString(""f"")
00253: AppFnToArg
00254: AppFnToArg
00255: PushString("")
00256: PushString("Binding")
00257: PushString(""a"")
00258: AppFnToArg
00259: AppFnToArg
00260: AppFnToArg
00261: AppFnToArg
00262: PushString("Compound")
00263: PushString("Binding")
00264: PushString(""g"")
00265: AppFnToArg
00266: AppFnToArg
00267: PushString("")
00268: PushString("Binding")
00269: PushString(""a"")
00270: AppFnToArg
00271: AppFnToArg
00272: AppFnToArg
00273: AppFnToArg
00274: AppFnToArg
00275:   Return
00276: LoadFn { code: 00016, fvars: 00000 }
00277: PushString(""=="")
00278: AppFnToArg
00279: LoadFn { code: 00022, fvars: 00000 }
00280: PushString(""=="")
00281: AppFnToArg
00282: LoadFn { code: 00160, fvars: 00000 }
00283: AppFnToArg
00284: AppFnToArg
00285: LoadFn { code: 00170, fvars: 00000 }
00286: AppFnToArg
00287:   Return

[True, False, True, False, True, False, True, False]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:flatten = (:xs => {
    reverse(fold([:acc, :x] => {
        fold([:acc, :x] => { acc(x) }, acc, x)
    }, [], xs))
})
flatten([[A, B], [C, D]])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :reverse
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :flatten
  (=>
    :xs
    { (reverse
        (fold
          (=>
            [ :acc
              :x ]
            { (fold
                (=>
                  [ :acc
                    :x ]
                  { (acc
                      x) })
                acc
                x) })
          [  ]
          xs)) }))
(flatten
  [ [ A
      B ]
    [ C
      D ] ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "f" )
                "acc" )
              "xs" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "reverse" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "flatten" )
            ( ( =>
                  =>
                    0
                "xs" )
              =>
                ( 1
                  ( ( ( 2
                        ( ( =>
                              =>
                                0
                            ( ( []
                                "acc" )
                              "x" ) )
                          =>
                            =>
                              ( ( ( 4
                                    ( ( =>
                                          =>
                                            0
                                        ( ( []
                                            "acc" )
                                          "x" ) )
                                      =>
                                        =>
                                          ( 1
                                            0 ) ) )
                                  1 )
                                0 ) ) )
                      [] )
                    0 ) ) ) )
          =>
            ( 0
              ( ( []
                  ( ( []
                      A )
                    B ) )
                ( ( []
                    C )
                  D ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""xs"")
00065: AppFnToArg
00066: PushString(""x"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""f"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""xs"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00001)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""xs"")
00117: AppFnToArg
00118: PushString(""x"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: PushString("")
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadVar(00000)
00130: LoadVar(00001)
00131: AppFnToArg
00132:   Return
00133: LoadFn { code: 00129, fvars: 00001 }
00134:   Return
00135: LoadFn { code: 00133, fvars: 00000 }
00136:   Return
00137: LoadVar(00000)
00138:   Return
00139: LoadFn { code: 00137, fvars: 00000 }
00140:   Return
00141: LoadVar(00000)
00142:   Return
00143: LoadFn { code: 00141, fvars: 00000 }
00144:   Return
00145: LoadVar(00000)
00146:   Return
00147: LoadFn { code: 00145, fvars: 00000 }
00148:   Return
00149: LoadVar(00001)
00150: LoadVar(00000)
00151: AppFnToArg
00152:   Return
00153: LoadFn { code: 00149, fvars: 00001 }
00154:   Return
00155: LoadVar(00004)
00156: LoadFn { code: 00147, fvars: 00000 }
00157: PushString("")
00158: PushString(""acc"")
00159: AppFnToArg
00160: PushString(""x"")
00161: AppFnToArg
00162: AppFnToArg
00163: LoadFn { code: 00153, fvars: 00000 }
00164: AppFnToArg
00165: AppFnToArg
00166: LoadVar(00001)
00167: AppFnToArg
00168: LoadVar(00000)
00169: AppFnToArg
00170:   Return
00171: LoadFn { code: 00155, fvars: 00004 }
00172:   Return
00173: LoadVar(00001)
00174: LoadVar(00002)
00175: LoadFn { code: 00143, fvars: 00000 }
00176: PushString("")
00177: PushString(""acc"")
00178: AppFnToArg
00179: PushString(""x"")
00180: AppFnToArg
00181: AppFnToArg
00182: LoadFn { code: 00171, fvars: 00003 }
00183: AppFnToArg
00184: AppFnToArg
00185: PushString("")
00186: AppFnToArg
00187: LoadVar(00000)
00188: AppFnToArg
00189: AppFnToArg
00190:   Return
00191: LoadVar(00000)
00192: PushString("")
00193: PushString("")
00194: PushString("A")
00195: AppFnToArg
00196: PushString("B")
00197: AppFnToArg
00198: AppFnToArg
00199: PushString("")
00200: PushString("C")
00201: AppFnToArg
00202: PushString("D")
00203: AppFnToArg
00204: AppFnToArg
00205: AppFnToArg
00206:   Return
00207: LoadFn { code: 00135, fvars: 00000 }
00208: PushString(""flatten"")
00209: AppFnToArg
00210: LoadFn { code: 00139, fvars: 00000 }
00211: PushString(""xs"")
00212: AppFnToArg
00213: LoadFn { code: 00173, fvars: 00002 }
00214: AppFnToArg
00215: AppFnToArg
00216: LoadFn { code: 00191, fvars: 00000 }
00217: AppFnToArg
00218:   Return
00219: LoadFn { code: 00097, fvars: 00000 }
00220: PushString(""reverse"")
00221: AppFnToArg
00222: LoadFn { code: 00101, fvars: 00000 }
00223: PushString(""xs"")
00224: AppFnToArg
00225: LoadFn { code: 00113, fvars: 00001 }
00226: AppFnToArg
00227: AppFnToArg
00228: LoadFn { code: 00207, fvars: 00001 }
00229: AppFnToArg
00230:   Return
00231: LoadFn { code: 00016, fvars: 00000 }
00232: PushString(""fold"")
00233: AppFnToArg
00234: LoadFn { code: 00022, fvars: 00000 }
00235: PushString(""fold"")
00236: AppFnToArg
00237: LoadFn { code: 00079, fvars: 00000 }
00238: AppFnToArg
00239: AppFnToArg
00240: LoadFn { code: 00219, fvars: 00000 }
00241: AppFnToArg
00242:   Return

[A, B, C, D]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:destructure = (:destructure ~> { [:acc, :compound] => {
    __unpack(compound, [:xs, :x] => {
        destructure(acc(x), xs)
    }, {
        [compound, reverse(acc)]
    })
} })([])
destructure(Foo(Bar, Baz, Qux))

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :reverse
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :destructure
  ((~>
    :destructure
    { (=>
        [ :acc
          :compound ]
        { (__unpack
            compound
            (=>
              [ :xs
                :x ]
              { (destructure
                  (acc
                    x)
                  xs) })
            { [ compound
                (reverse
                  acc) ] }) }) })
    [  ]))
(destructure
  (Foo
    Bar
    Baz
    Qux))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "f" )
                "acc" )
              "xs" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "reverse" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "destructure" )
            ( ( ( =>
                    =>
                      ~>
                        0
                  "destructure" )
                =>
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "acc" )
                        "compound" ) )
                    =>
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( pop
                                      2
                                      1
                                      0 )
                              0 )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "xs" )
                                  "x" ) )
                              =>
                                =>
                                  ( ( 4
                                      ( 3
                                        0 ) )
                                    1 ) ) )
                          =>
                            ( ( []
                                1 )
                              ( 4
                                2 ) ) ) ) )
              [] ) )
          =>
            ( 0
              ( ( ( Foo
                    Bar )
                  Baz )
                Qux ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""xs"")
00065: AppFnToArg
00066: PushString(""x"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""f"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""xs"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00001)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""xs"")
00117: AppFnToArg
00118: PushString(""x"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: PushString("")
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadVar(00000)
00130: LoadVar(00001)
00131: AppFnToArg
00132:   Return
00133: LoadFn { code: 00129, fvars: 00001 }
00134:   Return
00135: LoadFn { code: 00133, fvars: 00000 }
00136:   Return
00137: LoadVar(00000)
00138: LoadFn { code: 00000, fvars: 00000 }
00139: AppArgToFn
00140:   Return
00141: LoadFn { code: 00137, fvars: 00000 }
00142:   Return
00143: LoadVar(00000)
00144:   Return
00145: LoadFn { code: 00143, fvars: 00000 }
00146:   Return
00147: LoadVar(00002)
00148: LoadVar(00001)
00149: LoadVar(00000)
00150: Unpack
00151: AppArgToFn
00152: AppArgToFn
00153:   Return
00154: LoadFn { code: 00147, fvars: 00002 }
00155:   Return
00156: LoadFn { code: 00154, fvars: 00001 }
00157:   Return
00158: LoadVar(00000)
00159:   Return
00160: LoadFn { code: 00158, fvars: 00000 }
00161:   Return
00162: LoadVar(00004)
00163: LoadVar(00003)
00164: LoadVar(00000)
00165: AppFnToArg
00166: AppFnToArg
00167: LoadVar(00001)
00168: AppFnToArg
00169:   Return
00170: LoadFn { code: 00162, fvars: 00004 }
00171:   Return
00172: PushString("")
00173: LoadVar(00001)
00174: AppFnToArg
00175: LoadVar(00004)
00176: LoadVar(00002)
00177: AppFnToArg
00178: AppFnToArg
00179:   Return
00180: LoadFn { code: 00156, fvars: 00000 }
00181: LoadVar(00000)
00182: AppFnToArg
00183: LoadFn { code: 00160, fvars: 00000 }
00184: PushString("")
00185: PushString(""xs"")
00186: AppFnToArg
00187: PushString(""x"")
00188: AppFnToArg
00189: AppFnToArg
00190: LoadFn { code: 00170, fvars: 00003 }
00191: AppFnToArg
00192: AppFnToArg
00193: LoadFn { code: 00172, fvars: 00004 }
00194: AppFnToArg
00195:   Return
00196: LoadFn { code: 00180, fvars: 00003 }
00197:   Return
00198: LoadFn { code: 00145, fvars: 00000 }
00199: PushString("")
00200: PushString(""acc"")
00201: AppFnToArg
00202: PushString(""compound"")
00203: AppFnToArg
00204: AppFnToArg
00205: LoadFn { code: 00196, fvars: 00002 }
00206: AppFnToArg
00207:   Return
00208: LoadVar(00000)
00209: PushString("Foo")
00210: PushString("Bar")
00211: AppFnToArg
00212: PushString("Baz")
00213: AppFnToArg
00214: PushString("Qux")
00215: AppFnToArg
00216: AppFnToArg
00217:   Return
00218: LoadFn { code: 00135, fvars: 00000 }
00219: PushString(""destructure"")
00220: AppFnToArg
00221: LoadFn { code: 00141, fvars: 00000 }
00222: PushString(""destructure"")
00223: AppFnToArg
00224: LoadFn { code: 00198, fvars: 00001 }
00225: AppFnToArg
00226: PushString("")
00227: AppFnToArg
00228: AppFnToArg
00229: LoadFn { code: 00208, fvars: 00000 }
00230: AppFnToArg
00231:   Return
00232: LoadFn { code: 00097, fvars: 00000 }
00233: PushString(""reverse"")
00234: AppFnToArg
00235: LoadFn { code: 00101, fvars: 00000 }
00236: PushString(""xs"")
00237: AppFnToArg
00238: LoadFn { code: 00113, fvars: 00001 }
00239: AppFnToArg
00240: AppFnToArg
00241: LoadFn { code: 00218, fvars: 00000 }
00242: AppFnToArg
00243:   Return
00244: LoadFn { code: 00016, fvars: 00000 }
00245: PushString(""fold"")
00246: AppFnToArg
00247: LoadFn { code: 00022, fvars: 00000 }
00248: PushString(""fold"")
00249: AppFnToArg
00250: LoadFn { code: 00079, fvars: 00000 }
00251: AppFnToArg
00252: AppFnToArg
00253: LoadFn { code: 00232, fvars: 00000 }
00254: AppFnToArg
00255:   Return

[Foo, [Bar, Baz, Qux]]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:apply = ([:f, :xs] => {
    fold([:f, :x] => { f(x) }, f, reverse(xs))
})
:map = ([:f, :xs] => {
    fold([:xs, :x] => { xs(f(x)) }, [], reverse(xs))
})
:flatten = (:xs => {
    reverse(fold([:acc, :x] => {
        fold([:acc, :x] => { acc(x) }, acc, x)
    }, [], xs))
})
:zip-reverse = (:zip-reverse ~> { [:acc, :xs, :ys] => {
    __unpack(xs, [:xs, :x] => {
        __unpack(ys, [:ys, :y] => { zip-reverse(acc([x, y]), xs, ys) }, {})
    }, {
        __unpack(ys, [:ys, :y] => {}, { acc })
    })
}})
:zip = ([:xs, :ys] => {
    reverse(zip-reverse([], xs, ys))
})
:destructure = (:destructure ~> { [:acc, :compound] => {
    __unpack(compound, [:xs, :x] => {
        destructure(acc(x), xs)
    }, {
        [compound, reverse(acc)]
    })
} })([])
:== = (:== ~> { [:a, :b] => {
    __unpack(a, [:xs, :x] => {
        __unpack(b, [:ys, :y] => {
            __compare(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        __compare(a, b, { True }, { False })
    })
}})
:second = (:xs => {
    __unpack(xs, [:_, :x] => { x }, { xs })
})
:first = (:xs => {
    __unpack(xs, [:xs, :_] => { second(xs) }, { xs })
})
:join = fold([:acc, :pair] => {
    :xvar = first(pair)
    :xval = second(pair)
    fold([:_, :pair] => {
        :yvar = first(pair)
        :yval = second(pair)
        __compare(xvar, yvar, {
            __compare(xval == yval, False, {
                no-match!([[xvar, xval], [yvar, yval]])
            }, {})
        }, {})
    }, [], acc)
    acc(pair)
}, [])
:unify = (:unify ~> { [:pattern, :value] => {
    __unpack(pattern, [:type, :pattern] => {
        __compare(type, Binding, {
            [[pattern, value]]
        }, {
            __compare(type, List, {
                :zipped = zip-reverse([], pattern, value)
                __compare(zipped, [], {
                    no-match!([type(pattern), value])
                }, {
                    reverse(join(flatten(reverse(map(apply(unify), zipped)))))
                })
            }, {
                __unpack(type, [:type, :f] => {
                    __compare(type, Compound, {
                        :v = destructure(value)
                        :vf = first(v)
                        :vargs = second(v)
                        :zipped = zip-reverse([], pattern, vargs)
                        __compare(zipped, [], {
                            no-match!([type(f, pattern), value])
                        }, {
                            reverse(join(flatten(reverse(map(apply(unify), zipped([f, vf]))))))
                        })
                    }, {
                        invalid!(type(f, pattern))
                    })
                }, {
                    __compare(pattern == value, True, {
                      []
                    }, {
                        no-match!([pattern, value])
                    })
                })
            })
        })
    }, {
        invalid!(pattern)
    })
}})
:-> = ([:pattern, :body, :value] => {
    __handle( {
        :args = map(second, unify(pattern, value))
        __compare(args, [], {
            body()
        }, {
            apply(body, args)
        })
    }, no-match!, [:_, :arg] => {
        no-match!(arg)
    })
})
__handle({
    [
        (Foo -> { Bar })(Foo)
        (:x -> { x })(Foo)
        (:x -> { Bar })(Foo)
        (Pair(Foo, Bar) -> { Foo })(Pair(Foo, Bar))
        (Pair(:x, :y) -> { y })(Pair(Foo, Bar))
        (Pair(:x, Bar) -> { x })(Pair(Foo, Bar))
        (Pair(:x, :x) -> { x })(Pair(Bar, Bar))
        (:foo(:x, :y) -> { x })(Pair(Foo, Bar))
        ([:x, :y] -> { y })([Foo, Bar])
        (Pair(:x, :x) -> { x })(Pair(Foo, Bar))
    ]
}, no-match!, [:r, :arg] => {
    r(NoMatch(arg))
})

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :reverse
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :apply
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :f
            :x ]
          { (f
              x) })
        f
        (reverse
          xs)) }))
(=
  :map
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              (f
                x)) })
        [  ]
        (reverse
          xs)) }))
(=
  :flatten
  (=>
    :xs
    { (reverse
        (fold
          (=>
            [ :acc
              :x ]
            { (fold
                (=>
                  [ :acc
                    :x ]
                  { (acc
                      x) })
                acc
                x) })
          [  ]
          xs)) }))
(=
  :zip-reverse
  (~>
    :zip-reverse
    { (=>
        [ :acc
          :xs
          :ys ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (__unpack
                  ys
                  (=>
                    [ :ys
                      :y ]
                    { (zip-reverse
                        (acc
                          [ x
                            y ])
                        xs
                        ys) })
                  {  }) })
            { (__unpack
                ys
                (=>
                  [ :ys
                    :y ]
                  {  })
                { acc }) }) }) }))
(=
  :zip
  (=>
    [ :xs
      :ys ]
    { (reverse
        (zip-reverse
          [  ]
          xs
          ys)) }))
(=
  :destructure
  ((~>
    :destructure
    { (=>
        [ :acc
          :compound ]
        { (__unpack
            compound
            (=>
              [ :xs
                :x ]
              { (destructure
                  (acc
                    x)
                  xs) })
            { [ compound
                (reverse
                  acc) ] }) }) })
    [  ]))
(=
  :==
  (~>
    :==
    { (=>
        [ :a
          :b ]
        { (__unpack
            a
            (=>
              [ :xs
                :x ]
              { (__unpack
                  b
                  (=>
                    [ :ys
                      :y ]
                    { (__compare
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (__compare
                a
                b
                { True }
                { False }) }) }) }))
(=
  :second
  (=>
    :xs
    { (__unpack
        xs
        (=>
          [ :_
            :x ]
          { x })
        { xs }) }))
(=
  :first
  (=>
    :xs
    { (__unpack
        xs
        (=>
          [ :xs
            :_ ]
          { (second
              xs) })
        { xs }) }))
(=
  :join
  (fold
    (=>
      [ :acc
        :pair ]
      { (=
          :xvar
          (first
            pair))
        (=
          :xval
          (second
            pair))
        (fold
          (=>
            [ :_
              :pair ]
            { (=
                :yvar
                (first
                  pair))
              (=
                :yval
                (second
                  pair))
              (__compare
                xvar
                yvar
                { (__compare
                    (==
                      xval
                      yval)
                    False
                    { (no-match!
                        [ [ xvar
                            xval ]
                          [ yvar
                            yval ] ]) }
                    {  }) }
                {  }) })
          [  ]
          acc)
        (acc
          pair) })
    [  ]))
(=
  :unify
  (~>
    :unify
    { (=>
        [ :pattern
          :value ]
        { (__unpack
            pattern
            (=>
              [ :type
                :pattern ]
              { (__compare
                  type
                  Binding
                  { [ [ pattern
                        value ] ] }
                  { (__compare
                      type
                      List
                      { (=
                          :zipped
                          (zip-reverse
                            [  ]
                            pattern
                            value))
                        (__compare
                          zipped
                          [  ]
                          { (no-match!
                              [ (type
                                  pattern)
                                value ]) }
                          { (reverse
                              (join
                                (flatten
                                  (reverse
                                    (map
                                      (apply
                                        unify)
                                      zipped))))) }) }
                      { (__unpack
                          type
                          (=>
                            [ :type
                              :f ]
                            { (__compare
                                type
                                Compound
                                { (=
                                    :v
                                    (destructure
                                      value))
                                  (=
                                    :vf
                                    (first
                                      v))
                                  (=
                                    :vargs
                                    (second
                                      v))
                                  (=
                                    :zipped
                                    (zip-reverse
                                      [  ]
                                      pattern
                                      vargs))
                                  (__compare
                                    zipped
                                    [  ]
                                    { (no-match!
                                        [ (type
                                            f
                                            pattern)
                                          value ]) }
                                    { (reverse
                                        (join
                                          (flatten
                                            (reverse
                                              (map
                                                (apply
                                                  unify)
                                                (zipped
                                                  [ f
                                                    vf ])))))) }) }
                                { (invalid!
                                    (type
                                      f
                                      pattern)) }) })
                          { (__compare
                              (==
                                pattern
                                value)
                              True
                              { [  ] }
                              { (no-match!
                                  [ pattern
                                    value ]) }) }) }) }) })
            { (invalid!
                pattern) }) }) }))
(=
  :->
  (=>
    [ :pattern
      :body
      :value ]
    { (__handle
        { (=
            :args
            (map
              second
              (unify
                pattern
                value)))
          (__compare
            args
            [  ]
            { (body) }
            { (apply
                body
                args) }) }
        no-match!
        (=>
          [ :_
            :arg ]
          { (no-match!
              arg) })) }))
(__handle
  { [ ((->
        Foo
        { Bar })
        Foo)
      ((->
        :x
        { x })
        Foo)
      ((->
        :x
        { Bar })
        Foo)
      ((->
        (Pair
          Foo
          Bar)
        { Foo })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          :x
          :y)
        { y })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          :x
          Bar)
        { x })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          :x
          :x)
        { x })
        (Pair
          Bar
          Bar))
      ((->
        (:foo
          :x
          :y)
        { x })
        (Pair
          Foo
          Bar))
      ((->
        [ :x
          :y ]
        { y })
        [ Foo
          Bar ])
      ((->
        (Pair
          :x
          :x)
        { x })
        (Pair
          Foo
          Bar)) ] }
  no-match!
  (=>
    [ :r
      :arg ]
    { (r
        (NoMatch
          arg)) }))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "f" )
                "acc" )
              "xs" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "reverse" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "apply" )
            ( ( =>
                  =>
                    0
                ( ( []
                    "f" )
                  "xs" ) )
              =>
                =>
                  ( ( ( 3
                        ( ( =>
                              =>
                                0
                            ( ( []
                                "f" )
                              "x" ) )
                          =>
                            =>
                              ( 1
                                0 ) ) )
                      1 )
                    ( 2
                      0 ) ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "map" )
                ( ( =>
                      =>
                        0
                    ( ( []
                        "f" )
                      "xs" ) )
                  =>
                    =>
                      ( ( ( 4
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "xs" )
                                  "x" ) )
                              =>
                                =>
                                  ( 1
                                    ( 3
                                      0 ) ) ) )
                          [] )
                        ( 3
                          0 ) ) ) )
              =>
                ( ( ( =>
                        =>
                          =>
                            ( 0
                              1 )
                      "flatten" )
                    ( ( =>
                          =>
                            0
                        "xs" )
                      =>
                        ( 3
                          ( ( ( 4
                                ( ( =>
                                      =>
                                        0
                                    ( ( []
                                        "acc" )
                                      "x" ) )
                                  =>
                                    =>
                                      ( ( ( 6
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "acc" )
                                                  "x" ) )
                                              =>
                                                =>
                                                  ( 1
                                                    0 ) ) )
                                          1 )
                                        0 ) ) )
                              [] )
                            0 ) ) ) )
                  =>
                    ( ( ( =>
                            =>
                              =>
                                ( 0
                                  1 )
                          "zip-reverse" )
                        ( ( =>
                              =>
                                ~>
                                  0
                            "zip-reverse" )
                          =>
                            ( ( =>
                                  =>
                                    0
                                ( ( ( []
                                      "acc" )
                                    "xs" )
                                  "ys" ) )
                              =>
                                =>
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( pop
                                                  2
                                                  1
                                                  0 )
                                          1 )
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "xs" )
                                              "x" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    2 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "ys" )
                                                        "y" ) )
                                                    =>
                                                      =>
                                                        ( ( ( 7
                                                              ( 6
                                                                ( ( []
                                                                    2 )
                                                                  0 ) ) )
                                                            3 )
                                                          1 ) ) )
                                                =>
                                                  [] ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              1 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "ys" )
                                                  "y" ) )
                                              =>
                                                =>
                                                  [] ) )
                                          =>
                                            4 ) ) ) ) )
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( 0
                                      1 )
                              "zip" )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "xs" )
                                  "ys" ) )
                              =>
                                =>
                                  ( 6
                                    ( ( ( 2
                                          [] )
                                        1 )
                                      0 ) ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( 0
                                          1 )
                                  "destructure" )
                                ( ( ( =>
                                        =>
                                          ~>
                                            0
                                      "destructure" )
                                    =>
                                      ( ( =>
                                            =>
                                              0
                                          ( ( []
                                              "acc" )
                                            "compound" ) )
                                        =>
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "xs" )
                                                      "x" ) )
                                                  =>
                                                    =>
                                                      ( ( 4
                                                          ( 3
                                                            0 ) )
                                                        1 ) ) )
                                              =>
                                                ( ( []
                                                    1 )
                                                  ( 9
                                                    2 ) ) ) ) )
                                  [] ) )
                              =>
                                ( ( ( =>
                                        =>
                                          =>
                                            ( 0
                                              1 )
                                      "==" )
                                    ( ( =>
                                          =>
                                            ~>
                                              0
                                        "==" )
                                      =>
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "a" )
                                              "b" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    1 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "xs" )
                                                        "x" ) )
                                                    =>
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( pop
                                                                      2
                                                                      1
                                                                      0 )
                                                              2 )
                                                            ( ( =>
                                                                  =>
                                                                    0
                                                                ( ( []
                                                                    "ys" )
                                                                  "y" ) )
                                                              =>
                                                                =>
                                                                  ( ( ( ( =>
                                                                            =>
                                                                              =>
                                                                                =>
                                                                                  ( if
                                                                                    3
                                                                                    2
                                                                                    1
                                                                                    0 )
                                                                          ( ( 6
                                                                              2 )
                                                                            0 ) )
                                                                        True )
                                                                      =>
                                                                        ( ( 7
                                                                            4 )
                                                                          2 ) )
                                                                    =>
                                                                      False ) ) )
                                                          =>
                                                            False ) ) )
                                                =>
                                                  ( ( ( ( =>
                                                            =>
                                                              =>
                                                                =>
                                                                  ( if
                                                                    3
                                                                    2
                                                                    1
                                                                    0 )
                                                          2 )
                                                        1 )
                                                      =>
                                                        True )
                                                    =>
                                                      False ) ) ) ) )
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( 0
                                                  1 )
                                          "second" )
                                        ( ( =>
                                              =>
                                                0
                                            "xs" )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "_" )
                                                      "x" ) )
                                                  =>
                                                    =>
                                                      0 ) )
                                              =>
                                                1 ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( 0
                                                      1 )
                                              "first" )
                                            ( ( =>
                                                  =>
                                                    0
                                                "xs" )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( pop
                                                              2
                                                              1
                                                              0 )
                                                      0 )
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "xs" )
                                                          "_" ) )
                                                      =>
                                                        =>
                                                          ( 3
                                                            1 ) ) )
                                                  =>
                                                    1 ) ) )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( 0
                                                          1 )
                                                  "join" )
                                                ( ( 10
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "acc" )
                                                          "pair" ) )
                                                      =>
                                                        =>
                                                          ( ( ( =>
                                                                  =>
                                                                    =>
                                                                      ( 0
                                                                        1 )
                                                                "xvar" )
                                                              ( 2
                                                                0 ) )
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( 0
                                                                            1 )
                                                                    "xval" )
                                                                  ( 4
                                                                    1 ) )
                                                                =>
                                                                  ( =>
                                                                      ( 4
                                                                        3 )
                                                                    ( ( ( 14
                                                                          ( ( =>
                                                                                =>
                                                                                  0
                                                                              ( ( []
                                                                                  "_" )
                                                                                "pair" ) )
                                                                            =>
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( 0
                                                                                              1 )
                                                                                      "yvar" )
                                                                                    ( 6
                                                                                      0 ) )
                                                                                  =>
                                                                                    ( ( ( =>
                                                                                            =>
                                                                                              =>
                                                                                                ( 0
                                                                                                  1 )
                                                                                          "yval" )
                                                                                        ( 8
                                                                                          1 ) )
                                                                                      =>
                                                                                        ( ( ( ( =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        ( if
                                                                                                          3
                                                                                                          2
                                                                                                          1
                                                                                                          0 )
                                                                                                5 )
                                                                                              1 )
                                                                                            =>
                                                                                              ( ( ( ( =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            =>
                                                                                                              ( if
                                                                                                                3
                                                                                                                2
                                                                                                                1
                                                                                                                0 )
                                                                                                      ( ( 11
                                                                                                          5 )
                                                                                                        1 ) )
                                                                                                    False )
                                                                                                  =>
                                                                                                    ( no-match!
                                                                                                      ( ( []
                                                                                                          ( ( []
                                                                                                              7 )
                                                                                                            6 ) )
                                                                                                        ( ( []
                                                                                                            3 )
                                                                                                          2 ) ) ) )
                                                                                                =>
                                                                                                  [] ) )
                                                                                          =>
                                                                                            [] ) ) ) ) )
                                                                        [] )
                                                                      3 ) ) ) ) ) )
                                                  [] ) )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( 0
                                                              1 )
                                                      "unify" )
                                                    ( ( =>
                                                          =>
                                                            ~>
                                                              0
                                                        "unify" )
                                                      =>
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( []
                                                                "pattern" )
                                                              "value" ) )
                                                          =>
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( pop
                                                                            2
                                                                            1
                                                                            0 )
                                                                    1 )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "type" )
                                                                        "pattern" ) )
                                                                    =>
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                1 )
                                                                              Binding )
                                                                            =>
                                                                              ( []
                                                                                ( ( []
                                                                                    1 )
                                                                                  3 ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    2 )
                                                                                  List )
                                                                                =>
                                                                                  ( ( ( =>
                                                                                          =>
                                                                                            =>
                                                                                              ( 0
                                                                                                1 )
                                                                                        "zipped" )
                                                                                      ( ( ( 13
                                                                                            [] )
                                                                                          2 )
                                                                                        4 ) )
                                                                                    =>
                                                                                      ( ( ( ( =>
                                                                                                =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      ( if
                                                                                                        3
                                                                                                        2
                                                                                                        1
                                                                                                        0 )
                                                                                              0 )
                                                                                            [] )
                                                                                          =>
                                                                                            ( no-match!
                                                                                              ( ( []
                                                                                                  ( 5
                                                                                                    4 ) )
                                                                                                6 ) ) )
                                                                                        =>
                                                                                          ( 19
                                                                                            ( 9
                                                                                              ( 16
                                                                                                ( 19
                                                                                                  ( ( 17
                                                                                                      ( 18
                                                                                                        8 ) )
                                                                                                    1 ) ) ) ) ) ) ) )
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( pop
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                      3 )
                                                                                    ( ( =>
                                                                                          =>
                                                                                            0
                                                                                        ( ( []
                                                                                            "type" )
                                                                                          "f" ) )
                                                                                      =>
                                                                                        =>
                                                                                          ( ( ( ( =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        =>
                                                                                                          ( if
                                                                                                            3
                                                                                                            2
                                                                                                            1
                                                                                                            0 )
                                                                                                  1 )
                                                                                                Compound )
                                                                                              =>
                                                                                                ( ( ( =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            ( 0
                                                                                                              1 )
                                                                                                      "v" )
                                                                                                    ( 14
                                                                                                      7 ) )
                                                                                                  =>
                                                                                                    ( ( ( =>
                                                                                                            =>
                                                                                                              =>
                                                                                                                ( 0
                                                                                                                  1 )
                                                                                                          "vf" )
                                                                                                        ( 12
                                                                                                          0 ) )
                                                                                                      =>
                                                                                                        ( ( ( =>
                                                                                                                =>
                                                                                                                  =>
                                                                                                                    ( 0
                                                                                                                      1 )
                                                                                                              "vargs" )
                                                                                                            ( 14
                                                                                                              1 ) )
                                                                                                          =>
                                                                                                            ( ( ( =>
                                                                                                                    =>
                                                                                                                      =>
                                                                                                                        ( 0
                                                                                                                          1 )
                                                                                                                  "zipped" )
                                                                                                                ( ( ( 19
                                                                                                                      [] )
                                                                                                                    8 )
                                                                                                                  0 ) )
                                                                                                              =>
                                                                                                                ( ( ( ( =>
                                                                                                                          =>
                                                                                                                            =>
                                                                                                                              =>
                                                                                                                                ( if
                                                                                                                                  3
                                                                                                                                  2
                                                                                                                                  1
                                                                                                                                  0 )
                                                                                                                        0 )
                                                                                                                      [] )
                                                                                                                    =>
                                                                                                                      ( no-match!
                                                                                                                        ( ( []
                                                                                                                            ( ( 7
                                                                                                                                6 )
                                                                                                                              10 ) )
                                                                                                                          12 ) ) )
                                                                                                                  =>
                                                                                                                    ( 25
                                                                                                                      ( 15
                                                                                                                        ( 22
                                                                                                                          ( 25
                                                                                                                            ( ( 23
                                                                                                                                ( 24
                                                                                                                                  14 ) )
                                                                                                                              ( 1
                                                                                                                                ( ( []
                                                                                                                                    6 )
                                                                                                                                  3 ) ) ) ) ) ) ) ) ) ) ) ) )
                                                                                            =>
                                                                                              ( invalid!
                                                                                                ( ( 2
                                                                                                    1 )
                                                                                                  5 ) ) ) ) )
                                                                                  =>
                                                                                    ( ( ( ( =>
                                                                                              =>
                                                                                                =>
                                                                                                  =>
                                                                                                    ( if
                                                                                                      3
                                                                                                      2
                                                                                                      1
                                                                                                      0 )
                                                                                            ( ( 11
                                                                                                3 )
                                                                                              5 ) )
                                                                                          True )
                                                                                        =>
                                                                                          [] )
                                                                                      =>
                                                                                        ( no-match!
                                                                                          ( ( []
                                                                                              4 )
                                                                                            6 ) ) ) ) ) ) ) )
                                                                =>
                                                                  ( invalid!
                                                                    2 ) ) ) ) )
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( 0
                                                                  1 )
                                                          "->" )
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( ( []
                                                                  "pattern" )
                                                                "body" )
                                                              "value" ) )
                                                          =>
                                                            =>
                                                              =>
                                                                ( ( ( =>
                                                                        =>
                                                                          =>
                                                                            ( try
                                                                              2
                                                                              1
                                                                              0 )
                                                                      =>
                                                                        ( ( ( =>
                                                                                =>
                                                                                  =>
                                                                                    ( 0
                                                                                      1 )
                                                                              "args" )
                                                                            ( ( 13
                                                                                7 )
                                                                              ( ( 4
                                                                                  3 )
                                                                                1 ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    0 )
                                                                                  [] )
                                                                                =>
                                                                                  ( 4
                                                                                    [] ) )
                                                                              =>
                                                                                ( ( 16
                                                                                    4 )
                                                                                  1 ) ) ) )
                                                                    no-match! )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "_" )
                                                                        "arg" ) )
                                                                    =>
                                                                      =>
                                                                        ( no-match!
                                                                          0 ) ) ) ) )
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( try
                                                                      2
                                                                      1
                                                                      0 )
                                                              =>
                                                                ( ( ( ( ( ( ( ( ( ( []
                                                                                    ( ( ( 1
                                                                                          ( Value
                                                                                            Foo ) )
                                                                                        =>
                                                                                          Bar )
                                                                                      Foo ) )
                                                                                  ( ( ( 1
                                                                                        ( Binding
                                                                                          "x" ) )
                                                                                      =>
                                                                                        0 )
                                                                                    Foo ) )
                                                                                ( ( ( 1
                                                                                      ( Binding
                                                                                        "x" ) )
                                                                                    =>
                                                                                      Bar )
                                                                                  Foo ) )
                                                                              ( ( ( 1
                                                                                    ( Value
                                                                                      ( ( Pair
                                                                                          Foo )
                                                                                        Bar ) ) )
                                                                                  =>
                                                                                    Foo )
                                                                                ( ( Pair
                                                                                    Foo )
                                                                                  Bar ) ) )
                                                                            ( ( ( 1
                                                                                  ( ( Compound
                                                                                      ( Value
                                                                                        Pair ) )
                                                                                    ( ( []
                                                                                        ( Binding
                                                                                          "x" ) )
                                                                                      ( Binding
                                                                                        "y" ) ) ) )
                                                                                =>
                                                                                  =>
                                                                                    0 )
                                                                              ( ( Pair
                                                                                  Foo )
                                                                                Bar ) ) )
                                                                          ( ( ( 1
                                                                                ( ( Compound
                                                                                    ( Value
                                                                                      Pair ) )
                                                                                  ( ( []
                                                                                      ( Binding
                                                                                        "x" ) )
                                                                                    ( Value
                                                                                      Bar ) ) ) )
                                                                              =>
                                                                                0 )
                                                                            ( ( Pair
                                                                                Foo )
                                                                              Bar ) ) )
                                                                        ( ( ( 1
                                                                              ( ( Compound
                                                                                  ( Value
                                                                                    Pair ) )
                                                                                ( ( []
                                                                                    ( Binding
                                                                                      "x" ) )
                                                                                  ( Binding
                                                                                    "x" ) ) ) )
                                                                            =>
                                                                              =>
                                                                                0 )
                                                                          ( ( Pair
                                                                              Bar )
                                                                            Bar ) ) )
                                                                      ( ( ( 1
                                                                            ( ( Compound
                                                                                ( Binding
                                                                                  "foo" ) )
                                                                              ( ( []
                                                                                  ( Binding
                                                                                    "x" ) )
                                                                                ( Binding
                                                                                  "y" ) ) ) )
                                                                          =>
                                                                            =>
                                                                              =>
                                                                                1 )
                                                                        ( ( Pair
                                                                            Foo )
                                                                          Bar ) ) )
                                                                    ( ( ( 1
                                                                          ( List
                                                                            ( ( []
                                                                                ( Binding
                                                                                  "x" ) )
                                                                              ( Binding
                                                                                "y" ) ) ) )
                                                                        =>
                                                                          =>
                                                                            0 )
                                                                      ( ( []
                                                                          Foo )
                                                                        Bar ) ) )
                                                                  ( ( ( 1
                                                                        ( ( Compound
                                                                            ( Value
                                                                              Pair ) )
                                                                          ( ( []
                                                                              ( Binding
                                                                                "x" ) )
                                                                            ( Binding
                                                                              "x" ) ) ) )
                                                                      =>
                                                                        =>
                                                                          0 )
                                                                    ( ( Pair
                                                                        Foo )
                                                                      Bar ) ) ) )
                                                            no-match! )
                                                          ( ( =>
                                                                =>
                                                                  0
                                                              ( ( []
                                                                  "r" )
                                                                "arg" ) )
                                                            =>
                                                              =>
                                                                ( 1
                                                                  ( NoMatch
                                                                    0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""xs"")
00065: AppFnToArg
00066: PushString(""x"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""f"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""xs"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00001)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""xs"")
00117: AppFnToArg
00118: PushString(""x"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: PushString("")
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadVar(00000)
00130: LoadVar(00001)
00131: AppFnToArg
00132:   Return
00133: LoadFn { code: 00129, fvars: 00001 }
00134:   Return
00135: LoadFn { code: 00133, fvars: 00000 }
00136:   Return
00137: LoadVar(00000)
00138:   Return
00139: LoadFn { code: 00137, fvars: 00000 }
00140:   Return
00141: LoadVar(00000)
00142:   Return
00143: LoadFn { code: 00141, fvars: 00000 }
00144:   Return
00145: LoadVar(00001)
00146: LoadVar(00000)
00147: AppFnToArg
00148:   Return
00149: LoadFn { code: 00145, fvars: 00001 }
00150:   Return
00151: LoadVar(00003)
00152: LoadFn { code: 00143, fvars: 00000 }
00153: PushString("")
00154: PushString(""f"")
00155: AppFnToArg
00156: PushString(""x"")
00157: AppFnToArg
00158: AppFnToArg
00159: LoadFn { code: 00149, fvars: 00000 }
00160: AppFnToArg
00161: AppFnToArg
00162: LoadVar(00001)
00163: AppFnToArg
00164: LoadVar(00002)
00165: LoadVar(00000)
00166: AppFnToArg
00167: AppFnToArg
00168:   Return
00169: LoadFn { code: 00151, fvars: 00003 }
00170:   Return
00171: LoadVar(00000)
00172: LoadVar(00001)
00173: AppFnToArg
00174:   Return
00175: LoadFn { code: 00171, fvars: 00001 }
00176:   Return
00177: LoadFn { code: 00175, fvars: 00000 }
00178:   Return
00179: LoadVar(00000)
00180:   Return
00181: LoadFn { code: 00179, fvars: 00000 }
00182:   Return
00183: LoadVar(00000)
00184:   Return
00185: LoadFn { code: 00183, fvars: 00000 }
00186:   Return
00187: LoadVar(00001)
00188: LoadVar(00003)
00189: LoadVar(00000)
00190: AppFnToArg
00191: AppFnToArg
00192:   Return
00193: LoadFn { code: 00187, fvars: 00003 }
00194:   Return
00195: LoadVar(00004)
00196: LoadFn { code: 00185, fvars: 00000 }
00197: PushString("")
00198: PushString(""xs"")
00199: AppFnToArg
00200: PushString(""x"")
00201: AppFnToArg
00202: AppFnToArg
00203: LoadFn { code: 00193, fvars: 00002 }
00204: AppFnToArg
00205: AppFnToArg
00206: PushString("")
00207: AppFnToArg
00208: LoadVar(00003)
00209: LoadVar(00000)
00210: AppFnToArg
00211: AppFnToArg
00212:   Return
00213: LoadFn { code: 00195, fvars: 00004 }
00214:   Return
00215: LoadVar(00000)
00216: LoadVar(00001)
00217: AppFnToArg
00218:   Return
00219: LoadFn { code: 00215, fvars: 00001 }
00220:   Return
00221: LoadFn { code: 00219, fvars: 00000 }
00222:   Return
00223: LoadVar(00000)
00224:   Return
00225: LoadFn { code: 00223, fvars: 00000 }
00226:   Return
00227: LoadVar(00000)
00228:   Return
00229: LoadFn { code: 00227, fvars: 00000 }
00230:   Return
00231: LoadVar(00000)
00232:   Return
00233: LoadFn { code: 00231, fvars: 00000 }
00234:   Return
00235: LoadVar(00001)
00236: LoadVar(00000)
00237: AppFnToArg
00238:   Return
00239: LoadFn { code: 00235, fvars: 00001 }
00240:   Return
00241: LoadVar(00006)
00242: LoadFn { code: 00233, fvars: 00000 }
00243: PushString("")
00244: PushString(""acc"")
00245: AppFnToArg
00246: PushString(""x"")
00247: AppFnToArg
00248: AppFnToArg
00249: LoadFn { code: 00239, fvars: 00000 }
00250: AppFnToArg
00251: AppFnToArg
00252: LoadVar(00001)
00253: AppFnToArg
00254: LoadVar(00000)
00255: AppFnToArg
00256:   Return
00257: LoadFn { code: 00241, fvars: 00006 }
00258:   Return
00259: LoadVar(00003)
00260: LoadVar(00004)
00261: LoadFn { code: 00229, fvars: 00000 }
00262: PushString("")
00263: PushString(""acc"")
00264: AppFnToArg
00265: PushString(""x"")
00266: AppFnToArg
00267: AppFnToArg
00268: LoadFn { code: 00257, fvars: 00005 }
00269: AppFnToArg
00270: AppFnToArg
00271: PushString("")
00272: AppFnToArg
00273: LoadVar(00000)
00274: AppFnToArg
00275: AppFnToArg
00276:   Return
00277: LoadVar(00000)
00278: LoadVar(00001)
00279: AppFnToArg
00280:   Return
00281: LoadFn { code: 00277, fvars: 00001 }
00282:   Return
00283: LoadFn { code: 00281, fvars: 00000 }
00284:   Return
00285: LoadVar(00000)
00286: LoadFn { code: 00000, fvars: 00000 }
00287: AppArgToFn
00288:   Return
00289: LoadFn { code: 00285, fvars: 00000 }
00290:   Return
00291: LoadVar(00000)
00292:   Return
00293: LoadFn { code: 00291, fvars: 00000 }
00294:   Return
00295: LoadVar(00002)
00296: LoadVar(00001)
00297: LoadVar(00000)
00298: Unpack
00299: AppArgToFn
00300: AppArgToFn
00301:   Return
00302: LoadFn { code: 00295, fvars: 00002 }
00303:   Return
00304: LoadFn { code: 00302, fvars: 00001 }
00305:   Return
00306: LoadVar(00000)
00307:   Return
00308: LoadFn { code: 00306, fvars: 00000 }
00309:   Return
00310: LoadVar(00002)
00311: LoadVar(00001)
00312: LoadVar(00000)
00313: Unpack
00314: AppArgToFn
00315: AppArgToFn
00316:   Return
00317: LoadFn { code: 00310, fvars: 00002 }
00318:   Return
00319: LoadFn { code: 00317, fvars: 00001 }
00320:   Return
00321: LoadVar(00000)
00322:   Return
00323: LoadFn { code: 00321, fvars: 00000 }
00324:   Return
00325: LoadVar(00007)
00326: LoadVar(00006)
00327: PushString("")
00328: LoadVar(00002)
00329: AppFnToArg
00330: LoadVar(00000)
00331: AppFnToArg
00332: AppFnToArg
00333: AppFnToArg
00334: LoadVar(00003)
00335: AppFnToArg
00336: LoadVar(00001)
00337: AppFnToArg
00338:   Return
00339: LoadFn { code: 00325, fvars: 00007 }
00340:   Return
00341: PushString("")
00342:   Return
00343: LoadFn { code: 00319, fvars: 00000 }
00344: LoadVar(00002)
00345: AppFnToArg
00346: LoadFn { code: 00323, fvars: 00000 }
00347: PushString("")
00348: PushString(""ys"")
00349: AppFnToArg
00350: PushString(""y"")
00351: AppFnToArg
00352: AppFnToArg
00353: LoadFn { code: 00339, fvars: 00006 }
00354: AppFnToArg
00355: AppFnToArg
00356: LoadFn { code: 00341, fvars: 00000 }
00357: AppFnToArg
00358:   Return
00359: LoadFn { code: 00343, fvars: 00005 }
00360:   Return
00361: LoadVar(00002)
00362: LoadVar(00001)
00363: LoadVar(00000)
00364: Unpack
00365: AppArgToFn
00366: AppArgToFn
00367:   Return
00368: LoadFn { code: 00361, fvars: 00002 }
00369:   Return
00370: LoadFn { code: 00368, fvars: 00001 }
00371:   Return
00372: LoadVar(00000)
00373:   Return
00374: LoadFn { code: 00372, fvars: 00000 }
00375:   Return
00376: PushString("")
00377:   Return
00378: LoadFn { code: 00376, fvars: 00000 }
00379:   Return
00380: LoadVar(00004)
00381:   Return
00382: LoadFn { code: 00370, fvars: 00000 }
00383: LoadVar(00001)
00384: AppFnToArg
00385: LoadFn { code: 00374, fvars: 00000 }
00386: PushString("")
00387: PushString(""ys"")
00388: AppFnToArg
00389: PushString(""y"")
00390: AppFnToArg
00391: AppFnToArg
00392: LoadFn { code: 00378, fvars: 00000 }
00393: AppFnToArg
00394: AppFnToArg
00395: LoadFn { code: 00380, fvars: 00004 }
00396: AppFnToArg
00397:   Return
00398: LoadFn { code: 00304, fvars: 00000 }
00399: LoadVar(00001)
00400: AppFnToArg
00401: LoadFn { code: 00308, fvars: 00000 }
00402: PushString("")
00403: PushString(""xs"")
00404: AppFnToArg
00405: PushString(""x"")
00406: AppFnToArg
00407: AppFnToArg
00408: LoadFn { code: 00359, fvars: 00004 }
00409: AppFnToArg
00410: AppFnToArg
00411: LoadFn { code: 00382, fvars: 00003 }
00412: AppFnToArg
00413:   Return
00414: LoadFn { code: 00398, fvars: 00003 }
00415:   Return
00416: LoadFn { code: 00414, fvars: 00002 }
00417:   Return
00418: LoadFn { code: 00293, fvars: 00000 }
00419: PushString("")
00420: PushString(""acc"")
00421: AppFnToArg
00422: PushString(""xs"")
00423: AppFnToArg
00424: PushString(""ys"")
00425: AppFnToArg
00426: AppFnToArg
00427: LoadFn { code: 00416, fvars: 00001 }
00428: AppFnToArg
00429:   Return
00430: LoadVar(00000)
00431: LoadVar(00001)
00432: AppFnToArg
00433:   Return
00434: LoadFn { code: 00430, fvars: 00001 }
00435:   Return
00436: LoadFn { code: 00434, fvars: 00000 }
00437:   Return
00438: LoadVar(00000)
00439:   Return
00440: LoadFn { code: 00438, fvars: 00000 }
00441:   Return
00442: LoadVar(00006)
00443: LoadVar(00002)
00444: PushString("")
00445: AppFnToArg
00446: LoadVar(00001)
00447: AppFnToArg
00448: LoadVar(00000)
00449: AppFnToArg
00450: AppFnToArg
00451:   Return
00452: LoadFn { code: 00442, fvars: 00006 }
00453:   Return
00454: LoadVar(00000)
00455: LoadVar(00001)
00456: AppFnToArg
00457:   Return
00458: LoadFn { code: 00454, fvars: 00001 }
00459:   Return
00460: LoadFn { code: 00458, fvars: 00000 }
00461:   Return
00462: LoadVar(00000)
00463: LoadFn { code: 00000, fvars: 00000 }
00464: AppArgToFn
00465:   Return
00466: LoadFn { code: 00462, fvars: 00000 }
00467:   Return
00468: LoadVar(00000)
00469:   Return
00470: LoadFn { code: 00468, fvars: 00000 }
00471:   Return
00472: LoadVar(00002)
00473: LoadVar(00001)
00474: LoadVar(00000)
00475: Unpack
00476: AppArgToFn
00477: AppArgToFn
00478:   Return
00479: LoadFn { code: 00472, fvars: 00002 }
00480:   Return
00481: LoadFn { code: 00479, fvars: 00001 }
00482:   Return
00483: LoadVar(00000)
00484:   Return
00485: LoadFn { code: 00483, fvars: 00000 }
00486:   Return
00487: LoadVar(00004)
00488: LoadVar(00003)
00489: LoadVar(00000)
00490: AppFnToArg
00491: AppFnToArg
00492: LoadVar(00001)
00493: AppFnToArg
00494:   Return
00495: LoadFn { code: 00487, fvars: 00004 }
00496:   Return
00497: PushString("")
00498: LoadVar(00001)
00499: AppFnToArg
00500: LoadVar(00009)
00501: LoadVar(00002)
00502: AppFnToArg
00503: AppFnToArg
00504:   Return
00505: LoadFn { code: 00481, fvars: 00000 }
00506: LoadVar(00000)
00507: AppFnToArg
00508: LoadFn { code: 00485, fvars: 00000 }
00509: PushString("")
00510: PushString(""xs"")
00511: AppFnToArg
00512: PushString(""x"")
00513: AppFnToArg
00514: AppFnToArg
00515: LoadFn { code: 00495, fvars: 00003 }
00516: AppFnToArg
00517: AppFnToArg
00518: LoadFn { code: 00497, fvars: 00009 }
00519: AppFnToArg
00520:   Return
00521: LoadFn { code: 00505, fvars: 00008 }
00522:   Return
00523: LoadFn { code: 00470, fvars: 00000 }
00524: PushString("")
00525: PushString(""acc"")
00526: AppFnToArg
00527: PushString(""compound"")
00528: AppFnToArg
00529: AppFnToArg
00530: LoadFn { code: 00521, fvars: 00007 }
00531: AppFnToArg
00532:   Return
00533: LoadVar(00000)
00534: LoadVar(00001)
00535: AppFnToArg
00536:   Return
00537: LoadFn { code: 00533, fvars: 00001 }
00538:   Return
00539: LoadFn { code: 00537, fvars: 00000 }
00540:   Return
00541: LoadVar(00000)
00542: LoadFn { code: 00000, fvars: 00000 }
00543: AppArgToFn
00544:   Return
00545: LoadFn { code: 00541, fvars: 00000 }
00546:   Return
00547: LoadVar(00000)
00548:   Return
00549: LoadFn { code: 00547, fvars: 00000 }
00550:   Return
00551: LoadVar(00002)
00552: LoadVar(00001)
00553: LoadVar(00000)
00554: Unpack
00555: AppArgToFn
00556: AppArgToFn
00557:   Return
00558: LoadFn { code: 00551, fvars: 00002 }
00559:   Return
00560: LoadFn { code: 00558, fvars: 00001 }
00561:   Return
00562: LoadVar(00000)
00563:   Return
00564: LoadFn { code: 00562, fvars: 00000 }
00565:   Return
00566: LoadVar(00002)
00567: LoadVar(00001)
00568: LoadVar(00000)
00569: Unpack
00570: AppArgToFn
00571: AppArgToFn
00572:   Return
00573: LoadFn { code: 00566, fvars: 00002 }
00574:   Return
00575: LoadFn { code: 00573, fvars: 00001 }
00576:   Return
00577: LoadVar(00000)
00578:   Return
00579: LoadFn { code: 00577, fvars: 00000 }
00580:   Return
00581: LoadVar(00003)
00582: LoadVar(00002)
00583: LoadVar(00001)
00584: LoadVar(00000)
00585: Cmp
00586: AppArgToFn
00587:   Return
00588: LoadFn { code: 00581, fvars: 00003 }
00589:   Return
00590: LoadFn { code: 00588, fvars: 00002 }
00591:   Return
00592: LoadFn { code: 00590, fvars: 00001 }
00593:   Return
00594: LoadVar(00007)
00595: LoadVar(00004)
00596: AppFnToArg
00597: LoadVar(00002)
00598: AppFnToArg
00599:   Return
00600: PushString("False")
00601:   Return
00602: LoadFn { code: 00592, fvars: 00000 }
00603: LoadVar(00006)
00604: LoadVar(00002)
00605: AppFnToArg
00606: LoadVar(00000)
00607: AppFnToArg
00608: AppFnToArg
00609: PushString("True")
00610: AppFnToArg
00611: LoadFn { code: 00594, fvars: 00007 }
00612: AppFnToArg
00613: LoadFn { code: 00600, fvars: 00000 }
00614: AppFnToArg
00615:   Return
00616: LoadFn { code: 00602, fvars: 00006 }
00617:   Return
00618: PushString("False")
00619:   Return
00620: LoadFn { code: 00575, fvars: 00000 }
00621: LoadVar(00002)
00622: AppFnToArg
00623: LoadFn { code: 00579, fvars: 00000 }
00624: PushString("")
00625: PushString(""ys"")
00626: AppFnToArg
00627: PushString(""y"")
00628: AppFnToArg
00629: AppFnToArg
00630: LoadFn { code: 00616, fvars: 00005 }
00631: AppFnToArg
00632: AppFnToArg
00633: LoadFn { code: 00618, fvars: 00000 }
00634: AppFnToArg
00635:   Return
00636: LoadFn { code: 00620, fvars: 00004 }
00637:   Return
00638: LoadVar(00003)
00639: LoadVar(00002)
00640: LoadVar(00001)
00641: LoadVar(00000)
00642: Cmp
00643: AppArgToFn
00644:   Return
00645: LoadFn { code: 00638, fvars: 00003 }
00646:   Return
00647: LoadFn { code: 00645, fvars: 00002 }
00648:   Return
00649: LoadFn { code: 00647, fvars: 00001 }
00650:   Return
00651: PushString("True")
00652:   Return
00653: PushString("False")
00654:   Return
00655: LoadFn { code: 00649, fvars: 00000 }
00656: LoadVar(00002)
00657: AppFnToArg
00658: LoadVar(00001)
00659: AppFnToArg
00660: LoadFn { code: 00651, fvars: 00000 }
00661: AppFnToArg
00662: LoadFn { code: 00653, fvars: 00000 }
00663: AppFnToArg
00664:   Return
00665: LoadFn { code: 00560, fvars: 00000 }
00666: LoadVar(00001)
00667: AppFnToArg
00668: LoadFn { code: 00564, fvars: 00000 }
00669: PushString("")
00670: PushString(""xs"")
00671: AppFnToArg
00672: PushString(""x"")
00673: AppFnToArg
00674: AppFnToArg
00675: LoadFn { code: 00636, fvars: 00003 }
00676: AppFnToArg
00677: AppFnToArg
00678: LoadFn { code: 00655, fvars: 00002 }
00679: AppFnToArg
00680:   Return
00681: LoadFn { code: 00665, fvars: 00002 }
00682:   Return
00683: LoadFn { code: 00549, fvars: 00000 }
00684: PushString("")
00685: PushString(""a"")
00686: AppFnToArg
00687: PushString(""b"")
00688: AppFnToArg
00689: AppFnToArg
00690: LoadFn { code: 00681, fvars: 00001 }
00691: AppFnToArg
00692:   Return
00693: LoadVar(00000)
00694: LoadVar(00001)
00695: AppFnToArg
00696:   Return
00697: LoadFn { code: 00693, fvars: 00001 }
00698:   Return
00699: LoadFn { code: 00697, fvars: 00000 }
00700:   Return
00701: LoadVar(00000)
00702:   Return
00703: LoadFn { code: 00701, fvars: 00000 }
00704:   Return
00705: LoadVar(00002)
00706: LoadVar(00001)
00707: LoadVar(00000)
00708: Unpack
00709: AppArgToFn
00710: AppArgToFn
00711:   Return
00712: LoadFn { code: 00705, fvars: 00002 }
00713:   Return
00714: LoadFn { code: 00712, fvars: 00001 }
00715:   Return
00716: LoadVar(00000)
00717:   Return
00718: LoadFn { code: 00716, fvars: 00000 }
00719:   Return
00720: LoadVar(00000)
00721:   Return
00722: LoadFn { code: 00720, fvars: 00000 }
00723:   Return
00724: LoadVar(00001)
00725:   Return
00726: LoadFn { code: 00714, fvars: 00000 }
00727: LoadVar(00000)
00728: AppFnToArg
00729: LoadFn { code: 00718, fvars: 00000 }
00730: PushString("")
00731: PushString(""_"")
00732: AppFnToArg
00733: PushString(""x"")
00734: AppFnToArg
00735: AppFnToArg
00736: LoadFn { code: 00722, fvars: 00000 }
00737: AppFnToArg
00738: AppFnToArg
00739: LoadFn { code: 00724, fvars: 00001 }
00740: AppFnToArg
00741:   Return
00742: LoadVar(00000)
00743: LoadVar(00001)
00744: AppFnToArg
00745:   Return
00746: LoadFn { code: 00742, fvars: 00001 }
00747:   Return
00748: LoadFn { code: 00746, fvars: 00000 }
00749:   Return
00750: LoadVar(00000)
00751:   Return
00752: LoadFn { code: 00750, fvars: 00000 }
00753:   Return
00754: LoadVar(00002)
00755: LoadVar(00001)
00756: LoadVar(00000)
00757: Unpack
00758: AppArgToFn
00759: AppArgToFn
00760:   Return
00761: LoadFn { code: 00754, fvars: 00002 }
00762:   Return
00763: LoadFn { code: 00761, fvars: 00001 }
00764:   Return
00765: LoadVar(00000)
00766:   Return
00767: LoadFn { code: 00765, fvars: 00000 }
00768:   Return
00769: LoadVar(00003)
00770: LoadVar(00001)
00771: AppFnToArg
00772:   Return
00773: LoadFn { code: 00769, fvars: 00003 }
00774:   Return
00775: LoadVar(00001)
00776:   Return
00777: LoadFn { code: 00763, fvars: 00000 }
00778: LoadVar(00000)
00779: AppFnToArg
00780: LoadFn { code: 00767, fvars: 00000 }
00781: PushString("")
00782: PushString(""xs"")
00783: AppFnToArg
00784: PushString(""_"")
00785: AppFnToArg
00786: AppFnToArg
00787: LoadFn { code: 00773, fvars: 00002 }
00788: AppFnToArg
00789: AppFnToArg
00790: LoadFn { code: 00775, fvars: 00001 }
00791: AppFnToArg
00792:   Return
00793: LoadVar(00000)
00794: LoadVar(00001)
00795: AppFnToArg
00796:   Return
00797: LoadFn { code: 00793, fvars: 00001 }
00798:   Return
00799: LoadFn { code: 00797, fvars: 00000 }
00800:   Return
00801: LoadVar(00000)
00802:   Return
00803: LoadFn { code: 00801, fvars: 00000 }
00804:   Return
00805: LoadVar(00000)
00806: LoadVar(00001)
00807: AppFnToArg
00808:   Return
00809: LoadFn { code: 00805, fvars: 00001 }
00810:   Return
00811: LoadFn { code: 00809, fvars: 00000 }
00812:   Return
00813: LoadVar(00000)
00814: LoadVar(00001)
00815: AppFnToArg
00816:   Return
00817: LoadFn { code: 00813, fvars: 00001 }
00818:   Return
00819: LoadFn { code: 00817, fvars: 00000 }
00820:   Return
00821: LoadVar(00004)
00822: LoadVar(00003)
00823: AppFnToArg
00824:   Return
00825: LoadVar(00000)
00826:   Return
00827: LoadFn { code: 00825, fvars: 00000 }
00828:   Return
00829: LoadVar(00000)
00830: LoadVar(00001)
00831: AppFnToArg
00832:   Return
00833: LoadFn { code: 00829, fvars: 00001 }
00834:   Return
00835: LoadFn { code: 00833, fvars: 00000 }
00836:   Return
00837: LoadVar(00000)
00838: LoadVar(00001)
00839: AppFnToArg
00840:   Return
00841: LoadFn { code: 00837, fvars: 00001 }
00842:   Return
00843: LoadFn { code: 00841, fvars: 00000 }
00844:   Return
00845: LoadVar(00003)
00846: LoadVar(00002)
00847: LoadVar(00001)
00848: LoadVar(00000)
00849: Cmp
00850: AppArgToFn
00851:   Return
00852: LoadFn { code: 00845, fvars: 00003 }
00853:   Return
00854: LoadFn { code: 00852, fvars: 00002 }
00855:   Return
00856: LoadFn { code: 00854, fvars: 00001 }
00857:   Return
00858: LoadVar(00003)
00859: LoadVar(00002)
00860: LoadVar(00001)
00861: LoadVar(00000)
00862: Cmp
00863: AppArgToFn
00864:   Return
00865: LoadFn { code: 00858, fvars: 00003 }
00866:   Return
00867: LoadFn { code: 00865, fvars: 00002 }
00868:   Return
00869: LoadFn { code: 00867, fvars: 00001 }
00870:   Return
00871: PushEffect("no-match")
00872: PushString("")
00873: PushString("")
00874: LoadVar(00007)
00875: AppFnToArg
00876: LoadVar(00006)
00877: AppFnToArg
00878: AppFnToArg
00879: PushString("")
00880: LoadVar(00003)
00881: AppFnToArg
00882: LoadVar(00002)
00883: AppFnToArg
00884: AppFnToArg
00885: AppFnToArg
00886:   Return
00887: PushString("")
00888:   Return
00889: LoadFn { code: 00869, fvars: 00000 }
00890: LoadVar(00011)
00891: LoadVar(00005)
00892: AppFnToArg
00893: LoadVar(00001)
00894: AppFnToArg
00895: AppFnToArg
00896: PushString("False")
00897: AppFnToArg
00898: LoadFn { code: 00871, fvars: 00007 }
00899: AppFnToArg
00900: LoadFn { code: 00887, fvars: 00000 }
00901: AppFnToArg
00902:   Return
00903: PushString("")
00904:   Return
00905: LoadFn { code: 00856, fvars: 00000 }
00906: LoadVar(00005)
00907: AppFnToArg
00908: LoadVar(00001)
00909: AppFnToArg
00910: LoadFn { code: 00889, fvars: 00011 }
00911: AppFnToArg
00912: LoadFn { code: 00903, fvars: 00000 }
00913: AppFnToArg
00914:   Return
00915: LoadFn { code: 00843, fvars: 00000 }
00916: PushString(""yval"")
00917: AppFnToArg
00918: LoadVar(00008)
00919: LoadVar(00001)
00920: AppFnToArg
00921: AppFnToArg
00922: LoadFn { code: 00905, fvars: 00010 }
00923: AppFnToArg
00924:   Return
00925: LoadFn { code: 00835, fvars: 00000 }
00926: PushString(""yvar"")
00927: AppFnToArg
00928: LoadVar(00006)
00929: LoadVar(00000)
00930: AppFnToArg
00931: AppFnToArg
00932: LoadFn { code: 00915, fvars: 00009 }
00933: AppFnToArg
00934:   Return
00935: LoadFn { code: 00925, fvars: 00008 }
00936:   Return
00937: LoadFn { code: 00821, fvars: 00004 }
00938: LoadVar(00014)
00939: LoadFn { code: 00827, fvars: 00000 }
00940: PushString("")
00941: PushString(""_"")
00942: AppFnToArg
00943: PushString(""pair"")
00944: AppFnToArg
00945: AppFnToArg
00946: LoadFn { code: 00935, fvars: 00007 }
00947: AppFnToArg
00948: AppFnToArg
00949: PushString("")
00950: AppFnToArg
00951: LoadVar(00003)
00952: AppFnToArg
00953: AppFnToArg
00954:   Return
00955: LoadFn { code: 00819, fvars: 00000 }
00956: PushString(""xval"")
00957: AppFnToArg
00958: LoadVar(00004)
00959: LoadVar(00001)
00960: AppFnToArg
00961: AppFnToArg
00962: LoadFn { code: 00937, fvars: 00014 }
00963: AppFnToArg
00964:   Return
00965: LoadFn { code: 00811, fvars: 00000 }
00966: PushString(""xvar"")
00967: AppFnToArg
00968: LoadVar(00002)
00969: LoadVar(00000)
00970: AppFnToArg
00971: AppFnToArg
00972: LoadFn { code: 00955, fvars: 00013 }
00973: AppFnToArg
00974:   Return
00975: LoadFn { code: 00965, fvars: 00012 }
00976:   Return
00977: LoadVar(00000)
00978: LoadVar(00001)
00979: AppFnToArg
00980:   Return
00981: LoadFn { code: 00977, fvars: 00001 }
00982:   Return
00983: LoadFn { code: 00981, fvars: 00000 }
00984:   Return
00985: LoadVar(00000)
00986: LoadFn { code: 00000, fvars: 00000 }
00987: AppArgToFn
00988:   Return
00989: LoadFn { code: 00985, fvars: 00000 }
00990:   Return
00991: LoadVar(00000)
00992:   Return
00993: LoadFn { code: 00991, fvars: 00000 }
00994:   Return
00995: LoadVar(00002)
00996: LoadVar(00001)
00997: LoadVar(00000)
00998: Unpack
00999: AppArgToFn
01000: AppArgToFn
01001:   Return
01002: LoadFn { code: 00995, fvars: 00002 }
01003:   Return
01004: LoadFn { code: 01002, fvars: 00001 }
01005:   Return
01006: LoadVar(00000)
01007:   Return
01008: LoadFn { code: 01006, fvars: 00000 }
01009:   Return
01010: LoadVar(00003)
01011: LoadVar(00002)
01012: LoadVar(00001)
01013: LoadVar(00000)
01014: Cmp
01015: AppArgToFn
01016:   Return
01017: LoadFn { code: 01010, fvars: 00003 }
01018:   Return
01019: LoadFn { code: 01017, fvars: 00002 }
01020:   Return
01021: LoadFn { code: 01019, fvars: 00001 }
01022:   Return
01023: PushString("")
01024: PushString("")
01025: LoadVar(00001)
01026: AppFnToArg
01027: LoadVar(00003)
01028: AppFnToArg
01029: AppFnToArg
01030:   Return
01031: LoadVar(00003)
01032: LoadVar(00002)
01033: LoadVar(00001)
01034: LoadVar(00000)
01035: Cmp
01036: AppArgToFn
01037:   Return
01038: LoadFn { code: 01031, fvars: 00003 }
01039:   Return
01040: LoadFn { code: 01038, fvars: 00002 }
01041:   Return
01042: LoadFn { code: 01040, fvars: 00001 }
01043:   Return
01044: LoadVar(00000)
01045: LoadVar(00001)
01046: AppFnToArg
01047:   Return
01048: LoadFn { code: 01044, fvars: 00001 }
01049:   Return
01050: LoadFn { code: 01048, fvars: 00000 }
01051:   Return
01052: LoadVar(00003)
01053: LoadVar(00002)
01054: LoadVar(00001)
01055: LoadVar(00000)
01056: Cmp
01057: AppArgToFn
01058:   Return
01059: LoadFn { code: 01052, fvars: 00003 }
01060:   Return
01061: LoadFn { code: 01059, fvars: 00002 }
01062:   Return
01063: LoadFn { code: 01061, fvars: 00001 }
01064:   Return
01065: PushEffect("no-match")
01066: PushString("")
01067: LoadVar(00005)
01068: LoadVar(00004)
01069: AppFnToArg
01070: AppFnToArg
01071: LoadVar(00006)
01072: AppFnToArg
01073: AppFnToArg
01074:   Return
01075: LoadVar(00019)
01076: LoadVar(00009)
01077: LoadVar(00016)
01078: LoadVar(00019)
01079: LoadVar(00017)
01080: LoadVar(00018)
01081: LoadVar(00008)
01082: AppFnToArg
01083: AppFnToArg
01084: LoadVar(00001)
01085: AppFnToArg
01086: AppFnToArg
01087: AppFnToArg
01088: AppFnToArg
01089: AppFnToArg
01090:   Return
01091: LoadFn { code: 01063, fvars: 00000 }
01092: LoadVar(00000)
01093: AppFnToArg
01094: PushString("")
01095: AppFnToArg
01096: LoadFn { code: 01065, fvars: 00006 }
01097: AppFnToArg
01098: LoadFn { code: 01075, fvars: 00019 }
01099: AppFnToArg
01100:   Return
01101: LoadFn { code: 01050, fvars: 00000 }
01102: PushString(""zipped"")
01103: AppFnToArg
01104: LoadVar(00013)
01105: PushString("")
01106: AppFnToArg
01107: LoadVar(00002)
01108: AppFnToArg
01109: LoadVar(00004)
01110: AppFnToArg
01111: AppFnToArg
01112: LoadFn { code: 01091, fvars: 00018 }
01113: AppFnToArg
01114:   Return
01115: LoadVar(00002)
01116: LoadVar(00001)
01117: LoadVar(00000)
01118: Unpack
01119: AppArgToFn
01120: AppArgToFn
01121:   Return
01122: LoadFn { code: 01115, fvars: 00002 }
01123:   Return
01124: LoadFn { code: 01122, fvars: 00001 }
01125:   Return
01126: LoadVar(00000)
01127:   Return
01128: LoadFn { code: 01126, fvars: 00000 }
01129:   Return
01130: LoadVar(00003)
01131: LoadVar(00002)
01132: LoadVar(00001)
01133: LoadVar(00000)
01134: Cmp
01135: AppArgToFn
01136:   Return
01137: LoadFn { code: 01130, fvars: 00003 }
01138:   Return
01139: LoadFn { code: 01137, fvars: 00002 }
01140:   Return
01141: LoadFn { code: 01139, fvars: 00001 }
01142:   Return
01143: LoadVar(00000)
01144: LoadVar(00001)
01145: AppFnToArg
01146:   Return
01147: LoadFn { code: 01143, fvars: 00001 }
01148:   Return
01149: LoadFn { code: 01147, fvars: 00000 }
01150:   Return
01151: LoadVar(00000)
01152: LoadVar(00001)
01153: AppFnToArg
01154:   Return
01155: LoadFn { code: 01151, fvars: 00001 }
01156:   Return
01157: LoadFn { code: 01155, fvars: 00000 }
01158:   Return
01159: LoadVar(00000)
01160: LoadVar(00001)
01161: AppFnToArg
01162:   Return
01163: LoadFn { code: 01159, fvars: 00001 }
01164:   Return
01165: LoadFn { code: 01163, fvars: 00000 }
01166:   Return
01167: LoadVar(00000)
01168: LoadVar(00001)
01169: AppFnToArg
01170:   Return
01171: LoadFn { code: 01167, fvars: 00001 }
01172:   Return
01173: LoadFn { code: 01171, fvars: 00000 }
01174:   Return
01175: LoadVar(00003)
01176: LoadVar(00002)
01177: LoadVar(00001)
01178: LoadVar(00000)
01179: Cmp
01180: AppArgToFn
01181:   Return
01182: LoadFn { code: 01175, fvars: 00003 }
01183:   Return
01184: LoadFn { code: 01182, fvars: 00002 }
01185:   Return
01186: LoadFn { code: 01184, fvars: 00001 }
01187:   Return
01188: PushEffect("no-match")
01189: PushString("")
01190: LoadVar(00007)
01191: LoadVar(00006)
01192: AppFnToArg
01193: LoadVar(00010)
01194: AppFnToArg
01195: AppFnToArg
01196: LoadVar(00012)
01197: AppFnToArg
01198: AppFnToArg
01199:   Return
01200: LoadVar(00025)
01201: LoadVar(00015)
01202: LoadVar(00022)
01203: LoadVar(00025)
01204: LoadVar(00023)
01205: LoadVar(00024)
01206: LoadVar(00014)
01207: AppFnToArg
01208: AppFnToArg
01209: LoadVar(00001)
01210: PushString("")
01211: LoadVar(00006)
01212: AppFnToArg
01213: LoadVar(00003)
01214: AppFnToArg
01215: AppFnToArg
01216: AppFnToArg
01217: AppFnToArg
01218: AppFnToArg
01219: AppFnToArg
01220: AppFnToArg
01221:   Return
01222: LoadFn { code: 01186, fvars: 00000 }
01223: LoadVar(00000)
01224: AppFnToArg
01225: PushString("")
01226: AppFnToArg
01227: LoadFn { code: 01188, fvars: 00012 }
01228: AppFnToArg
01229: LoadFn { code: 01200, fvars: 00025 }
01230: AppFnToArg
01231:   Return
01232: LoadFn { code: 01173, fvars: 00000 }
01233: PushString(""zipped"")
01234: AppFnToArg
01235: LoadVar(00019)
01236: PushString("")
01237: AppFnToArg
01238: LoadVar(00008)
01239: AppFnToArg
01240: LoadVar(00000)
01241: AppFnToArg
01242: AppFnToArg
01243: LoadFn { code: 01222, fvars: 00024 }
01244: AppFnToArg
01245:   Return
01246: LoadFn { code: 01165, fvars: 00000 }
01247: PushString(""vargs"")
01248: AppFnToArg
01249: LoadVar(00014)
01250: LoadVar(00001)
01251: AppFnToArg
01252: AppFnToArg
01253: LoadFn { code: 01232, fvars: 00023 }
01254: AppFnToArg
01255:   Return
01256: LoadFn { code: 01157, fvars: 00000 }
01257: PushString(""vf"")
01258: AppFnToArg
01259: LoadVar(00012)
01260: LoadVar(00000)
01261: AppFnToArg
01262: AppFnToArg
01263: LoadFn { code: 01246, fvars: 00022 }
01264: AppFnToArg
01265:   Return
01266: LoadFn { code: 01149, fvars: 00000 }
01267: PushString(""v"")
01268: AppFnToArg
01269: LoadVar(00014)
01270: LoadVar(00007)
01271: AppFnToArg
01272: AppFnToArg
01273: LoadFn { code: 01256, fvars: 00021 }
01274: AppFnToArg
01275:   Return
01276: PushEffect("invalid")
01277: LoadVar(00002)
01278: LoadVar(00001)
01279: AppFnToArg
01280: LoadVar(00005)
01281: AppFnToArg
01282: AppFnToArg
01283:   Return
01284: LoadFn { code: 01141, fvars: 00000 }
01285: LoadVar(00001)
01286: AppFnToArg
01287: PushString("Compound")
01288: AppFnToArg
01289: LoadFn { code: 01266, fvars: 00020 }
01290: AppFnToArg
01291: LoadFn { code: 01276, fvars: 00005 }
01292: AppFnToArg
01293:   Return
01294: LoadFn { code: 01284, fvars: 00019 }
01295:   Return
01296: LoadVar(00003)
01297: LoadVar(00002)
01298: LoadVar(00001)
01299: LoadVar(00000)
01300: Cmp
01301: AppArgToFn
01302:   Return
01303: LoadFn { code: 01296, fvars: 00003 }
01304:   Return
01305: LoadFn { code: 01303, fvars: 00002 }
01306:   Return
01307: LoadFn { code: 01305, fvars: 00001 }
01308:   Return
01309: PushString("")
01310:   Return
01311: PushEffect("no-match")
01312: PushString("")
01313: LoadVar(00004)
01314: AppFnToArg
01315: LoadVar(00006)
01316: AppFnToArg
01317: AppFnToArg
01318:   Return
01319: LoadFn { code: 01307, fvars: 00000 }
01320: LoadVar(00011)
01321: LoadVar(00003)
01322: AppFnToArg
01323: LoadVar(00005)
01324: AppFnToArg
01325: AppFnToArg
01326: PushString("True")
01327: AppFnToArg
01328: LoadFn { code: 01309, fvars: 00000 }
01329: AppFnToArg
01330: LoadFn { code: 01311, fvars: 00006 }
01331: AppFnToArg
01332:   Return
01333: LoadFn { code: 01124, fvars: 00000 }
01334: LoadVar(00003)
01335: AppFnToArg
01336: LoadFn { code: 01128, fvars: 00000 }
01337: PushString("")
01338: PushString(""type"")
01339: AppFnToArg
01340: PushString(""f"")
01341: AppFnToArg
01342: AppFnToArg
01343: LoadFn { code: 01294, fvars: 00018 }
01344: AppFnToArg
01345: AppFnToArg
01346: LoadFn { code: 01319, fvars: 00011 }
01347: AppFnToArg
01348:   Return
01349: LoadFn { code: 01042, fvars: 00000 }
01350: LoadVar(00002)
01351: AppFnToArg
01352: PushString("List")
01353: AppFnToArg
01354: LoadFn { code: 01101, fvars: 00017 }
01355: AppFnToArg
01356: LoadFn { code: 01333, fvars: 00017 }
01357: AppFnToArg
01358:   Return
01359: LoadFn { code: 01021, fvars: 00000 }
01360: LoadVar(00001)
01361: AppFnToArg
01362: PushString("Binding")
01363: AppFnToArg
01364: LoadFn { code: 01023, fvars: 00003 }
01365: AppFnToArg
01366: LoadFn { code: 01349, fvars: 00016 }
01367: AppFnToArg
01368:   Return
01369: LoadFn { code: 01359, fvars: 00015 }
01370:   Return
01371: PushEffect("invalid")
01372: LoadVar(00002)
01373: AppFnToArg
01374:   Return
01375: LoadFn { code: 01004, fvars: 00000 }
01376: LoadVar(00001)
01377: AppFnToArg
01378: LoadFn { code: 01008, fvars: 00000 }
01379: PushString("")
01380: PushString(""type"")
01381: AppFnToArg
01382: PushString(""pattern"")
01383: AppFnToArg
01384: AppFnToArg
01385: LoadFn { code: 01369, fvars: 00014 }
01386: AppFnToArg
01387: AppFnToArg
01388: LoadFn { code: 01371, fvars: 00002 }
01389: AppFnToArg
01390:   Return
01391: LoadFn { code: 01375, fvars: 00013 }
01392:   Return
01393: LoadFn { code: 00993, fvars: 00000 }
01394: PushString("")
01395: PushString(""pattern"")
01396: AppFnToArg
01397: PushString(""value"")
01398: AppFnToArg
01399: AppFnToArg
01400: LoadFn { code: 01391, fvars: 00012 }
01401: AppFnToArg
01402:   Return
01403: LoadVar(00000)
01404: LoadVar(00001)
01405: AppFnToArg
01406:   Return
01407: LoadFn { code: 01403, fvars: 00001 }
01408:   Return
01409: LoadFn { code: 01407, fvars: 00000 }
01410:   Return
01411: LoadVar(00000)
01412:   Return
01413: LoadFn { code: 01411, fvars: 00000 }
01414:   Return
01415: LoadVar(00002)
01416: LoadVar(00001)
01417: LoadVar(00000)
01418: Try
01419: AppArgToFn
01420: Unwind
01421: AppArgToFn
01422: AppArgToFn
01423:   Return
01424: LoadFn { code: 01415, fvars: 00002 }
01425:   Return
01426: LoadFn { code: 01424, fvars: 00001 }
01427:   Return
01428: LoadVar(00000)
01429: LoadVar(00001)
01430: AppFnToArg
01431:   Return
01432: LoadFn { code: 01428, fvars: 00001 }
01433:   Return
01434: LoadFn { code: 01432, fvars: 00000 }
01435:   Return
01436: LoadVar(00003)
01437: LoadVar(00002)
01438: LoadVar(00001)
01439: LoadVar(00000)
01440: Cmp
01441: AppArgToFn
01442:   Return
01443: LoadFn { code: 01436, fvars: 00003 }
01444:   Return
01445: LoadFn { code: 01443, fvars: 00002 }
01446:   Return
01447: LoadFn { code: 01445, fvars: 00001 }
01448:   Return
01449: LoadVar(00004)
01450: PushString("")
01451: AppFnToArg
01452:   Return
01453: LoadVar(00016)
01454: LoadVar(00004)
01455: AppFnToArg
01456: LoadVar(00001)
01457: AppFnToArg
01458:   Return
01459: LoadFn { code: 01447, fvars: 00000 }
01460: LoadVar(00000)
01461: AppFnToArg
01462: PushString("")
01463: AppFnToArg
01464: LoadFn { code: 01449, fvars: 00004 }
01465: AppFnToArg
01466: LoadFn { code: 01453, fvars: 00016 }
01467: AppFnToArg
01468:   Return
01469: LoadFn { code: 01434, fvars: 00000 }
01470: PushString(""args"")
01471: AppFnToArg
01472: LoadVar(00013)
01473: LoadVar(00007)
01474: AppFnToArg
01475: LoadVar(00004)
01476: LoadVar(00003)
01477: AppFnToArg
01478: LoadVar(00001)
01479: AppFnToArg
01480: AppFnToArg
01481: AppFnToArg
01482: LoadFn { code: 01459, fvars: 00015 }
01483: AppFnToArg
01484:   Return
01485: LoadVar(00000)
01486:   Return
01487: LoadFn { code: 01485, fvars: 00000 }
01488:   Return
01489: PushEffect("no-match")
01490: LoadVar(00000)
01491: AppFnToArg
01492:   Return
01493: LoadFn { code: 01489, fvars: 00000 }
01494:   Return
01495: LoadFn { code: 01426, fvars: 00000 }
01496: LoadFn { code: 01469, fvars: 00014 }
01497: AppFnToArg
01498: PushEffect("no-match")
01499: AppFnToArg
01500: LoadFn { code: 01487, fvars: 00000 }
01501: PushString("")
01502: PushString(""_"")
01503: AppFnToArg
01504: PushString(""arg"")
01505: AppFnToArg
01506: AppFnToArg
01507: LoadFn { code: 01493, fvars: 00000 }
01508: AppFnToArg
01509: AppFnToArg
01510:   Return
01511: LoadFn { code: 01495, fvars: 00013 }
01512:   Return
01513: LoadFn { code: 01511, fvars: 00012 }
01514:   Return
01515: LoadVar(00002)
01516: LoadVar(00001)
01517: LoadVar(00000)
01518: Try
01519: AppArgToFn
01520: Unwind
01521: AppArgToFn
01522: AppArgToFn
01523:   Return
01524: LoadFn { code: 01515, fvars: 00002 }
01525:   Return
01526: LoadFn { code: 01524, fvars: 00001 }
01527:   Return
01528: PushString("Bar")
01529:   Return
01530: LoadVar(00000)
01531:   Return
01532: PushString("Bar")
01533:   Return
01534: PushString("Foo")
01535:   Return
01536: LoadVar(00000)
01537:   Return
01538: LoadFn { code: 01536, fvars: 00000 }
01539:   Return
01540: LoadVar(00000)
01541:   Return
01542: LoadVar(00000)
01543:   Return
01544: LoadFn { code: 01542, fvars: 00000 }
01545:   Return
01546: LoadVar(00001)
01547:   Return
01548: LoadFn { code: 01546, fvars: 00001 }
01549:   Return
01550: LoadFn { code: 01548, fvars: 00000 }
01551:   Return
01552: LoadVar(00000)
01553:   Return
01554: LoadFn { code: 01552, fvars: 00000 }
01555:   Return
01556: LoadVar(00000)
01557:   Return
01558: LoadFn { code: 01556, fvars: 00000 }
01559:   Return
01560: PushString("")
01561: LoadVar(00001)
01562: PushString("Value")
01563: PushString("Foo")
01564: AppFnToArg
01565: AppFnToArg
01566: LoadFn { code: 01528, fvars: 00000 }
01567: AppFnToArg
01568: PushString("Foo")
01569: AppFnToArg
01570: AppFnToArg
01571: LoadVar(00001)
01572: PushString("Binding")
01573: PushString(""x"")
01574: AppFnToArg
01575: AppFnToArg
01576: LoadFn { code: 01530, fvars: 00000 }
01577: AppFnToArg
01578: PushString("Foo")
01579: AppFnToArg
01580: AppFnToArg
01581: LoadVar(00001)
01582: PushString("Binding")
01583: PushString(""x"")
01584: AppFnToArg
01585: AppFnToArg
01586: LoadFn { code: 01532, fvars: 00000 }
01587: AppFnToArg
01588: PushString("Foo")
01589: AppFnToArg
01590: AppFnToArg
01591: LoadVar(00001)
01592: PushString("Value")
01593: PushString("Pair")
01594: PushString("Foo")
01595: AppFnToArg
01596: PushString("Bar")
01597: AppFnToArg
01598: AppFnToArg
01599: AppFnToArg
01600: LoadFn { code: 01534, fvars: 00000 }
01601: AppFnToArg
01602: PushString("Pair")
01603: PushString("Foo")
01604: AppFnToArg
01605: PushString("Bar")
01606: AppFnToArg
01607: AppFnToArg
01608: AppFnToArg
01609: LoadVar(00001)
01610: PushString("Compound")
01611: PushString("Value")
01612: PushString("Pair")
01613: AppFnToArg
01614: AppFnToArg
01615: PushString("")
01616: PushString("Binding")
01617: PushString(""x"")
01618: AppFnToArg
01619: AppFnToArg
01620: PushString("Binding")
01621: PushString(""y"")
01622: AppFnToArg
01623: AppFnToArg
01624: AppFnToArg
01625: AppFnToArg
01626: LoadFn { code: 01538, fvars: 00000 }
01627: AppFnToArg
01628: PushString("Pair")
01629: PushString("Foo")
01630: AppFnToArg
01631: PushString("Bar")
01632: AppFnToArg
01633: AppFnToArg
01634: AppFnToArg
01635: LoadVar(00001)
01636: PushString("Compound")
01637: PushString("Value")
01638: PushString("Pair")
01639: AppFnToArg
01640: AppFnToArg
01641: PushString("")
01642: PushString("Binding")
01643: PushString(""x"")
01644: AppFnToArg
01645: AppFnToArg
01646: PushString("Value")
01647: PushString("Bar")
01648: AppFnToArg
01649: AppFnToArg
01650: AppFnToArg
01651: AppFnToArg
01652: LoadFn { code: 01540, fvars: 00000 }
01653: AppFnToArg
01654: PushString("Pair")
01655: PushString("Foo")
01656: AppFnToArg
01657: PushString("Bar")
01658: AppFnToArg
01659: AppFnToArg
01660: AppFnToArg
01661: LoadVar(00001)
01662: PushString("Compound")
01663: PushString("Value")
01664: PushString("Pair")
01665: AppFnToArg
01666: AppFnToArg
01667: PushString("")
01668: PushString("Binding")
01669: PushString(""x"")
01670: AppFnToArg
01671: AppFnToArg
01672: PushString("Binding")
01673: PushString(""x"")
01674: AppFnToArg
01675: AppFnToArg
01676: AppFnToArg
01677: AppFnToArg
01678: LoadFn { code: 01544, fvars: 00000 }
01679: AppFnToArg
01680: PushString("Pair")
01681: PushString("Bar")
01682: AppFnToArg
01683: PushString("Bar")
01684: AppFnToArg
01685: AppFnToArg
01686: AppFnToArg
01687: LoadVar(00001)
01688: PushString("Compound")
01689: PushString("Binding")
01690: PushString(""foo"")
01691: AppFnToArg
01692: AppFnToArg
01693: PushString("")
01694: PushString("Binding")
01695: PushString(""x"")
01696: AppFnToArg
01697: AppFnToArg
01698: PushString("Binding")
01699: PushString(""y"")
01700: AppFnToArg
01701: AppFnToArg
01702: AppFnToArg
01703: AppFnToArg
01704: LoadFn { code: 01550, fvars: 00000 }
01705: AppFnToArg
01706: PushString("Pair")
01707: PushString("Foo")
01708: AppFnToArg
01709: PushString("Bar")
01710: AppFnToArg
01711: AppFnToArg
01712: AppFnToArg
01713: LoadVar(00001)
01714: PushString("List")
01715: PushString("")
01716: PushString("Binding")
01717: PushString(""x"")
01718: AppFnToArg
01719: AppFnToArg
01720: PushString("Binding")
01721: PushString(""y"")
01722: AppFnToArg
01723: AppFnToArg
01724: AppFnToArg
01725: AppFnToArg
01726: LoadFn { code: 01554, fvars: 00000 }
01727: AppFnToArg
01728: PushString("")
01729: PushString("Foo")
01730: AppFnToArg
01731: PushString("Bar")
01732: AppFnToArg
01733: AppFnToArg
01734: AppFnToArg
01735: LoadVar(00001)
01736: PushString("Compound")
01737: PushString("Value")
01738: PushString("Pair")
01739: AppFnToArg
01740: AppFnToArg
01741: PushString("")
01742: PushString("Binding")
01743: PushString(""x"")
01744: AppFnToArg
01745: AppFnToArg
01746: PushString("Binding")
01747: PushString(""x"")
01748: AppFnToArg
01749: AppFnToArg
01750: AppFnToArg
01751: AppFnToArg
01752: LoadFn { code: 01558, fvars: 00000 }
01753: AppFnToArg
01754: PushString("Pair")
01755: PushString("Foo")
01756: AppFnToArg
01757: PushString("Bar")
01758: AppFnToArg
01759: AppFnToArg
01760: AppFnToArg
01761:   Return
01762: LoadVar(00000)
01763:   Return
01764: LoadFn { code: 01762, fvars: 00000 }
01765:   Return
01766: LoadVar(00001)
01767: PushString("NoMatch")
01768: LoadVar(00000)
01769: AppFnToArg
01770: AppFnToArg
01771:   Return
01772: LoadFn { code: 01766, fvars: 00001 }
01773:   Return
01774: LoadFn { code: 01526, fvars: 00000 }
01775: LoadFn { code: 01560, fvars: 00001 }
01776: AppFnToArg
01777: PushEffect("no-match")
01778: AppFnToArg
01779: LoadFn { code: 01764, fvars: 00000 }
01780: PushString("")
01781: PushString(""r"")
01782: AppFnToArg
01783: PushString(""arg"")
01784: AppFnToArg
01785: AppFnToArg
01786: LoadFn { code: 01772, fvars: 00000 }
01787: AppFnToArg
01788: AppFnToArg
01789:   Return
01790: LoadFn { code: 01409, fvars: 00000 }
01791: PushString(""->"")
01792: AppFnToArg
01793: LoadFn { code: 01413, fvars: 00000 }
01794: PushString("")
01795: PushString(""pattern"")
01796: AppFnToArg
01797: PushString(""body"")
01798: AppFnToArg
01799: PushString(""value"")
01800: AppFnToArg
01801: AppFnToArg
01802: LoadFn { code: 01513, fvars: 00011 }
01803: AppFnToArg
01804: AppFnToArg
01805: LoadFn { code: 01774, fvars: 00000 }
01806: AppFnToArg
01807:   Return
01808: LoadFn { code: 00983, fvars: 00000 }
01809: PushString(""unify"")
01810: AppFnToArg
01811: LoadFn { code: 00989, fvars: 00000 }
01812: PushString(""unify"")
01813: AppFnToArg
01814: LoadFn { code: 01393, fvars: 00011 }
01815: AppFnToArg
01816: AppFnToArg
01817: LoadFn { code: 01790, fvars: 00010 }
01818: AppFnToArg
01819:   Return
01820: LoadFn { code: 00799, fvars: 00000 }
01821: PushString(""join"")
01822: AppFnToArg
01823: LoadVar(00010)
01824: LoadFn { code: 00803, fvars: 00000 }
01825: PushString("")
01826: PushString(""acc"")
01827: AppFnToArg
01828: PushString(""pair"")
01829: AppFnToArg
01830: AppFnToArg
01831: LoadFn { code: 00975, fvars: 00011 }
01832: AppFnToArg
01833: AppFnToArg
01834: PushString("")
01835: AppFnToArg
01836: AppFnToArg
01837: LoadFn { code: 01808, fvars: 00010 }
01838: AppFnToArg
01839:   Return
01840: LoadFn { code: 00748, fvars: 00000 }
01841: PushString(""first"")
01842: AppFnToArg
01843: LoadFn { code: 00752, fvars: 00000 }
01844: PushString(""xs"")
01845: AppFnToArg
01846: LoadFn { code: 00777, fvars: 00001 }
01847: AppFnToArg
01848: AppFnToArg
01849: LoadFn { code: 01820, fvars: 00010 }
01850: AppFnToArg
01851:   Return
01852: LoadFn { code: 00699, fvars: 00000 }
01853: PushString(""second"")
01854: AppFnToArg
01855: LoadFn { code: 00703, fvars: 00000 }
01856: PushString(""xs"")
01857: AppFnToArg
01858: LoadFn { code: 00726, fvars: 00000 }
01859: AppFnToArg
01860: AppFnToArg
01861: LoadFn { code: 01840, fvars: 00009 }
01862: AppFnToArg
01863:   Return
01864: LoadFn { code: 00539, fvars: 00000 }
01865: PushString(""=="")
01866: AppFnToArg
01867: LoadFn { code: 00545, fvars: 00000 }
01868: PushString(""=="")
01869: AppFnToArg
01870: LoadFn { code: 00683, fvars: 00000 }
01871: AppFnToArg
01872: AppFnToArg
01873: LoadFn { code: 01852, fvars: 00008 }
01874: AppFnToArg
01875:   Return
01876: LoadFn { code: 00460, fvars: 00000 }
01877: PushString(""destructure"")
01878: AppFnToArg
01879: LoadFn { code: 00466, fvars: 00000 }
01880: PushString(""destructure"")
01881: AppFnToArg
01882: LoadFn { code: 00523, fvars: 00006 }
01883: AppFnToArg
01884: PushString("")
01885: AppFnToArg
01886: AppFnToArg
01887: LoadFn { code: 01864, fvars: 00007 }
01888: AppFnToArg
01889:   Return
01890: LoadFn { code: 00436, fvars: 00000 }
01891: PushString(""zip"")
01892: AppFnToArg
01893: LoadFn { code: 00440, fvars: 00000 }
01894: PushString("")
01895: PushString(""xs"")
01896: AppFnToArg
01897: PushString(""ys"")
01898: AppFnToArg
01899: AppFnToArg
01900: LoadFn { code: 00452, fvars: 00005 }
01901: AppFnToArg
01902: AppFnToArg
01903: LoadFn { code: 01876, fvars: 00006 }
01904: AppFnToArg
01905:   Return
01906: LoadFn { code: 00283, fvars: 00000 }
01907: PushString(""zip-reverse"")
01908: AppFnToArg
01909: LoadFn { code: 00289, fvars: 00000 }
01910: PushString(""zip-reverse"")
01911: AppFnToArg
01912: LoadFn { code: 00418, fvars: 00000 }
01913: AppFnToArg
01914: AppFnToArg
01915: LoadFn { code: 01890, fvars: 00005 }
01916: AppFnToArg
01917:   Return
01918: LoadFn { code: 00221, fvars: 00000 }
01919: PushString(""flatten"")
01920: AppFnToArg
01921: LoadFn { code: 00225, fvars: 00000 }
01922: PushString(""xs"")
01923: AppFnToArg
01924: LoadFn { code: 00259, fvars: 00004 }
01925: AppFnToArg
01926: AppFnToArg
01927: LoadFn { code: 01906, fvars: 00004 }
01928: AppFnToArg
01929:   Return
01930: LoadFn { code: 00177, fvars: 00000 }
01931: PushString(""map"")
01932: AppFnToArg
01933: LoadFn { code: 00181, fvars: 00000 }
01934: PushString("")
01935: PushString(""f"")
01936: AppFnToArg
01937: PushString(""xs"")
01938: AppFnToArg
01939: AppFnToArg
01940: LoadFn { code: 00213, fvars: 00003 }
01941: AppFnToArg
01942: AppFnToArg
01943: LoadFn { code: 01918, fvars: 00003 }
01944: AppFnToArg
01945:   Return
01946: LoadFn { code: 00135, fvars: 00000 }
01947: PushString(""apply"")
01948: AppFnToArg
01949: LoadFn { code: 00139, fvars: 00000 }
01950: PushString("")
01951: PushString(""f"")
01952: AppFnToArg
01953: PushString(""xs"")
01954: AppFnToArg
01955: AppFnToArg
01956: LoadFn { code: 00169, fvars: 00002 }
01957: AppFnToArg
01958: AppFnToArg
01959: LoadFn { code: 01930, fvars: 00002 }
01960: AppFnToArg
01961:   Return
01962: LoadFn { code: 00097, fvars: 00000 }
01963: PushString(""reverse"")
01964: AppFnToArg
01965: LoadFn { code: 00101, fvars: 00000 }
01966: PushString(""xs"")
01967: AppFnToArg
01968: LoadFn { code: 00113, fvars: 00001 }
01969: AppFnToArg
01970: AppFnToArg
01971: LoadFn { code: 01946, fvars: 00001 }
01972: AppFnToArg
01973:   Return
01974: LoadFn { code: 00016, fvars: 00000 }
01975: PushString(""fold"")
01976: AppFnToArg
01977: LoadFn { code: 00022, fvars: 00000 }
01978: PushString(""fold"")
01979: AppFnToArg
01980: LoadFn { code: 00079, fvars: 00000 }
01981: AppFnToArg
01982: AppFnToArg
01983: LoadFn { code: 01962, fvars: 00000 }
01984: AppFnToArg
01985:   Return

[Bar, Foo, Bar, Foo, Bar, Foo, Bar, Foo, Bar, NoMatch([["x", Foo], ["x", Bar]])]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:apply = ([:f, :xs] => {
    fold([:f, :x] => { f(x) }, f, reverse(xs))
})
:map = ([:f, :xs] => {
    fold([:xs, :x] => { xs(f(x)) }, [], reverse(xs))
})
:flatten = (:xs => {
    reverse(fold([:acc, :x] => {
        fold([:acc, :x] => { acc(x) }, acc, x)
    }, [], xs))
})
:zip = (:zip ~> { [:acc, :xs, :ys] => {
    __unpack(xs, [:xs, :x] => {
        __unpack(ys, [:ys, :y] => { zip(acc([x, y]), xs, ys) }, {})
    }, {
        __unpack(ys, [:ys, :y] => {}, { acc })
    })
}})([])
:destructure = (:destructure ~> { [:acc, :compound] => {
    __unpack(compound, [:xs, :x] => {
        destructure(acc(x), xs)
    }, {
        [compound, reverse(acc)]
    })
} })([])
:-> = ([:pattern, :body, :value] => {
    :== = (:== ~> { [:a, :b] => {
        __unpack(a, [:xs, :x] => {
            __unpack(b, [:ys, :y] => {
                __compare(x == y, True, { xs == ys }, { False })
            }, {
                False
            })
        }, {
            __compare(a, b, { True }, { False })
        })
    }})
    :second = (:xs => {
        __unpack(xs, [:_, :x] => { x }, { xs })
    })
    :first = (:xs => {
        __unpack(xs, [:xs, :_] => { second(xs) }, { xs })
    })
    :join = fold([:acc, :pair] => {
        :xvar = first(pair)
        :xval = second(pair)
        fold([:_, :pair] => {
            :yvar = first(pair)
            :yval = second(pair)
            __compare(xvar, yvar, {
                __compare(xval == yval, False, {
                    no-match!([[yvar, yval], [xvar, xval]])
                }, {})
            }, {})
        }, [], acc)
        acc(pair)
    }, [])
    :unify = (:unify ~> { [:pattern, :value] => {
        __unpack(pattern, [:type, :pattern] => {
            __compare(type, Binding, {
                [[pattern, value]]
            }, {
                __compare(type, List, {
                    :zipped = zip(pattern, value)
                    __compare(zipped, [], {
                        no-match!([type(pattern), value])
                    }, {
                        join(flatten(map(apply(unify), zipped)))
                    })
                }, {
                    __unpack(type, [:type, :f] => {
                        __compare(type, Compound, {
                            :v = destructure(value)
                            :vf = first(v)
                            :vargs = second(v)
                            :zipped = zip(pattern, vargs)
                            __compare(zipped, [], {
                                no-match!([type(f, pattern), value])
                            }, {
                                join(flatten(map(apply(unify), zipped([f, vf]))))
                            })
                        }, {
                            invalid!(type(f, pattern))
                        })
                    }, {
                        __compare(pattern == value, True, {}, {
                            no-match!([pattern, value])
                        })
                    })
                })
            })
        }, {
            invalid!(pattern)
        })
    }})
    __handle( {
        :args = map(second, unify(pattern, value))
        __compare(args, [], {
            body()
        }, {
            apply(body, args)
        })
    }, no-match!, [:_, :arg] => {
        no-match!(arg)
    })
})
:match = ([:value, :args] => {
    ([["with", :clauses]] -> {
        :result = fold([:result, :clause] => {
            __compare(result, [], {
                __handle({
                    Match(clause(value))
                }, no-match!, [:r, :arg] => {})
            }, {
                result
            })
        }, [], reverse(clauses))
        __unpack(result, [:_, :result] => {
            result
        }, {
            no-match!(value)
        })
    })(args)
})
[
    match (Pair(Foo, Bar)) with: [
        Pair(:x, :x) -> { Twice(x, x) }
        Pair(:x, Foo) -> { SecondIsFoo }
        Pair(:x, :y) -> { y }
        :_ -> { throw!(InvalidPair) }
    ]
    __handle({
        match (Foo) with: [
            Pair(:x, :x) -> { Twice(x, x) }
            Pair(:x, Foo) -> { SecondIsFoo }
            Pair(:x, :y) -> { y }
        ]
    }, no-match!, [:_, :arg] => {
        NoMatch(arg)
    })
]

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :reverse
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :apply
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :f
            :x ]
          { (f
              x) })
        f
        (reverse
          xs)) }))
(=
  :map
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              (f
                x)) })
        [  ]
        (reverse
          xs)) }))
(=
  :flatten
  (=>
    :xs
    { (reverse
        (fold
          (=>
            [ :acc
              :x ]
            { (fold
                (=>
                  [ :acc
                    :x ]
                  { (acc
                      x) })
                acc
                x) })
          [  ]
          xs)) }))
(=
  :zip
  ((~>
    :zip
    { (=>
        [ :acc
          :xs
          :ys ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (__unpack
                  ys
                  (=>
                    [ :ys
                      :y ]
                    { (zip
                        (acc
                          [ x
                            y ])
                        xs
                        ys) })
                  {  }) })
            { (__unpack
                ys
                (=>
                  [ :ys
                    :y ]
                  {  })
                { acc }) }) }) })
    [  ]))
(=
  :destructure
  ((~>
    :destructure
    { (=>
        [ :acc
          :compound ]
        { (__unpack
            compound
            (=>
              [ :xs
                :x ]
              { (destructure
                  (acc
                    x)
                  xs) })
            { [ compound
                (reverse
                  acc) ] }) }) })
    [  ]))
(=
  :->
  (=>
    [ :pattern
      :body
      :value ]
    { (=
        :==
        (~>
          :==
          { (=>
              [ :a
                :b ]
              { (__unpack
                  a
                  (=>
                    [ :xs
                      :x ]
                    { (__unpack
                        b
                        (=>
                          [ :ys
                            :y ]
                          { (__compare
                              (==
                                x
                                y)
                              True
                              { (==
                                  xs
                                  ys) }
                              { False }) })
                        { False }) })
                  { (__compare
                      a
                      b
                      { True }
                      { False }) }) }) }))
      (=
        :second
        (=>
          :xs
          { (__unpack
              xs
              (=>
                [ :_
                  :x ]
                { x })
              { xs }) }))
      (=
        :first
        (=>
          :xs
          { (__unpack
              xs
              (=>
                [ :xs
                  :_ ]
                { (second
                    xs) })
              { xs }) }))
      (=
        :join
        (fold
          (=>
            [ :acc
              :pair ]
            { (=
                :xvar
                (first
                  pair))
              (=
                :xval
                (second
                  pair))
              (fold
                (=>
                  [ :_
                    :pair ]
                  { (=
                      :yvar
                      (first
                        pair))
                    (=
                      :yval
                      (second
                        pair))
                    (__compare
                      xvar
                      yvar
                      { (__compare
                          (==
                            xval
                            yval)
                          False
                          { (no-match!
                              [ [ yvar
                                  yval ]
                                [ xvar
                                  xval ] ]) }
                          {  }) }
                      {  }) })
                [  ]
                acc)
              (acc
                pair) })
          [  ]))
      (=
        :unify
        (~>
          :unify
          { (=>
              [ :pattern
                :value ]
              { (__unpack
                  pattern
                  (=>
                    [ :type
                      :pattern ]
                    { (__compare
                        type
                        Binding
                        { [ [ pattern
                              value ] ] }
                        { (__compare
                            type
                            List
                            { (=
                                :zipped
                                (zip
                                  pattern
                                  value))
                              (__compare
                                zipped
                                [  ]
                                { (no-match!
                                    [ (type
                                        pattern)
                                      value ]) }
                                { (join
                                    (flatten
                                      (map
                                        (apply
                                          unify)
                                        zipped))) }) }
                            { (__unpack
                                type
                                (=>
                                  [ :type
                                    :f ]
                                  { (__compare
                                      type
                                      Compound
                                      { (=
                                          :v
                                          (destructure
                                            value))
                                        (=
                                          :vf
                                          (first
                                            v))
                                        (=
                                          :vargs
                                          (second
                                            v))
                                        (=
                                          :zipped
                                          (zip
                                            pattern
                                            vargs))
                                        (__compare
                                          zipped
                                          [  ]
                                          { (no-match!
                                              [ (type
                                                  f
                                                  pattern)
                                                value ]) }
                                          { (join
                                              (flatten
                                                (map
                                                  (apply
                                                    unify)
                                                  (zipped
                                                    [ f
                                                      vf ])))) }) }
                                      { (invalid!
                                          (type
                                            f
                                            pattern)) }) })
                                { (__compare
                                    (==
                                      pattern
                                      value)
                                    True
                                    {  }
                                    { (no-match!
                                        [ pattern
                                          value ]) }) }) }) }) })
                  { (invalid!
                      pattern) }) }) }))
      (__handle
        { (=
            :args
            (map
              second
              (unify
                pattern
                value)))
          (__compare
            args
            [  ]
            { (body) }
            { (apply
                body
                args) }) }
        no-match!
        (=>
          [ :_
            :arg ]
          { (no-match!
              arg) })) }))
(=
  :match
  (=>
    [ :value
      :args ]
    { ((->
        [ [ "with"
            :clauses ] ]
        { (=
            :result
            (fold
              (=>
                [ :result
                  :clause ]
                { (__compare
                    result
                    [  ]
                    { (__handle
                        { (Match
                            (clause
                              value)) }
                        no-match!
                        (=>
                          [ :r
                            :arg ]
                          {  })) }
                    { result }) })
              [  ]
              (reverse
                clauses)))
          (__unpack
            result
            (=>
              [ :_
                :result ]
              { result })
            { (no-match!
                value) }) })
        args) }))
[ (match
    (Pair
      Foo
      Bar)
    [ [ "with"
        [ (->
            (Pair
              :x
              :x)
            { (Twice
                x
                x) })
          (->
            (Pair
              :x
              Foo)
            { SecondIsFoo })
          (->
            (Pair
              :x
              :y)
            { y })
          (->
            :_
            { (throw!
                InvalidPair) }) ] ] ])
  (__handle
    { (match
        Foo
        [ [ "with"
            [ (->
                (Pair
                  :x
                  :x)
                { (Twice
                    x
                    x) })
              (->
                (Pair
                  :x
                  Foo)
                { SecondIsFoo })
              (->
                (Pair
                  :x
                  :y)
                { y }) ] ] ]) }
    no-match!
    (=>
      [ :_
        :arg ]
      { (NoMatch
          arg) })) ]

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "f" )
                "acc" )
              "xs" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "reverse" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "apply" )
            ( ( =>
                  =>
                    0
                ( ( []
                    "f" )
                  "xs" ) )
              =>
                =>
                  ( ( ( 3
                        ( ( =>
                              =>
                                0
                            ( ( []
                                "f" )
                              "x" ) )
                          =>
                            =>
                              ( 1
                                0 ) ) )
                      1 )
                    ( 2
                      0 ) ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "map" )
                ( ( =>
                      =>
                        0
                    ( ( []
                        "f" )
                      "xs" ) )
                  =>
                    =>
                      ( ( ( 4
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "xs" )
                                  "x" ) )
                              =>
                                =>
                                  ( 1
                                    ( 3
                                      0 ) ) ) )
                          [] )
                        ( 3
                          0 ) ) ) )
              =>
                ( ( ( =>
                        =>
                          =>
                            ( 0
                              1 )
                      "flatten" )
                    ( ( =>
                          =>
                            0
                        "xs" )
                      =>
                        ( 3
                          ( ( ( 4
                                ( ( =>
                                      =>
                                        0
                                    ( ( []
                                        "acc" )
                                      "x" ) )
                                  =>
                                    =>
                                      ( ( ( 6
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "acc" )
                                                  "x" ) )
                                              =>
                                                =>
                                                  ( 1
                                                    0 ) ) )
                                          1 )
                                        0 ) ) )
                              [] )
                            0 ) ) ) )
                  =>
                    ( ( ( =>
                            =>
                              =>
                                ( 0
                                  1 )
                          "zip" )
                        ( ( ( =>
                                =>
                                  ~>
                                    0
                              "zip" )
                            =>
                              ( ( =>
                                    =>
                                      0
                                  ( ( ( []
                                        "acc" )
                                      "xs" )
                                    "ys" ) )
                                =>
                                  =>
                                    =>
                                      ( ( ( =>
                                              =>
                                                =>
                                                  ( pop
                                                    2
                                                    1
                                                    0 )
                                            1 )
                                          ( ( =>
                                                =>
                                                  0
                                              ( ( []
                                                  "xs" )
                                                "x" ) )
                                            =>
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( pop
                                                              2
                                                              1
                                                              0 )
                                                      2 )
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "ys" )
                                                          "y" ) )
                                                      =>
                                                        =>
                                                          ( ( ( 7
                                                                ( 6
                                                                  ( ( []
                                                                      2 )
                                                                    0 ) ) )
                                                              3 )
                                                            1 ) ) )
                                                  =>
                                                    [] ) ) )
                                        =>
                                          ( ( ( =>
                                                  =>
                                                    =>
                                                      ( pop
                                                        2
                                                        1
                                                        0 )
                                                1 )
                                              ( ( =>
                                                    =>
                                                      0
                                                  ( ( []
                                                      "ys" )
                                                    "y" ) )
                                                =>
                                                  =>
                                                    [] ) )
                                            =>
                                              4 ) ) ) )
                          [] ) )
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( 0
                                      1 )
                              "destructure" )
                            ( ( ( =>
                                    =>
                                      ~>
                                        0
                                  "destructure" )
                                =>
                                  ( ( =>
                                        =>
                                          0
                                      ( ( []
                                          "acc" )
                                        "compound" ) )
                                    =>
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              0 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "xs" )
                                                  "x" ) )
                                              =>
                                                =>
                                                  ( ( 4
                                                      ( 3
                                                        0 ) )
                                                    1 ) ) )
                                          =>
                                            ( ( []
                                                1 )
                                              ( 8
                                                2 ) ) ) ) )
                              [] ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( 0
                                          1 )
                                  "->" )
                                ( ( =>
                                      =>
                                        0
                                    ( ( ( []
                                          "pattern" )
                                        "body" )
                                      "value" ) )
                                  =>
                                    =>
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( 0
                                                      1 )
                                              "==" )
                                            ( ( =>
                                                  =>
                                                    ~>
                                                      0
                                                "==" )
                                              =>
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "a" )
                                                      "b" ) )
                                                  =>
                                                    =>
                                                      ( ( ( =>
                                                              =>
                                                                =>
                                                                  ( pop
                                                                    2
                                                                    1
                                                                    0 )
                                                            1 )
                                                          ( ( =>
                                                                =>
                                                                  0
                                                              ( ( []
                                                                  "xs" )
                                                                "x" ) )
                                                            =>
                                                              =>
                                                                ( ( ( =>
                                                                        =>
                                                                          =>
                                                                            ( pop
                                                                              2
                                                                              1
                                                                              0 )
                                                                      2 )
                                                                    ( ( =>
                                                                          =>
                                                                            0
                                                                        ( ( []
                                                                            "ys" )
                                                                          "y" ) )
                                                                      =>
                                                                        =>
                                                                          ( ( ( ( =>
                                                                                    =>
                                                                                      =>
                                                                                        =>
                                                                                          ( if
                                                                                            3
                                                                                            2
                                                                                            1
                                                                                            0 )
                                                                                  ( ( 6
                                                                                      2 )
                                                                                    0 ) )
                                                                                True )
                                                                              =>
                                                                                ( ( 7
                                                                                    4 )
                                                                                  2 ) )
                                                                            =>
                                                                              False ) ) )
                                                                  =>
                                                                    False ) ) )
                                                        =>
                                                          ( ( ( ( =>
                                                                    =>
                                                                      =>
                                                                        =>
                                                                          ( if
                                                                            3
                                                                            2
                                                                            1
                                                                            0 )
                                                                  2 )
                                                                1 )
                                                              =>
                                                                True )
                                                            =>
                                                              False ) ) ) ) )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( 0
                                                          1 )
                                                  "second" )
                                                ( ( =>
                                                      =>
                                                        0
                                                    "xs" )
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( pop
                                                                  2
                                                                  1
                                                                  0 )
                                                          0 )
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( []
                                                                "_" )
                                                              "x" ) )
                                                          =>
                                                            =>
                                                              0 ) )
                                                      =>
                                                        1 ) ) )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( 0
                                                              1 )
                                                      "first" )
                                                    ( ( =>
                                                          =>
                                                            0
                                                        "xs" )
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( pop
                                                                      2
                                                                      1
                                                                      0 )
                                                              0 )
                                                            ( ( =>
                                                                  =>
                                                                    0
                                                                ( ( []
                                                                    "xs" )
                                                                  "_" ) )
                                                              =>
                                                                =>
                                                                  ( 3
                                                                    1 ) ) )
                                                          =>
                                                            1 ) ) )
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( 0
                                                                  1 )
                                                          "join" )
                                                        ( ( 12
                                                            ( ( =>
                                                                  =>
                                                                    0
                                                                ( ( []
                                                                    "acc" )
                                                                  "pair" ) )
                                                              =>
                                                                =>
                                                                  ( ( ( =>
                                                                          =>
                                                                            =>
                                                                              ( 0
                                                                                1 )
                                                                        "xvar" )
                                                                      ( 2
                                                                        0 ) )
                                                                    =>
                                                                      ( ( ( =>
                                                                              =>
                                                                                =>
                                                                                  ( 0
                                                                                    1 )
                                                                            "xval" )
                                                                          ( 4
                                                                            1 ) )
                                                                        =>
                                                                          ( =>
                                                                              ( 4
                                                                                3 )
                                                                            ( ( ( 16
                                                                                  ( ( =>
                                                                                        =>
                                                                                          0
                                                                                      ( ( []
                                                                                          "_" )
                                                                                        "pair" ) )
                                                                                    =>
                                                                                      =>
                                                                                        ( ( ( =>
                                                                                                =>
                                                                                                  =>
                                                                                                    ( 0
                                                                                                      1 )
                                                                                              "yvar" )
                                                                                            ( 6
                                                                                              0 ) )
                                                                                          =>
                                                                                            ( ( ( =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        ( 0
                                                                                                          1 )
                                                                                                  "yval" )
                                                                                                ( 8
                                                                                                  1 ) )
                                                                                              =>
                                                                                                ( ( ( ( =>
                                                                                                          =>
                                                                                                            =>
                                                                                                              =>
                                                                                                                ( if
                                                                                                                  3
                                                                                                                  2
                                                                                                                  1
                                                                                                                  0 )
                                                                                                        5 )
                                                                                                      1 )
                                                                                                    =>
                                                                                                      ( ( ( ( =>
                                                                                                                =>
                                                                                                                  =>
                                                                                                                    =>
                                                                                                                      ( if
                                                                                                                        3
                                                                                                                        2
                                                                                                                        1
                                                                                                                        0 )
                                                                                                              ( ( 11
                                                                                                                  5 )
                                                                                                                1 ) )
                                                                                                            False )
                                                                                                          =>
                                                                                                            ( no-match!
                                                                                                              ( ( []
                                                                                                                  ( ( []
                                                                                                                      3 )
                                                                                                                    2 ) )
                                                                                                                ( ( []
                                                                                                                    7 )
                                                                                                                  6 ) ) ) )
                                                                                                        =>
                                                                                                          [] ) )
                                                                                                  =>
                                                                                                    [] ) ) ) ) )
                                                                                [] )
                                                                              3 ) ) ) ) ) )
                                                          [] ) )
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( 0
                                                                      1 )
                                                              "unify" )
                                                            ( ( =>
                                                                  =>
                                                                    ~>
                                                                      0
                                                                "unify" )
                                                              =>
                                                                ( ( =>
                                                                      =>
                                                                        0
                                                                    ( ( []
                                                                        "pattern" )
                                                                      "value" ) )
                                                                  =>
                                                                    =>
                                                                      ( ( ( =>
                                                                              =>
                                                                                =>
                                                                                  ( pop
                                                                                    2
                                                                                    1
                                                                                    0 )
                                                                            1 )
                                                                          ( ( =>
                                                                                =>
                                                                                  0
                                                                              ( ( []
                                                                                  "type" )
                                                                                "pattern" ) )
                                                                            =>
                                                                              =>
                                                                                ( ( ( ( =>
                                                                                          =>
                                                                                            =>
                                                                                              =>
                                                                                                ( if
                                                                                                  3
                                                                                                  2
                                                                                                  1
                                                                                                  0 )
                                                                                        1 )
                                                                                      Binding )
                                                                                    =>
                                                                                      ( []
                                                                                        ( ( []
                                                                                            1 )
                                                                                          3 ) ) )
                                                                                  =>
                                                                                    ( ( ( ( =>
                                                                                              =>
                                                                                                =>
                                                                                                  =>
                                                                                                    ( if
                                                                                                      3
                                                                                                      2
                                                                                                      1
                                                                                                      0 )
                                                                                            2 )
                                                                                          List )
                                                                                        =>
                                                                                          ( ( ( =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      ( 0
                                                                                                        1 )
                                                                                                "zipped" )
                                                                                              ( ( 15
                                                                                                  2 )
                                                                                                4 ) )
                                                                                            =>
                                                                                              ( ( ( ( =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            =>
                                                                                                              ( if
                                                                                                                3
                                                                                                                2
                                                                                                                1
                                                                                                                0 )
                                                                                                      0 )
                                                                                                    [] )
                                                                                                  =>
                                                                                                    ( no-match!
                                                                                                      ( ( []
                                                                                                          ( 5
                                                                                                            4 ) )
                                                                                                        6 ) ) )
                                                                                                =>
                                                                                                  ( 9
                                                                                                    ( 18
                                                                                                      ( ( 19
                                                                                                          ( 20
                                                                                                            8 ) )
                                                                                                        1 ) ) ) ) ) )
                                                                                      =>
                                                                                        ( ( ( =>
                                                                                                =>
                                                                                                  =>
                                                                                                    ( pop
                                                                                                      2
                                                                                                      1
                                                                                                      0 )
                                                                                              3 )
                                                                                            ( ( =>
                                                                                                  =>
                                                                                                    0
                                                                                                ( ( []
                                                                                                    "type" )
                                                                                                  "f" ) )
                                                                                              =>
                                                                                                =>
                                                                                                  ( ( ( ( =>
                                                                                                            =>
                                                                                                              =>
                                                                                                                =>
                                                                                                                  ( if
                                                                                                                    3
                                                                                                                    2
                                                                                                                    1
                                                                                                                    0 )
                                                                                                          1 )
                                                                                                        Compound )
                                                                                                      =>
                                                                                                        ( ( ( =>
                                                                                                                =>
                                                                                                                  =>
                                                                                                                    ( 0
                                                                                                                      1 )
                                                                                                              "v" )
                                                                                                            ( 17
                                                                                                              7 ) )
                                                                                                          =>
                                                                                                            ( ( ( =>
                                                                                                                    =>
                                                                                                                      =>
                                                                                                                        ( 0
                                                                                                                          1 )
                                                                                                                  "vf" )
                                                                                                                ( 12
                                                                                                                  0 ) )
                                                                                                              =>
                                                                                                                ( ( ( =>
                                                                                                                        =>
                                                                                                                          =>
                                                                                                                            ( 0
                                                                                                                              1 )
                                                                                                                      "vargs" )
                                                                                                                    ( 14
                                                                                                                      1 ) )
                                                                                                                  =>
                                                                                                                    ( ( ( =>
                                                                                                                            =>
                                                                                                                              =>
                                                                                                                                ( 0
                                                                                                                                  1 )
                                                                                                                          "zipped" )
                                                                                                                        ( ( 21
                                                                                                                            8 )
                                                                                                                          0 ) )
                                                                                                                      =>
                                                                                                                        ( ( ( ( =>
                                                                                                                                  =>
                                                                                                                                    =>
                                                                                                                                      =>
                                                                                                                                        ( if
                                                                                                                                          3
                                                                                                                                          2
                                                                                                                                          1
                                                                                                                                          0 )
                                                                                                                                0 )
                                                                                                                              [] )
                                                                                                                            =>
                                                                                                                              ( no-match!
                                                                                                                                ( ( []
                                                                                                                                    ( ( 7
                                                                                                                                        6 )
                                                                                                                                      10 ) )
                                                                                                                                  12 ) ) )
                                                                                                                          =>
                                                                                                                            ( 15
                                                                                                                              ( 24
                                                                                                                                ( ( 25
                                                                                                                                    ( 26
                                                                                                                                      14 ) )
                                                                                                                                  ( 1
                                                                                                                                    ( ( []
                                                                                                                                        6 )
                                                                                                                                      3 ) ) ) ) ) ) ) ) ) ) )
                                                                                                    =>
                                                                                                      ( invalid!
                                                                                                        ( ( 2
                                                                                                            1 )
                                                                                                          5 ) ) ) ) )
                                                                                          =>
                                                                                            ( ( ( ( =>
                                                                                                      =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            ( if
                                                                                                              3
                                                                                                              2
                                                                                                              1
                                                                                                              0 )
                                                                                                    ( ( 11
                                                                                                        3 )
                                                                                                      5 ) )
                                                                                                  True )
                                                                                                =>
                                                                                                  [] )
                                                                                              =>
                                                                                                ( no-match!
                                                                                                  ( ( []
                                                                                                      4 )
                                                                                                    6 ) ) ) ) ) ) ) )
                                                                        =>
                                                                          ( invalid!
                                                                            2 ) ) ) ) )
                                                          =>
                                                            ( ( ( =>
                                                                    =>
                                                                      =>
                                                                        ( try
                                                                          2
                                                                          1
                                                                          0 )
                                                                  =>
                                                                    ( ( ( =>
                                                                            =>
                                                                              =>
                                                                                ( 0
                                                                                  1 )
                                                                          "args" )
                                                                        ( ( 12
                                                                            4 )
                                                                          ( ( 1
                                                                              8 )
                                                                            6 ) ) )
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                0 )
                                                                              [] )
                                                                            =>
                                                                              ( 9
                                                                                [] ) )
                                                                          =>
                                                                            ( ( 15
                                                                                9 )
                                                                              1 ) ) ) )
                                                                no-match! )
                                                              ( ( =>
                                                                    =>
                                                                      0
                                                                  ( ( []
                                                                      "_" )
                                                                    "arg" ) )
                                                                =>
                                                                  =>
                                                                    ( no-match!
                                                                      0 ) ) ) ) ) ) ) ) ) )
                              =>
                                ( ( ( =>
                                        =>
                                          =>
                                            ( 0
                                              1 )
                                      "match" )
                                    ( ( =>
                                          =>
                                            0
                                        ( ( []
                                            "value" )
                                          "args" ) )
                                      =>
                                        =>
                                          ( ( ( 2
                                                ( List
                                                  ( []
                                                    ( List
                                                      ( ( []
                                                          ( Value
                                                            "with" ) )
                                                        ( Binding
                                                          "clauses" ) ) ) ) ) )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( 0
                                                              1 )
                                                      "result" )
                                                    ( ( ( 10
                                                          ( ( =>
                                                                =>
                                                                  0
                                                              ( ( []
                                                                  "result" )
                                                                "clause" ) )
                                                            =>
                                                              =>
                                                                ( ( ( ( =>
                                                                          =>
                                                                            =>
                                                                              =>
                                                                                ( if
                                                                                  3
                                                                                  2
                                                                                  1
                                                                                  0 )
                                                                        1 )
                                                                      [] )
                                                                    =>
                                                                      ( ( ( =>
                                                                              =>
                                                                                =>
                                                                                  ( try
                                                                                    2
                                                                                    1
                                                                                    0 )
                                                                            =>
                                                                              ( Match
                                                                                ( 2
                                                                                  6 ) ) )
                                                                          no-match! )
                                                                        ( ( =>
                                                                              =>
                                                                                0
                                                                            ( ( []
                                                                                "r" )
                                                                              "arg" ) )
                                                                          =>
                                                                            =>
                                                                              [] ) ) )
                                                                  =>
                                                                    2 ) ) )
                                                        [] )
                                                      ( 9
                                                        0 ) ) )
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( pop
                                                                  2
                                                                  1
                                                                  0 )
                                                          0 )
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( []
                                                                "_" )
                                                              "result" ) )
                                                          =>
                                                            =>
                                                              0 ) )
                                                      =>
                                                        ( no-match!
                                                          4 ) ) ) )
                                            0 ) ) )
                                  =>
                                    ( ( []
                                        ( ( 0
                                            ( ( Pair
                                                Foo )
                                              Bar ) )
                                          ( []
                                            ( ( []
                                                "with" )
                                              ( ( ( ( []
                                                      ( ( 1
                                                          ( ( Compound
                                                              ( Value
                                                                Pair ) )
                                                            ( ( []
                                                                ( Binding
                                                                  "x" ) )
                                                              ( Binding
                                                                "x" ) ) ) )
                                                        =>
                                                          =>
                                                            ( ( Twice
                                                                0 )
                                                              0 ) ) )
                                                    ( ( 1
                                                        ( ( Compound
                                                            ( Value
                                                              Pair ) )
                                                          ( ( []
                                                              ( Binding
                                                                "x" ) )
                                                            ( Value
                                                              Foo ) ) ) )
                                                      =>
                                                        SecondIsFoo ) )
                                                  ( ( 1
                                                      ( ( Compound
                                                          ( Value
                                                            Pair ) )
                                                        ( ( []
                                                            ( Binding
                                                              "x" ) )
                                                          ( Binding
                                                            "y" ) ) ) )
                                                    =>
                                                      =>
                                                        0 ) )
                                                ( ( 1
                                                    ( Binding
                                                      "_" ) )
                                                  =>
                                                    ( throw!
                                                      InvalidPair ) ) ) ) ) ) )
                                      ( ( ( =>
                                              =>
                                                =>
                                                  ( try
                                                    2
                                                    1
                                                    0 )
                                            =>
                                              ( ( 1
                                                  Foo )
                                                ( []
                                                  ( ( []
                                                      "with" )
                                                    ( ( ( []
                                                          ( ( 2
                                                              ( ( Compound
                                                                  ( Value
                                                                    Pair ) )
                                                                ( ( []
                                                                    ( Binding
                                                                      "x" ) )
                                                                  ( Binding
                                                                    "x" ) ) ) )
                                                            =>
                                                              =>
                                                                ( ( Twice
                                                                    0 )
                                                                  0 ) ) )
                                                        ( ( 2
                                                            ( ( Compound
                                                                ( Value
                                                                  Pair ) )
                                                              ( ( []
                                                                  ( Binding
                                                                    "x" ) )
                                                                ( Value
                                                                  Foo ) ) ) )
                                                          =>
                                                            SecondIsFoo ) )
                                                      ( ( 2
                                                          ( ( Compound
                                                              ( Value
                                                                Pair ) )
                                                            ( ( []
                                                                ( Binding
                                                                  "x" ) )
                                                              ( Binding
                                                                "y" ) ) ) )
                                                        =>
                                                          =>
                                                            0 ) ) ) ) ) )
                                          no-match! )
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "_" )
                                              "arg" ) )
                                          =>
                                            =>
                                              ( NoMatch
                                                0 ) ) ) ) ) ) ) ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""xs"")
00065: AppFnToArg
00066: PushString(""x"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""f"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""xs"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00001)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""xs"")
00117: AppFnToArg
00118: PushString(""x"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: PushString("")
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadVar(00000)
00130: LoadVar(00001)
00131: AppFnToArg
00132:   Return
00133: LoadFn { code: 00129, fvars: 00001 }
00134:   Return
00135: LoadFn { code: 00133, fvars: 00000 }
00136:   Return
00137: LoadVar(00000)
00138:   Return
00139: LoadFn { code: 00137, fvars: 00000 }
00140:   Return
00141: LoadVar(00000)
00142:   Return
00143: LoadFn { code: 00141, fvars: 00000 }
00144:   Return
00145: LoadVar(00001)
00146: LoadVar(00000)
00147: AppFnToArg
00148:   Return
00149: LoadFn { code: 00145, fvars: 00001 }
00150:   Return
00151: LoadVar(00003)
00152: LoadFn { code: 00143, fvars: 00000 }
00153: PushString("")
00154: PushString(""f"")
00155: AppFnToArg
00156: PushString(""x"")
00157: AppFnToArg
00158: AppFnToArg
00159: LoadFn { code: 00149, fvars: 00000 }
00160: AppFnToArg
00161: AppFnToArg
00162: LoadVar(00001)
00163: AppFnToArg
00164: LoadVar(00002)
00165: LoadVar(00000)
00166: AppFnToArg
00167: AppFnToArg
00168:   Return
00169: LoadFn { code: 00151, fvars: 00003 }
00170:   Return
00171: LoadVar(00000)
00172: LoadVar(00001)
00173: AppFnToArg
00174:   Return
00175: LoadFn { code: 00171, fvars: 00001 }
00176:   Return
00177: LoadFn { code: 00175, fvars: 00000 }
00178:   Return
00179: LoadVar(00000)
00180:   Return
00181: LoadFn { code: 00179, fvars: 00000 }
00182:   Return
00183: LoadVar(00000)
00184:   Return
00185: LoadFn { code: 00183, fvars: 00000 }
00186:   Return
00187: LoadVar(00001)
00188: LoadVar(00003)
00189: LoadVar(00000)
00190: AppFnToArg
00191: AppFnToArg
00192:   Return
00193: LoadFn { code: 00187, fvars: 00003 }
00194:   Return
00195: LoadVar(00004)
00196: LoadFn { code: 00185, fvars: 00000 }
00197: PushString("")
00198: PushString(""xs"")
00199: AppFnToArg
00200: PushString(""x"")
00201: AppFnToArg
00202: AppFnToArg
00203: LoadFn { code: 00193, fvars: 00002 }
00204: AppFnToArg
00205: AppFnToArg
00206: PushString("")
00207: AppFnToArg
00208: LoadVar(00003)
00209: LoadVar(00000)
00210: AppFnToArg
00211: AppFnToArg
00212:   Return
00213: LoadFn { code: 00195, fvars: 00004 }
00214:   Return
00215: LoadVar(00000)
00216: LoadVar(00001)
00217: AppFnToArg
00218:   Return
00219: LoadFn { code: 00215, fvars: 00001 }
00220:   Return
00221: LoadFn { code: 00219, fvars: 00000 }
00222:   Return
00223: LoadVar(00000)
00224:   Return
00225: LoadFn { code: 00223, fvars: 00000 }
00226:   Return
00227: LoadVar(00000)
00228:   Return
00229: LoadFn { code: 00227, fvars: 00000 }
00230:   Return
00231: LoadVar(00000)
00232:   Return
00233: LoadFn { code: 00231, fvars: 00000 }
00234:   Return
00235: LoadVar(00001)
00236: LoadVar(00000)
00237: AppFnToArg
00238:   Return
00239: LoadFn { code: 00235, fvars: 00001 }
00240:   Return
00241: LoadVar(00006)
00242: LoadFn { code: 00233, fvars: 00000 }
00243: PushString("")
00244: PushString(""acc"")
00245: AppFnToArg
00246: PushString(""x"")
00247: AppFnToArg
00248: AppFnToArg
00249: LoadFn { code: 00239, fvars: 00000 }
00250: AppFnToArg
00251: AppFnToArg
00252: LoadVar(00001)
00253: AppFnToArg
00254: LoadVar(00000)
00255: AppFnToArg
00256:   Return
00257: LoadFn { code: 00241, fvars: 00006 }
00258:   Return
00259: LoadVar(00003)
00260: LoadVar(00004)
00261: LoadFn { code: 00229, fvars: 00000 }
00262: PushString("")
00263: PushString(""acc"")
00264: AppFnToArg
00265: PushString(""x"")
00266: AppFnToArg
00267: AppFnToArg
00268: LoadFn { code: 00257, fvars: 00005 }
00269: AppFnToArg
00270: AppFnToArg
00271: PushString("")
00272: AppFnToArg
00273: LoadVar(00000)
00274: AppFnToArg
00275: AppFnToArg
00276:   Return
00277: LoadVar(00000)
00278: LoadVar(00001)
00279: AppFnToArg
00280:   Return
00281: LoadFn { code: 00277, fvars: 00001 }
00282:   Return
00283: LoadFn { code: 00281, fvars: 00000 }
00284:   Return
00285: LoadVar(00000)
00286: LoadFn { code: 00000, fvars: 00000 }
00287: AppArgToFn
00288:   Return
00289: LoadFn { code: 00285, fvars: 00000 }
00290:   Return
00291: LoadVar(00000)
00292:   Return
00293: LoadFn { code: 00291, fvars: 00000 }
00294:   Return
00295: LoadVar(00002)
00296: LoadVar(00001)
00297: LoadVar(00000)
00298: Unpack
00299: AppArgToFn
00300: AppArgToFn
00301:   Return
00302: LoadFn { code: 00295, fvars: 00002 }
00303:   Return
00304: LoadFn { code: 00302, fvars: 00001 }
00305:   Return
00306: LoadVar(00000)
00307:   Return
00308: LoadFn { code: 00306, fvars: 00000 }
00309:   Return
00310: LoadVar(00002)
00311: LoadVar(00001)
00312: LoadVar(00000)
00313: Unpack
00314: AppArgToFn
00315: AppArgToFn
00316:   Return
00317: LoadFn { code: 00310, fvars: 00002 }
00318:   Return
00319: LoadFn { code: 00317, fvars: 00001 }
00320:   Return
00321: LoadVar(00000)
00322:   Return
00323: LoadFn { code: 00321, fvars: 00000 }
00324:   Return
00325: LoadVar(00007)
00326: LoadVar(00006)
00327: PushString("")
00328: LoadVar(00002)
00329: AppFnToArg
00330: LoadVar(00000)
00331: AppFnToArg
00332: AppFnToArg
00333: AppFnToArg
00334: LoadVar(00003)
00335: AppFnToArg
00336: LoadVar(00001)
00337: AppFnToArg
00338:   Return
00339: LoadFn { code: 00325, fvars: 00007 }
00340:   Return
00341: PushString("")
00342:   Return
00343: LoadFn { code: 00319, fvars: 00000 }
00344: LoadVar(00002)
00345: AppFnToArg
00346: LoadFn { code: 00323, fvars: 00000 }
00347: PushString("")
00348: PushString(""ys"")
00349: AppFnToArg
00350: PushString(""y"")
00351: AppFnToArg
00352: AppFnToArg
00353: LoadFn { code: 00339, fvars: 00006 }
00354: AppFnToArg
00355: AppFnToArg
00356: LoadFn { code: 00341, fvars: 00000 }
00357: AppFnToArg
00358:   Return
00359: LoadFn { code: 00343, fvars: 00005 }
00360:   Return
00361: LoadVar(00002)
00362: LoadVar(00001)
00363: LoadVar(00000)
00364: Unpack
00365: AppArgToFn
00366: AppArgToFn
00367:   Return
00368: LoadFn { code: 00361, fvars: 00002 }
00369:   Return
00370: LoadFn { code: 00368, fvars: 00001 }
00371:   Return
00372: LoadVar(00000)
00373:   Return
00374: LoadFn { code: 00372, fvars: 00000 }
00375:   Return
00376: PushString("")
00377:   Return
00378: LoadFn { code: 00376, fvars: 00000 }
00379:   Return
00380: LoadVar(00004)
00381:   Return
00382: LoadFn { code: 00370, fvars: 00000 }
00383: LoadVar(00001)
00384: AppFnToArg
00385: LoadFn { code: 00374, fvars: 00000 }
00386: PushString("")
00387: PushString(""ys"")
00388: AppFnToArg
00389: PushString(""y"")
00390: AppFnToArg
00391: AppFnToArg
00392: LoadFn { code: 00378, fvars: 00000 }
00393: AppFnToArg
00394: AppFnToArg
00395: LoadFn { code: 00380, fvars: 00004 }
00396: AppFnToArg
00397:   Return
00398: LoadFn { code: 00304, fvars: 00000 }
00399: LoadVar(00001)
00400: AppFnToArg
00401: LoadFn { code: 00308, fvars: 00000 }
00402: PushString("")
00403: PushString(""xs"")
00404: AppFnToArg
00405: PushString(""x"")
00406: AppFnToArg
00407: AppFnToArg
00408: LoadFn { code: 00359, fvars: 00004 }
00409: AppFnToArg
00410: AppFnToArg
00411: LoadFn { code: 00382, fvars: 00003 }
00412: AppFnToArg
00413:   Return
00414: LoadFn { code: 00398, fvars: 00003 }
00415:   Return
00416: LoadFn { code: 00414, fvars: 00002 }
00417:   Return
00418: LoadFn { code: 00293, fvars: 00000 }
00419: PushString("")
00420: PushString(""acc"")
00421: AppFnToArg
00422: PushString(""xs"")
00423: AppFnToArg
00424: PushString(""ys"")
00425: AppFnToArg
00426: AppFnToArg
00427: LoadFn { code: 00416, fvars: 00001 }
00428: AppFnToArg
00429:   Return
00430: LoadVar(00000)
00431: LoadVar(00001)
00432: AppFnToArg
00433:   Return
00434: LoadFn { code: 00430, fvars: 00001 }
00435:   Return
00436: LoadFn { code: 00434, fvars: 00000 }
00437:   Return
00438: LoadVar(00000)
00439: LoadFn { code: 00000, fvars: 00000 }
00440: AppArgToFn
00441:   Return
00442: LoadFn { code: 00438, fvars: 00000 }
00443:   Return
00444: LoadVar(00000)
00445:   Return
00446: LoadFn { code: 00444, fvars: 00000 }
00447:   Return
00448: LoadVar(00002)
00449: LoadVar(00001)
00450: LoadVar(00000)
00451: Unpack
00452: AppArgToFn
00453: AppArgToFn
00454:   Return
00455: LoadFn { code: 00448, fvars: 00002 }
00456:   Return
00457: LoadFn { code: 00455, fvars: 00001 }
00458:   Return
00459: LoadVar(00000)
00460:   Return
00461: LoadFn { code: 00459, fvars: 00000 }
00462:   Return
00463: LoadVar(00004)
00464: LoadVar(00003)
00465: LoadVar(00000)
00466: AppFnToArg
00467: AppFnToArg
00468: LoadVar(00001)
00469: AppFnToArg
00470:   Return
00471: LoadFn { code: 00463, fvars: 00004 }
00472:   Return
00473: PushString("")
00474: LoadVar(00001)
00475: AppFnToArg
00476: LoadVar(00008)
00477: LoadVar(00002)
00478: AppFnToArg
00479: AppFnToArg
00480:   Return
00481: LoadFn { code: 00457, fvars: 00000 }
00482: LoadVar(00000)
00483: AppFnToArg
00484: LoadFn { code: 00461, fvars: 00000 }
00485: PushString("")
00486: PushString(""xs"")
00487: AppFnToArg
00488: PushString(""x"")
00489: AppFnToArg
00490: AppFnToArg
00491: LoadFn { code: 00471, fvars: 00003 }
00492: AppFnToArg
00493: AppFnToArg
00494: LoadFn { code: 00473, fvars: 00008 }
00495: AppFnToArg
00496:   Return
00497: LoadFn { code: 00481, fvars: 00007 }
00498:   Return
00499: LoadFn { code: 00446, fvars: 00000 }
00500: PushString("")
00501: PushString(""acc"")
00502: AppFnToArg
00503: PushString(""compound"")
00504: AppFnToArg
00505: AppFnToArg
00506: LoadFn { code: 00497, fvars: 00006 }
00507: AppFnToArg
00508:   Return
00509: LoadVar(00000)
00510: LoadVar(00001)
00511: AppFnToArg
00512:   Return
00513: LoadFn { code: 00509, fvars: 00001 }
00514:   Return
00515: LoadFn { code: 00513, fvars: 00000 }
00516:   Return
00517: LoadVar(00000)
00518:   Return
00519: LoadFn { code: 00517, fvars: 00000 }
00520:   Return
00521: LoadVar(00000)
00522: LoadVar(00001)
00523: AppFnToArg
00524:   Return
00525: LoadFn { code: 00521, fvars: 00001 }
00526:   Return
00527: LoadFn { code: 00525, fvars: 00000 }
00528:   Return
00529: LoadVar(00000)
00530: LoadFn { code: 00000, fvars: 00000 }
00531: AppArgToFn
00532:   Return
00533: LoadFn { code: 00529, fvars: 00000 }
00534:   Return
00535: LoadVar(00000)
00536:   Return
00537: LoadFn { code: 00535, fvars: 00000 }
00538:   Return
00539: LoadVar(00002)
00540: LoadVar(00001)
00541: LoadVar(00000)
00542: Unpack
00543: AppArgToFn
00544: AppArgToFn
00545:   Return
00546: LoadFn { code: 00539, fvars: 00002 }
00547:   Return
00548: LoadFn { code: 00546, fvars: 00001 }
00549:   Return
00550: LoadVar(00000)
00551:   Return
00552: LoadFn { code: 00550, fvars: 00000 }
00553:   Return
00554: LoadVar(00002)
00555: LoadVar(00001)
00556: LoadVar(00000)
00557: Unpack
00558: AppArgToFn
00559: AppArgToFn
00560:   Return
00561: LoadFn { code: 00554, fvars: 00002 }
00562:   Return
00563: LoadFn { code: 00561, fvars: 00001 }
00564:   Return
00565: LoadVar(00000)
00566:   Return
00567: LoadFn { code: 00565, fvars: 00000 }
00568:   Return
00569: LoadVar(00003)
00570: LoadVar(00002)
00571: LoadVar(00001)
00572: LoadVar(00000)
00573: Cmp
00574: AppArgToFn
00575:   Return
00576: LoadFn { code: 00569, fvars: 00003 }
00577:   Return
00578: LoadFn { code: 00576, fvars: 00002 }
00579:   Return
00580: LoadFn { code: 00578, fvars: 00001 }
00581:   Return
00582: LoadVar(00007)
00583: LoadVar(00004)
00584: AppFnToArg
00585: LoadVar(00002)
00586: AppFnToArg
00587:   Return
00588: PushString("False")
00589:   Return
00590: LoadFn { code: 00580, fvars: 00000 }
00591: LoadVar(00006)
00592: LoadVar(00002)
00593: AppFnToArg
00594: LoadVar(00000)
00595: AppFnToArg
00596: AppFnToArg
00597: PushString("True")
00598: AppFnToArg
00599: LoadFn { code: 00582, fvars: 00007 }
00600: AppFnToArg
00601: LoadFn { code: 00588, fvars: 00000 }
00602: AppFnToArg
00603:   Return
00604: LoadFn { code: 00590, fvars: 00006 }
00605:   Return
00606: PushString("False")
00607:   Return
00608: LoadFn { code: 00563, fvars: 00000 }
00609: LoadVar(00002)
00610: AppFnToArg
00611: LoadFn { code: 00567, fvars: 00000 }
00612: PushString("")
00613: PushString(""ys"")
00614: AppFnToArg
00615: PushString(""y"")
00616: AppFnToArg
00617: AppFnToArg
00618: LoadFn { code: 00604, fvars: 00005 }
00619: AppFnToArg
00620: AppFnToArg
00621: LoadFn { code: 00606, fvars: 00000 }
00622: AppFnToArg
00623:   Return
00624: LoadFn { code: 00608, fvars: 00004 }
00625:   Return
00626: LoadVar(00003)
00627: LoadVar(00002)
00628: LoadVar(00001)
00629: LoadVar(00000)
00630: Cmp
00631: AppArgToFn
00632:   Return
00633: LoadFn { code: 00626, fvars: 00003 }
00634:   Return
00635: LoadFn { code: 00633, fvars: 00002 }
00636:   Return
00637: LoadFn { code: 00635, fvars: 00001 }
00638:   Return
00639: PushString("True")
00640:   Return
00641: PushString("False")
00642:   Return
00643: LoadFn { code: 00637, fvars: 00000 }
00644: LoadVar(00002)
00645: AppFnToArg
00646: LoadVar(00001)
00647: AppFnToArg
00648: LoadFn { code: 00639, fvars: 00000 }
00649: AppFnToArg
00650: LoadFn { code: 00641, fvars: 00000 }
00651: AppFnToArg
00652:   Return
00653: LoadFn { code: 00548, fvars: 00000 }
00654: LoadVar(00001)
00655: AppFnToArg
00656: LoadFn { code: 00552, fvars: 00000 }
00657: PushString("")
00658: PushString(""xs"")
00659: AppFnToArg
00660: PushString(""x"")
00661: AppFnToArg
00662: AppFnToArg
00663: LoadFn { code: 00624, fvars: 00003 }
00664: AppFnToArg
00665: AppFnToArg
00666: LoadFn { code: 00643, fvars: 00002 }
00667: AppFnToArg
00668:   Return
00669: LoadFn { code: 00653, fvars: 00002 }
00670:   Return
00671: LoadFn { code: 00537, fvars: 00000 }
00672: PushString("")
00673: PushString(""a"")
00674: AppFnToArg
00675: PushString(""b"")
00676: AppFnToArg
00677: AppFnToArg
00678: LoadFn { code: 00669, fvars: 00001 }
00679: AppFnToArg
00680:   Return
00681: LoadVar(00000)
00682: LoadVar(00001)
00683: AppFnToArg
00684:   Return
00685: LoadFn { code: 00681, fvars: 00001 }
00686:   Return
00687: LoadFn { code: 00685, fvars: 00000 }
00688:   Return
00689: LoadVar(00000)
00690:   Return
00691: LoadFn { code: 00689, fvars: 00000 }
00692:   Return
00693: LoadVar(00002)
00694: LoadVar(00001)
00695: LoadVar(00000)
00696: Unpack
00697: AppArgToFn
00698: AppArgToFn
00699:   Return
00700: LoadFn { code: 00693, fvars: 00002 }
00701:   Return
00702: LoadFn { code: 00700, fvars: 00001 }
00703:   Return
00704: LoadVar(00000)
00705:   Return
00706: LoadFn { code: 00704, fvars: 00000 }
00707:   Return
00708: LoadVar(00000)
00709:   Return
00710: LoadFn { code: 00708, fvars: 00000 }
00711:   Return
00712: LoadVar(00001)
00713:   Return
00714: LoadFn { code: 00702, fvars: 00000 }
00715: LoadVar(00000)
00716: AppFnToArg
00717: LoadFn { code: 00706, fvars: 00000 }
00718: PushString("")
00719: PushString(""_"")
00720: AppFnToArg
00721: PushString(""x"")
00722: AppFnToArg
00723: AppFnToArg
00724: LoadFn { code: 00710, fvars: 00000 }
00725: AppFnToArg
00726: AppFnToArg
00727: LoadFn { code: 00712, fvars: 00001 }
00728: AppFnToArg
00729:   Return
00730: LoadVar(00000)
00731: LoadVar(00001)
00732: AppFnToArg
00733:   Return
00734: LoadFn { code: 00730, fvars: 00001 }
00735:   Return
00736: LoadFn { code: 00734, fvars: 00000 }
00737:   Return
00738: LoadVar(00000)
00739:   Return
00740: LoadFn { code: 00738, fvars: 00000 }
00741:   Return
00742: LoadVar(00002)
00743: LoadVar(00001)
00744: LoadVar(00000)
00745: Unpack
00746: AppArgToFn
00747: AppArgToFn
00748:   Return
00749: LoadFn { code: 00742, fvars: 00002 }
00750:   Return
00751: LoadFn { code: 00749, fvars: 00001 }
00752:   Return
00753: LoadVar(00000)
00754:   Return
00755: LoadFn { code: 00753, fvars: 00000 }
00756:   Return
00757: LoadVar(00003)
00758: LoadVar(00001)
00759: AppFnToArg
00760:   Return
00761: LoadFn { code: 00757, fvars: 00003 }
00762:   Return
00763: LoadVar(00001)
00764:   Return
00765: LoadFn { code: 00751, fvars: 00000 }
00766: LoadVar(00000)
00767: AppFnToArg
00768: LoadFn { code: 00755, fvars: 00000 }
00769: PushString("")
00770: PushString(""xs"")
00771: AppFnToArg
00772: PushString(""_"")
00773: AppFnToArg
00774: AppFnToArg
00775: LoadFn { code: 00761, fvars: 00002 }
00776: AppFnToArg
00777: AppFnToArg
00778: LoadFn { code: 00763, fvars: 00001 }
00779: AppFnToArg
00780:   Return
00781: LoadVar(00000)
00782: LoadVar(00001)
00783: AppFnToArg
00784:   Return
00785: LoadFn { code: 00781, fvars: 00001 }
00786:   Return
00787: LoadFn { code: 00785, fvars: 00000 }
00788:   Return
00789: LoadVar(00000)
00790:   Return
00791: LoadFn { code: 00789, fvars: 00000 }
00792:   Return
00793: LoadVar(00000)
00794: LoadVar(00001)
00795: AppFnToArg
00796:   Return
00797: LoadFn { code: 00793, fvars: 00001 }
00798:   Return
00799: LoadFn { code: 00797, fvars: 00000 }
00800:   Return
00801: LoadVar(00000)
00802: LoadVar(00001)
00803: AppFnToArg
00804:   Return
00805: LoadFn { code: 00801, fvars: 00001 }
00806:   Return
00807: LoadFn { code: 00805, fvars: 00000 }
00808:   Return
00809: LoadVar(00004)
00810: LoadVar(00003)
00811: AppFnToArg
00812:   Return
00813: LoadVar(00000)
00814:   Return
00815: LoadFn { code: 00813, fvars: 00000 }
00816:   Return
00817: LoadVar(00000)
00818: LoadVar(00001)
00819: AppFnToArg
00820:   Return
00821: LoadFn { code: 00817, fvars: 00001 }
00822:   Return
00823: LoadFn { code: 00821, fvars: 00000 }
00824:   Return
00825: LoadVar(00000)
00826: LoadVar(00001)
00827: AppFnToArg
00828:   Return
00829: LoadFn { code: 00825, fvars: 00001 }
00830:   Return
00831: LoadFn { code: 00829, fvars: 00000 }
00832:   Return
00833: LoadVar(00003)
00834: LoadVar(00002)
00835: LoadVar(00001)
00836: LoadVar(00000)
00837: Cmp
00838: AppArgToFn
00839:   Return
00840: LoadFn { code: 00833, fvars: 00003 }
00841:   Return
00842: LoadFn { code: 00840, fvars: 00002 }
00843:   Return
00844: LoadFn { code: 00842, fvars: 00001 }
00845:   Return
00846: LoadVar(00003)
00847: LoadVar(00002)
00848: LoadVar(00001)
00849: LoadVar(00000)
00850: Cmp
00851: AppArgToFn
00852:   Return
00853: LoadFn { code: 00846, fvars: 00003 }
00854:   Return
00855: LoadFn { code: 00853, fvars: 00002 }
00856:   Return
00857: LoadFn { code: 00855, fvars: 00001 }
00858:   Return
00859: PushEffect("no-match")
00860: PushString("")
00861: PushString("")
00862: LoadVar(00003)
00863: AppFnToArg
00864: LoadVar(00002)
00865: AppFnToArg
00866: AppFnToArg
00867: PushString("")
00868: LoadVar(00007)
00869: AppFnToArg
00870: LoadVar(00006)
00871: AppFnToArg
00872: AppFnToArg
00873: AppFnToArg
00874:   Return
00875: PushString("")
00876:   Return
00877: LoadFn { code: 00857, fvars: 00000 }
00878: LoadVar(00011)
00879: LoadVar(00005)
00880: AppFnToArg
00881: LoadVar(00001)
00882: AppFnToArg
00883: AppFnToArg
00884: PushString("False")
00885: AppFnToArg
00886: LoadFn { code: 00859, fvars: 00007 }
00887: AppFnToArg
00888: LoadFn { code: 00875, fvars: 00000 }
00889: AppFnToArg
00890:   Return
00891: PushString("")
00892:   Return
00893: LoadFn { code: 00844, fvars: 00000 }
00894: LoadVar(00005)
00895: AppFnToArg
00896: LoadVar(00001)
00897: AppFnToArg
00898: LoadFn { code: 00877, fvars: 00011 }
00899: AppFnToArg
00900: LoadFn { code: 00891, fvars: 00000 }
00901: AppFnToArg
00902:   Return
00903: LoadFn { code: 00831, fvars: 00000 }
00904: PushString(""yval"")
00905: AppFnToArg
00906: LoadVar(00008)
00907: LoadVar(00001)
00908: AppFnToArg
00909: AppFnToArg
00910: LoadFn { code: 00893, fvars: 00010 }
00911: AppFnToArg
00912:   Return
00913: LoadFn { code: 00823, fvars: 00000 }
00914: PushString(""yvar"")
00915: AppFnToArg
00916: LoadVar(00006)
00917: LoadVar(00000)
00918: AppFnToArg
00919: AppFnToArg
00920: LoadFn { code: 00903, fvars: 00009 }
00921: AppFnToArg
00922:   Return
00923: LoadFn { code: 00913, fvars: 00008 }
00924:   Return
00925: LoadFn { code: 00809, fvars: 00004 }
00926: LoadVar(00016)
00927: LoadFn { code: 00815, fvars: 00000 }
00928: PushString("")
00929: PushString(""_"")
00930: AppFnToArg
00931: PushString(""pair"")
00932: AppFnToArg
00933: AppFnToArg
00934: LoadFn { code: 00923, fvars: 00007 }
00935: AppFnToArg
00936: AppFnToArg
00937: PushString("")
00938: AppFnToArg
00939: LoadVar(00003)
00940: AppFnToArg
00941: AppFnToArg
00942:   Return
00943: LoadFn { code: 00807, fvars: 00000 }
00944: PushString(""xval"")
00945: AppFnToArg
00946: LoadVar(00004)
00947: LoadVar(00001)
00948: AppFnToArg
00949: AppFnToArg
00950: LoadFn { code: 00925, fvars: 00016 }
00951: AppFnToArg
00952:   Return
00953: LoadFn { code: 00799, fvars: 00000 }
00954: PushString(""xvar"")
00955: AppFnToArg
00956: LoadVar(00002)
00957: LoadVar(00000)
00958: AppFnToArg
00959: AppFnToArg
00960: LoadFn { code: 00943, fvars: 00015 }
00961: AppFnToArg
00962:   Return
00963: LoadFn { code: 00953, fvars: 00014 }
00964:   Return
00965: LoadVar(00000)
00966: LoadVar(00001)
00967: AppFnToArg
00968:   Return
00969: LoadFn { code: 00965, fvars: 00001 }
00970:   Return
00971: LoadFn { code: 00969, fvars: 00000 }
00972:   Return
00973: LoadVar(00000)
00974: LoadFn { code: 00000, fvars: 00000 }
00975: AppArgToFn
00976:   Return
00977: LoadFn { code: 00973, fvars: 00000 }
00978:   Return
00979: LoadVar(00000)
00980:   Return
00981: LoadFn { code: 00979, fvars: 00000 }
00982:   Return
00983: LoadVar(00002)
00984: LoadVar(00001)
00985: LoadVar(00000)
00986: Unpack
00987: AppArgToFn
00988: AppArgToFn
00989:   Return
00990: LoadFn { code: 00983, fvars: 00002 }
00991:   Return
00992: LoadFn { code: 00990, fvars: 00001 }
00993:   Return
00994: LoadVar(00000)
00995:   Return
00996: LoadFn { code: 00994, fvars: 00000 }
00997:   Return
00998: LoadVar(00003)
00999: LoadVar(00002)
01000: LoadVar(00001)
01001: LoadVar(00000)
01002: Cmp
01003: AppArgToFn
01004:   Return
01005: LoadFn { code: 00998, fvars: 00003 }
01006:   Return
01007: LoadFn { code: 01005, fvars: 00002 }
01008:   Return
01009: LoadFn { code: 01007, fvars: 00001 }
01010:   Return
01011: PushString("")
01012: PushString("")
01013: LoadVar(00001)
01014: AppFnToArg
01015: LoadVar(00003)
01016: AppFnToArg
01017: AppFnToArg
01018:   Return
01019: LoadVar(00003)
01020: LoadVar(00002)
01021: LoadVar(00001)
01022: LoadVar(00000)
01023: Cmp
01024: AppArgToFn
01025:   Return
01026: LoadFn { code: 01019, fvars: 00003 }
01027:   Return
01028: LoadFn { code: 01026, fvars: 00002 }
01029:   Return
01030: LoadFn { code: 01028, fvars: 00001 }
01031:   Return
01032: LoadVar(00000)
01033: LoadVar(00001)
01034: AppFnToArg
01035:   Return
01036: LoadFn { code: 01032, fvars: 00001 }
01037:   Return
01038: LoadFn { code: 01036, fvars: 00000 }
01039:   Return
01040: LoadVar(00003)
01041: LoadVar(00002)
01042: LoadVar(00001)
01043: LoadVar(00000)
01044: Cmp
01045: AppArgToFn
01046:   Return
01047: LoadFn { code: 01040, fvars: 00003 }
01048:   Return
01049: LoadFn { code: 01047, fvars: 00002 }
01050:   Return
01051: LoadFn { code: 01049, fvars: 00001 }
01052:   Return
01053: PushEffect("no-match")
01054: PushString("")
01055: LoadVar(00005)
01056: LoadVar(00004)
01057: AppFnToArg
01058: AppFnToArg
01059: LoadVar(00006)
01060: AppFnToArg
01061: AppFnToArg
01062:   Return
01063: LoadVar(00009)
01064: LoadVar(00018)
01065: LoadVar(00019)
01066: LoadVar(00020)
01067: LoadVar(00008)
01068: AppFnToArg
01069: AppFnToArg
01070: LoadVar(00001)
01071: AppFnToArg
01072: AppFnToArg
01073: AppFnToArg
01074:   Return
01075: LoadFn { code: 01051, fvars: 00000 }
01076: LoadVar(00000)
01077: AppFnToArg
01078: PushString("")
01079: AppFnToArg
01080: LoadFn { code: 01053, fvars: 00006 }
01081: AppFnToArg
01082: LoadFn { code: 01063, fvars: 00020 }
01083: AppFnToArg
01084:   Return
01085: LoadFn { code: 01038, fvars: 00000 }
01086: PushString(""zipped"")
01087: AppFnToArg
01088: LoadVar(00015)
01089: LoadVar(00002)
01090: AppFnToArg
01091: LoadVar(00004)
01092: AppFnToArg
01093: AppFnToArg
01094: LoadFn { code: 01075, fvars: 00019 }
01095: AppFnToArg
01096:   Return
01097: LoadVar(00002)
01098: LoadVar(00001)
01099: LoadVar(00000)
01100: Unpack
01101: AppArgToFn
01102: AppArgToFn
01103:   Return
01104: LoadFn { code: 01097, fvars: 00002 }
01105:   Return
01106: LoadFn { code: 01104, fvars: 00001 }
01107:   Return
01108: LoadVar(00000)
01109:   Return
01110: LoadFn { code: 01108, fvars: 00000 }
01111:   Return
01112: LoadVar(00003)
01113: LoadVar(00002)
01114: LoadVar(00001)
01115: LoadVar(00000)
01116: Cmp
01117: AppArgToFn
01118:   Return
01119: LoadFn { code: 01112, fvars: 00003 }
01120:   Return
01121: LoadFn { code: 01119, fvars: 00002 }
01122:   Return
01123: LoadFn { code: 01121, fvars: 00001 }
01124:   Return
01125: LoadVar(00000)
01126: LoadVar(00001)
01127: AppFnToArg
01128:   Return
01129: LoadFn { code: 01125, fvars: 00001 }
01130:   Return
01131: LoadFn { code: 01129, fvars: 00000 }
01132:   Return
01133: LoadVar(00000)
01134: LoadVar(00001)
01135: AppFnToArg
01136:   Return
01137: LoadFn { code: 01133, fvars: 00001 }
01138:   Return
01139: LoadFn { code: 01137, fvars: 00000 }
01140:   Return
01141: LoadVar(00000)
01142: LoadVar(00001)
01143: AppFnToArg
01144:   Return
01145: LoadFn { code: 01141, fvars: 00001 }
01146:   Return
01147: LoadFn { code: 01145, fvars: 00000 }
01148:   Return
01149: LoadVar(00000)
01150: LoadVar(00001)
01151: AppFnToArg
01152:   Return
01153: LoadFn { code: 01149, fvars: 00001 }
01154:   Return
01155: LoadFn { code: 01153, fvars: 00000 }
01156:   Return
01157: LoadVar(00003)
01158: LoadVar(00002)
01159: LoadVar(00001)
01160: LoadVar(00000)
01161: Cmp
01162: AppArgToFn
01163:   Return
01164: LoadFn { code: 01157, fvars: 00003 }
01165:   Return
01166: LoadFn { code: 01164, fvars: 00002 }
01167:   Return
01168: LoadFn { code: 01166, fvars: 00001 }
01169:   Return
01170: PushEffect("no-match")
01171: PushString("")
01172: LoadVar(00007)
01173: LoadVar(00006)
01174: AppFnToArg
01175: LoadVar(00010)
01176: AppFnToArg
01177: AppFnToArg
01178: LoadVar(00012)
01179: AppFnToArg
01180: AppFnToArg
01181:   Return
01182: LoadVar(00015)
01183: LoadVar(00024)
01184: LoadVar(00025)
01185: LoadVar(00026)
01186: LoadVar(00014)
01187: AppFnToArg
01188: AppFnToArg
01189: LoadVar(00001)
01190: PushString("")
01191: LoadVar(00006)
01192: AppFnToArg
01193: LoadVar(00003)
01194: AppFnToArg
01195: AppFnToArg
01196: AppFnToArg
01197: AppFnToArg
01198: AppFnToArg
01199:   Return
01200: LoadFn { code: 01168, fvars: 00000 }
01201: LoadVar(00000)
01202: AppFnToArg
01203: PushString("")
01204: AppFnToArg
01205: LoadFn { code: 01170, fvars: 00012 }
01206: AppFnToArg
01207: LoadFn { code: 01182, fvars: 00026 }
01208: AppFnToArg
01209:   Return
01210: LoadFn { code: 01155, fvars: 00000 }
01211: PushString(""zipped"")
01212: AppFnToArg
01213: LoadVar(00021)
01214: LoadVar(00008)
01215: AppFnToArg
01216: LoadVar(00000)
01217: AppFnToArg
01218: AppFnToArg
01219: LoadFn { code: 01200, fvars: 00025 }
01220: AppFnToArg
01221:   Return
01222: LoadFn { code: 01147, fvars: 00000 }
01223: PushString(""vargs"")
01224: AppFnToArg
01225: LoadVar(00014)
01226: LoadVar(00001)
01227: AppFnToArg
01228: AppFnToArg
01229: LoadFn { code: 01210, fvars: 00024 }
01230: AppFnToArg
01231:   Return
01232: LoadFn { code: 01139, fvars: 00000 }
01233: PushString(""vf"")
01234: AppFnToArg
01235: LoadVar(00012)
01236: LoadVar(00000)
01237: AppFnToArg
01238: AppFnToArg
01239: LoadFn { code: 01222, fvars: 00023 }
01240: AppFnToArg
01241:   Return
01242: LoadFn { code: 01131, fvars: 00000 }
01243: PushString(""v"")
01244: AppFnToArg
01245: LoadVar(00017)
01246: LoadVar(00007)
01247: AppFnToArg
01248: AppFnToArg
01249: LoadFn { code: 01232, fvars: 00022 }
01250: AppFnToArg
01251:   Return
01252: PushEffect("invalid")
01253: LoadVar(00002)
01254: LoadVar(00001)
01255: AppFnToArg
01256: LoadVar(00005)
01257: AppFnToArg
01258: AppFnToArg
01259:   Return
01260: LoadFn { code: 01123, fvars: 00000 }
01261: LoadVar(00001)
01262: AppFnToArg
01263: PushString("Compound")
01264: AppFnToArg
01265: LoadFn { code: 01242, fvars: 00021 }
01266: AppFnToArg
01267: LoadFn { code: 01252, fvars: 00005 }
01268: AppFnToArg
01269:   Return
01270: LoadFn { code: 01260, fvars: 00020 }
01271:   Return
01272: LoadVar(00003)
01273: LoadVar(00002)
01274: LoadVar(00001)
01275: LoadVar(00000)
01276: Cmp
01277: AppArgToFn
01278:   Return
01279: LoadFn { code: 01272, fvars: 00003 }
01280:   Return
01281: LoadFn { code: 01279, fvars: 00002 }
01282:   Return
01283: LoadFn { code: 01281, fvars: 00001 }
01284:   Return
01285: PushString("")
01286:   Return
01287: PushEffect("no-match")
01288: PushString("")
01289: LoadVar(00004)
01290: AppFnToArg
01291: LoadVar(00006)
01292: AppFnToArg
01293: AppFnToArg
01294:   Return
01295: LoadFn { code: 01283, fvars: 00000 }
01296: LoadVar(00011)
01297: LoadVar(00003)
01298: AppFnToArg
01299: LoadVar(00005)
01300: AppFnToArg
01301: AppFnToArg
01302: PushString("True")
01303: AppFnToArg
01304: LoadFn { code: 01285, fvars: 00000 }
01305: AppFnToArg
01306: LoadFn { code: 01287, fvars: 00006 }
01307: AppFnToArg
01308:   Return
01309: LoadFn { code: 01106, fvars: 00000 }
01310: LoadVar(00003)
01311: AppFnToArg
01312: LoadFn { code: 01110, fvars: 00000 }
01313: PushString("")
01314: PushString(""type"")
01315: AppFnToArg
01316: PushString(""f"")
01317: AppFnToArg
01318: AppFnToArg
01319: LoadFn { code: 01270, fvars: 00019 }
01320: AppFnToArg
01321: AppFnToArg
01322: LoadFn { code: 01295, fvars: 00011 }
01323: AppFnToArg
01324:   Return
01325: LoadFn { code: 01030, fvars: 00000 }
01326: LoadVar(00002)
01327: AppFnToArg
01328: PushString("List")
01329: AppFnToArg
01330: LoadFn { code: 01085, fvars: 00018 }
01331: AppFnToArg
01332: LoadFn { code: 01309, fvars: 00018 }
01333: AppFnToArg
01334:   Return
01335: LoadFn { code: 01009, fvars: 00000 }
01336: LoadVar(00001)
01337: AppFnToArg
01338: PushString("Binding")
01339: AppFnToArg
01340: LoadFn { code: 01011, fvars: 00003 }
01341: AppFnToArg
01342: LoadFn { code: 01325, fvars: 00017 }
01343: AppFnToArg
01344:   Return
01345: LoadFn { code: 01335, fvars: 00016 }
01346:   Return
01347: PushEffect("invalid")
01348: LoadVar(00002)
01349: AppFnToArg
01350:   Return
01351: LoadFn { code: 00992, fvars: 00000 }
01352: LoadVar(00001)
01353: AppFnToArg
01354: LoadFn { code: 00996, fvars: 00000 }
01355: PushString("")
01356: PushString(""type"")
01357: AppFnToArg
01358: PushString(""pattern"")
01359: AppFnToArg
01360: AppFnToArg
01361: LoadFn { code: 01345, fvars: 00015 }
01362: AppFnToArg
01363: AppFnToArg
01364: LoadFn { code: 01347, fvars: 00002 }
01365: AppFnToArg
01366:   Return
01367: LoadFn { code: 01351, fvars: 00014 }
01368:   Return
01369: LoadFn { code: 00981, fvars: 00000 }
01370: PushString("")
01371: PushString(""pattern"")
01372: AppFnToArg
01373: PushString(""value"")
01374: AppFnToArg
01375: AppFnToArg
01376: LoadFn { code: 01367, fvars: 00013 }
01377: AppFnToArg
01378:   Return
01379: LoadVar(00002)
01380: LoadVar(00001)
01381: LoadVar(00000)
01382: Try
01383: AppArgToFn
01384: Unwind
01385: AppArgToFn
01386: AppArgToFn
01387:   Return
01388: LoadFn { code: 01379, fvars: 00002 }
01389:   Return
01390: LoadFn { code: 01388, fvars: 00001 }
01391:   Return
01392: LoadVar(00000)
01393: LoadVar(00001)
01394: AppFnToArg
01395:   Return
01396: LoadFn { code: 01392, fvars: 00001 }
01397:   Return
01398: LoadFn { code: 01396, fvars: 00000 }
01399:   Return
01400: LoadVar(00003)
01401: LoadVar(00002)
01402: LoadVar(00001)
01403: LoadVar(00000)
01404: Cmp
01405: AppArgToFn
01406:   Return
01407: LoadFn { code: 01400, fvars: 00003 }
01408:   Return
01409: LoadFn { code: 01407, fvars: 00002 }
01410:   Return
01411: LoadFn { code: 01409, fvars: 00001 }
01412:   Return
01413: LoadVar(00009)
01414: PushString("")
01415: AppFnToArg
01416:   Return
01417: LoadVar(00015)
01418: LoadVar(00009)
01419: AppFnToArg
01420: LoadVar(00001)
01421: AppFnToArg
01422:   Return
01423: LoadFn { code: 01411, fvars: 00000 }
01424: LoadVar(00000)
01425: AppFnToArg
01426: PushString("")
01427: AppFnToArg
01428: LoadFn { code: 01413, fvars: 00009 }
01429: AppFnToArg
01430: LoadFn { code: 01417, fvars: 00015 }
01431: AppFnToArg
01432:   Return
01433: LoadFn { code: 01398, fvars: 00000 }
01434: PushString(""args"")
01435: AppFnToArg
01436: LoadVar(00012)
01437: LoadVar(00004)
01438: AppFnToArg
01439: LoadVar(00001)
01440: LoadVar(00008)
01441: AppFnToArg
01442: LoadVar(00006)
01443: AppFnToArg
01444: AppFnToArg
01445: AppFnToArg
01446: LoadFn { code: 01423, fvars: 00014 }
01447: AppFnToArg
01448:   Return
01449: LoadVar(00000)
01450:   Return
01451: LoadFn { code: 01449, fvars: 00000 }
01452:   Return
01453: PushEffect("no-match")
01454: LoadVar(00000)
01455: AppFnToArg
01456:   Return
01457: LoadFn { code: 01453, fvars: 00000 }
01458:   Return
01459: LoadFn { code: 01390, fvars: 00000 }
01460: LoadFn { code: 01433, fvars: 00013 }
01461: AppFnToArg
01462: PushEffect("no-match")
01463: AppFnToArg
01464: LoadFn { code: 01451, fvars: 00000 }
01465: PushString("")
01466: PushString(""_"")
01467: AppFnToArg
01468: PushString(""arg"")
01469: AppFnToArg
01470: AppFnToArg
01471: LoadFn { code: 01457, fvars: 00000 }
01472: AppFnToArg
01473: AppFnToArg
01474:   Return
01475: LoadFn { code: 00971, fvars: 00000 }
01476: PushString(""unify"")
01477: AppFnToArg
01478: LoadFn { code: 00977, fvars: 00000 }
01479: PushString(""unify"")
01480: AppFnToArg
01481: LoadFn { code: 01369, fvars: 00012 }
01482: AppFnToArg
01483: AppFnToArg
01484: LoadFn { code: 01459, fvars: 00012 }
01485: AppFnToArg
01486:   Return
01487: LoadFn { code: 00787, fvars: 00000 }
01488: PushString(""join"")
01489: AppFnToArg
01490: LoadVar(00012)
01491: LoadFn { code: 00791, fvars: 00000 }
01492: PushString("")
01493: PushString(""acc"")
01494: AppFnToArg
01495: PushString(""pair"")
01496: AppFnToArg
01497: AppFnToArg
01498: LoadFn { code: 00963, fvars: 00013 }
01499: AppFnToArg
01500: AppFnToArg
01501: PushString("")
01502: AppFnToArg
01503: AppFnToArg
01504: LoadFn { code: 01475, fvars: 00011 }
01505: AppFnToArg
01506:   Return
01507: LoadFn { code: 00736, fvars: 00000 }
01508: PushString(""first"")
01509: AppFnToArg
01510: LoadFn { code: 00740, fvars: 00000 }
01511: PushString(""xs"")
01512: AppFnToArg
01513: LoadFn { code: 00765, fvars: 00001 }
01514: AppFnToArg
01515: AppFnToArg
01516: LoadFn { code: 01487, fvars: 00012 }
01517: AppFnToArg
01518:   Return
01519: LoadFn { code: 00687, fvars: 00000 }
01520: PushString(""second"")
01521: AppFnToArg
01522: LoadFn { code: 00691, fvars: 00000 }
01523: PushString(""xs"")
01524: AppFnToArg
01525: LoadFn { code: 00714, fvars: 00000 }
01526: AppFnToArg
01527: AppFnToArg
01528: LoadFn { code: 01507, fvars: 00011 }
01529: AppFnToArg
01530:   Return
01531: LoadFn { code: 00527, fvars: 00000 }
01532: PushString(""=="")
01533: AppFnToArg
01534: LoadFn { code: 00533, fvars: 00000 }
01535: PushString(""=="")
01536: AppFnToArg
01537: LoadFn { code: 00671, fvars: 00000 }
01538: AppFnToArg
01539: AppFnToArg
01540: LoadFn { code: 01519, fvars: 00010 }
01541: AppFnToArg
01542:   Return
01543: LoadFn { code: 01531, fvars: 00009 }
01544:   Return
01545: LoadFn { code: 01543, fvars: 00008 }
01546:   Return
01547: LoadVar(00000)
01548: LoadVar(00001)
01549: AppFnToArg
01550:   Return
01551: LoadFn { code: 01547, fvars: 00001 }
01552:   Return
01553: LoadFn { code: 01551, fvars: 00000 }
01554:   Return
01555: LoadVar(00000)
01556:   Return
01557: LoadFn { code: 01555, fvars: 00000 }
01558:   Return
01559: LoadVar(00000)
01560: LoadVar(00001)
01561: AppFnToArg
01562:   Return
01563: LoadFn { code: 01559, fvars: 00001 }
01564:   Return
01565: LoadFn { code: 01563, fvars: 00000 }
01566:   Return
01567: LoadVar(00000)
01568:   Return
01569: LoadFn { code: 01567, fvars: 00000 }
01570:   Return
01571: LoadVar(00003)
01572: LoadVar(00002)
01573: LoadVar(00001)
01574: LoadVar(00000)
01575: Cmp
01576: AppArgToFn
01577:   Return
01578: LoadFn { code: 01571, fvars: 00003 }
01579:   Return
01580: LoadFn { code: 01578, fvars: 00002 }
01581:   Return
01582: LoadFn { code: 01580, fvars: 00001 }
01583:   Return
01584: LoadVar(00002)
01585: LoadVar(00001)
01586: LoadVar(00000)
01587: Try
01588: AppArgToFn
01589: Unwind
01590: AppArgToFn
01591: AppArgToFn
01592:   Return
01593: LoadFn { code: 01584, fvars: 00002 }
01594:   Return
01595: LoadFn { code: 01593, fvars: 00001 }
01596:   Return
01597: PushString("Match")
01598: LoadVar(00002)
01599: LoadVar(00006)
01600: AppFnToArg
01601: AppFnToArg
01602:   Return
01603: LoadVar(00000)
01604:   Return
01605: LoadFn { code: 01603, fvars: 00000 }
01606:   Return
01607: PushString("")
01608:   Return
01609: LoadFn { code: 01607, fvars: 00000 }
01610:   Return
01611: LoadFn { code: 01595, fvars: 00000 }
01612: LoadFn { code: 01597, fvars: 00006 }
01613: AppFnToArg
01614: PushEffect("no-match")
01615: AppFnToArg
01616: LoadFn { code: 01605, fvars: 00000 }
01617: PushString("")
01618: PushString(""r"")
01619: AppFnToArg
01620: PushString(""arg"")
01621: AppFnToArg
01622: AppFnToArg
01623: LoadFn { code: 01609, fvars: 00000 }
01624: AppFnToArg
01625: AppFnToArg
01626:   Return
01627: LoadVar(00002)
01628:   Return
01629: LoadFn { code: 01582, fvars: 00000 }
01630: LoadVar(00001)
01631: AppFnToArg
01632: PushString("")
01633: AppFnToArg
01634: LoadFn { code: 01611, fvars: 00005 }
01635: AppFnToArg
01636: LoadFn { code: 01627, fvars: 00002 }
01637: AppFnToArg
01638:   Return
01639: LoadFn { code: 01629, fvars: 00004 }
01640:   Return
01641: LoadVar(00002)
01642: LoadVar(00001)
01643: LoadVar(00000)
01644: Unpack
01645: AppArgToFn
01646: AppArgToFn
01647:   Return
01648: LoadFn { code: 01641, fvars: 00002 }
01649:   Return
01650: LoadFn { code: 01648, fvars: 00001 }
01651:   Return
01652: LoadVar(00000)
01653:   Return
01654: LoadFn { code: 01652, fvars: 00000 }
01655:   Return
01656: LoadVar(00000)
01657:   Return
01658: LoadFn { code: 01656, fvars: 00000 }
01659:   Return
01660: PushEffect("no-match")
01661: LoadVar(00004)
01662: AppFnToArg
01663:   Return
01664: LoadFn { code: 01650, fvars: 00000 }
01665: LoadVar(00000)
01666: AppFnToArg
01667: LoadFn { code: 01654, fvars: 00000 }
01668: PushString("")
01669: PushString(""_"")
01670: AppFnToArg
01671: PushString(""result"")
01672: AppFnToArg
01673: AppFnToArg
01674: LoadFn { code: 01658, fvars: 00000 }
01675: AppFnToArg
01676: AppFnToArg
01677: LoadFn { code: 01660, fvars: 00004 }
01678: AppFnToArg
01679:   Return
01680: LoadFn { code: 01565, fvars: 00000 }
01681: PushString(""result"")
01682: AppFnToArg
01683: LoadVar(00010)
01684: LoadFn { code: 01569, fvars: 00000 }
01685: PushString("")
01686: PushString(""result"")
01687: AppFnToArg
01688: PushString(""clause"")
01689: AppFnToArg
01690: AppFnToArg
01691: LoadFn { code: 01639, fvars: 00003 }
01692: AppFnToArg
01693: AppFnToArg
01694: PushString("")
01695: AppFnToArg
01696: LoadVar(00009)
01697: LoadVar(00000)
01698: AppFnToArg
01699: AppFnToArg
01700: AppFnToArg
01701: LoadFn { code: 01664, fvars: 00003 }
01702: AppFnToArg
01703:   Return
01704: LoadVar(00002)
01705: PushString("List")
01706: PushString("")
01707: PushString("List")
01708: PushString("")
01709: PushString("Value")
01710: PushString(""with"")
01711: AppFnToArg
01712: AppFnToArg
01713: PushString("Binding")
01714: PushString(""clauses"")
01715: AppFnToArg
01716: AppFnToArg
01717: AppFnToArg
01718: AppFnToArg
01719: AppFnToArg
01720: AppFnToArg
01721: LoadFn { code: 01680, fvars: 00010 }
01722: AppFnToArg
01723: LoadVar(00000)
01724: AppFnToArg
01725:   Return
01726: LoadFn { code: 01704, fvars: 00009 }
01727:   Return
01728: PushString("Twice")
01729: LoadVar(00000)
01730: AppFnToArg
01731: LoadVar(00000)
01732: AppFnToArg
01733:   Return
01734: LoadFn { code: 01728, fvars: 00000 }
01735:   Return
01736: PushString("SecondIsFoo")
01737:   Return
01738: LoadVar(00000)
01739:   Return
01740: LoadFn { code: 01738, fvars: 00000 }
01741:   Return
01742: PushEffect("throw")
01743: PushString("InvalidPair")
01744: AppFnToArg
01745:   Return
01746: LoadVar(00002)
01747: LoadVar(00001)
01748: LoadVar(00000)
01749: Try
01750: AppArgToFn
01751: Unwind
01752: AppArgToFn
01753: AppArgToFn
01754:   Return
01755: LoadFn { code: 01746, fvars: 00002 }
01756:   Return
01757: LoadFn { code: 01755, fvars: 00001 }
01758:   Return
01759: PushString("Twice")
01760: LoadVar(00000)
01761: AppFnToArg
01762: LoadVar(00000)
01763: AppFnToArg
01764:   Return
01765: LoadFn { code: 01759, fvars: 00000 }
01766:   Return
01767: PushString("SecondIsFoo")
01768:   Return
01769: LoadVar(00000)
01770:   Return
01771: LoadFn { code: 01769, fvars: 00000 }
01772:   Return
01773: LoadVar(00001)
01774: PushString("Foo")
01775: AppFnToArg
01776: PushString("")
01777: PushString("")
01778: PushString(""with"")
01779: AppFnToArg
01780: PushString("")
01781: LoadVar(00002)
01782: PushString("Compound")
01783: PushString("Value")
01784: PushString("Pair")
01785: AppFnToArg
01786: AppFnToArg
01787: PushString("")
01788: PushString("Binding")
01789: PushString(""x"")
01790: AppFnToArg
01791: AppFnToArg
01792: PushString("Binding")
01793: PushString(""x"")
01794: AppFnToArg
01795: AppFnToArg
01796: AppFnToArg
01797: AppFnToArg
01798: LoadFn { code: 01765, fvars: 00000 }
01799: AppFnToArg
01800: AppFnToArg
01801: LoadVar(00002)
01802: PushString("Compound")
01803: PushString("Value")
01804: PushString("Pair")
01805: AppFnToArg
01806: AppFnToArg
01807: PushString("")
01808: PushString("Binding")
01809: PushString(""x"")
01810: AppFnToArg
01811: AppFnToArg
01812: PushString("Value")
01813: PushString("Foo")
01814: AppFnToArg
01815: AppFnToArg
01816: AppFnToArg
01817: AppFnToArg
01818: LoadFn { code: 01767, fvars: 00000 }
01819: AppFnToArg
01820: AppFnToArg
01821: LoadVar(00002)
01822: PushString("Compound")
01823: PushString("Value")
01824: PushString("Pair")
01825: AppFnToArg
01826: AppFnToArg
01827: PushString("")
01828: PushString("Binding")
01829: PushString(""x"")
01830: AppFnToArg
01831: AppFnToArg
01832: PushString("Binding")
01833: PushString(""y"")
01834: AppFnToArg
01835: AppFnToArg
01836: AppFnToArg
01837: AppFnToArg
01838: LoadFn { code: 01771, fvars: 00000 }
01839: AppFnToArg
01840: AppFnToArg
01841: AppFnToArg
01842: AppFnToArg
01843: AppFnToArg
01844:   Return
01845: LoadVar(00000)
01846:   Return
01847: LoadFn { code: 01845, fvars: 00000 }
01848:   Return
01849: PushString("NoMatch")
01850: LoadVar(00000)
01851: AppFnToArg
01852:   Return
01853: LoadFn { code: 01849, fvars: 00000 }
01854:   Return
01855: PushString("")
01856: LoadVar(00000)
01857: PushString("Pair")
01858: PushString("Foo")
01859: AppFnToArg
01860: PushString("Bar")
01861: AppFnToArg
01862: AppFnToArg
01863: PushString("")
01864: PushString("")
01865: PushString(""with"")
01866: AppFnToArg
01867: PushString("")
01868: LoadVar(00001)
01869: PushString("Compound")
01870: PushString("Value")
01871: PushString("Pair")
01872: AppFnToArg
01873: AppFnToArg
01874: PushString("")
01875: PushString("Binding")
01876: PushString(""x"")
01877: AppFnToArg
01878: AppFnToArg
01879: PushString("Binding")
01880: PushString(""x"")
01881: AppFnToArg
01882: AppFnToArg
01883: AppFnToArg
01884: AppFnToArg
01885: LoadFn { code: 01734, fvars: 00000 }
01886: AppFnToArg
01887: AppFnToArg
01888: LoadVar(00001)
01889: PushString("Compound")
01890: PushString("Value")
01891: PushString("Pair")
01892: AppFnToArg
01893: AppFnToArg
01894: PushString("")
01895: PushString("Binding")
01896: PushString(""x"")
01897: AppFnToArg
01898: AppFnToArg
01899: PushString("Value")
01900: PushString("Foo")
01901: AppFnToArg
01902: AppFnToArg
01903: AppFnToArg
01904: AppFnToArg
01905: LoadFn { code: 01736, fvars: 00000 }
01906: AppFnToArg
01907: AppFnToArg
01908: LoadVar(00001)
01909: PushString("Compound")
01910: PushString("Value")
01911: PushString("Pair")
01912: AppFnToArg
01913: AppFnToArg
01914: PushString("")
01915: PushString("Binding")
01916: PushString(""x"")
01917: AppFnToArg
01918: AppFnToArg
01919: PushString("Binding")
01920: PushString(""y"")
01921: AppFnToArg
01922: AppFnToArg
01923: AppFnToArg
01924: AppFnToArg
01925: LoadFn { code: 01740, fvars: 00000 }
01926: AppFnToArg
01927: AppFnToArg
01928: LoadVar(00001)
01929: PushString("Binding")
01930: PushString(""_"")
01931: AppFnToArg
01932: AppFnToArg
01933: LoadFn { code: 01742, fvars: 00000 }
01934: AppFnToArg
01935: AppFnToArg
01936: AppFnToArg
01937: AppFnToArg
01938: AppFnToArg
01939: AppFnToArg
01940: LoadFn { code: 01757, fvars: 00000 }
01941: LoadFn { code: 01773, fvars: 00002 }
01942: AppFnToArg
01943: PushEffect("no-match")
01944: AppFnToArg
01945: LoadFn { code: 01847, fvars: 00000 }
01946: PushString("")
01947: PushString(""_"")
01948: AppFnToArg
01949: PushString(""arg"")
01950: AppFnToArg
01951: AppFnToArg
01952: LoadFn { code: 01853, fvars: 00000 }
01953: AppFnToArg
01954: AppFnToArg
01955: AppFnToArg
01956:   Return
01957: LoadFn { code: 01553, fvars: 00000 }
01958: PushString(""match"")
01959: AppFnToArg
01960: LoadFn { code: 01557, fvars: 00000 }
01961: PushString("")
01962: PushString(""value"")
01963: AppFnToArg
01964: PushString(""args"")
01965: AppFnToArg
01966: AppFnToArg
01967: LoadFn { code: 01726, fvars: 00008 }
01968: AppFnToArg
01969: AppFnToArg
01970: LoadFn { code: 01855, fvars: 00001 }
01971: AppFnToArg
01972:   Return
01973: LoadFn { code: 00515, fvars: 00000 }
01974: PushString(""->"")
01975: AppFnToArg
01976: LoadFn { code: 00519, fvars: 00000 }
01977: PushString("")
01978: PushString(""pattern"")
01979: AppFnToArg
01980: PushString(""body"")
01981: AppFnToArg
01982: PushString(""value"")
01983: AppFnToArg
01984: AppFnToArg
01985: LoadFn { code: 01545, fvars: 00007 }
01986: AppFnToArg
01987: AppFnToArg
01988: LoadFn { code: 01957, fvars: 00007 }
01989: AppFnToArg
01990:   Return
01991: LoadFn { code: 00436, fvars: 00000 }
01992: PushString(""destructure"")
01993: AppFnToArg
01994: LoadFn { code: 00442, fvars: 00000 }
01995: PushString(""destructure"")
01996: AppFnToArg
01997: LoadFn { code: 00499, fvars: 00005 }
01998: AppFnToArg
01999: PushString("")
02000: AppFnToArg
02001: AppFnToArg
02002: LoadFn { code: 01973, fvars: 00006 }
02003: AppFnToArg
02004:   Return
02005: LoadFn { code: 00283, fvars: 00000 }
02006: PushString(""zip"")
02007: AppFnToArg
02008: LoadFn { code: 00289, fvars: 00000 }
02009: PushString(""zip"")
02010: AppFnToArg
02011: LoadFn { code: 00418, fvars: 00000 }
02012: AppFnToArg
02013: PushString("")
02014: AppFnToArg
02015: AppFnToArg
02016: LoadFn { code: 01991, fvars: 00005 }
02017: AppFnToArg
02018:   Return
02019: LoadFn { code: 00221, fvars: 00000 }
02020: PushString(""flatten"")
02021: AppFnToArg
02022: LoadFn { code: 00225, fvars: 00000 }
02023: PushString(""xs"")
02024: AppFnToArg
02025: LoadFn { code: 00259, fvars: 00004 }
02026: AppFnToArg
02027: AppFnToArg
02028: LoadFn { code: 02005, fvars: 00004 }
02029: AppFnToArg
02030:   Return
02031: LoadFn { code: 00177, fvars: 00000 }
02032: PushString(""map"")
02033: AppFnToArg
02034: LoadFn { code: 00181, fvars: 00000 }
02035: PushString("")
02036: PushString(""f"")
02037: AppFnToArg
02038: PushString(""xs"")
02039: AppFnToArg
02040: AppFnToArg
02041: LoadFn { code: 00213, fvars: 00003 }
02042: AppFnToArg
02043: AppFnToArg
02044: LoadFn { code: 02019, fvars: 00003 }
02045: AppFnToArg
02046:   Return
02047: LoadFn { code: 00135, fvars: 00000 }
02048: PushString(""apply"")
02049: AppFnToArg
02050: LoadFn { code: 00139, fvars: 00000 }
02051: PushString("")
02052: PushString(""f"")
02053: AppFnToArg
02054: PushString(""xs"")
02055: AppFnToArg
02056: AppFnToArg
02057: LoadFn { code: 00169, fvars: 00002 }
02058: AppFnToArg
02059: AppFnToArg
02060: LoadFn { code: 02031, fvars: 00002 }
02061: AppFnToArg
02062:   Return
02063: LoadFn { code: 00097, fvars: 00000 }
02064: PushString(""reverse"")
02065: AppFnToArg
02066: LoadFn { code: 00101, fvars: 00000 }
02067: PushString(""xs"")
02068: AppFnToArg
02069: LoadFn { code: 00113, fvars: 00001 }
02070: AppFnToArg
02071: AppFnToArg
02072: LoadFn { code: 02047, fvars: 00001 }
02073: AppFnToArg
02074:   Return
02075: LoadFn { code: 00016, fvars: 00000 }
02076: PushString(""fold"")
02077: AppFnToArg
02078: LoadFn { code: 00022, fvars: 00000 }
02079: PushString(""fold"")
02080: AppFnToArg
02081: LoadFn { code: 00079, fvars: 00000 }
02082: AppFnToArg
02083: AppFnToArg
02084: LoadFn { code: 02063, fvars: 00000 }
02085: AppFnToArg
02086:   Return

[Bar, NoMatch(Foo)]