'fold = ('fold ~> { ['f, 'acc, 'xs] => {
    pop(xs, ['xs, 'x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
fold(['acc, 'x] => { acc(x) }, [], [A, B, C])

(=
  'fold
  (~>
    'fold
    { (=>
        ( 'f
          'acc
          'xs )
        { (pop
            xs
            (=>
              ( 'xs
                'x )
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(fold
  (=>
    ( 'acc
      'x )
    { (acc
        x) })
  (  )
  ( A
    B
    C ))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( 0
          ( ( =>
                =>
                  0
              ( ( []
                  "x" )
                "acc" ) )
            =>
              =>
                ( 1
                  0 ) ) )
        [] )
      ( ( ( []
            C )
          B )
        A ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00005)
00035: PushVar(00004)
00036: Swap(00002)
00037: Apply
00038: PushVar(00004)
00039: PushVar(00003)
00040: Swap(00002)
00041: Apply
00042: PushVar(00000)
00043: Swap(00002)
00044: Apply
00045: Swap(00002)
00046: Apply
00047: PushVar(00001)
00048: Swap(00002)
00049: Apply
00050:   Return
00051: PushFn(00034, 00005)
00052:   Return
00053: PushVar(00002)
00054:   Return
00055: PushFn(00028, 00000)
00056: PushVar(00000)
00057: Swap(00002)
00058: Apply
00059: PushFn(00032, 00000)
00060: PushString("")
00061: PushString(""x"")
00062: Swap(00002)
00063: Apply
00064: PushString(""xs"")
00065: Swap(00002)
00066: Apply
00067: Swap(00002)
00068: Apply
00069: PushFn(00051, 00004)
00070: Swap(00002)
00071: Apply
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00055, 00003)
00079:   Return
00080: PushFn(00078, 00002)
00081:   Return
00082: PushFn(00016, 00000)
00083: PushString("")
00084: PushString(""xs"")
00085: Swap(00002)
00086: Apply
00087: PushString(""acc"")
00088: Swap(00002)
00089: Apply
00090: PushString(""f"")
00091: Swap(00002)
00092: Apply
00093: Swap(00002)
00094: Apply
00095: PushFn(00080, 00001)
00096: Swap(00002)
00097: Apply
00098:   Return
00099: PushVar(00000)
00100:   Return
00101: PushFn(00099, 00000)
00102:   Return
00103: PushVar(00001)
00104: PushVar(00000)
00105: Swap(00002)
00106: Apply
00107:   Return
00108: PushFn(00103, 00001)
00109:   Return
00110: PushVar(00000)
00111: PushFn(00101, 00000)
00112: PushString("")
00113: PushString(""x"")
00114: Swap(00002)
00115: Apply
00116: PushString(""acc"")
00117: Swap(00002)
00118: Apply
00119: Swap(00002)
00120: Apply
00121: PushFn(00108, 00000)
00122: Swap(00002)
00123: Apply
00124: Swap(00002)
00125: Apply
00126: PushString("")
00127: Swap(00002)
00128: Apply
00129: PushString("")
00130: PushString("C")
00131: Swap(00002)
00132: Apply
00133: PushString("B")
00134: Swap(00002)
00135: Apply
00136: PushString("A")
00137: Swap(00002)
00138: Apply
00139: Swap(00002)
00140: Apply
00141:   Return
00142: PushFn(00007, 00000)
00143: PushString(""fold"")
00144: Swap(00002)
00145: Apply
00146: PushFn(00012, 00000)
00147: PushString(""fold"")
00148: Swap(00002)
00149: Apply
00150: PushFn(00082, 00000)
00151: Swap(00002)
00152: Apply
00153: Swap(00002)
00154: Apply
00155: PushFn(00110, 00000)
00156: Swap(00002)
00157: Apply

[C, B, A]

---

'fold = ('fold ~> { ['f, 'acc, 'xs] => {
    pop(xs, ['xs, 'x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
'rev = ('xs => {
    fold(['xs, 'x] => { xs(x) }, [], xs)
})
rev([A, B, C])

(=
  'fold
  (~>
    'fold
    { (=>
        ( 'f
          'acc
          'xs )
        { (pop
            xs
            (=>
              ( 'xs
                'x )
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'rev
  (=>
    'xs
    { (fold
        (=>
          ( 'xs
            'x )
          { (xs
              x) })
        (  )
        xs) }))
(rev
  ( A
    B
    C ))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( 0
          ( ( ( []
                C )
              B )
            A ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00005)
00035: PushVar(00004)
00036: Swap(00002)
00037: Apply
00038: PushVar(00004)
00039: PushVar(00003)
00040: Swap(00002)
00041: Apply
00042: PushVar(00000)
00043: Swap(00002)
00044: Apply
00045: Swap(00002)
00046: Apply
00047: PushVar(00001)
00048: Swap(00002)
00049: Apply
00050:   Return
00051: PushFn(00034, 00005)
00052:   Return
00053: PushVar(00002)
00054:   Return
00055: PushFn(00028, 00000)
00056: PushVar(00000)
00057: Swap(00002)
00058: Apply
00059: PushFn(00032, 00000)
00060: PushString("")
00061: PushString(""x"")
00062: Swap(00002)
00063: Apply
00064: PushString(""xs"")
00065: Swap(00002)
00066: Apply
00067: Swap(00002)
00068: Apply
00069: PushFn(00051, 00004)
00070: Swap(00002)
00071: Apply
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00055, 00003)
00079:   Return
00080: PushFn(00078, 00002)
00081:   Return
00082: PushFn(00016, 00000)
00083: PushString("")
00084: PushString(""xs"")
00085: Swap(00002)
00086: Apply
00087: PushString(""acc"")
00088: Swap(00002)
00089: Apply
00090: PushString(""f"")
00091: Swap(00002)
00092: Apply
00093: Swap(00002)
00094: Apply
00095: PushFn(00080, 00001)
00096: Swap(00002)
00097: Apply
00098:   Return
00099: PushVar(00000)
00100: PushVar(00001)
00101: Swap(00002)
00102: Apply
00103:   Return
00104: PushFn(00099, 00001)
00105:   Return
00106: PushFn(00104, 00000)
00107:   Return
00108: PushVar(00000)
00109:   Return
00110: PushFn(00108, 00000)
00111:   Return
00112: PushVar(00000)
00113:   Return
00114: PushFn(00112, 00000)
00115:   Return
00116: PushVar(00001)
00117: PushVar(00000)
00118: Swap(00002)
00119: Apply
00120:   Return
00121: PushFn(00116, 00001)
00122:   Return
00123: PushVar(00001)
00124: PushFn(00114, 00000)
00125: PushString("")
00126: PushString(""x"")
00127: Swap(00002)
00128: Apply
00129: PushString(""xs"")
00130: Swap(00002)
00131: Apply
00132: Swap(00002)
00133: Apply
00134: PushFn(00121, 00000)
00135: Swap(00002)
00136: Apply
00137: Swap(00002)
00138: Apply
00139: PushString("")
00140: Swap(00002)
00141: Apply
00142: PushVar(00000)
00143: Swap(00002)
00144: Apply
00145:   Return
00146: PushVar(00000)
00147: PushString("")
00148: PushString("C")
00149: Swap(00002)
00150: Apply
00151: PushString("B")
00152: Swap(00002)
00153: Apply
00154: PushString("A")
00155: Swap(00002)
00156: Apply
00157: Swap(00002)
00158: Apply
00159:   Return
00160: PushFn(00106, 00000)
00161: PushString(""rev"")
00162: Swap(00002)
00163: Apply
00164: PushFn(00110, 00000)
00165: PushString(""xs"")
00166: Swap(00002)
00167: Apply
00168: PushFn(00123, 00001)
00169: Swap(00002)
00170: Apply
00171: Swap(00002)
00172: Apply
00173: PushFn(00146, 00000)
00174: Swap(00002)
00175: Apply
00176:   Return
00177: PushFn(00007, 00000)
00178: PushString(""fold"")
00179: Swap(00002)
00180: Apply
00181: PushFn(00012, 00000)
00182: PushString(""fold"")
00183: Swap(00002)
00184: Apply
00185: PushFn(00082, 00000)
00186: Swap(00002)
00187: Apply
00188: Swap(00002)
00189: Apply
00190: PushFn(00160, 00000)
00191: Swap(00002)
00192: Apply

[C, B, A]

---

'fold = ('fold ~> { ['f, 'acc, 'xs] => {
    pop(xs, ['xs, 'x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
'apply = (['f, 'xs] => {
    fold(['f, 'x] => { f(x) }, f, xs)
})
apply(['x, 'y, 'z] => { Triple(x, y, z) }, [A, B, C])

(=
  'fold
  (~>
    'fold
    { (=>
        ( 'f
          'acc
          'xs )
        { (pop
            xs
            (=>
              ( 'xs
                'x )
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'apply
  (=>
    ( 'f
      'xs )
    { (fold
        (=>
          ( 'f
            'x )
          { (f
              x) })
        f
        xs) }))
(apply
  (=>
    ( 'x
      'y
      'z )
    { (Triple
        x
        y
        z) })
  ( A
    B
    C ))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "apply" )
        ( ( =>
              =>
                0
            ( ( []
                "xs" )
              "f" ) )
          =>
            =>
              ( ( ( 2
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "f" ) )
                      =>
                        =>
                          ( 1
                            0 ) ) )
                  1 )
                0 ) ) )
      =>
        ( ( 0
            ( ( =>
                  =>
                    0
                ( ( ( []
                      "z" )
                    "y" )
                  "x" ) )
              =>
                =>
                  =>
                    ( ( ( Triple
                          2 )
                        1 )
                      0 ) ) )
          ( ( ( []
                C )
              B )
            A ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00005)
00035: PushVar(00004)
00036: Swap(00002)
00037: Apply
00038: PushVar(00004)
00039: PushVar(00003)
00040: Swap(00002)
00041: Apply
00042: PushVar(00000)
00043: Swap(00002)
00044: Apply
00045: Swap(00002)
00046: Apply
00047: PushVar(00001)
00048: Swap(00002)
00049: Apply
00050:   Return
00051: PushFn(00034, 00005)
00052:   Return
00053: PushVar(00002)
00054:   Return
00055: PushFn(00028, 00000)
00056: PushVar(00000)
00057: Swap(00002)
00058: Apply
00059: PushFn(00032, 00000)
00060: PushString("")
00061: PushString(""x"")
00062: Swap(00002)
00063: Apply
00064: PushString(""xs"")
00065: Swap(00002)
00066: Apply
00067: Swap(00002)
00068: Apply
00069: PushFn(00051, 00004)
00070: Swap(00002)
00071: Apply
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00055, 00003)
00079:   Return
00080: PushFn(00078, 00002)
00081:   Return
00082: PushFn(00016, 00000)
00083: PushString("")
00084: PushString(""xs"")
00085: Swap(00002)
00086: Apply
00087: PushString(""acc"")
00088: Swap(00002)
00089: Apply
00090: PushString(""f"")
00091: Swap(00002)
00092: Apply
00093: Swap(00002)
00094: Apply
00095: PushFn(00080, 00001)
00096: Swap(00002)
00097: Apply
00098:   Return
00099: PushVar(00000)
00100: PushVar(00001)
00101: Swap(00002)
00102: Apply
00103:   Return
00104: PushFn(00099, 00001)
00105:   Return
00106: PushFn(00104, 00000)
00107:   Return
00108: PushVar(00000)
00109:   Return
00110: PushFn(00108, 00000)
00111:   Return
00112: PushVar(00000)
00113:   Return
00114: PushFn(00112, 00000)
00115:   Return
00116: PushVar(00001)
00117: PushVar(00000)
00118: Swap(00002)
00119: Apply
00120:   Return
00121: PushFn(00116, 00001)
00122:   Return
00123: PushVar(00002)
00124: PushFn(00114, 00000)
00125: PushString("")
00126: PushString(""x"")
00127: Swap(00002)
00128: Apply
00129: PushString(""f"")
00130: Swap(00002)
00131: Apply
00132: Swap(00002)
00133: Apply
00134: PushFn(00121, 00000)
00135: Swap(00002)
00136: Apply
00137: Swap(00002)
00138: Apply
00139: PushVar(00001)
00140: Swap(00002)
00141: Apply
00142: PushVar(00000)
00143: Swap(00002)
00144: Apply
00145:   Return
00146: PushFn(00123, 00002)
00147:   Return
00148: PushVar(00000)
00149:   Return
00150: PushFn(00148, 00000)
00151:   Return
00152: PushString("Triple")
00153: PushVar(00002)
00154: Swap(00002)
00155: Apply
00156: PushVar(00001)
00157: Swap(00002)
00158: Apply
00159: PushVar(00000)
00160: Swap(00002)
00161: Apply
00162:   Return
00163: PushFn(00152, 00002)
00164:   Return
00165: PushFn(00163, 00001)
00166:   Return
00167: PushVar(00000)
00168: PushFn(00150, 00000)
00169: PushString("")
00170: PushString(""z"")
00171: Swap(00002)
00172: Apply
00173: PushString(""y"")
00174: Swap(00002)
00175: Apply
00176: PushString(""x"")
00177: Swap(00002)
00178: Apply
00179: Swap(00002)
00180: Apply
00181: PushFn(00165, 00000)
00182: Swap(00002)
00183: Apply
00184: Swap(00002)
00185: Apply
00186: PushString("")
00187: PushString("C")
00188: Swap(00002)
00189: Apply
00190: PushString("B")
00191: Swap(00002)
00192: Apply
00193: PushString("A")
00194: Swap(00002)
00195: Apply
00196: Swap(00002)
00197: Apply
00198:   Return
00199: PushFn(00106, 00000)
00200: PushString(""apply"")
00201: Swap(00002)
00202: Apply
00203: PushFn(00110, 00000)
00204: PushString("")
00205: PushString(""xs"")
00206: Swap(00002)
00207: Apply
00208: PushString(""f"")
00209: Swap(00002)
00210: Apply
00211: Swap(00002)
00212: Apply
00213: PushFn(00146, 00001)
00214: Swap(00002)
00215: Apply
00216: Swap(00002)
00217: Apply
00218: PushFn(00167, 00000)
00219: Swap(00002)
00220: Apply
00221:   Return
00222: PushFn(00007, 00000)
00223: PushString(""fold"")
00224: Swap(00002)
00225: Apply
00226: PushFn(00012, 00000)
00227: PushString(""fold"")
00228: Swap(00002)
00229: Apply
00230: PushFn(00082, 00000)
00231: Swap(00002)
00232: Apply
00233: Swap(00002)
00234: Apply
00235: PushFn(00199, 00000)
00236: Swap(00002)
00237: Apply

Triple(A, B, C)

---

'fold = ('fold ~> { ['f, 'acc, 'xs] => {
    pop(xs, ['xs, 'x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
'rev = ('xs => {
    fold(['xs, 'x] => { xs(x) }, [], xs)
})
'map = (['f, 'xs] => {
    fold(['xs, 'x] => { xs(f(x)) }, [], rev(xs))
})
map('x => { Foo(x) }, [A, B, C])

(=
  'fold
  (~>
    'fold
    { (=>
        ( 'f
          'acc
          'xs )
        { (pop
            xs
            (=>
              ( 'xs
                'x )
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'rev
  (=>
    'xs
    { (fold
        (=>
          ( 'xs
            'x )
          { (xs
              x) })
        (  )
        xs) }))
(=
  'map
  (=>
    ( 'f
      'xs )
    { (fold
        (=>
          ( 'xs
            'x )
          { (xs
              (f
                x)) })
        (  )
        (rev
          xs)) }))
(map
  (=>
    'x
    { (Foo
        x) })
  ( A
    B
    C ))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "map" )
            ( ( =>
                  =>
                    0
                ( ( []
                    "xs" )
                  "f" ) )
              =>
                =>
                  ( ( ( 3
                        ( ( =>
                              =>
                                0
                            ( ( []
                                "x" )
                              "xs" ) )
                          =>
                            =>
                              ( 1
                                ( 3
                                  0 ) ) ) )
                      [] )
                    ( 2
                      0 ) ) ) )
          =>
            ( ( 0
                ( ( =>
                      =>
                        0
                    "x" )
                  =>
                    ( Foo
                      0 ) ) )
              ( ( ( []
                    C )
                  B )
                A ) ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00005)
00035: PushVar(00004)
00036: Swap(00002)
00037: Apply
00038: PushVar(00004)
00039: PushVar(00003)
00040: Swap(00002)
00041: Apply
00042: PushVar(00000)
00043: Swap(00002)
00044: Apply
00045: Swap(00002)
00046: Apply
00047: PushVar(00001)
00048: Swap(00002)
00049: Apply
00050:   Return
00051: PushFn(00034, 00005)
00052:   Return
00053: PushVar(00002)
00054:   Return
00055: PushFn(00028, 00000)
00056: PushVar(00000)
00057: Swap(00002)
00058: Apply
00059: PushFn(00032, 00000)
00060: PushString("")
00061: PushString(""x"")
00062: Swap(00002)
00063: Apply
00064: PushString(""xs"")
00065: Swap(00002)
00066: Apply
00067: Swap(00002)
00068: Apply
00069: PushFn(00051, 00004)
00070: Swap(00002)
00071: Apply
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00055, 00003)
00079:   Return
00080: PushFn(00078, 00002)
00081:   Return
00082: PushFn(00016, 00000)
00083: PushString("")
00084: PushString(""xs"")
00085: Swap(00002)
00086: Apply
00087: PushString(""acc"")
00088: Swap(00002)
00089: Apply
00090: PushString(""f"")
00091: Swap(00002)
00092: Apply
00093: Swap(00002)
00094: Apply
00095: PushFn(00080, 00001)
00096: Swap(00002)
00097: Apply
00098:   Return
00099: PushVar(00000)
00100: PushVar(00001)
00101: Swap(00002)
00102: Apply
00103:   Return
00104: PushFn(00099, 00001)
00105:   Return
00106: PushFn(00104, 00000)
00107:   Return
00108: PushVar(00000)
00109:   Return
00110: PushFn(00108, 00000)
00111:   Return
00112: PushVar(00000)
00113:   Return
00114: PushFn(00112, 00000)
00115:   Return
00116: PushVar(00001)
00117: PushVar(00000)
00118: Swap(00002)
00119: Apply
00120:   Return
00121: PushFn(00116, 00001)
00122:   Return
00123: PushVar(00001)
00124: PushFn(00114, 00000)
00125: PushString("")
00126: PushString(""x"")
00127: Swap(00002)
00128: Apply
00129: PushString(""xs"")
00130: Swap(00002)
00131: Apply
00132: Swap(00002)
00133: Apply
00134: PushFn(00121, 00000)
00135: Swap(00002)
00136: Apply
00137: Swap(00002)
00138: Apply
00139: PushString("")
00140: Swap(00002)
00141: Apply
00142: PushVar(00000)
00143: Swap(00002)
00144: Apply
00145:   Return
00146: PushVar(00000)
00147: PushVar(00001)
00148: Swap(00002)
00149: Apply
00150:   Return
00151: PushFn(00146, 00001)
00152:   Return
00153: PushFn(00151, 00000)
00154:   Return
00155: PushVar(00000)
00156:   Return
00157: PushFn(00155, 00000)
00158:   Return
00159: PushVar(00000)
00160:   Return
00161: PushFn(00159, 00000)
00162:   Return
00163: PushVar(00001)
00164: PushVar(00003)
00165: PushVar(00000)
00166: Swap(00002)
00167: Apply
00168: Swap(00002)
00169: Apply
00170:   Return
00171: PushFn(00163, 00003)
00172:   Return
00173: PushVar(00003)
00174: PushFn(00161, 00000)
00175: PushString("")
00176: PushString(""x"")
00177: Swap(00002)
00178: Apply
00179: PushString(""xs"")
00180: Swap(00002)
00181: Apply
00182: Swap(00002)
00183: Apply
00184: PushFn(00171, 00002)
00185: Swap(00002)
00186: Apply
00187: Swap(00002)
00188: Apply
00189: PushString("")
00190: Swap(00002)
00191: Apply
00192: PushVar(00002)
00193: PushVar(00000)
00194: Swap(00002)
00195: Apply
00196: Swap(00002)
00197: Apply
00198:   Return
00199: PushFn(00173, 00003)
00200:   Return
00201: PushVar(00000)
00202:   Return
00203: PushFn(00201, 00000)
00204:   Return
00205: PushString("Foo")
00206: PushVar(00000)
00207: Swap(00002)
00208: Apply
00209:   Return
00210: PushVar(00000)
00211: PushFn(00203, 00000)
00212: PushString(""x"")
00213: Swap(00002)
00214: Apply
00215: PushFn(00205, 00000)
00216: Swap(00002)
00217: Apply
00218: Swap(00002)
00219: Apply
00220: PushString("")
00221: PushString("C")
00222: Swap(00002)
00223: Apply
00224: PushString("B")
00225: Swap(00002)
00226: Apply
00227: PushString("A")
00228: Swap(00002)
00229: Apply
00230: Swap(00002)
00231: Apply
00232:   Return
00233: PushFn(00153, 00000)
00234: PushString(""map"")
00235: Swap(00002)
00236: Apply
00237: PushFn(00157, 00000)
00238: PushString("")
00239: PushString(""xs"")
00240: Swap(00002)
00241: Apply
00242: PushString(""f"")
00243: Swap(00002)
00244: Apply
00245: Swap(00002)
00246: Apply
00247: PushFn(00199, 00002)
00248: Swap(00002)
00249: Apply
00250: Swap(00002)
00251: Apply
00252: PushFn(00210, 00000)
00253: Swap(00002)
00254: Apply
00255:   Return
00256: PushFn(00106, 00000)
00257: PushString(""rev"")
00258: Swap(00002)
00259: Apply
00260: PushFn(00110, 00000)
00261: PushString(""xs"")
00262: Swap(00002)
00263: Apply
00264: PushFn(00123, 00001)
00265: Swap(00002)
00266: Apply
00267: Swap(00002)
00268: Apply
00269: PushFn(00233, 00001)
00270: Swap(00002)
00271: Apply
00272:   Return
00273: PushFn(00007, 00000)
00274: PushString(""fold"")
00275: Swap(00002)
00276: Apply
00277: PushFn(00012, 00000)
00278: PushString(""fold"")
00279: Swap(00002)
00280: Apply
00281: PushFn(00082, 00000)
00282: Swap(00002)
00283: Apply
00284: Swap(00002)
00285: Apply
00286: PushFn(00256, 00000)
00287: Swap(00002)
00288: Apply

[Foo(A), Foo(B), Foo(C)]

---

'fold = ('fold ~> { ['f, 'acc, 'xs] => {
    pop(xs, ['xs, 'x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
'rev = ('xs => {
    fold(['xs, 'x] => { xs(x) }, [], xs)
})
'zip = ('zip ~> { ['acc, 'xs, 'ys] => {
    pop(xs, ['xs, 'x] => {
        pop(ys, ['ys, 'y] => { zip(acc([x, y]), xs, ys) }, {})
    }, {
        pop(ys, ['ys, 'y] => {}, { acc })
    })
}})
'zip = (['xs, 'ys] => { rev(zip([], xs, ys)) })
[
    zip([A, B, C], [X, Y, Z])
    zip([A, B, C], [X, Y])
    zip([A, B], [X, Y, Z])
    zip(Foo, [X, Y, Z])
    zip(Foo, Bar)
]

(=
  'fold
  (~>
    'fold
    { (=>
        ( 'f
          'acc
          'xs )
        { (pop
            xs
            (=>
              ( 'xs
                'x )
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'rev
  (=>
    'xs
    { (fold
        (=>
          ( 'xs
            'x )
          { (xs
              x) })
        (  )
        xs) }))
(=
  'zip
  (~>
    'zip
    { (=>
        ( 'acc
          'xs
          'ys )
        { (pop
            xs
            (=>
              ( 'xs
                'x )
              { (pop
                  ys
                  (=>
                    ( 'ys
                      'y )
                    { (zip
                        (acc
                          ( x
                            y ))
                        xs
                        ys) })
                  {  }) })
            { (pop
                ys
                (=>
                  ( 'ys
                    'y )
                  {  })
                { acc }) }) }) }))
(=
  'zip
  (=>
    ( 'xs
      'ys )
    { (rev
        (zip
          (  )
          xs
          ys)) }))
( (zip
    ( A
      B
      C )
    ( X
      Y
      Z ))
  (zip
    ( A
      B
      C )
    ( X
      Y ))
  (zip
    ( A
      B )
    ( X
      Y
      Z ))
  (zip
    Foo
    ( X
      Y
      Z ))
  (zip
    Foo
    Bar) )

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "zip" )
            ( ( =>
                  =>
                    ~>
                      0
                "zip" )
              =>
                ( ( =>
                      =>
                        0
                    ( ( ( []
                          "ys" )
                        "xs" )
                      "acc" ) )
                  =>
                    =>
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( pop
                                      2
                                      1
                                      0 )
                              1 )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "x" )
                                  "xs" ) )
                              =>
                                =>
                                  ( ( ( =>
                                          =>
                                            =>
                                              ( pop
                                                2
                                                1
                                                0 )
                                        2 )
                                      ( ( =>
                                            =>
                                              0
                                          ( ( []
                                              "y" )
                                            "ys" ) )
                                        =>
                                          =>
                                            ( ( ( 7
                                                  ( 6
                                                    ( ( []
                                                        0 )
                                                      2 ) ) )
                                                3 )
                                              1 ) ) )
                                    =>
                                      [] ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( pop
                                          2
                                          1
                                          0 )
                                  1 )
                                ( ( =>
                                      =>
                                        0
                                    ( ( []
                                        "y" )
                                      "ys" ) )
                                  =>
                                    =>
                                      [] ) )
                              =>
                                4 ) ) ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "zip" )
                ( ( =>
                      =>
                        0
                    ( ( []
                        "ys" )
                      "xs" ) )
                  =>
                    =>
                      ( 3
                        ( ( ( 2
                              [] )
                            1 )
                          0 ) ) ) )
              =>
                ( ( ( ( ( []
                          ( ( 0
                              Foo )
                            Bar ) )
                        ( ( 0
                            Foo )
                          ( ( ( []
                                Z )
                              Y )
                            X ) ) )
                      ( ( 0
                          ( ( []
                              B )
                            A ) )
                        ( ( ( []
                              Z )
                            Y )
                          X ) ) )
                    ( ( 0
                        ( ( ( []
                              C )
                            B )
                          A ) )
                      ( ( []
                          Y )
                        X ) ) )
                  ( ( 0
                      ( ( ( []
                            C )
                          B )
                        A ) )
                    ( ( ( []
                          Z )
                        Y )
                      X ) ) ) ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00005)
00035: PushVar(00004)
00036: Swap(00002)
00037: Apply
00038: PushVar(00004)
00039: PushVar(00003)
00040: Swap(00002)
00041: Apply
00042: PushVar(00000)
00043: Swap(00002)
00044: Apply
00045: Swap(00002)
00046: Apply
00047: PushVar(00001)
00048: Swap(00002)
00049: Apply
00050:   Return
00051: PushFn(00034, 00005)
00052:   Return
00053: PushVar(00002)
00054:   Return
00055: PushFn(00028, 00000)
00056: PushVar(00000)
00057: Swap(00002)
00058: Apply
00059: PushFn(00032, 00000)
00060: PushString("")
00061: PushString(""x"")
00062: Swap(00002)
00063: Apply
00064: PushString(""xs"")
00065: Swap(00002)
00066: Apply
00067: Swap(00002)
00068: Apply
00069: PushFn(00051, 00004)
00070: Swap(00002)
00071: Apply
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00055, 00003)
00079:   Return
00080: PushFn(00078, 00002)
00081:   Return
00082: PushFn(00016, 00000)
00083: PushString("")
00084: PushString(""xs"")
00085: Swap(00002)
00086: Apply
00087: PushString(""acc"")
00088: Swap(00002)
00089: Apply
00090: PushString(""f"")
00091: Swap(00002)
00092: Apply
00093: Swap(00002)
00094: Apply
00095: PushFn(00080, 00001)
00096: Swap(00002)
00097: Apply
00098:   Return
00099: PushVar(00000)
00100: PushVar(00001)
00101: Swap(00002)
00102: Apply
00103:   Return
00104: PushFn(00099, 00001)
00105:   Return
00106: PushFn(00104, 00000)
00107:   Return
00108: PushVar(00000)
00109:   Return
00110: PushFn(00108, 00000)
00111:   Return
00112: PushVar(00000)
00113:   Return
00114: PushFn(00112, 00000)
00115:   Return
00116: PushVar(00001)
00117: PushVar(00000)
00118: Swap(00002)
00119: Apply
00120:   Return
00121: PushFn(00116, 00001)
00122:   Return
00123: PushVar(00001)
00124: PushFn(00114, 00000)
00125: PushString("")
00126: PushString(""x"")
00127: Swap(00002)
00128: Apply
00129: PushString(""xs"")
00130: Swap(00002)
00131: Apply
00132: Swap(00002)
00133: Apply
00134: PushFn(00121, 00000)
00135: Swap(00002)
00136: Apply
00137: Swap(00002)
00138: Apply
00139: PushString("")
00140: Swap(00002)
00141: Apply
00142: PushVar(00000)
00143: Swap(00002)
00144: Apply
00145:   Return
00146: PushVar(00000)
00147: PushVar(00001)
00148: Swap(00002)
00149: Apply
00150:   Return
00151: PushFn(00146, 00001)
00152:   Return
00153: PushFn(00151, 00000)
00154:   Return
00155: PushVar(00000)
00156: Rec
00157:   Return
00158: PushFn(00155, 00000)
00159:   Return
00160: PushVar(00000)
00161:   Return
00162: PushFn(00160, 00000)
00163:   Return
00164: PushVar(00002)
00165: PushVar(00001)
00166: PushVar(00000)
00167: Swap(00003)
00168: Pop
00169: Apply
00170: Apply
00171:   Return
00172: PushFn(00164, 00002)
00173:   Return
00174: PushFn(00172, 00001)
00175:   Return
00176: PushVar(00000)
00177:   Return
00178: PushFn(00176, 00000)
00179:   Return
00180: PushVar(00002)
00181: PushVar(00001)
00182: PushVar(00000)
00183: Swap(00003)
00184: Pop
00185: Apply
00186: Apply
00187:   Return
00188: PushFn(00180, 00002)
00189:   Return
00190: PushFn(00188, 00001)
00191:   Return
00192: PushVar(00000)
00193:   Return
00194: PushFn(00192, 00000)
00195:   Return
00196: PushVar(00007)
00197: PushVar(00006)
00198: PushString("")
00199: PushVar(00000)
00200: Swap(00002)
00201: Apply
00202: PushVar(00002)
00203: Swap(00002)
00204: Apply
00205: Swap(00002)
00206: Apply
00207: Swap(00002)
00208: Apply
00209: PushVar(00003)
00210: Swap(00002)
00211: Apply
00212: PushVar(00001)
00213: Swap(00002)
00214: Apply
00215:   Return
00216: PushFn(00196, 00007)
00217:   Return
00218: PushString("")
00219:   Return
00220: PushFn(00190, 00000)
00221: PushVar(00002)
00222: Swap(00002)
00223: Apply
00224: PushFn(00194, 00000)
00225: PushString("")
00226: PushString(""y"")
00227: Swap(00002)
00228: Apply
00229: PushString(""ys"")
00230: Swap(00002)
00231: Apply
00232: Swap(00002)
00233: Apply
00234: PushFn(00216, 00006)
00235: Swap(00002)
00236: Apply
00237: Swap(00002)
00238: Apply
00239: PushFn(00218, 00000)
00240: Swap(00002)
00241: Apply
00242:   Return
00243: PushFn(00220, 00005)
00244:   Return
00245: PushVar(00002)
00246: PushVar(00001)
00247: PushVar(00000)
00248: Swap(00003)
00249: Pop
00250: Apply
00251: Apply
00252:   Return
00253: PushFn(00245, 00002)
00254:   Return
00255: PushFn(00253, 00001)
00256:   Return
00257: PushVar(00000)
00258:   Return
00259: PushFn(00257, 00000)
00260:   Return
00261: PushString("")
00262:   Return
00263: PushFn(00261, 00000)
00264:   Return
00265: PushVar(00004)
00266:   Return
00267: PushFn(00255, 00000)
00268: PushVar(00001)
00269: Swap(00002)
00270: Apply
00271: PushFn(00259, 00000)
00272: PushString("")
00273: PushString(""y"")
00274: Swap(00002)
00275: Apply
00276: PushString(""ys"")
00277: Swap(00002)
00278: Apply
00279: Swap(00002)
00280: Apply
00281: PushFn(00263, 00000)
00282: Swap(00002)
00283: Apply
00284: Swap(00002)
00285: Apply
00286: PushFn(00265, 00004)
00287: Swap(00002)
00288: Apply
00289:   Return
00290: PushFn(00174, 00000)
00291: PushVar(00001)
00292: Swap(00002)
00293: Apply
00294: PushFn(00178, 00000)
00295: PushString("")
00296: PushString(""x"")
00297: Swap(00002)
00298: Apply
00299: PushString(""xs"")
00300: Swap(00002)
00301: Apply
00302: Swap(00002)
00303: Apply
00304: PushFn(00243, 00004)
00305: Swap(00002)
00306: Apply
00307: Swap(00002)
00308: Apply
00309: PushFn(00267, 00003)
00310: Swap(00002)
00311: Apply
00312:   Return
00313: PushFn(00290, 00003)
00314:   Return
00315: PushFn(00313, 00002)
00316:   Return
00317: PushFn(00162, 00000)
00318: PushString("")
00319: PushString(""ys"")
00320: Swap(00002)
00321: Apply
00322: PushString(""xs"")
00323: Swap(00002)
00324: Apply
00325: PushString(""acc"")
00326: Swap(00002)
00327: Apply
00328: Swap(00002)
00329: Apply
00330: PushFn(00315, 00001)
00331: Swap(00002)
00332: Apply
00333:   Return
00334: PushVar(00000)
00335: PushVar(00001)
00336: Swap(00002)
00337: Apply
00338:   Return
00339: PushFn(00334, 00001)
00340:   Return
00341: PushFn(00339, 00000)
00342:   Return
00343: PushVar(00000)
00344:   Return
00345: PushFn(00343, 00000)
00346:   Return
00347: PushVar(00003)
00348: PushVar(00002)
00349: PushString("")
00350: Swap(00002)
00351: Apply
00352: PushVar(00001)
00353: Swap(00002)
00354: Apply
00355: PushVar(00000)
00356: Swap(00002)
00357: Apply
00358: Swap(00002)
00359: Apply
00360:   Return
00361: PushFn(00347, 00003)
00362:   Return
00363: PushString("")
00364: PushVar(00000)
00365: PushString("Foo")
00366: Swap(00002)
00367: Apply
00368: PushString("Bar")
00369: Swap(00002)
00370: Apply
00371: Swap(00002)
00372: Apply
00373: PushVar(00000)
00374: PushString("Foo")
00375: Swap(00002)
00376: Apply
00377: PushString("")
00378: PushString("Z")
00379: Swap(00002)
00380: Apply
00381: PushString("Y")
00382: Swap(00002)
00383: Apply
00384: PushString("X")
00385: Swap(00002)
00386: Apply
00387: Swap(00002)
00388: Apply
00389: Swap(00002)
00390: Apply
00391: PushVar(00000)
00392: PushString("")
00393: PushString("B")
00394: Swap(00002)
00395: Apply
00396: PushString("A")
00397: Swap(00002)
00398: Apply
00399: Swap(00002)
00400: Apply
00401: PushString("")
00402: PushString("Z")
00403: Swap(00002)
00404: Apply
00405: PushString("Y")
00406: Swap(00002)
00407: Apply
00408: PushString("X")
00409: Swap(00002)
00410: Apply
00411: Swap(00002)
00412: Apply
00413: Swap(00002)
00414: Apply
00415: PushVar(00000)
00416: PushString("")
00417: PushString("C")
00418: Swap(00002)
00419: Apply
00420: PushString("B")
00421: Swap(00002)
00422: Apply
00423: PushString("A")
00424: Swap(00002)
00425: Apply
00426: Swap(00002)
00427: Apply
00428: PushString("")
00429: PushString("Y")
00430: Swap(00002)
00431: Apply
00432: PushString("X")
00433: Swap(00002)
00434: Apply
00435: Swap(00002)
00436: Apply
00437: Swap(00002)
00438: Apply
00439: PushVar(00000)
00440: PushString("")
00441: PushString("C")
00442: Swap(00002)
00443: Apply
00444: PushString("B")
00445: Swap(00002)
00446: Apply
00447: PushString("A")
00448: Swap(00002)
00449: Apply
00450: Swap(00002)
00451: Apply
00452: PushString("")
00453: PushString("Z")
00454: Swap(00002)
00455: Apply
00456: PushString("Y")
00457: Swap(00002)
00458: Apply
00459: PushString("X")
00460: Swap(00002)
00461: Apply
00462: Swap(00002)
00463: Apply
00464: Swap(00002)
00465: Apply
00466:   Return
00467: PushFn(00341, 00000)
00468: PushString(""zip"")
00469: Swap(00002)
00470: Apply
00471: PushFn(00345, 00000)
00472: PushString("")
00473: PushString(""ys"")
00474: Swap(00002)
00475: Apply
00476: PushString(""xs"")
00477: Swap(00002)
00478: Apply
00479: Swap(00002)
00480: Apply
00481: PushFn(00361, 00002)
00482: Swap(00002)
00483: Apply
00484: Swap(00002)
00485: Apply
00486: PushFn(00363, 00000)
00487: Swap(00002)
00488: Apply
00489:   Return
00490: PushFn(00153, 00000)
00491: PushString(""zip"")
00492: Swap(00002)
00493: Apply
00494: PushFn(00158, 00000)
00495: PushString(""zip"")
00496: Swap(00002)
00497: Apply
00498: PushFn(00317, 00000)
00499: Swap(00002)
00500: Apply
00501: Swap(00002)
00502: Apply
00503: PushFn(00467, 00001)
00504: Swap(00002)
00505: Apply
00506:   Return
00507: PushFn(00106, 00000)
00508: PushString(""rev"")
00509: Swap(00002)
00510: Apply
00511: PushFn(00110, 00000)
00512: PushString(""xs"")
00513: Swap(00002)
00514: Apply
00515: PushFn(00123, 00001)
00516: Swap(00002)
00517: Apply
00518: Swap(00002)
00519: Apply
00520: PushFn(00490, 00000)
00521: Swap(00002)
00522: Apply
00523:   Return
00524: PushFn(00007, 00000)
00525: PushString(""fold"")
00526: Swap(00002)
00527: Apply
00528: PushFn(00012, 00000)
00529: PushString(""fold"")
00530: Swap(00002)
00531: Apply
00532: PushFn(00082, 00000)
00533: Swap(00002)
00534: Apply
00535: Swap(00002)
00536: Apply
00537: PushFn(00507, 00000)
00538: Swap(00002)
00539: Apply

[[[A, X], [B, Y], [C, Z]], [], [], [], []]

---

'== = ('== ~> { ['a, 'b] => {
    pop(a, ['xs, 'x] => {
        pop(b, ['ys, 'y] => {
            if(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        if(a, b, { True }, { False })
    })
}})
[
    Foo == Foo
    Foo == Bar
    Foo(Bar) == Foo(Bar)
    Foo(Bar) == Foo(Baz)
    'a == 'a
    'a == 'b
    'f('a) == 'f('a)
    'f('a) == 'g('a)
]

(=
  '==
  (~>
    '==
    { (=>
        ( 'a
          'b )
        { (pop
            a
            (=>
              ( 'xs
                'x )
              { (pop
                  b
                  (=>
                    ( 'ys
                      'y )
                    { (if
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (if
                a
                b
                { True }
                { False }) }) }) }))
( (==
    Foo
    Foo)
  (==
    Foo
    Bar)
  (==
    (Foo
      Bar)
    (Foo
      Bar))
  (==
    (Foo
      Bar)
    (Foo
      Baz))
  (==
    'a
    'a)
  (==
    'a
    'b)
  (==
    ('f
      'a)
    ('f
      'a))
  (==
    ('f
      'a)
    ('g
      'a)) )

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "==" )
    ( ( =>
          =>
            ~>
              0
        "==" )
      =>
        ( ( =>
              =>
                0
            ( ( []
                "b" )
              "a" ) )
          =>
            =>
              ( ( ( =>
                      =>
                        =>
                          ( pop
                            2
                            1
                            0 )
                    1 )
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( pop
                                      2
                                      1
                                      0 )
                              2 )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "y" )
                                  "ys" ) )
                              =>
                                =>
                                  ( ( ( ( =>
                                            =>
                                              =>
                                                =>
                                                  ( if
                                                    3
                                                    2
                                                    1
                                                    0 )
                                          ( ( 6
                                              2 )
                                            0 ) )
                                        True )
                                      =>
                                        ( ( 7
                                            4 )
                                          2 ) )
                                    =>
                                      False ) ) )
                          =>
                            False ) ) )
                =>
                  ( ( ( ( =>
                            =>
                              =>
                                =>
                                  ( if
                                    3
                                    2
                                    1
                                    0 )
                          2 )
                        1 )
                      =>
                        True )
                    =>
                      False ) ) ) ) )
  =>
    ( ( ( ( ( ( ( ( []
                    ( ( 0
                        ( "f"
                          "a" ) )
                      ( "g"
                        "a" ) ) )
                  ( ( 0
                      ( "f"
                        "a" ) )
                    ( "f"
                      "a" ) ) )
                ( ( 0
                    "a" )
                  "b" ) )
              ( ( 0
                  "a" )
                "a" ) )
            ( ( 0
                ( Foo
                  Bar ) )
              ( Foo
                Baz ) ) )
          ( ( 0
              ( Foo
                Bar ) )
            ( Foo
              Bar ) ) )
        ( ( 0
            Foo )
          Bar ) )
      ( ( 0
          Foo )
        Foo ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00002)
00035: PushVar(00001)
00036: PushVar(00000)
00037: Swap(00003)
00038: Pop
00039: Apply
00040: Apply
00041:   Return
00042: PushFn(00034, 00002)
00043:   Return
00044: PushFn(00042, 00001)
00045:   Return
00046: PushVar(00000)
00047:   Return
00048: PushFn(00046, 00000)
00049:   Return
00050: PushVar(00003)
00051: PushVar(00002)
00052: PushVar(00001)
00053: PushVar(00000)
00054: Swap(00004)
00055: If
00056: Apply
00057:   Return
00058: PushFn(00050, 00003)
00059:   Return
00060: PushFn(00058, 00002)
00061:   Return
00062: PushFn(00060, 00001)
00063:   Return
00064: PushVar(00007)
00065: PushVar(00004)
00066: Swap(00002)
00067: Apply
00068: PushVar(00002)
00069: Swap(00002)
00070: Apply
00071:   Return
00072: PushString("False")
00073:   Return
00074: PushFn(00062, 00000)
00075: PushVar(00006)
00076: PushVar(00002)
00077: Swap(00002)
00078: Apply
00079: PushVar(00000)
00080: Swap(00002)
00081: Apply
00082: Swap(00002)
00083: Apply
00084: PushString("True")
00085: Swap(00002)
00086: Apply
00087: PushFn(00064, 00007)
00088: Swap(00002)
00089: Apply
00090: PushFn(00072, 00000)
00091: Swap(00002)
00092: Apply
00093:   Return
00094: PushFn(00074, 00006)
00095:   Return
00096: PushString("False")
00097:   Return
00098: PushFn(00044, 00000)
00099: PushVar(00002)
00100: Swap(00002)
00101: Apply
00102: PushFn(00048, 00000)
00103: PushString("")
00104: PushString(""y"")
00105: Swap(00002)
00106: Apply
00107: PushString(""ys"")
00108: Swap(00002)
00109: Apply
00110: Swap(00002)
00111: Apply
00112: PushFn(00094, 00005)
00113: Swap(00002)
00114: Apply
00115: Swap(00002)
00116: Apply
00117: PushFn(00096, 00000)
00118: Swap(00002)
00119: Apply
00120:   Return
00121: PushFn(00098, 00004)
00122:   Return
00123: PushVar(00003)
00124: PushVar(00002)
00125: PushVar(00001)
00126: PushVar(00000)
00127: Swap(00004)
00128: If
00129: Apply
00130:   Return
00131: PushFn(00123, 00003)
00132:   Return
00133: PushFn(00131, 00002)
00134:   Return
00135: PushFn(00133, 00001)
00136:   Return
00137: PushString("True")
00138:   Return
00139: PushString("False")
00140:   Return
00141: PushFn(00135, 00000)
00142: PushVar(00002)
00143: Swap(00002)
00144: Apply
00145: PushVar(00001)
00146: Swap(00002)
00147: Apply
00148: PushFn(00137, 00000)
00149: Swap(00002)
00150: Apply
00151: PushFn(00139, 00000)
00152: Swap(00002)
00153: Apply
00154:   Return
00155: PushFn(00028, 00000)
00156: PushVar(00001)
00157: Swap(00002)
00158: Apply
00159: PushFn(00032, 00000)
00160: PushString("")
00161: PushString(""x"")
00162: Swap(00002)
00163: Apply
00164: PushString(""xs"")
00165: Swap(00002)
00166: Apply
00167: Swap(00002)
00168: Apply
00169: PushFn(00121, 00003)
00170: Swap(00002)
00171: Apply
00172: Swap(00002)
00173: Apply
00174: PushFn(00141, 00002)
00175: Swap(00002)
00176: Apply
00177:   Return
00178: PushFn(00155, 00002)
00179:   Return
00180: PushFn(00016, 00000)
00181: PushString("")
00182: PushString(""b"")
00183: Swap(00002)
00184: Apply
00185: PushString(""a"")
00186: Swap(00002)
00187: Apply
00188: Swap(00002)
00189: Apply
00190: PushFn(00178, 00001)
00191: Swap(00002)
00192: Apply
00193:   Return
00194: PushString("")
00195: PushVar(00000)
00196: PushString(""f"")
00197: PushString(""a"")
00198: Swap(00002)
00199: Apply
00200: Swap(00002)
00201: Apply
00202: PushString(""g"")
00203: PushString(""a"")
00204: Swap(00002)
00205: Apply
00206: Swap(00002)
00207: Apply
00208: Swap(00002)
00209: Apply
00210: PushVar(00000)
00211: PushString(""f"")
00212: PushString(""a"")
00213: Swap(00002)
00214: Apply
00215: Swap(00002)
00216: Apply
00217: PushString(""f"")
00218: PushString(""a"")
00219: Swap(00002)
00220: Apply
00221: Swap(00002)
00222: Apply
00223: Swap(00002)
00224: Apply
00225: PushVar(00000)
00226: PushString(""a"")
00227: Swap(00002)
00228: Apply
00229: PushString(""b"")
00230: Swap(00002)
00231: Apply
00232: Swap(00002)
00233: Apply
00234: PushVar(00000)
00235: PushString(""a"")
00236: Swap(00002)
00237: Apply
00238: PushString(""a"")
00239: Swap(00002)
00240: Apply
00241: Swap(00002)
00242: Apply
00243: PushVar(00000)
00244: PushString("Foo")
00245: PushString("Bar")
00246: Swap(00002)
00247: Apply
00248: Swap(00002)
00249: Apply
00250: PushString("Foo")
00251: PushString("Baz")
00252: Swap(00002)
00253: Apply
00254: Swap(00002)
00255: Apply
00256: Swap(00002)
00257: Apply
00258: PushVar(00000)
00259: PushString("Foo")
00260: PushString("Bar")
00261: Swap(00002)
00262: Apply
00263: Swap(00002)
00264: Apply
00265: PushString("Foo")
00266: PushString("Bar")
00267: Swap(00002)
00268: Apply
00269: Swap(00002)
00270: Apply
00271: Swap(00002)
00272: Apply
00273: PushVar(00000)
00274: PushString("Foo")
00275: Swap(00002)
00276: Apply
00277: PushString("Bar")
00278: Swap(00002)
00279: Apply
00280: Swap(00002)
00281: Apply
00282: PushVar(00000)
00283: PushString("Foo")
00284: Swap(00002)
00285: Apply
00286: PushString("Foo")
00287: Swap(00002)
00288: Apply
00289: Swap(00002)
00290: Apply
00291:   Return
00292: PushFn(00007, 00000)
00293: PushString(""=="")
00294: Swap(00002)
00295: Apply
00296: PushFn(00012, 00000)
00297: PushString(""=="")
00298: Swap(00002)
00299: Apply
00300: PushFn(00180, 00000)
00301: Swap(00002)
00302: Apply
00303: Swap(00002)
00304: Apply
00305: PushFn(00194, 00000)
00306: Swap(00002)
00307: Apply

[True, False, True, False, True, False, True, False]

---

'fold = ('fold ~> { ['f, 'acc, 'xs] => {
    pop(xs, ['xs, 'x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
'rev = ('xs => {
    fold(['xs, 'x] => { xs(x) }, [], xs)
})
'flatten = ('xs => {
    rev(fold(['acc, 'x] => {
        fold(['acc, 'x] => { acc(x) }, acc, x)
    }, [], xs))
})
flatten([[A, B], [C, D]])

(=
  'fold
  (~>
    'fold
    { (=>
        ( 'f
          'acc
          'xs )
        { (pop
            xs
            (=>
              ( 'xs
                'x )
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'rev
  (=>
    'xs
    { (fold
        (=>
          ( 'xs
            'x )
          { (xs
              x) })
        (  )
        xs) }))
(=
  'flatten
  (=>
    'xs
    { (rev
        (fold
          (=>
            ( 'acc
              'x )
            { (fold
                (=>
                  ( 'acc
                    'x )
                  { (acc
                      x) })
                acc
                x) })
          (  )
          xs)) }))
(flatten
  ( ( A
      B )
    ( C
      D ) ))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "flatten" )
            ( ( =>
                  =>
                    0
                "xs" )
              =>
                ( 1
                  ( ( ( 2
                        ( ( =>
                              =>
                                0
                            ( ( []
                                "x" )
                              "acc" ) )
                          =>
                            =>
                              ( ( ( 4
                                    ( ( =>
                                          =>
                                            0
                                        ( ( []
                                            "x" )
                                          "acc" ) )
                                      =>
                                        =>
                                          ( 1
                                            0 ) ) )
                                  1 )
                                0 ) ) )
                      [] )
                    0 ) ) ) )
          =>
            ( 0
              ( ( []
                  ( ( []
                      D )
                    C ) )
                ( ( []
                    B )
                  A ) ) ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00005)
00035: PushVar(00004)
00036: Swap(00002)
00037: Apply
00038: PushVar(00004)
00039: PushVar(00003)
00040: Swap(00002)
00041: Apply
00042: PushVar(00000)
00043: Swap(00002)
00044: Apply
00045: Swap(00002)
00046: Apply
00047: PushVar(00001)
00048: Swap(00002)
00049: Apply
00050:   Return
00051: PushFn(00034, 00005)
00052:   Return
00053: PushVar(00002)
00054:   Return
00055: PushFn(00028, 00000)
00056: PushVar(00000)
00057: Swap(00002)
00058: Apply
00059: PushFn(00032, 00000)
00060: PushString("")
00061: PushString(""x"")
00062: Swap(00002)
00063: Apply
00064: PushString(""xs"")
00065: Swap(00002)
00066: Apply
00067: Swap(00002)
00068: Apply
00069: PushFn(00051, 00004)
00070: Swap(00002)
00071: Apply
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00055, 00003)
00079:   Return
00080: PushFn(00078, 00002)
00081:   Return
00082: PushFn(00016, 00000)
00083: PushString("")
00084: PushString(""xs"")
00085: Swap(00002)
00086: Apply
00087: PushString(""acc"")
00088: Swap(00002)
00089: Apply
00090: PushString(""f"")
00091: Swap(00002)
00092: Apply
00093: Swap(00002)
00094: Apply
00095: PushFn(00080, 00001)
00096: Swap(00002)
00097: Apply
00098:   Return
00099: PushVar(00000)
00100: PushVar(00001)
00101: Swap(00002)
00102: Apply
00103:   Return
00104: PushFn(00099, 00001)
00105:   Return
00106: PushFn(00104, 00000)
00107:   Return
00108: PushVar(00000)
00109:   Return
00110: PushFn(00108, 00000)
00111:   Return
00112: PushVar(00000)
00113:   Return
00114: PushFn(00112, 00000)
00115:   Return
00116: PushVar(00001)
00117: PushVar(00000)
00118: Swap(00002)
00119: Apply
00120:   Return
00121: PushFn(00116, 00001)
00122:   Return
00123: PushVar(00001)
00124: PushFn(00114, 00000)
00125: PushString("")
00126: PushString(""x"")
00127: Swap(00002)
00128: Apply
00129: PushString(""xs"")
00130: Swap(00002)
00131: Apply
00132: Swap(00002)
00133: Apply
00134: PushFn(00121, 00000)
00135: Swap(00002)
00136: Apply
00137: Swap(00002)
00138: Apply
00139: PushString("")
00140: Swap(00002)
00141: Apply
00142: PushVar(00000)
00143: Swap(00002)
00144: Apply
00145:   Return
00146: PushVar(00000)
00147: PushVar(00001)
00148: Swap(00002)
00149: Apply
00150:   Return
00151: PushFn(00146, 00001)
00152:   Return
00153: PushFn(00151, 00000)
00154:   Return
00155: PushVar(00000)
00156:   Return
00157: PushFn(00155, 00000)
00158:   Return
00159: PushVar(00000)
00160:   Return
00161: PushFn(00159, 00000)
00162:   Return
00163: PushVar(00000)
00164:   Return
00165: PushFn(00163, 00000)
00166:   Return
00167: PushVar(00001)
00168: PushVar(00000)
00169: Swap(00002)
00170: Apply
00171:   Return
00172: PushFn(00167, 00001)
00173:   Return
00174: PushVar(00004)
00175: PushFn(00165, 00000)
00176: PushString("")
00177: PushString(""x"")
00178: Swap(00002)
00179: Apply
00180: PushString(""acc"")
00181: Swap(00002)
00182: Apply
00183: Swap(00002)
00184: Apply
00185: PushFn(00172, 00000)
00186: Swap(00002)
00187: Apply
00188: Swap(00002)
00189: Apply
00190: PushVar(00001)
00191: Swap(00002)
00192: Apply
00193: PushVar(00000)
00194: Swap(00002)
00195: Apply
00196:   Return
00197: PushFn(00174, 00004)
00198:   Return
00199: PushVar(00001)
00200: PushVar(00002)
00201: PushFn(00161, 00000)
00202: PushString("")
00203: PushString(""x"")
00204: Swap(00002)
00205: Apply
00206: PushString(""acc"")
00207: Swap(00002)
00208: Apply
00209: Swap(00002)
00210: Apply
00211: PushFn(00197, 00003)
00212: Swap(00002)
00213: Apply
00214: Swap(00002)
00215: Apply
00216: PushString("")
00217: Swap(00002)
00218: Apply
00219: PushVar(00000)
00220: Swap(00002)
00221: Apply
00222: Swap(00002)
00223: Apply
00224:   Return
00225: PushVar(00000)
00226: PushString("")
00227: PushString("")
00228: PushString("D")
00229: Swap(00002)
00230: Apply
00231: PushString("C")
00232: Swap(00002)
00233: Apply
00234: Swap(00002)
00235: Apply
00236: PushString("")
00237: PushString("B")
00238: Swap(00002)
00239: Apply
00240: PushString("A")
00241: Swap(00002)
00242: Apply
00243: Swap(00002)
00244: Apply
00245: Swap(00002)
00246: Apply
00247:   Return
00248: PushFn(00153, 00000)
00249: PushString(""flatten"")
00250: Swap(00002)
00251: Apply
00252: PushFn(00157, 00000)
00253: PushString(""xs"")
00254: Swap(00002)
00255: Apply
00256: PushFn(00199, 00002)
00257: Swap(00002)
00258: Apply
00259: Swap(00002)
00260: Apply
00261: PushFn(00225, 00000)
00262: Swap(00002)
00263: Apply
00264:   Return
00265: PushFn(00106, 00000)
00266: PushString(""rev"")
00267: Swap(00002)
00268: Apply
00269: PushFn(00110, 00000)
00270: PushString(""xs"")
00271: Swap(00002)
00272: Apply
00273: PushFn(00123, 00001)
00274: Swap(00002)
00275: Apply
00276: Swap(00002)
00277: Apply
00278: PushFn(00248, 00001)
00279: Swap(00002)
00280: Apply
00281:   Return
00282: PushFn(00007, 00000)
00283: PushString(""fold"")
00284: Swap(00002)
00285: Apply
00286: PushFn(00012, 00000)
00287: PushString(""fold"")
00288: Swap(00002)
00289: Apply
00290: PushFn(00082, 00000)
00291: Swap(00002)
00292: Apply
00293: Swap(00002)
00294: Apply
00295: PushFn(00265, 00000)
00296: Swap(00002)
00297: Apply

[A, B, C, D]

---

'fold = ('fold ~> { ['f, 'acc, 'xs] => {
    pop(xs, ['xs, 'x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
'apply = (['f, 'xs] => {
    fold(['f, 'x] => { f(x) }, f, xs)
})
'rev = ('xs => {
    fold(['xs, 'x] => { xs(x) }, [], xs)
})
'map = (['f, 'xs] => {
    fold(['xs, 'x] => { xs(f(x)) }, [], rev(xs))
})
'flatten = ('xs => {
    rev(fold(['acc, 'x] => {
        fold(['acc, 'x] => { acc(x) }, acc, x)
    }, [], xs))
})
'zip = ('zip ~> { ['acc, 'xs, 'ys] => {
    pop(xs, ['xs, 'x] => {
        pop(ys, ['ys, 'y] => { zip(acc([x, y]), xs, ys) }, {})
    }, {
        pop(ys, ['ys, 'y] => {}, { acc })
    })
}})
'zip = (['xs, 'ys] => {
    rev(zip([], xs, ys))
})
'== = ('== ~> { ['a, 'b] => {
    pop(a, ['xs, 'x] => {
        pop(b, ['ys, 'y] => {
            if(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        if(a, b, { True }, { False })
    })
}})
'first = ('xs => {
    pop(xs, ['_, 'x] => { x }, { xs })
})
'second = ('xs => {
    pop(xs, ['xs, '_] => { first(xs) }, { xs })
})
'join = fold(['acc, 'pair] => {
    'xvar = first(pair)
    'xval = second(pair)
    fold(['_, 'pair] => {
        'yvar = first(pair)
        'yval = second(pair)
        if(xvar, yvar, {
            if(xval == yval, False, {
                no-match!([[xvar, xval], [yvar, yval]])
            }, {})
        }, {})
    }, [], acc)
    acc(pair)
}, [])
'unify = ('unify ~> { ['pattern, 'value] => {
    pop(pattern, ['type, 'pattern] => {
        if(type, Binding, {
            [[pattern, value]]
        }, {
            if(type, Compound, {
                'zipped = zip(pattern, value)
                if(zipped, [], {
                    no-match!([pattern, value])
                }, {
                    join(flatten(map(apply(unify), zip(pattern, value))))
                })
            }, {
                if(pattern == value, True, {}, {
                    no-match!([pattern, value])
                })
            })
        })
    }, {
        invalid!(pattern)
    })
}})
'-> = (['pattern, 'body, 'value] => {
    try( {
        'args = map(second, unify(pattern, value))
        if(args, [], {
            body()
        }, {
            apply(body, args)
        })
    }, no-match!, ['_, 'arg] => {
        no-match!(arg)
    })
})
try({
    [
        (Foo -> { Bar })(Foo)
        ('x -> { x })(Foo)
        ('x -> { Bar })(Foo)
        (Pair(Foo, Bar) -> { Foo })(Pair(Foo, Bar))
        (Pair('x, 'y) -> { y })(Pair(Foo, Bar))
        (Pair('x, Bar) -> { x })(Pair(Foo, Bar))
        (Pair('x, 'x) -> { x })(Pair(Bar, Bar))
        (Pair('x, 'x) -> { x })(Pair(Foo, Bar))
    ]
}, no-match!, ['r, 'arg] => {
    r(NoMatch(arg))
})

(=
  'fold
  (~>
    'fold
    { (=>
        ( 'f
          'acc
          'xs )
        { (pop
            xs
            (=>
              ( 'xs
                'x )
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'apply
  (=>
    ( 'f
      'xs )
    { (fold
        (=>
          ( 'f
            'x )
          { (f
              x) })
        f
        xs) }))
(=
  'rev
  (=>
    'xs
    { (fold
        (=>
          ( 'xs
            'x )
          { (xs
              x) })
        (  )
        xs) }))
(=
  'map
  (=>
    ( 'f
      'xs )
    { (fold
        (=>
          ( 'xs
            'x )
          { (xs
              (f
                x)) })
        (  )
        (rev
          xs)) }))
(=
  'flatten
  (=>
    'xs
    { (rev
        (fold
          (=>
            ( 'acc
              'x )
            { (fold
                (=>
                  ( 'acc
                    'x )
                  { (acc
                      x) })
                acc
                x) })
          (  )
          xs)) }))
(=
  'zip
  (~>
    'zip
    { (=>
        ( 'acc
          'xs
          'ys )
        { (pop
            xs
            (=>
              ( 'xs
                'x )
              { (pop
                  ys
                  (=>
                    ( 'ys
                      'y )
                    { (zip
                        (acc
                          ( x
                            y ))
                        xs
                        ys) })
                  {  }) })
            { (pop
                ys
                (=>
                  ( 'ys
                    'y )
                  {  })
                { acc }) }) }) }))
(=
  'zip
  (=>
    ( 'xs
      'ys )
    { (rev
        (zip
          (  )
          xs
          ys)) }))
(=
  '==
  (~>
    '==
    { (=>
        ( 'a
          'b )
        { (pop
            a
            (=>
              ( 'xs
                'x )
              { (pop
                  b
                  (=>
                    ( 'ys
                      'y )
                    { (if
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (if
                a
                b
                { True }
                { False }) }) }) }))
(=
  'first
  (=>
    'xs
    { (pop
        xs
        (=>
          ( '_
            'x )
          { x })
        { xs }) }))
(=
  'second
  (=>
    'xs
    { (pop
        xs
        (=>
          ( 'xs
            '_ )
          { (first
              xs) })
        { xs }) }))
(=
  'join
  (fold
    (=>
      ( 'acc
        'pair )
      { (=
          'xvar
          (first
            pair))
        (=
          'xval
          (second
            pair))
        (fold
          (=>
            ( '_
              'pair )
            { (=
                'yvar
                (first
                  pair))
              (=
                'yval
                (second
                  pair))
              (if
                xvar
                yvar
                { (if
                    (==
                      xval
                      yval)
                    False
                    { (no-match!
                        ( ( xvar
                            xval )
                          ( yvar
                            yval ) )) }
                    {  }) }
                {  }) })
          (  )
          acc)
        (acc
          pair) })
    (  )))
(=
  'unify
  (~>
    'unify
    { (=>
        ( 'pattern
          'value )
        { (pop
            pattern
            (=>
              ( 'type
                'pattern )
              { (if
                  type
                  Binding
                  { ( ( pattern
                        value ) ) }
                  { (if
                      type
                      Compound
                      { (=
                          'zipped
                          (zip
                            pattern
                            value))
                        (if
                          zipped
                          (  )
                          { (no-match!
                              ( pattern
                                value )) }
                          { (join
                              (flatten
                                (map
                                  (apply
                                    unify)
                                  (zip
                                    pattern
                                    value)))) }) }
                      { (if
                          (==
                            pattern
                            value)
                          True
                          {  }
                          { (no-match!
                              ( pattern
                                value )) }) }) }) })
            { (invalid!
                pattern) }) }) }))
(=
  '->
  (=>
    ( 'pattern
      'body
      'value )
    { (try
        { (=
            'args
            (map
              second
              (unify
                pattern
                value)))
          (if
            args
            (  )
            { (body) }
            { (apply
                body
                args) }) }
        no-match!
        (=>
          ( '_
            'arg )
          { (no-match!
              arg) })) }))
(try
  { ( ((->
        Foo
        { Bar })
        Foo)
      ((->
        'x
        { x })
        Foo)
      ((->
        'x
        { Bar })
        Foo)
      ((->
        (Pair
          Foo
          Bar)
        { Foo })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          'x
          'y)
        { y })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          'x
          Bar)
        { x })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          'x
          'x)
        { x })
        (Pair
          Bar
          Bar))
      ((->
        (Pair
          'x
          'x)
        { x })
        (Pair
          Foo
          Bar)) ) }
  no-match!
  (=>
    ( 'r
      'arg )
    { (r
        (NoMatch
          arg)) }))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "apply" )
        ( ( =>
              =>
                0
            ( ( []
                "xs" )
              "f" ) )
          =>
            =>
              ( ( ( 2
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "f" ) )
                      =>
                        =>
                          ( 1
                            0 ) ) )
                  1 )
                0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "rev" )
            ( ( =>
                  =>
                    0
                "xs" )
              =>
                ( ( ( 2
                      ( ( =>
                            =>
                              0
                          ( ( []
                              "x" )
                            "xs" ) )
                        =>
                          =>
                            ( 1
                              0 ) ) )
                    [] )
                  0 ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "map" )
                ( ( =>
                      =>
                        0
                    ( ( []
                        "xs" )
                      "f" ) )
                  =>
                    =>
                      ( ( ( 4
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "x" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 1
                                    ( 3
                                      0 ) ) ) )
                          [] )
                        ( 2
                          0 ) ) ) )
              =>
                ( ( ( =>
                        =>
                          =>
                            ( 0
                              1 )
                      "flatten" )
                    ( ( =>
                          =>
                            0
                        "xs" )
                      =>
                        ( 2
                          ( ( ( 4
                                ( ( =>
                                      =>
                                        0
                                    ( ( []
                                        "x" )
                                      "acc" ) )
                                  =>
                                    =>
                                      ( ( ( 6
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "x" )
                                                  "acc" ) )
                                              =>
                                                =>
                                                  ( 1
                                                    0 ) ) )
                                          1 )
                                        0 ) ) )
                              [] )
                            0 ) ) ) )
                  =>
                    ( ( ( =>
                            =>
                              =>
                                ( 0
                                  1 )
                          "zip" )
                        ( ( =>
                              =>
                                ~>
                                  0
                            "zip" )
                          =>
                            ( ( =>
                                  =>
                                    0
                                ( ( ( []
                                      "ys" )
                                    "xs" )
                                  "acc" ) )
                              =>
                                =>
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( pop
                                                  2
                                                  1
                                                  0 )
                                          1 )
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "x" )
                                              "xs" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    2 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "y" )
                                                        "ys" ) )
                                                    =>
                                                      =>
                                                        ( ( ( 7
                                                              ( 6
                                                                ( ( []
                                                                    0 )
                                                                  2 ) ) )
                                                            3 )
                                                          1 ) ) )
                                                =>
                                                  [] ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              1 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "y" )
                                                  "ys" ) )
                                              =>
                                                =>
                                                  [] ) )
                                          =>
                                            4 ) ) ) ) )
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( 0
                                      1 )
                              "zip" )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "ys" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 5
                                    ( ( ( 2
                                          [] )
                                        1 )
                                      0 ) ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( 0
                                          1 )
                                  "==" )
                                ( ( =>
                                      =>
                                        ~>
                                          0
                                    "==" )
                                  =>
                                    ( ( =>
                                          =>
                                            0
                                        ( ( []
                                            "b" )
                                          "a" ) )
                                      =>
                                        =>
                                          ( ( ( =>
                                                  =>
                                                    =>
                                                      ( pop
                                                        2
                                                        1
                                                        0 )
                                                1 )
                                              ( ( =>
                                                    =>
                                                      0
                                                  ( ( []
                                                      "x" )
                                                    "xs" ) )
                                                =>
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( pop
                                                                  2
                                                                  1
                                                                  0 )
                                                          2 )
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( []
                                                                "y" )
                                                              "ys" ) )
                                                          =>
                                                            =>
                                                              ( ( ( ( =>
                                                                        =>
                                                                          =>
                                                                            =>
                                                                              ( if
                                                                                3
                                                                                2
                                                                                1
                                                                                0 )
                                                                      ( ( 6
                                                                          2 )
                                                                        0 ) )
                                                                    True )
                                                                  =>
                                                                    ( ( 7
                                                                        4 )
                                                                      2 ) )
                                                                =>
                                                                  False ) ) )
                                                      =>
                                                        False ) ) )
                                            =>
                                              ( ( ( ( =>
                                                        =>
                                                          =>
                                                            =>
                                                              ( if
                                                                3
                                                                2
                                                                1
                                                                0 )
                                                      2 )
                                                    1 )
                                                  =>
                                                    True )
                                                =>
                                                  False ) ) ) ) )
                              =>
                                ( ( ( =>
                                        =>
                                          =>
                                            ( 0
                                              1 )
                                      "first" )
                                    ( ( =>
                                          =>
                                            0
                                        "xs" )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              0 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "x" )
                                                  "_" ) )
                                              =>
                                                =>
                                                  0 ) )
                                          =>
                                            1 ) ) )
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( 0
                                                  1 )
                                          "second" )
                                        ( ( =>
                                              =>
                                                0
                                            "xs" )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "_" )
                                                      "xs" ) )
                                                  =>
                                                    =>
                                                      ( 3
                                                        1 ) ) )
                                              =>
                                                1 ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( 0
                                                      1 )
                                              "join" )
                                            ( ( 9
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "pair" )
                                                      "acc" ) )
                                                  =>
                                                    =>
                                                      ( ( ( =>
                                                              =>
                                                                =>
                                                                  ( 0
                                                                    1 )
                                                            "xvar" )
                                                          ( 3
                                                            0 ) )
                                                        =>
                                                          ( ( ( =>
                                                                  =>
                                                                    =>
                                                                      ( 0
                                                                        1 )
                                                                "xval" )
                                                              ( 3
                                                                1 ) )
                                                            =>
                                                              ( =>
                                                                  ( 4
                                                                    3 )
                                                                ( ( ( 13
                                                                      ( ( =>
                                                                            =>
                                                                              0
                                                                          ( ( []
                                                                              "pair" )
                                                                            "_" ) )
                                                                        =>
                                                                          =>
                                                                            ( ( ( =>
                                                                                    =>
                                                                                      =>
                                                                                        ( 0
                                                                                          1 )
                                                                                  "yvar" )
                                                                                ( 7
                                                                                  0 ) )
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( 0
                                                                                              1 )
                                                                                      "yval" )
                                                                                    ( 7
                                                                                      1 ) )
                                                                                  =>
                                                                                    ( ( ( ( =>
                                                                                              =>
                                                                                                =>
                                                                                                  =>
                                                                                                    ( if
                                                                                                      3
                                                                                                      2
                                                                                                      1
                                                                                                      0 )
                                                                                            5 )
                                                                                          1 )
                                                                                        =>
                                                                                          ( ( ( ( =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        =>
                                                                                                          ( if
                                                                                                            3
                                                                                                            2
                                                                                                            1
                                                                                                            0 )
                                                                                                  ( ( 11
                                                                                                      5 )
                                                                                                    1 ) )
                                                                                                False )
                                                                                              =>
                                                                                                ( no-match!
                                                                                                  ( ( []
                                                                                                      ( ( []
                                                                                                          2 )
                                                                                                        3 ) )
                                                                                                    ( ( []
                                                                                                        6 )
                                                                                                      7 ) ) ) )
                                                                                            =>
                                                                                              [] ) )
                                                                                      =>
                                                                                        [] ) ) ) ) )
                                                                    [] )
                                                                  3 ) ) ) ) ) )
                                              [] ) )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( 0
                                                          1 )
                                                  "unify" )
                                                ( ( =>
                                                      =>
                                                        ~>
                                                          0
                                                    "unify" )
                                                  =>
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "value" )
                                                          "pattern" ) )
                                                      =>
                                                        =>
                                                          ( ( ( =>
                                                                  =>
                                                                    =>
                                                                      ( pop
                                                                        2
                                                                        1
                                                                        0 )
                                                                1 )
                                                              ( ( =>
                                                                    =>
                                                                      0
                                                                  ( ( []
                                                                      "pattern" )
                                                                    "type" ) )
                                                                =>
                                                                  =>
                                                                    ( ( ( ( =>
                                                                              =>
                                                                                =>
                                                                                  =>
                                                                                    ( if
                                                                                      3
                                                                                      2
                                                                                      1
                                                                                      0 )
                                                                            1 )
                                                                          Binding )
                                                                        =>
                                                                          ( []
                                                                            ( ( []
                                                                                3 )
                                                                              1 ) ) )
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                2 )
                                                                              Compound )
                                                                            =>
                                                                              ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          ( 0
                                                                                            1 )
                                                                                    "zipped" )
                                                                                  ( ( 11
                                                                                      2 )
                                                                                    4 ) )
                                                                                =>
                                                                                  ( ( ( ( =>
                                                                                            =>
                                                                                              =>
                                                                                                =>
                                                                                                  ( if
                                                                                                    3
                                                                                                    2
                                                                                                    1
                                                                                                    0 )
                                                                                          0 )
                                                                                        [] )
                                                                                      =>
                                                                                        ( no-match!
                                                                                          ( ( []
                                                                                              6 )
                                                                                            4 ) ) )
                                                                                    =>
                                                                                      ( 9
                                                                                        ( 15
                                                                                          ( ( 16
                                                                                              ( 18
                                                                                                8 ) )
                                                                                            ( ( 13
                                                                                                4 )
                                                                                              6 ) ) ) ) ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    ( ( 10
                                                                                        2 )
                                                                                      4 ) )
                                                                                  True )
                                                                                =>
                                                                                  [] )
                                                                              =>
                                                                                ( no-match!
                                                                                  ( ( []
                                                                                      5 )
                                                                                    3 ) ) ) ) ) ) )
                                                            =>
                                                              ( invalid!
                                                                2 ) ) ) ) )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( 0
                                                              1 )
                                                      "->" )
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( ( []
                                                              "value" )
                                                            "body" )
                                                          "pattern" ) )
                                                      =>
                                                        =>
                                                          =>
                                                            ( ( ( =>
                                                                    =>
                                                                      =>
                                                                        ( try
                                                                          2
                                                                          1
                                                                          0 )
                                                                  =>
                                                                    ( ( ( =>
                                                                            =>
                                                                              =>
                                                                                ( 0
                                                                                  1 )
                                                                          "args" )
                                                                        ( ( 12
                                                                            6 )
                                                                          ( ( 4
                                                                              3 )
                                                                            1 ) ) )
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                0 )
                                                                              [] )
                                                                            =>
                                                                              ( 4
                                                                                [] ) )
                                                                          =>
                                                                            ( ( 16
                                                                                4 )
                                                                              1 ) ) ) )
                                                                no-match! )
                                                              ( ( =>
                                                                    =>
                                                                      0
                                                                  ( ( []
                                                                      "arg" )
                                                                    "_" ) )
                                                                =>
                                                                  =>
                                                                    ( no-match!
                                                                      0 ) ) ) ) )
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( try
                                                                  2
                                                                  1
                                                                  0 )
                                                          =>
                                                            ( ( ( ( ( ( ( ( []
                                                                            ( ( ( 1
                                                                                  ( Compound
                                                                                    ( ( Pair
                                                                                        ( Binding
                                                                                          "x" ) )
                                                                                      ( Binding
                                                                                        "x" ) ) ) )
                                                                                =>
                                                                                  =>
                                                                                    0 )
                                                                              ( ( Pair
                                                                                  Foo )
                                                                                Bar ) ) )
                                                                          ( ( ( 1
                                                                                ( Compound
                                                                                  ( ( Pair
                                                                                      ( Binding
                                                                                        "x" ) )
                                                                                    ( Binding
                                                                                      "x" ) ) ) )
                                                                              =>
                                                                                =>
                                                                                  0 )
                                                                            ( ( Pair
                                                                                Bar )
                                                                              Bar ) ) )
                                                                        ( ( ( 1
                                                                              ( Compound
                                                                                ( ( Pair
                                                                                    ( Binding
                                                                                      "x" ) )
                                                                                  ( Value
                                                                                    Bar ) ) ) )
                                                                            =>
                                                                              0 )
                                                                          ( ( Pair
                                                                              Foo )
                                                                            Bar ) ) )
                                                                      ( ( ( 1
                                                                            ( Compound
                                                                              ( ( Pair
                                                                                  ( Binding
                                                                                    "x" ) )
                                                                                ( Binding
                                                                                  "y" ) ) ) )
                                                                          =>
                                                                            =>
                                                                              0 )
                                                                        ( ( Pair
                                                                            Foo )
                                                                          Bar ) ) )
                                                                    ( ( ( 1
                                                                          ( Value
                                                                            ( ( Pair
                                                                                Foo )
                                                                              Bar ) ) )
                                                                        =>
                                                                          Foo )
                                                                      ( ( Pair
                                                                          Foo )
                                                                        Bar ) ) )
                                                                  ( ( ( 1
                                                                        ( Binding
                                                                          "x" ) )
                                                                      =>
                                                                        Bar )
                                                                    Foo ) )
                                                                ( ( ( 1
                                                                      ( Binding
                                                                        "x" ) )
                                                                    =>
                                                                      0 )
                                                                  Foo ) )
                                                              ( ( ( 1
                                                                    ( Value
                                                                      Foo ) )
                                                                  =>
                                                                    Bar )
                                                                Foo ) ) )
                                                        no-match! )
                                                      ( ( =>
                                                            =>
                                                              0
                                                          ( ( []
                                                              "arg" )
                                                            "r" ) )
                                                        =>
                                                          =>
                                                            ( 1
                                                              ( NoMatch
                                                                0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00005)
00035: PushVar(00004)
00036: Swap(00002)
00037: Apply
00038: PushVar(00004)
00039: PushVar(00003)
00040: Swap(00002)
00041: Apply
00042: PushVar(00000)
00043: Swap(00002)
00044: Apply
00045: Swap(00002)
00046: Apply
00047: PushVar(00001)
00048: Swap(00002)
00049: Apply
00050:   Return
00051: PushFn(00034, 00005)
00052:   Return
00053: PushVar(00002)
00054:   Return
00055: PushFn(00028, 00000)
00056: PushVar(00000)
00057: Swap(00002)
00058: Apply
00059: PushFn(00032, 00000)
00060: PushString("")
00061: PushString(""x"")
00062: Swap(00002)
00063: Apply
00064: PushString(""xs"")
00065: Swap(00002)
00066: Apply
00067: Swap(00002)
00068: Apply
00069: PushFn(00051, 00004)
00070: Swap(00002)
00071: Apply
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00055, 00003)
00079:   Return
00080: PushFn(00078, 00002)
00081:   Return
00082: PushFn(00016, 00000)
00083: PushString("")
00084: PushString(""xs"")
00085: Swap(00002)
00086: Apply
00087: PushString(""acc"")
00088: Swap(00002)
00089: Apply
00090: PushString(""f"")
00091: Swap(00002)
00092: Apply
00093: Swap(00002)
00094: Apply
00095: PushFn(00080, 00001)
00096: Swap(00002)
00097: Apply
00098:   Return
00099: PushVar(00000)
00100: PushVar(00001)
00101: Swap(00002)
00102: Apply
00103:   Return
00104: PushFn(00099, 00001)
00105:   Return
00106: PushFn(00104, 00000)
00107:   Return
00108: PushVar(00000)
00109:   Return
00110: PushFn(00108, 00000)
00111:   Return
00112: PushVar(00000)
00113:   Return
00114: PushFn(00112, 00000)
00115:   Return
00116: PushVar(00001)
00117: PushVar(00000)
00118: Swap(00002)
00119: Apply
00120:   Return
00121: PushFn(00116, 00001)
00122:   Return
00123: PushVar(00002)
00124: PushFn(00114, 00000)
00125: PushString("")
00126: PushString(""x"")
00127: Swap(00002)
00128: Apply
00129: PushString(""f"")
00130: Swap(00002)
00131: Apply
00132: Swap(00002)
00133: Apply
00134: PushFn(00121, 00000)
00135: Swap(00002)
00136: Apply
00137: Swap(00002)
00138: Apply
00139: PushVar(00001)
00140: Swap(00002)
00141: Apply
00142: PushVar(00000)
00143: Swap(00002)
00144: Apply
00145:   Return
00146: PushFn(00123, 00002)
00147:   Return
00148: PushVar(00000)
00149: PushVar(00001)
00150: Swap(00002)
00151: Apply
00152:   Return
00153: PushFn(00148, 00001)
00154:   Return
00155: PushFn(00153, 00000)
00156:   Return
00157: PushVar(00000)
00158:   Return
00159: PushFn(00157, 00000)
00160:   Return
00161: PushVar(00000)
00162:   Return
00163: PushFn(00161, 00000)
00164:   Return
00165: PushVar(00001)
00166: PushVar(00000)
00167: Swap(00002)
00168: Apply
00169:   Return
00170: PushFn(00165, 00001)
00171:   Return
00172: PushVar(00002)
00173: PushFn(00163, 00000)
00174: PushString("")
00175: PushString(""x"")
00176: Swap(00002)
00177: Apply
00178: PushString(""xs"")
00179: Swap(00002)
00180: Apply
00181: Swap(00002)
00182: Apply
00183: PushFn(00170, 00000)
00184: Swap(00002)
00185: Apply
00186: Swap(00002)
00187: Apply
00188: PushString("")
00189: Swap(00002)
00190: Apply
00191: PushVar(00000)
00192: Swap(00002)
00193: Apply
00194:   Return
00195: PushVar(00000)
00196: PushVar(00001)
00197: Swap(00002)
00198: Apply
00199:   Return
00200: PushFn(00195, 00001)
00201:   Return
00202: PushFn(00200, 00000)
00203:   Return
00204: PushVar(00000)
00205:   Return
00206: PushFn(00204, 00000)
00207:   Return
00208: PushVar(00000)
00209:   Return
00210: PushFn(00208, 00000)
00211:   Return
00212: PushVar(00001)
00213: PushVar(00003)
00214: PushVar(00000)
00215: Swap(00002)
00216: Apply
00217: Swap(00002)
00218: Apply
00219:   Return
00220: PushFn(00212, 00003)
00221:   Return
00222: PushVar(00004)
00223: PushFn(00210, 00000)
00224: PushString("")
00225: PushString(""x"")
00226: Swap(00002)
00227: Apply
00228: PushString(""xs"")
00229: Swap(00002)
00230: Apply
00231: Swap(00002)
00232: Apply
00233: PushFn(00220, 00002)
00234: Swap(00002)
00235: Apply
00236: Swap(00002)
00237: Apply
00238: PushString("")
00239: Swap(00002)
00240: Apply
00241: PushVar(00002)
00242: PushVar(00000)
00243: Swap(00002)
00244: Apply
00245: Swap(00002)
00246: Apply
00247:   Return
00248: PushFn(00222, 00004)
00249:   Return
00250: PushVar(00000)
00251: PushVar(00001)
00252: Swap(00002)
00253: Apply
00254:   Return
00255: PushFn(00250, 00001)
00256:   Return
00257: PushFn(00255, 00000)
00258:   Return
00259: PushVar(00000)
00260:   Return
00261: PushFn(00259, 00000)
00262:   Return
00263: PushVar(00000)
00264:   Return
00265: PushFn(00263, 00000)
00266:   Return
00267: PushVar(00000)
00268:   Return
00269: PushFn(00267, 00000)
00270:   Return
00271: PushVar(00001)
00272: PushVar(00000)
00273: Swap(00002)
00274: Apply
00275:   Return
00276: PushFn(00271, 00001)
00277:   Return
00278: PushVar(00006)
00279: PushFn(00269, 00000)
00280: PushString("")
00281: PushString(""x"")
00282: Swap(00002)
00283: Apply
00284: PushString(""acc"")
00285: Swap(00002)
00286: Apply
00287: Swap(00002)
00288: Apply
00289: PushFn(00276, 00000)
00290: Swap(00002)
00291: Apply
00292: Swap(00002)
00293: Apply
00294: PushVar(00001)
00295: Swap(00002)
00296: Apply
00297: PushVar(00000)
00298: Swap(00002)
00299: Apply
00300:   Return
00301: PushFn(00278, 00006)
00302:   Return
00303: PushVar(00002)
00304: PushVar(00004)
00305: PushFn(00265, 00000)
00306: PushString("")
00307: PushString(""x"")
00308: Swap(00002)
00309: Apply
00310: PushString(""acc"")
00311: Swap(00002)
00312: Apply
00313: Swap(00002)
00314: Apply
00315: PushFn(00301, 00005)
00316: Swap(00002)
00317: Apply
00318: Swap(00002)
00319: Apply
00320: PushString("")
00321: Swap(00002)
00322: Apply
00323: PushVar(00000)
00324: Swap(00002)
00325: Apply
00326: Swap(00002)
00327: Apply
00328:   Return
00329: PushVar(00000)
00330: PushVar(00001)
00331: Swap(00002)
00332: Apply
00333:   Return
00334: PushFn(00329, 00001)
00335:   Return
00336: PushFn(00334, 00000)
00337:   Return
00338: PushVar(00000)
00339: Rec
00340:   Return
00341: PushFn(00338, 00000)
00342:   Return
00343: PushVar(00000)
00344:   Return
00345: PushFn(00343, 00000)
00346:   Return
00347: PushVar(00002)
00348: PushVar(00001)
00349: PushVar(00000)
00350: Swap(00003)
00351: Pop
00352: Apply
00353: Apply
00354:   Return
00355: PushFn(00347, 00002)
00356:   Return
00357: PushFn(00355, 00001)
00358:   Return
00359: PushVar(00000)
00360:   Return
00361: PushFn(00359, 00000)
00362:   Return
00363: PushVar(00002)
00364: PushVar(00001)
00365: PushVar(00000)
00366: Swap(00003)
00367: Pop
00368: Apply
00369: Apply
00370:   Return
00371: PushFn(00363, 00002)
00372:   Return
00373: PushFn(00371, 00001)
00374:   Return
00375: PushVar(00000)
00376:   Return
00377: PushFn(00375, 00000)
00378:   Return
00379: PushVar(00007)
00380: PushVar(00006)
00381: PushString("")
00382: PushVar(00000)
00383: Swap(00002)
00384: Apply
00385: PushVar(00002)
00386: Swap(00002)
00387: Apply
00388: Swap(00002)
00389: Apply
00390: Swap(00002)
00391: Apply
00392: PushVar(00003)
00393: Swap(00002)
00394: Apply
00395: PushVar(00001)
00396: Swap(00002)
00397: Apply
00398:   Return
00399: PushFn(00379, 00007)
00400:   Return
00401: PushString("")
00402:   Return
00403: PushFn(00373, 00000)
00404: PushVar(00002)
00405: Swap(00002)
00406: Apply
00407: PushFn(00377, 00000)
00408: PushString("")
00409: PushString(""y"")
00410: Swap(00002)
00411: Apply
00412: PushString(""ys"")
00413: Swap(00002)
00414: Apply
00415: Swap(00002)
00416: Apply
00417: PushFn(00399, 00006)
00418: Swap(00002)
00419: Apply
00420: Swap(00002)
00421: Apply
00422: PushFn(00401, 00000)
00423: Swap(00002)
00424: Apply
00425:   Return
00426: PushFn(00403, 00005)
00427:   Return
00428: PushVar(00002)
00429: PushVar(00001)
00430: PushVar(00000)
00431: Swap(00003)
00432: Pop
00433: Apply
00434: Apply
00435:   Return
00436: PushFn(00428, 00002)
00437:   Return
00438: PushFn(00436, 00001)
00439:   Return
00440: PushVar(00000)
00441:   Return
00442: PushFn(00440, 00000)
00443:   Return
00444: PushString("")
00445:   Return
00446: PushFn(00444, 00000)
00447:   Return
00448: PushVar(00004)
00449:   Return
00450: PushFn(00438, 00000)
00451: PushVar(00001)
00452: Swap(00002)
00453: Apply
00454: PushFn(00442, 00000)
00455: PushString("")
00456: PushString(""y"")
00457: Swap(00002)
00458: Apply
00459: PushString(""ys"")
00460: Swap(00002)
00461: Apply
00462: Swap(00002)
00463: Apply
00464: PushFn(00446, 00000)
00465: Swap(00002)
00466: Apply
00467: Swap(00002)
00468: Apply
00469: PushFn(00448, 00004)
00470: Swap(00002)
00471: Apply
00472:   Return
00473: PushFn(00357, 00000)
00474: PushVar(00001)
00475: Swap(00002)
00476: Apply
00477: PushFn(00361, 00000)
00478: PushString("")
00479: PushString(""x"")
00480: Swap(00002)
00481: Apply
00482: PushString(""xs"")
00483: Swap(00002)
00484: Apply
00485: Swap(00002)
00486: Apply
00487: PushFn(00426, 00004)
00488: Swap(00002)
00489: Apply
00490: Swap(00002)
00491: Apply
00492: PushFn(00450, 00003)
00493: Swap(00002)
00494: Apply
00495:   Return
00496: PushFn(00473, 00003)
00497:   Return
00498: PushFn(00496, 00002)
00499:   Return
00500: PushFn(00345, 00000)
00501: PushString("")
00502: PushString(""ys"")
00503: Swap(00002)
00504: Apply
00505: PushString(""xs"")
00506: Swap(00002)
00507: Apply
00508: PushString(""acc"")
00509: Swap(00002)
00510: Apply
00511: Swap(00002)
00512: Apply
00513: PushFn(00498, 00001)
00514: Swap(00002)
00515: Apply
00516:   Return
00517: PushVar(00000)
00518: PushVar(00001)
00519: Swap(00002)
00520: Apply
00521:   Return
00522: PushFn(00517, 00001)
00523:   Return
00524: PushFn(00522, 00000)
00525:   Return
00526: PushVar(00000)
00527:   Return
00528: PushFn(00526, 00000)
00529:   Return
00530: PushVar(00005)
00531: PushVar(00002)
00532: PushString("")
00533: Swap(00002)
00534: Apply
00535: PushVar(00001)
00536: Swap(00002)
00537: Apply
00538: PushVar(00000)
00539: Swap(00002)
00540: Apply
00541: Swap(00002)
00542: Apply
00543:   Return
00544: PushFn(00530, 00005)
00545:   Return
00546: PushVar(00000)
00547: PushVar(00001)
00548: Swap(00002)
00549: Apply
00550:   Return
00551: PushFn(00546, 00001)
00552:   Return
00553: PushFn(00551, 00000)
00554:   Return
00555: PushVar(00000)
00556: Rec
00557:   Return
00558: PushFn(00555, 00000)
00559:   Return
00560: PushVar(00000)
00561:   Return
00562: PushFn(00560, 00000)
00563:   Return
00564: PushVar(00002)
00565: PushVar(00001)
00566: PushVar(00000)
00567: Swap(00003)
00568: Pop
00569: Apply
00570: Apply
00571:   Return
00572: PushFn(00564, 00002)
00573:   Return
00574: PushFn(00572, 00001)
00575:   Return
00576: PushVar(00000)
00577:   Return
00578: PushFn(00576, 00000)
00579:   Return
00580: PushVar(00002)
00581: PushVar(00001)
00582: PushVar(00000)
00583: Swap(00003)
00584: Pop
00585: Apply
00586: Apply
00587:   Return
00588: PushFn(00580, 00002)
00589:   Return
00590: PushFn(00588, 00001)
00591:   Return
00592: PushVar(00000)
00593:   Return
00594: PushFn(00592, 00000)
00595:   Return
00596: PushVar(00003)
00597: PushVar(00002)
00598: PushVar(00001)
00599: PushVar(00000)
00600: Swap(00004)
00601: If
00602: Apply
00603:   Return
00604: PushFn(00596, 00003)
00605:   Return
00606: PushFn(00604, 00002)
00607:   Return
00608: PushFn(00606, 00001)
00609:   Return
00610: PushVar(00007)
00611: PushVar(00004)
00612: Swap(00002)
00613: Apply
00614: PushVar(00002)
00615: Swap(00002)
00616: Apply
00617:   Return
00618: PushString("False")
00619:   Return
00620: PushFn(00608, 00000)
00621: PushVar(00006)
00622: PushVar(00002)
00623: Swap(00002)
00624: Apply
00625: PushVar(00000)
00626: Swap(00002)
00627: Apply
00628: Swap(00002)
00629: Apply
00630: PushString("True")
00631: Swap(00002)
00632: Apply
00633: PushFn(00610, 00007)
00634: Swap(00002)
00635: Apply
00636: PushFn(00618, 00000)
00637: Swap(00002)
00638: Apply
00639:   Return
00640: PushFn(00620, 00006)
00641:   Return
00642: PushString("False")
00643:   Return
00644: PushFn(00590, 00000)
00645: PushVar(00002)
00646: Swap(00002)
00647: Apply
00648: PushFn(00594, 00000)
00649: PushString("")
00650: PushString(""y"")
00651: Swap(00002)
00652: Apply
00653: PushString(""ys"")
00654: Swap(00002)
00655: Apply
00656: Swap(00002)
00657: Apply
00658: PushFn(00640, 00005)
00659: Swap(00002)
00660: Apply
00661: Swap(00002)
00662: Apply
00663: PushFn(00642, 00000)
00664: Swap(00002)
00665: Apply
00666:   Return
00667: PushFn(00644, 00004)
00668:   Return
00669: PushVar(00003)
00670: PushVar(00002)
00671: PushVar(00001)
00672: PushVar(00000)
00673: Swap(00004)
00674: If
00675: Apply
00676:   Return
00677: PushFn(00669, 00003)
00678:   Return
00679: PushFn(00677, 00002)
00680:   Return
00681: PushFn(00679, 00001)
00682:   Return
00683: PushString("True")
00684:   Return
00685: PushString("False")
00686:   Return
00687: PushFn(00681, 00000)
00688: PushVar(00002)
00689: Swap(00002)
00690: Apply
00691: PushVar(00001)
00692: Swap(00002)
00693: Apply
00694: PushFn(00683, 00000)
00695: Swap(00002)
00696: Apply
00697: PushFn(00685, 00000)
00698: Swap(00002)
00699: Apply
00700:   Return
00701: PushFn(00574, 00000)
00702: PushVar(00001)
00703: Swap(00002)
00704: Apply
00705: PushFn(00578, 00000)
00706: PushString("")
00707: PushString(""x"")
00708: Swap(00002)
00709: Apply
00710: PushString(""xs"")
00711: Swap(00002)
00712: Apply
00713: Swap(00002)
00714: Apply
00715: PushFn(00667, 00003)
00716: Swap(00002)
00717: Apply
00718: Swap(00002)
00719: Apply
00720: PushFn(00687, 00002)
00721: Swap(00002)
00722: Apply
00723:   Return
00724: PushFn(00701, 00002)
00725:   Return
00726: PushFn(00562, 00000)
00727: PushString("")
00728: PushString(""b"")
00729: Swap(00002)
00730: Apply
00731: PushString(""a"")
00732: Swap(00002)
00733: Apply
00734: Swap(00002)
00735: Apply
00736: PushFn(00724, 00001)
00737: Swap(00002)
00738: Apply
00739:   Return
00740: PushVar(00000)
00741: PushVar(00001)
00742: Swap(00002)
00743: Apply
00744:   Return
00745: PushFn(00740, 00001)
00746:   Return
00747: PushFn(00745, 00000)
00748:   Return
00749: PushVar(00000)
00750:   Return
00751: PushFn(00749, 00000)
00752:   Return
00753: PushVar(00002)
00754: PushVar(00001)
00755: PushVar(00000)
00756: Swap(00003)
00757: Pop
00758: Apply
00759: Apply
00760:   Return
00761: PushFn(00753, 00002)
00762:   Return
00763: PushFn(00761, 00001)
00764:   Return
00765: PushVar(00000)
00766:   Return
00767: PushFn(00765, 00000)
00768:   Return
00769: PushVar(00000)
00770:   Return
00771: PushFn(00769, 00000)
00772:   Return
00773: PushVar(00001)
00774:   Return
00775: PushFn(00763, 00000)
00776: PushVar(00000)
00777: Swap(00002)
00778: Apply
00779: PushFn(00767, 00000)
00780: PushString("")
00781: PushString(""x"")
00782: Swap(00002)
00783: Apply
00784: PushString(""_"")
00785: Swap(00002)
00786: Apply
00787: Swap(00002)
00788: Apply
00789: PushFn(00771, 00000)
00790: Swap(00002)
00791: Apply
00792: Swap(00002)
00793: Apply
00794: PushFn(00773, 00001)
00795: Swap(00002)
00796: Apply
00797:   Return
00798: PushVar(00000)
00799: PushVar(00001)
00800: Swap(00002)
00801: Apply
00802:   Return
00803: PushFn(00798, 00001)
00804:   Return
00805: PushFn(00803, 00000)
00806:   Return
00807: PushVar(00000)
00808:   Return
00809: PushFn(00807, 00000)
00810:   Return
00811: PushVar(00002)
00812: PushVar(00001)
00813: PushVar(00000)
00814: Swap(00003)
00815: Pop
00816: Apply
00817: Apply
00818:   Return
00819: PushFn(00811, 00002)
00820:   Return
00821: PushFn(00819, 00001)
00822:   Return
00823: PushVar(00000)
00824:   Return
00825: PushFn(00823, 00000)
00826:   Return
00827: PushVar(00003)
00828: PushVar(00001)
00829: Swap(00002)
00830: Apply
00831:   Return
00832: PushFn(00827, 00003)
00833:   Return
00834: PushVar(00001)
00835:   Return
00836: PushFn(00821, 00000)
00837: PushVar(00000)
00838: Swap(00002)
00839: Apply
00840: PushFn(00825, 00000)
00841: PushString("")
00842: PushString(""_"")
00843: Swap(00002)
00844: Apply
00845: PushString(""xs"")
00846: Swap(00002)
00847: Apply
00848: Swap(00002)
00849: Apply
00850: PushFn(00832, 00002)
00851: Swap(00002)
00852: Apply
00853: Swap(00002)
00854: Apply
00855: PushFn(00834, 00001)
00856: Swap(00002)
00857: Apply
00858:   Return
00859: PushVar(00000)
00860: PushVar(00001)
00861: Swap(00002)
00862: Apply
00863:   Return
00864: PushFn(00859, 00001)
00865:   Return
00866: PushFn(00864, 00000)
00867:   Return
00868: PushVar(00000)
00869:   Return
00870: PushFn(00868, 00000)
00871:   Return
00872: PushVar(00000)
00873: PushVar(00001)
00874: Swap(00002)
00875: Apply
00876:   Return
00877: PushFn(00872, 00001)
00878:   Return
00879: PushFn(00877, 00000)
00880:   Return
00881: PushVar(00000)
00882: PushVar(00001)
00883: Swap(00002)
00884: Apply
00885:   Return
00886: PushFn(00881, 00001)
00887:   Return
00888: PushFn(00886, 00000)
00889:   Return
00890: PushVar(00004)
00891: PushVar(00003)
00892: Swap(00002)
00893: Apply
00894:   Return
00895: PushVar(00000)
00896:   Return
00897: PushFn(00895, 00000)
00898:   Return
00899: PushVar(00000)
00900: PushVar(00001)
00901: Swap(00002)
00902: Apply
00903:   Return
00904: PushFn(00899, 00001)
00905:   Return
00906: PushFn(00904, 00000)
00907:   Return
00908: PushVar(00000)
00909: PushVar(00001)
00910: Swap(00002)
00911: Apply
00912:   Return
00913: PushFn(00908, 00001)
00914:   Return
00915: PushFn(00913, 00000)
00916:   Return
00917: PushVar(00003)
00918: PushVar(00002)
00919: PushVar(00001)
00920: PushVar(00000)
00921: Swap(00004)
00922: If
00923: Apply
00924:   Return
00925: PushFn(00917, 00003)
00926:   Return
00927: PushFn(00925, 00002)
00928:   Return
00929: PushFn(00927, 00001)
00930:   Return
00931: PushVar(00003)
00932: PushVar(00002)
00933: PushVar(00001)
00934: PushVar(00000)
00935: Swap(00004)
00936: If
00937: Apply
00938:   Return
00939: PushFn(00931, 00003)
00940:   Return
00941: PushFn(00939, 00002)
00942:   Return
00943: PushFn(00941, 00001)
00944:   Return
00945: PushEffect("no-match")
00946: PushString("")
00947: PushString("")
00948: PushVar(00002)
00949: Swap(00002)
00950: Apply
00951: PushVar(00003)
00952: Swap(00002)
00953: Apply
00954: Swap(00002)
00955: Apply
00956: PushString("")
00957: PushVar(00006)
00958: Swap(00002)
00959: Apply
00960: PushVar(00007)
00961: Swap(00002)
00962: Apply
00963: Swap(00002)
00964: Apply
00965: Swap(00002)
00966: Apply
00967:   Return
00968: PushString("")
00969:   Return
00970: PushFn(00943, 00000)
00971: PushVar(00011)
00972: PushVar(00005)
00973: Swap(00002)
00974: Apply
00975: PushVar(00001)
00976: Swap(00002)
00977: Apply
00978: Swap(00002)
00979: Apply
00980: PushString("False")
00981: Swap(00002)
00982: Apply
00983: PushFn(00945, 00007)
00984: Swap(00002)
00985: Apply
00986: PushFn(00968, 00000)
00987: Swap(00002)
00988: Apply
00989:   Return
00990: PushString("")
00991:   Return
00992: PushFn(00929, 00000)
00993: PushVar(00005)
00994: Swap(00002)
00995: Apply
00996: PushVar(00001)
00997: Swap(00002)
00998: Apply
00999: PushFn(00970, 00011)
01000: Swap(00002)
01001: Apply
01002: PushFn(00990, 00000)
01003: Swap(00002)
01004: Apply
01005:   Return
01006: PushFn(00915, 00000)
01007: PushString(""yval"")
01008: Swap(00002)
01009: Apply
01010: PushVar(00007)
01011: PushVar(00001)
01012: Swap(00002)
01013: Apply
01014: Swap(00002)
01015: Apply
01016: PushFn(00992, 00010)
01017: Swap(00002)
01018: Apply
01019:   Return
01020: PushFn(00906, 00000)
01021: PushString(""yvar"")
01022: Swap(00002)
01023: Apply
01024: PushVar(00007)
01025: PushVar(00000)
01026: Swap(00002)
01027: Apply
01028: Swap(00002)
01029: Apply
01030: PushFn(01006, 00009)
01031: Swap(00002)
01032: Apply
01033:   Return
01034: PushFn(01020, 00008)
01035:   Return
01036: PushFn(00890, 00004)
01037: PushVar(00013)
01038: PushFn(00897, 00000)
01039: PushString("")
01040: PushString(""pair"")
01041: Swap(00002)
01042: Apply
01043: PushString(""_"")
01044: Swap(00002)
01045: Apply
01046: Swap(00002)
01047: Apply
01048: PushFn(01034, 00007)
01049: Swap(00002)
01050: Apply
01051: Swap(00002)
01052: Apply
01053: PushString("")
01054: Swap(00002)
01055: Apply
01056: PushVar(00003)
01057: Swap(00002)
01058: Apply
01059: Swap(00002)
01060: Apply
01061:   Return
01062: PushFn(00888, 00000)
01063: PushString(""xval"")
01064: Swap(00002)
01065: Apply
01066: PushVar(00003)
01067: PushVar(00001)
01068: Swap(00002)
01069: Apply
01070: Swap(00002)
01071: Apply
01072: PushFn(01036, 00013)
01073: Swap(00002)
01074: Apply
01075:   Return
01076: PushFn(00879, 00000)
01077: PushString(""xvar"")
01078: Swap(00002)
01079: Apply
01080: PushVar(00003)
01081: PushVar(00000)
01082: Swap(00002)
01083: Apply
01084: Swap(00002)
01085: Apply
01086: PushFn(01062, 00012)
01087: Swap(00002)
01088: Apply
01089:   Return
01090: PushFn(01076, 00011)
01091:   Return
01092: PushVar(00000)
01093: PushVar(00001)
01094: Swap(00002)
01095: Apply
01096:   Return
01097: PushFn(01092, 00001)
01098:   Return
01099: PushFn(01097, 00000)
01100:   Return
01101: PushVar(00000)
01102: Rec
01103:   Return
01104: PushFn(01101, 00000)
01105:   Return
01106: PushVar(00000)
01107:   Return
01108: PushFn(01106, 00000)
01109:   Return
01110: PushVar(00002)
01111: PushVar(00001)
01112: PushVar(00000)
01113: Swap(00003)
01114: Pop
01115: Apply
01116: Apply
01117:   Return
01118: PushFn(01110, 00002)
01119:   Return
01120: PushFn(01118, 00001)
01121:   Return
01122: PushVar(00000)
01123:   Return
01124: PushFn(01122, 00000)
01125:   Return
01126: PushVar(00003)
01127: PushVar(00002)
01128: PushVar(00001)
01129: PushVar(00000)
01130: Swap(00004)
01131: If
01132: Apply
01133:   Return
01134: PushFn(01126, 00003)
01135:   Return
01136: PushFn(01134, 00002)
01137:   Return
01138: PushFn(01136, 00001)
01139:   Return
01140: PushString("")
01141: PushString("")
01142: PushVar(00003)
01143: Swap(00002)
01144: Apply
01145: PushVar(00001)
01146: Swap(00002)
01147: Apply
01148: Swap(00002)
01149: Apply
01150:   Return
01151: PushVar(00003)
01152: PushVar(00002)
01153: PushVar(00001)
01154: PushVar(00000)
01155: Swap(00004)
01156: If
01157: Apply
01158:   Return
01159: PushFn(01151, 00003)
01160:   Return
01161: PushFn(01159, 00002)
01162:   Return
01163: PushFn(01161, 00001)
01164:   Return
01165: PushVar(00000)
01166: PushVar(00001)
01167: Swap(00002)
01168: Apply
01169:   Return
01170: PushFn(01165, 00001)
01171:   Return
01172: PushFn(01170, 00000)
01173:   Return
01174: PushVar(00003)
01175: PushVar(00002)
01176: PushVar(00001)
01177: PushVar(00000)
01178: Swap(00004)
01179: If
01180: Apply
01181:   Return
01182: PushFn(01174, 00003)
01183:   Return
01184: PushFn(01182, 00002)
01185:   Return
01186: PushFn(01184, 00001)
01187:   Return
01188: PushEffect("no-match")
01189: PushString("")
01190: PushVar(00006)
01191: Swap(00002)
01192: Apply
01193: PushVar(00004)
01194: Swap(00002)
01195: Apply
01196: Swap(00002)
01197: Apply
01198:   Return
01199: PushVar(00009)
01200: PushVar(00015)
01201: PushVar(00016)
01202: PushVar(00018)
01203: PushVar(00008)
01204: Swap(00002)
01205: Apply
01206: Swap(00002)
01207: Apply
01208: PushVar(00013)
01209: PushVar(00004)
01210: Swap(00002)
01211: Apply
01212: PushVar(00006)
01213: Swap(00002)
01214: Apply
01215: Swap(00002)
01216: Apply
01217: Swap(00002)
01218: Apply
01219: Swap(00002)
01220: Apply
01221:   Return
01222: PushFn(01186, 00000)
01223: PushVar(00000)
01224: Swap(00002)
01225: Apply
01226: PushString("")
01227: Swap(00002)
01228: Apply
01229: PushFn(01188, 00006)
01230: Swap(00002)
01231: Apply
01232: PushFn(01199, 00018)
01233: Swap(00002)
01234: Apply
01235:   Return
01236: PushFn(01172, 00000)
01237: PushString(""zipped"")
01238: Swap(00002)
01239: Apply
01240: PushVar(00011)
01241: PushVar(00002)
01242: Swap(00002)
01243: Apply
01244: PushVar(00004)
01245: Swap(00002)
01246: Apply
01247: Swap(00002)
01248: Apply
01249: PushFn(01222, 00017)
01250: Swap(00002)
01251: Apply
01252:   Return
01253: PushVar(00003)
01254: PushVar(00002)
01255: PushVar(00001)
01256: PushVar(00000)
01257: Swap(00004)
01258: If
01259: Apply
01260:   Return
01261: PushFn(01253, 00003)
01262:   Return
01263: PushFn(01261, 00002)
01264:   Return
01265: PushFn(01263, 00001)
01266:   Return
01267: PushString("")
01268:   Return
01269: PushEffect("no-match")
01270: PushString("")
01271: PushVar(00005)
01272: Swap(00002)
01273: Apply
01274: PushVar(00003)
01275: Swap(00002)
01276: Apply
01277: Swap(00002)
01278: Apply
01279:   Return
01280: PushFn(01265, 00000)
01281: PushVar(00010)
01282: PushVar(00002)
01283: Swap(00002)
01284: Apply
01285: PushVar(00004)
01286: Swap(00002)
01287: Apply
01288: Swap(00002)
01289: Apply
01290: PushString("True")
01291: Swap(00002)
01292: Apply
01293: PushFn(01267, 00000)
01294: Swap(00002)
01295: Apply
01296: PushFn(01269, 00005)
01297: Swap(00002)
01298: Apply
01299:   Return
01300: PushFn(01163, 00000)
01301: PushVar(00002)
01302: Swap(00002)
01303: Apply
01304: PushString("Compound")
01305: Swap(00002)
01306: Apply
01307: PushFn(01236, 00016)
01308: Swap(00002)
01309: Apply
01310: PushFn(01280, 00010)
01311: Swap(00002)
01312: Apply
01313:   Return
01314: PushFn(01138, 00000)
01315: PushVar(00001)
01316: Swap(00002)
01317: Apply
01318: PushString("Binding")
01319: Swap(00002)
01320: Apply
01321: PushFn(01140, 00003)
01322: Swap(00002)
01323: Apply
01324: PushFn(01300, 00015)
01325: Swap(00002)
01326: Apply
01327:   Return
01328: PushFn(01314, 00014)
01329:   Return
01330: PushEffect("invalid")
01331: PushVar(00002)
01332: Swap(00002)
01333: Apply
01334:   Return
01335: PushFn(01120, 00000)
01336: PushVar(00001)
01337: Swap(00002)
01338: Apply
01339: PushFn(01124, 00000)
01340: PushString("")
01341: PushString(""pattern"")
01342: Swap(00002)
01343: Apply
01344: PushString(""type"")
01345: Swap(00002)
01346: Apply
01347: Swap(00002)
01348: Apply
01349: PushFn(01328, 00013)
01350: Swap(00002)
01351: Apply
01352: Swap(00002)
01353: Apply
01354: PushFn(01330, 00002)
01355: Swap(00002)
01356: Apply
01357:   Return
01358: PushFn(01335, 00012)
01359:   Return
01360: PushFn(01108, 00000)
01361: PushString("")
01362: PushString(""value"")
01363: Swap(00002)
01364: Apply
01365: PushString(""pattern"")
01366: Swap(00002)
01367: Apply
01368: Swap(00002)
01369: Apply
01370: PushFn(01358, 00011)
01371: Swap(00002)
01372: Apply
01373:   Return
01374: PushVar(00000)
01375: PushVar(00001)
01376: Swap(00002)
01377: Apply
01378:   Return
01379: PushFn(01374, 00001)
01380:   Return
01381: PushFn(01379, 00000)
01382:   Return
01383: PushVar(00000)
01384:   Return
01385: PushFn(01383, 00000)
01386:   Return
01387: PushVar(00000)
01388: Apply
01389: Apply
01390:   Return
01391: PushVar(00002)
01392: PushVar(00001)
01393: PushFn(01387, 00000)
01394: Swap(00003)
01395: Try
01396: Apply
01397: Unwind
01398:   Return
01399: PushFn(01391, 00002)
01400:   Return
01401: PushFn(01399, 00001)
01402:   Return
01403: PushVar(00000)
01404: PushVar(00001)
01405: Swap(00002)
01406: Apply
01407:   Return
01408: PushFn(01403, 00001)
01409:   Return
01410: PushFn(01408, 00000)
01411:   Return
01412: PushVar(00003)
01413: PushVar(00002)
01414: PushVar(00001)
01415: PushVar(00000)
01416: Swap(00004)
01417: If
01418: Apply
01419:   Return
01420: PushFn(01412, 00003)
01421:   Return
01422: PushFn(01420, 00002)
01423:   Return
01424: PushFn(01422, 00001)
01425:   Return
01426: PushVar(00004)
01427: PushString("")
01428: Swap(00002)
01429: Apply
01430:   Return
01431: PushVar(00016)
01432: PushVar(00004)
01433: Swap(00002)
01434: Apply
01435: PushVar(00001)
01436: Swap(00002)
01437: Apply
01438:   Return
01439: PushFn(01424, 00000)
01440: PushVar(00000)
01441: Swap(00002)
01442: Apply
01443: PushString("")
01444: Swap(00002)
01445: Apply
01446: PushFn(01426, 00004)
01447: Swap(00002)
01448: Apply
01449: PushFn(01431, 00016)
01450: Swap(00002)
01451: Apply
01452:   Return
01453: PushFn(01410, 00000)
01454: PushString(""args"")
01455: Swap(00002)
01456: Apply
01457: PushVar(00012)
01458: PushVar(00006)
01459: Swap(00002)
01460: Apply
01461: PushVar(00004)
01462: PushVar(00003)
01463: Swap(00002)
01464: Apply
01465: PushVar(00001)
01466: Swap(00002)
01467: Apply
01468: Swap(00002)
01469: Apply
01470: Swap(00002)
01471: Apply
01472: PushFn(01439, 00015)
01473: Swap(00002)
01474: Apply
01475:   Return
01476: PushVar(00000)
01477:   Return
01478: PushFn(01476, 00000)
01479:   Return
01480: PushEffect("no-match")
01481: PushVar(00000)
01482: Swap(00002)
01483: Apply
01484:   Return
01485: PushFn(01480, 00000)
01486:   Return
01487: PushFn(01401, 00000)
01488: PushFn(01453, 00014)
01489: Swap(00002)
01490: Apply
01491: PushEffect("no-match")
01492: Swap(00002)
01493: Apply
01494: PushFn(01478, 00000)
01495: PushString("")
01496: PushString(""arg"")
01497: Swap(00002)
01498: Apply
01499: PushString(""_"")
01500: Swap(00002)
01501: Apply
01502: Swap(00002)
01503: Apply
01504: PushFn(01485, 00000)
01505: Swap(00002)
01506: Apply
01507: Swap(00002)
01508: Apply
01509:   Return
01510: PushFn(01487, 00013)
01511:   Return
01512: PushFn(01510, 00012)
01513:   Return
01514: PushVar(00000)
01515: Apply
01516: Apply
01517:   Return
01518: PushVar(00002)
01519: PushVar(00001)
01520: PushFn(01514, 00000)
01521: Swap(00003)
01522: Try
01523: Apply
01524: Unwind
01525:   Return
01526: PushFn(01518, 00002)
01527:   Return
01528: PushFn(01526, 00001)
01529:   Return
01530: PushVar(00000)
01531:   Return
01532: PushFn(01530, 00000)
01533:   Return
01534: PushVar(00000)
01535:   Return
01536: PushFn(01534, 00000)
01537:   Return
01538: PushVar(00000)
01539:   Return
01540: PushVar(00000)
01541:   Return
01542: PushFn(01540, 00000)
01543:   Return
01544: PushString("Foo")
01545:   Return
01546: PushString("Bar")
01547:   Return
01548: PushVar(00000)
01549:   Return
01550: PushString("Bar")
01551:   Return
01552: PushString("")
01553: PushVar(00001)
01554: PushString("Compound")
01555: PushString("Pair")
01556: PushString("Binding")
01557: PushString(""x"")
01558: Swap(00002)
01559: Apply
01560: Swap(00002)
01561: Apply
01562: PushString("Binding")
01563: PushString(""x"")
01564: Swap(00002)
01565: Apply
01566: Swap(00002)
01567: Apply
01568: Swap(00002)
01569: Apply
01570: Swap(00002)
01571: Apply
01572: PushFn(01532, 00000)
01573: Swap(00002)
01574: Apply
01575: PushString("Pair")
01576: PushString("Foo")
01577: Swap(00002)
01578: Apply
01579: PushString("Bar")
01580: Swap(00002)
01581: Apply
01582: Swap(00002)
01583: Apply
01584: Swap(00002)
01585: Apply
01586: PushVar(00001)
01587: PushString("Compound")
01588: PushString("Pair")
01589: PushString("Binding")
01590: PushString(""x"")
01591: Swap(00002)
01592: Apply
01593: Swap(00002)
01594: Apply
01595: PushString("Binding")
01596: PushString(""x"")
01597: Swap(00002)
01598: Apply
01599: Swap(00002)
01600: Apply
01601: Swap(00002)
01602: Apply
01603: Swap(00002)
01604: Apply
01605: PushFn(01536, 00000)
01606: Swap(00002)
01607: Apply
01608: PushString("Pair")
01609: PushString("Bar")
01610: Swap(00002)
01611: Apply
01612: PushString("Bar")
01613: Swap(00002)
01614: Apply
01615: Swap(00002)
01616: Apply
01617: Swap(00002)
01618: Apply
01619: PushVar(00001)
01620: PushString("Compound")
01621: PushString("Pair")
01622: PushString("Binding")
01623: PushString(""x"")
01624: Swap(00002)
01625: Apply
01626: Swap(00002)
01627: Apply
01628: PushString("Value")
01629: PushString("Bar")
01630: Swap(00002)
01631: Apply
01632: Swap(00002)
01633: Apply
01634: Swap(00002)
01635: Apply
01636: Swap(00002)
01637: Apply
01638: PushFn(01538, 00000)
01639: Swap(00002)
01640: Apply
01641: PushString("Pair")
01642: PushString("Foo")
01643: Swap(00002)
01644: Apply
01645: PushString("Bar")
01646: Swap(00002)
01647: Apply
01648: Swap(00002)
01649: Apply
01650: Swap(00002)
01651: Apply
01652: PushVar(00001)
01653: PushString("Compound")
01654: PushString("Pair")
01655: PushString("Binding")
01656: PushString(""x"")
01657: Swap(00002)
01658: Apply
01659: Swap(00002)
01660: Apply
01661: PushString("Binding")
01662: PushString(""y"")
01663: Swap(00002)
01664: Apply
01665: Swap(00002)
01666: Apply
01667: Swap(00002)
01668: Apply
01669: Swap(00002)
01670: Apply
01671: PushFn(01542, 00000)
01672: Swap(00002)
01673: Apply
01674: PushString("Pair")
01675: PushString("Foo")
01676: Swap(00002)
01677: Apply
01678: PushString("Bar")
01679: Swap(00002)
01680: Apply
01681: Swap(00002)
01682: Apply
01683: Swap(00002)
01684: Apply
01685: PushVar(00001)
01686: PushString("Value")
01687: PushString("Pair")
01688: PushString("Foo")
01689: Swap(00002)
01690: Apply
01691: PushString("Bar")
01692: Swap(00002)
01693: Apply
01694: Swap(00002)
01695: Apply
01696: Swap(00002)
01697: Apply
01698: PushFn(01544, 00000)
01699: Swap(00002)
01700: Apply
01701: PushString("Pair")
01702: PushString("Foo")
01703: Swap(00002)
01704: Apply
01705: PushString("Bar")
01706: Swap(00002)
01707: Apply
01708: Swap(00002)
01709: Apply
01710: Swap(00002)
01711: Apply
01712: PushVar(00001)
01713: PushString("Binding")
01714: PushString(""x"")
01715: Swap(00002)
01716: Apply
01717: Swap(00002)
01718: Apply
01719: PushFn(01546, 00000)
01720: Swap(00002)
01721: Apply
01722: PushString("Foo")
01723: Swap(00002)
01724: Apply
01725: Swap(00002)
01726: Apply
01727: PushVar(00001)
01728: PushString("Binding")
01729: PushString(""x"")
01730: Swap(00002)
01731: Apply
01732: Swap(00002)
01733: Apply
01734: PushFn(01548, 00000)
01735: Swap(00002)
01736: Apply
01737: PushString("Foo")
01738: Swap(00002)
01739: Apply
01740: Swap(00002)
01741: Apply
01742: PushVar(00001)
01743: PushString("Value")
01744: PushString("Foo")
01745: Swap(00002)
01746: Apply
01747: Swap(00002)
01748: Apply
01749: PushFn(01550, 00000)
01750: Swap(00002)
01751: Apply
01752: PushString("Foo")
01753: Swap(00002)
01754: Apply
01755: Swap(00002)
01756: Apply
01757:   Return
01758: PushVar(00000)
01759:   Return
01760: PushFn(01758, 00000)
01761:   Return
01762: PushVar(00001)
01763: PushString("NoMatch")
01764: PushVar(00000)
01765: Swap(00002)
01766: Apply
01767: Swap(00002)
01768: Apply
01769:   Return
01770: PushFn(01762, 00001)
01771:   Return
01772: PushFn(01528, 00000)
01773: PushFn(01552, 00001)
01774: Swap(00002)
01775: Apply
01776: PushEffect("no-match")
01777: Swap(00002)
01778: Apply
01779: PushFn(01760, 00000)
01780: PushString("")
01781: PushString(""arg"")
01782: Swap(00002)
01783: Apply
01784: PushString(""r"")
01785: Swap(00002)
01786: Apply
01787: Swap(00002)
01788: Apply
01789: PushFn(01770, 00000)
01790: Swap(00002)
01791: Apply
01792: Swap(00002)
01793: Apply
01794:   Return
01795: PushFn(01381, 00000)
01796: PushString(""->"")
01797: Swap(00002)
01798: Apply
01799: PushFn(01385, 00000)
01800: PushString("")
01801: PushString(""value"")
01802: Swap(00002)
01803: Apply
01804: PushString(""body"")
01805: Swap(00002)
01806: Apply
01807: PushString(""pattern"")
01808: Swap(00002)
01809: Apply
01810: Swap(00002)
01811: Apply
01812: PushFn(01512, 00011)
01813: Swap(00002)
01814: Apply
01815: Swap(00002)
01816: Apply
01817: PushFn(01772, 00000)
01818: Swap(00002)
01819: Apply
01820:   Return
01821: PushFn(01099, 00000)
01822: PushString(""unify"")
01823: Swap(00002)
01824: Apply
01825: PushFn(01104, 00000)
01826: PushString(""unify"")
01827: Swap(00002)
01828: Apply
01829: PushFn(01360, 00010)
01830: Swap(00002)
01831: Apply
01832: Swap(00002)
01833: Apply
01834: PushFn(01795, 00010)
01835: Swap(00002)
01836: Apply
01837:   Return
01838: PushFn(00866, 00000)
01839: PushString(""join"")
01840: Swap(00002)
01841: Apply
01842: PushVar(00009)
01843: PushFn(00870, 00000)
01844: PushString("")
01845: PushString(""pair"")
01846: Swap(00002)
01847: Apply
01848: PushString(""acc"")
01849: Swap(00002)
01850: Apply
01851: Swap(00002)
01852: Apply
01853: PushFn(01090, 00010)
01854: Swap(00002)
01855: Apply
01856: Swap(00002)
01857: Apply
01858: PushString("")
01859: Swap(00002)
01860: Apply
01861: Swap(00002)
01862: Apply
01863: PushFn(01821, 00009)
01864: Swap(00002)
01865: Apply
01866:   Return
01867: PushFn(00805, 00000)
01868: PushString(""second"")
01869: Swap(00002)
01870: Apply
01871: PushFn(00809, 00000)
01872: PushString(""xs"")
01873: Swap(00002)
01874: Apply
01875: PushFn(00836, 00001)
01876: Swap(00002)
01877: Apply
01878: Swap(00002)
01879: Apply
01880: PushFn(01838, 00009)
01881: Swap(00002)
01882: Apply
01883:   Return
01884: PushFn(00747, 00000)
01885: PushString(""first"")
01886: Swap(00002)
01887: Apply
01888: PushFn(00751, 00000)
01889: PushString(""xs"")
01890: Swap(00002)
01891: Apply
01892: PushFn(00775, 00000)
01893: Swap(00002)
01894: Apply
01895: Swap(00002)
01896: Apply
01897: PushFn(01867, 00008)
01898: Swap(00002)
01899: Apply
01900:   Return
01901: PushFn(00553, 00000)
01902: PushString(""=="")
01903: Swap(00002)
01904: Apply
01905: PushFn(00558, 00000)
01906: PushString(""=="")
01907: Swap(00002)
01908: Apply
01909: PushFn(00726, 00000)
01910: Swap(00002)
01911: Apply
01912: Swap(00002)
01913: Apply
01914: PushFn(01884, 00007)
01915: Swap(00002)
01916: Apply
01917:   Return
01918: PushFn(00524, 00000)
01919: PushString(""zip"")
01920: Swap(00002)
01921: Apply
01922: PushFn(00528, 00000)
01923: PushString("")
01924: PushString(""ys"")
01925: Swap(00002)
01926: Apply
01927: PushString(""xs"")
01928: Swap(00002)
01929: Apply
01930: Swap(00002)
01931: Apply
01932: PushFn(00544, 00004)
01933: Swap(00002)
01934: Apply
01935: Swap(00002)
01936: Apply
01937: PushFn(01901, 00006)
01938: Swap(00002)
01939: Apply
01940:   Return
01941: PushFn(00336, 00000)
01942: PushString(""zip"")
01943: Swap(00002)
01944: Apply
01945: PushFn(00341, 00000)
01946: PushString(""zip"")
01947: Swap(00002)
01948: Apply
01949: PushFn(00500, 00000)
01950: Swap(00002)
01951: Apply
01952: Swap(00002)
01953: Apply
01954: PushFn(01918, 00005)
01955: Swap(00002)
01956: Apply
01957:   Return
01958: PushFn(00257, 00000)
01959: PushString(""flatten"")
01960: Swap(00002)
01961: Apply
01962: PushFn(00261, 00000)
01963: PushString(""xs"")
01964: Swap(00002)
01965: Apply
01966: PushFn(00303, 00004)
01967: Swap(00002)
01968: Apply
01969: Swap(00002)
01970: Apply
01971: PushFn(01941, 00004)
01972: Swap(00002)
01973: Apply
01974:   Return
01975: PushFn(00202, 00000)
01976: PushString(""map"")
01977: Swap(00002)
01978: Apply
01979: PushFn(00206, 00000)
01980: PushString("")
01981: PushString(""xs"")
01982: Swap(00002)
01983: Apply
01984: PushString(""f"")
01985: Swap(00002)
01986: Apply
01987: Swap(00002)
01988: Apply
01989: PushFn(00248, 00003)
01990: Swap(00002)
01991: Apply
01992: Swap(00002)
01993: Apply
01994: PushFn(01958, 00003)
01995: Swap(00002)
01996: Apply
01997:   Return
01998: PushFn(00155, 00000)
01999: PushString(""rev"")
02000: Swap(00002)
02001: Apply
02002: PushFn(00159, 00000)
02003: PushString(""xs"")
02004: Swap(00002)
02005: Apply
02006: PushFn(00172, 00002)
02007: Swap(00002)
02008: Apply
02009: Swap(00002)
02010: Apply
02011: PushFn(01975, 00002)
02012: Swap(00002)
02013: Apply
02014:   Return
02015: PushFn(00106, 00000)
02016: PushString(""apply"")
02017: Swap(00002)
02018: Apply
02019: PushFn(00110, 00000)
02020: PushString("")
02021: PushString(""xs"")
02022: Swap(00002)
02023: Apply
02024: PushString(""f"")
02025: Swap(00002)
02026: Apply
02027: Swap(00002)
02028: Apply
02029: PushFn(00146, 00001)
02030: Swap(00002)
02031: Apply
02032: Swap(00002)
02033: Apply
02034: PushFn(01998, 00001)
02035: Swap(00002)
02036: Apply
02037:   Return
02038: PushFn(00007, 00000)
02039: PushString(""fold"")
02040: Swap(00002)
02041: Apply
02042: PushFn(00012, 00000)
02043: PushString(""fold"")
02044: Swap(00002)
02045: Apply
02046: PushFn(00082, 00000)
02047: Swap(00002)
02048: Apply
02049: Swap(00002)
02050: Apply
02051: PushFn(02015, 00000)
02052: Swap(00002)
02053: Apply

[Bar, Foo, Bar, Foo, Bar, Foo, Bar, NoMatch([["x", Foo], ["x", Bar]])]

---

'fold = ('fold ~> { ['f, 'acc, 'xs] => {
    pop(xs, ['xs, 'x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
'apply = (['f, 'xs] => {
    fold(['f, 'x] => { f(x) }, f, xs)
})
'rev = ('xs => {
    fold(['xs, 'x] => { xs(x) }, [], xs)
})
'map = (['f, 'xs] => {
    fold(['xs, 'x] => { xs(f(x)) }, [], rev(xs))
})
'flatten = ('xs => {
    rev(fold(['acc, 'x] => {
        fold(['acc, 'x] => { acc(x) }, acc, x)
    }, [], xs))
})
'zip = ('zip ~> { ['acc, 'xs, 'ys] => {
    pop(xs, ['xs, 'x] => {
        pop(ys, ['ys, 'y] => { zip(acc([x, y]), xs, ys) }, {})
    }, {
        pop(ys, ['ys, 'y] => {}, { acc })
    })
}})
'zip = (['xs, 'ys] => {
    rev(zip([], xs, ys))
})
'== = ('== ~> { ['a, 'b] => {
    pop(a, ['xs, 'x] => {
        pop(b, ['ys, 'y] => {
            if(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        if(a, b, { True }, { False })
    })
}})
'first = ('xs => {
    pop(xs, ['_, 'x] => { x }, { xs })
})
'second = ('xs => {
    pop(xs, ['xs, '_] => { first(xs) }, { xs })
})
'join = fold(['acc, 'pair] => {
    'xvar = first(pair)
    'xval = second(pair)
    fold(['_, 'pair] => {
        'yvar = first(pair)
        'yval = second(pair)
        if(xvar, yvar, {
            if(xval == yval, False, {
                no-match!([[xvar, xval], [yvar, yval]])
            }, {})
        }, {})
    }, [], acc)
    acc(pair)
}, [])
'unify = ('unify ~> { ['pattern, 'value] => {
    pop(pattern, ['type, 'pattern] => {
        if(type, Binding, {
            [[pattern, value]]
        }, {
            if(type, Compound, {
                'zipped = zip(pattern, value)
                if(zipped, [], {
                    no-match!([pattern, value])
                }, {
                    join(flatten(map(apply(unify), zip(pattern, value))))
                })
            }, {
                if(pattern == value, True, {}, {
                    no-match!([pattern, value])
                })
            })
        })
    }, {
        invalid!(pattern)
    })
}})
'-> = (['pattern, 'body, 'value] => {
    try( {
        'args = map(second, unify(pattern, value))
        if(args, [], {
            body()
        }, {
            apply(body, args)
        })
    }, no-match!, ['_, 'arg] => {
        no-match!(arg)
    })
})
'match-with = (['value, 'clauses] => {
    'result = fold(['result, 'clause] => {
        if(result, [], {
            try({
                Match(clause(value))
            }, no-match!, ['r, 'arg] => {})
        }, {
            result
        })
    }, [], clauses)
    pop(result, ['_, 'result] => {
        result
    }, {
        no-match!(value)
    })
})
[
    match: Pair(Foo, Bar) with: [
        Pair('x, 'x) -> { Twice(x, x) }
        Pair('x, Foo) -> { SecondIsFoo }
        Pair('x, 'y) -> { y }
        '_ -> { throw!(InvalidPair) }
    ]
    try({
        match: Foo with: [
            Pair('x, 'x) -> { Twice(x, x) }
            Pair('x, Foo) -> { SecondIsFoo }
            Pair('x, 'y) -> { y }
        ]
    }, no-match!, ['_, 'arg] => {
        NoMatch(arg)
    })
]

(=
  'fold
  (~>
    'fold
    { (=>
        ( 'f
          'acc
          'xs )
        { (pop
            xs
            (=>
              ( 'xs
                'x )
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'apply
  (=>
    ( 'f
      'xs )
    { (fold
        (=>
          ( 'f
            'x )
          { (f
              x) })
        f
        xs) }))
(=
  'rev
  (=>
    'xs
    { (fold
        (=>
          ( 'xs
            'x )
          { (xs
              x) })
        (  )
        xs) }))
(=
  'map
  (=>
    ( 'f
      'xs )
    { (fold
        (=>
          ( 'xs
            'x )
          { (xs
              (f
                x)) })
        (  )
        (rev
          xs)) }))
(=
  'flatten
  (=>
    'xs
    { (rev
        (fold
          (=>
            ( 'acc
              'x )
            { (fold
                (=>
                  ( 'acc
                    'x )
                  { (acc
                      x) })
                acc
                x) })
          (  )
          xs)) }))
(=
  'zip
  (~>
    'zip
    { (=>
        ( 'acc
          'xs
          'ys )
        { (pop
            xs
            (=>
              ( 'xs
                'x )
              { (pop
                  ys
                  (=>
                    ( 'ys
                      'y )
                    { (zip
                        (acc
                          ( x
                            y ))
                        xs
                        ys) })
                  {  }) })
            { (pop
                ys
                (=>
                  ( 'ys
                    'y )
                  {  })
                { acc }) }) }) }))
(=
  'zip
  (=>
    ( 'xs
      'ys )
    { (rev
        (zip
          (  )
          xs
          ys)) }))
(=
  '==
  (~>
    '==
    { (=>
        ( 'a
          'b )
        { (pop
            a
            (=>
              ( 'xs
                'x )
              { (pop
                  b
                  (=>
                    ( 'ys
                      'y )
                    { (if
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (if
                a
                b
                { True }
                { False }) }) }) }))
(=
  'first
  (=>
    'xs
    { (pop
        xs
        (=>
          ( '_
            'x )
          { x })
        { xs }) }))
(=
  'second
  (=>
    'xs
    { (pop
        xs
        (=>
          ( 'xs
            '_ )
          { (first
              xs) })
        { xs }) }))
(=
  'join
  (fold
    (=>
      ( 'acc
        'pair )
      { (=
          'xvar
          (first
            pair))
        (=
          'xval
          (second
            pair))
        (fold
          (=>
            ( '_
              'pair )
            { (=
                'yvar
                (first
                  pair))
              (=
                'yval
                (second
                  pair))
              (if
                xvar
                yvar
                { (if
                    (==
                      xval
                      yval)
                    False
                    { (no-match!
                        ( ( xvar
                            xval )
                          ( yvar
                            yval ) )) }
                    {  }) }
                {  }) })
          (  )
          acc)
        (acc
          pair) })
    (  )))
(=
  'unify
  (~>
    'unify
    { (=>
        ( 'pattern
          'value )
        { (pop
            pattern
            (=>
              ( 'type
                'pattern )
              { (if
                  type
                  Binding
                  { ( ( pattern
                        value ) ) }
                  { (if
                      type
                      Compound
                      { (=
                          'zipped
                          (zip
                            pattern
                            value))
                        (if
                          zipped
                          (  )
                          { (no-match!
                              ( pattern
                                value )) }
                          { (join
                              (flatten
                                (map
                                  (apply
                                    unify)
                                  (zip
                                    pattern
                                    value)))) }) }
                      { (if
                          (==
                            pattern
                            value)
                          True
                          {  }
                          { (no-match!
                              ( pattern
                                value )) }) }) }) })
            { (invalid!
                pattern) }) }) }))
(=
  '->
  (=>
    ( 'pattern
      'body
      'value )
    { (try
        { (=
            'args
            (map
              second
              (unify
                pattern
                value)))
          (if
            args
            (  )
            { (body) }
            { (apply
                body
                args) }) }
        no-match!
        (=>
          ( '_
            'arg )
          { (no-match!
              arg) })) }))
(=
  'match-with
  (=>
    ( 'value
      'clauses )
    { (=
        'result
        (fold
          (=>
            ( 'result
              'clause )
            { (if
                result
                (  )
                { (try
                    { (Match
                        (clause
                          value)) }
                    no-match!
                    (=>
                      ( 'r
                        'arg )
                      {  })) }
                { result }) })
          (  )
          clauses))
      (pop
        result
        (=>
          ( '_
            'result )
          { result })
        { (no-match!
            value) }) }))
( (match-with
    (Pair
      Foo
      Bar)
    ( (->
        (Pair
          'x
          'x)
        { (Twice
            x
            x) })
      (->
        (Pair
          'x
          Foo)
        { SecondIsFoo })
      (->
        (Pair
          'x
          'y)
        { y })
      (->
        '_
        { (throw!
            InvalidPair) }) ))
  (try
    { (match-with
        Foo
        ( (->
            (Pair
              'x
              'x)
            { (Twice
                x
                x) })
          (->
            (Pair
              'x
              Foo)
            { SecondIsFoo })
          (->
            (Pair
              'x
              'y)
            { y }) )) }
    no-match!
    (=>
      ( '_
        'arg )
      { (NoMatch
          arg) })) )

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "apply" )
        ( ( =>
              =>
                0
            ( ( []
                "xs" )
              "f" ) )
          =>
            =>
              ( ( ( 2
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "f" ) )
                      =>
                        =>
                          ( 1
                            0 ) ) )
                  1 )
                0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "rev" )
            ( ( =>
                  =>
                    0
                "xs" )
              =>
                ( ( ( 2
                      ( ( =>
                            =>
                              0
                          ( ( []
                              "x" )
                            "xs" ) )
                        =>
                          =>
                            ( 1
                              0 ) ) )
                    [] )
                  0 ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "map" )
                ( ( =>
                      =>
                        0
                    ( ( []
                        "xs" )
                      "f" ) )
                  =>
                    =>
                      ( ( ( 4
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "x" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 1
                                    ( 3
                                      0 ) ) ) )
                          [] )
                        ( 2
                          0 ) ) ) )
              =>
                ( ( ( =>
                        =>
                          =>
                            ( 0
                              1 )
                      "flatten" )
                    ( ( =>
                          =>
                            0
                        "xs" )
                      =>
                        ( 2
                          ( ( ( 4
                                ( ( =>
                                      =>
                                        0
                                    ( ( []
                                        "x" )
                                      "acc" ) )
                                  =>
                                    =>
                                      ( ( ( 6
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "x" )
                                                  "acc" ) )
                                              =>
                                                =>
                                                  ( 1
                                                    0 ) ) )
                                          1 )
                                        0 ) ) )
                              [] )
                            0 ) ) ) )
                  =>
                    ( ( ( =>
                            =>
                              =>
                                ( 0
                                  1 )
                          "zip" )
                        ( ( =>
                              =>
                                ~>
                                  0
                            "zip" )
                          =>
                            ( ( =>
                                  =>
                                    0
                                ( ( ( []
                                      "ys" )
                                    "xs" )
                                  "acc" ) )
                              =>
                                =>
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( pop
                                                  2
                                                  1
                                                  0 )
                                          1 )
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "x" )
                                              "xs" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    2 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "y" )
                                                        "ys" ) )
                                                    =>
                                                      =>
                                                        ( ( ( 7
                                                              ( 6
                                                                ( ( []
                                                                    0 )
                                                                  2 ) ) )
                                                            3 )
                                                          1 ) ) )
                                                =>
                                                  [] ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              1 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "y" )
                                                  "ys" ) )
                                              =>
                                                =>
                                                  [] ) )
                                          =>
                                            4 ) ) ) ) )
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( 0
                                      1 )
                              "zip" )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "ys" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 5
                                    ( ( ( 2
                                          [] )
                                        1 )
                                      0 ) ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( 0
                                          1 )
                                  "==" )
                                ( ( =>
                                      =>
                                        ~>
                                          0
                                    "==" )
                                  =>
                                    ( ( =>
                                          =>
                                            0
                                        ( ( []
                                            "b" )
                                          "a" ) )
                                      =>
                                        =>
                                          ( ( ( =>
                                                  =>
                                                    =>
                                                      ( pop
                                                        2
                                                        1
                                                        0 )
                                                1 )
                                              ( ( =>
                                                    =>
                                                      0
                                                  ( ( []
                                                      "x" )
                                                    "xs" ) )
                                                =>
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( pop
                                                                  2
                                                                  1
                                                                  0 )
                                                          2 )
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( []
                                                                "y" )
                                                              "ys" ) )
                                                          =>
                                                            =>
                                                              ( ( ( ( =>
                                                                        =>
                                                                          =>
                                                                            =>
                                                                              ( if
                                                                                3
                                                                                2
                                                                                1
                                                                                0 )
                                                                      ( ( 6
                                                                          2 )
                                                                        0 ) )
                                                                    True )
                                                                  =>
                                                                    ( ( 7
                                                                        4 )
                                                                      2 ) )
                                                                =>
                                                                  False ) ) )
                                                      =>
                                                        False ) ) )
                                            =>
                                              ( ( ( ( =>
                                                        =>
                                                          =>
                                                            =>
                                                              ( if
                                                                3
                                                                2
                                                                1
                                                                0 )
                                                      2 )
                                                    1 )
                                                  =>
                                                    True )
                                                =>
                                                  False ) ) ) ) )
                              =>
                                ( ( ( =>
                                        =>
                                          =>
                                            ( 0
                                              1 )
                                      "first" )
                                    ( ( =>
                                          =>
                                            0
                                        "xs" )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              0 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "x" )
                                                  "_" ) )
                                              =>
                                                =>
                                                  0 ) )
                                          =>
                                            1 ) ) )
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( 0
                                                  1 )
                                          "second" )
                                        ( ( =>
                                              =>
                                                0
                                            "xs" )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "_" )
                                                      "xs" ) )
                                                  =>
                                                    =>
                                                      ( 3
                                                        1 ) ) )
                                              =>
                                                1 ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( 0
                                                      1 )
                                              "join" )
                                            ( ( 9
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "pair" )
                                                      "acc" ) )
                                                  =>
                                                    =>
                                                      ( ( ( =>
                                                              =>
                                                                =>
                                                                  ( 0
                                                                    1 )
                                                            "xvar" )
                                                          ( 3
                                                            0 ) )
                                                        =>
                                                          ( ( ( =>
                                                                  =>
                                                                    =>
                                                                      ( 0
                                                                        1 )
                                                                "xval" )
                                                              ( 3
                                                                1 ) )
                                                            =>
                                                              ( =>
                                                                  ( 4
                                                                    3 )
                                                                ( ( ( 13
                                                                      ( ( =>
                                                                            =>
                                                                              0
                                                                          ( ( []
                                                                              "pair" )
                                                                            "_" ) )
                                                                        =>
                                                                          =>
                                                                            ( ( ( =>
                                                                                    =>
                                                                                      =>
                                                                                        ( 0
                                                                                          1 )
                                                                                  "yvar" )
                                                                                ( 7
                                                                                  0 ) )
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( 0
                                                                                              1 )
                                                                                      "yval" )
                                                                                    ( 7
                                                                                      1 ) )
                                                                                  =>
                                                                                    ( ( ( ( =>
                                                                                              =>
                                                                                                =>
                                                                                                  =>
                                                                                                    ( if
                                                                                                      3
                                                                                                      2
                                                                                                      1
                                                                                                      0 )
                                                                                            5 )
                                                                                          1 )
                                                                                        =>
                                                                                          ( ( ( ( =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        =>
                                                                                                          ( if
                                                                                                            3
                                                                                                            2
                                                                                                            1
                                                                                                            0 )
                                                                                                  ( ( 11
                                                                                                      5 )
                                                                                                    1 ) )
                                                                                                False )
                                                                                              =>
                                                                                                ( no-match!
                                                                                                  ( ( []
                                                                                                      ( ( []
                                                                                                          2 )
                                                                                                        3 ) )
                                                                                                    ( ( []
                                                                                                        6 )
                                                                                                      7 ) ) ) )
                                                                                            =>
                                                                                              [] ) )
                                                                                      =>
                                                                                        [] ) ) ) ) )
                                                                    [] )
                                                                  3 ) ) ) ) ) )
                                              [] ) )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( 0
                                                          1 )
                                                  "unify" )
                                                ( ( =>
                                                      =>
                                                        ~>
                                                          0
                                                    "unify" )
                                                  =>
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "value" )
                                                          "pattern" ) )
                                                      =>
                                                        =>
                                                          ( ( ( =>
                                                                  =>
                                                                    =>
                                                                      ( pop
                                                                        2
                                                                        1
                                                                        0 )
                                                                1 )
                                                              ( ( =>
                                                                    =>
                                                                      0
                                                                  ( ( []
                                                                      "pattern" )
                                                                    "type" ) )
                                                                =>
                                                                  =>
                                                                    ( ( ( ( =>
                                                                              =>
                                                                                =>
                                                                                  =>
                                                                                    ( if
                                                                                      3
                                                                                      2
                                                                                      1
                                                                                      0 )
                                                                            1 )
                                                                          Binding )
                                                                        =>
                                                                          ( []
                                                                            ( ( []
                                                                                3 )
                                                                              1 ) ) )
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                2 )
                                                                              Compound )
                                                                            =>
                                                                              ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          ( 0
                                                                                            1 )
                                                                                    "zipped" )
                                                                                  ( ( 11
                                                                                      2 )
                                                                                    4 ) )
                                                                                =>
                                                                                  ( ( ( ( =>
                                                                                            =>
                                                                                              =>
                                                                                                =>
                                                                                                  ( if
                                                                                                    3
                                                                                                    2
                                                                                                    1
                                                                                                    0 )
                                                                                          0 )
                                                                                        [] )
                                                                                      =>
                                                                                        ( no-match!
                                                                                          ( ( []
                                                                                              6 )
                                                                                            4 ) ) )
                                                                                    =>
                                                                                      ( 9
                                                                                        ( 15
                                                                                          ( ( 16
                                                                                              ( 18
                                                                                                8 ) )
                                                                                            ( ( 13
                                                                                                4 )
                                                                                              6 ) ) ) ) ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    ( ( 10
                                                                                        2 )
                                                                                      4 ) )
                                                                                  True )
                                                                                =>
                                                                                  [] )
                                                                              =>
                                                                                ( no-match!
                                                                                  ( ( []
                                                                                      5 )
                                                                                    3 ) ) ) ) ) ) )
                                                            =>
                                                              ( invalid!
                                                                2 ) ) ) ) )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( 0
                                                              1 )
                                                      "->" )
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( ( []
                                                              "value" )
                                                            "body" )
                                                          "pattern" ) )
                                                      =>
                                                        =>
                                                          =>
                                                            ( ( ( =>
                                                                    =>
                                                                      =>
                                                                        ( try
                                                                          2
                                                                          1
                                                                          0 )
                                                                  =>
                                                                    ( ( ( =>
                                                                            =>
                                                                              =>
                                                                                ( 0
                                                                                  1 )
                                                                          "args" )
                                                                        ( ( 12
                                                                            6 )
                                                                          ( ( 4
                                                                              3 )
                                                                            1 ) ) )
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                0 )
                                                                              [] )
                                                                            =>
                                                                              ( 4
                                                                                [] ) )
                                                                          =>
                                                                            ( ( 16
                                                                                4 )
                                                                              1 ) ) ) )
                                                                no-match! )
                                                              ( ( =>
                                                                    =>
                                                                      0
                                                                  ( ( []
                                                                      "arg" )
                                                                    "_" ) )
                                                                =>
                                                                  =>
                                                                    ( no-match!
                                                                      0 ) ) ) ) )
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( 0
                                                                  1 )
                                                          "match-with" )
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( []
                                                                "clauses" )
                                                              "value" ) )
                                                          =>
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( 0
                                                                            1 )
                                                                    "result" )
                                                                  ( ( ( 14
                                                                        ( ( =>
                                                                              =>
                                                                                0
                                                                            ( ( []
                                                                                "clause" )
                                                                              "result" ) )
                                                                          =>
                                                                            =>
                                                                              ( ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            =>
                                                                                              ( if
                                                                                                3
                                                                                                2
                                                                                                1
                                                                                                0 )
                                                                                      1 )
                                                                                    [] )
                                                                                  =>
                                                                                    ( ( ( =>
                                                                                            =>
                                                                                              =>
                                                                                                ( try
                                                                                                  2
                                                                                                  1
                                                                                                  0 )
                                                                                          =>
                                                                                            ( Match
                                                                                              ( 2
                                                                                                5 ) ) )
                                                                                        no-match! )
                                                                                      ( ( =>
                                                                                            =>
                                                                                              0
                                                                                          ( ( []
                                                                                              "arg" )
                                                                                            "r" ) )
                                                                                        =>
                                                                                          =>
                                                                                            [] ) ) )
                                                                                =>
                                                                                  2 ) ) )
                                                                      [] )
                                                                    0 ) )
                                                                =>
                                                                  ( ( ( =>
                                                                          =>
                                                                            =>
                                                                              ( pop
                                                                                2
                                                                                1
                                                                                0 )
                                                                        0 )
                                                                      ( ( =>
                                                                            =>
                                                                              0
                                                                          ( ( []
                                                                              "result" )
                                                                            "_" ) )
                                                                        =>
                                                                          =>
                                                                            0 ) )
                                                                    =>
                                                                      ( no-match!
                                                                        3 ) ) ) ) )
                                                      =>
                                                        ( ( []
                                                            ( ( ( =>
                                                                    =>
                                                                      =>
                                                                        ( try
                                                                          2
                                                                          1
                                                                          0 )
                                                                  =>
                                                                    ( ( 1
                                                                        Foo )
                                                                      ( ( ( []
                                                                            ( ( 2
                                                                                ( Compound
                                                                                  ( ( Pair
                                                                                      ( Binding
                                                                                        "x" ) )
                                                                                    ( Binding
                                                                                      "y" ) ) ) )
                                                                              =>
                                                                                =>
                                                                                  0 ) )
                                                                          ( ( 2
                                                                              ( Compound
                                                                                ( ( Pair
                                                                                    ( Binding
                                                                                      "x" ) )
                                                                                  ( Value
                                                                                    Foo ) ) ) )
                                                                            =>
                                                                              SecondIsFoo ) )
                                                                        ( ( 2
                                                                            ( Compound
                                                                              ( ( Pair
                                                                                  ( Binding
                                                                                    "x" ) )
                                                                                ( Binding
                                                                                  "x" ) ) ) )
                                                                          =>
                                                                            =>
                                                                              ( ( Twice
                                                                                  0 )
                                                                                0 ) ) ) ) )
                                                                no-match! )
                                                              ( ( =>
                                                                    =>
                                                                      0
                                                                  ( ( []
                                                                      "arg" )
                                                                    "_" ) )
                                                                =>
                                                                  =>
                                                                    ( NoMatch
                                                                      0 ) ) ) )
                                                          ( ( 0
                                                              ( ( Pair
                                                                  Foo )
                                                                Bar ) )
                                                            ( ( ( ( []
                                                                    ( ( 1
                                                                        ( Binding
                                                                          "_" ) )
                                                                      =>
                                                                        ( throw!
                                                                          InvalidPair ) ) )
                                                                  ( ( 1
                                                                      ( Compound
                                                                        ( ( Pair
                                                                            ( Binding
                                                                              "x" ) )
                                                                          ( Binding
                                                                            "y" ) ) ) )
                                                                    =>
                                                                      =>
                                                                        0 ) )
                                                                ( ( 1
                                                                    ( Compound
                                                                      ( ( Pair
                                                                          ( Binding
                                                                            "x" ) )
                                                                        ( Value
                                                                          Foo ) ) ) )
                                                                  =>
                                                                    SecondIsFoo ) )
                                                              ( ( 1
                                                                  ( Compound
                                                                    ( ( Pair
                                                                        ( Binding
                                                                          "x" ) )
                                                                      ( Binding
                                                                        "x" ) ) ) )
                                                                =>
                                                                  =>
                                                                    ( ( Twice
                                                                        0 )
                                                                      0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00005)
00035: PushVar(00004)
00036: Swap(00002)
00037: Apply
00038: PushVar(00004)
00039: PushVar(00003)
00040: Swap(00002)
00041: Apply
00042: PushVar(00000)
00043: Swap(00002)
00044: Apply
00045: Swap(00002)
00046: Apply
00047: PushVar(00001)
00048: Swap(00002)
00049: Apply
00050:   Return
00051: PushFn(00034, 00005)
00052:   Return
00053: PushVar(00002)
00054:   Return
00055: PushFn(00028, 00000)
00056: PushVar(00000)
00057: Swap(00002)
00058: Apply
00059: PushFn(00032, 00000)
00060: PushString("")
00061: PushString(""x"")
00062: Swap(00002)
00063: Apply
00064: PushString(""xs"")
00065: Swap(00002)
00066: Apply
00067: Swap(00002)
00068: Apply
00069: PushFn(00051, 00004)
00070: Swap(00002)
00071: Apply
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00055, 00003)
00079:   Return
00080: PushFn(00078, 00002)
00081:   Return
00082: PushFn(00016, 00000)
00083: PushString("")
00084: PushString(""xs"")
00085: Swap(00002)
00086: Apply
00087: PushString(""acc"")
00088: Swap(00002)
00089: Apply
00090: PushString(""f"")
00091: Swap(00002)
00092: Apply
00093: Swap(00002)
00094: Apply
00095: PushFn(00080, 00001)
00096: Swap(00002)
00097: Apply
00098:   Return
00099: PushVar(00000)
00100: PushVar(00001)
00101: Swap(00002)
00102: Apply
00103:   Return
00104: PushFn(00099, 00001)
00105:   Return
00106: PushFn(00104, 00000)
00107:   Return
00108: PushVar(00000)
00109:   Return
00110: PushFn(00108, 00000)
00111:   Return
00112: PushVar(00000)
00113:   Return
00114: PushFn(00112, 00000)
00115:   Return
00116: PushVar(00001)
00117: PushVar(00000)
00118: Swap(00002)
00119: Apply
00120:   Return
00121: PushFn(00116, 00001)
00122:   Return
00123: PushVar(00002)
00124: PushFn(00114, 00000)
00125: PushString("")
00126: PushString(""x"")
00127: Swap(00002)
00128: Apply
00129: PushString(""f"")
00130: Swap(00002)
00131: Apply
00132: Swap(00002)
00133: Apply
00134: PushFn(00121, 00000)
00135: Swap(00002)
00136: Apply
00137: Swap(00002)
00138: Apply
00139: PushVar(00001)
00140: Swap(00002)
00141: Apply
00142: PushVar(00000)
00143: Swap(00002)
00144: Apply
00145:   Return
00146: PushFn(00123, 00002)
00147:   Return
00148: PushVar(00000)
00149: PushVar(00001)
00150: Swap(00002)
00151: Apply
00152:   Return
00153: PushFn(00148, 00001)
00154:   Return
00155: PushFn(00153, 00000)
00156:   Return
00157: PushVar(00000)
00158:   Return
00159: PushFn(00157, 00000)
00160:   Return
00161: PushVar(00000)
00162:   Return
00163: PushFn(00161, 00000)
00164:   Return
00165: PushVar(00001)
00166: PushVar(00000)
00167: Swap(00002)
00168: Apply
00169:   Return
00170: PushFn(00165, 00001)
00171:   Return
00172: PushVar(00002)
00173: PushFn(00163, 00000)
00174: PushString("")
00175: PushString(""x"")
00176: Swap(00002)
00177: Apply
00178: PushString(""xs"")
00179: Swap(00002)
00180: Apply
00181: Swap(00002)
00182: Apply
00183: PushFn(00170, 00000)
00184: Swap(00002)
00185: Apply
00186: Swap(00002)
00187: Apply
00188: PushString("")
00189: Swap(00002)
00190: Apply
00191: PushVar(00000)
00192: Swap(00002)
00193: Apply
00194:   Return
00195: PushVar(00000)
00196: PushVar(00001)
00197: Swap(00002)
00198: Apply
00199:   Return
00200: PushFn(00195, 00001)
00201:   Return
00202: PushFn(00200, 00000)
00203:   Return
00204: PushVar(00000)
00205:   Return
00206: PushFn(00204, 00000)
00207:   Return
00208: PushVar(00000)
00209:   Return
00210: PushFn(00208, 00000)
00211:   Return
00212: PushVar(00001)
00213: PushVar(00003)
00214: PushVar(00000)
00215: Swap(00002)
00216: Apply
00217: Swap(00002)
00218: Apply
00219:   Return
00220: PushFn(00212, 00003)
00221:   Return
00222: PushVar(00004)
00223: PushFn(00210, 00000)
00224: PushString("")
00225: PushString(""x"")
00226: Swap(00002)
00227: Apply
00228: PushString(""xs"")
00229: Swap(00002)
00230: Apply
00231: Swap(00002)
00232: Apply
00233: PushFn(00220, 00002)
00234: Swap(00002)
00235: Apply
00236: Swap(00002)
00237: Apply
00238: PushString("")
00239: Swap(00002)
00240: Apply
00241: PushVar(00002)
00242: PushVar(00000)
00243: Swap(00002)
00244: Apply
00245: Swap(00002)
00246: Apply
00247:   Return
00248: PushFn(00222, 00004)
00249:   Return
00250: PushVar(00000)
00251: PushVar(00001)
00252: Swap(00002)
00253: Apply
00254:   Return
00255: PushFn(00250, 00001)
00256:   Return
00257: PushFn(00255, 00000)
00258:   Return
00259: PushVar(00000)
00260:   Return
00261: PushFn(00259, 00000)
00262:   Return
00263: PushVar(00000)
00264:   Return
00265: PushFn(00263, 00000)
00266:   Return
00267: PushVar(00000)
00268:   Return
00269: PushFn(00267, 00000)
00270:   Return
00271: PushVar(00001)
00272: PushVar(00000)
00273: Swap(00002)
00274: Apply
00275:   Return
00276: PushFn(00271, 00001)
00277:   Return
00278: PushVar(00006)
00279: PushFn(00269, 00000)
00280: PushString("")
00281: PushString(""x"")
00282: Swap(00002)
00283: Apply
00284: PushString(""acc"")
00285: Swap(00002)
00286: Apply
00287: Swap(00002)
00288: Apply
00289: PushFn(00276, 00000)
00290: Swap(00002)
00291: Apply
00292: Swap(00002)
00293: Apply
00294: PushVar(00001)
00295: Swap(00002)
00296: Apply
00297: PushVar(00000)
00298: Swap(00002)
00299: Apply
00300:   Return
00301: PushFn(00278, 00006)
00302:   Return
00303: PushVar(00002)
00304: PushVar(00004)
00305: PushFn(00265, 00000)
00306: PushString("")
00307: PushString(""x"")
00308: Swap(00002)
00309: Apply
00310: PushString(""acc"")
00311: Swap(00002)
00312: Apply
00313: Swap(00002)
00314: Apply
00315: PushFn(00301, 00005)
00316: Swap(00002)
00317: Apply
00318: Swap(00002)
00319: Apply
00320: PushString("")
00321: Swap(00002)
00322: Apply
00323: PushVar(00000)
00324: Swap(00002)
00325: Apply
00326: Swap(00002)
00327: Apply
00328:   Return
00329: PushVar(00000)
00330: PushVar(00001)
00331: Swap(00002)
00332: Apply
00333:   Return
00334: PushFn(00329, 00001)
00335:   Return
00336: PushFn(00334, 00000)
00337:   Return
00338: PushVar(00000)
00339: Rec
00340:   Return
00341: PushFn(00338, 00000)
00342:   Return
00343: PushVar(00000)
00344:   Return
00345: PushFn(00343, 00000)
00346:   Return
00347: PushVar(00002)
00348: PushVar(00001)
00349: PushVar(00000)
00350: Swap(00003)
00351: Pop
00352: Apply
00353: Apply
00354:   Return
00355: PushFn(00347, 00002)
00356:   Return
00357: PushFn(00355, 00001)
00358:   Return
00359: PushVar(00000)
00360:   Return
00361: PushFn(00359, 00000)
00362:   Return
00363: PushVar(00002)
00364: PushVar(00001)
00365: PushVar(00000)
00366: Swap(00003)
00367: Pop
00368: Apply
00369: Apply
00370:   Return
00371: PushFn(00363, 00002)
00372:   Return
00373: PushFn(00371, 00001)
00374:   Return
00375: PushVar(00000)
00376:   Return
00377: PushFn(00375, 00000)
00378:   Return
00379: PushVar(00007)
00380: PushVar(00006)
00381: PushString("")
00382: PushVar(00000)
00383: Swap(00002)
00384: Apply
00385: PushVar(00002)
00386: Swap(00002)
00387: Apply
00388: Swap(00002)
00389: Apply
00390: Swap(00002)
00391: Apply
00392: PushVar(00003)
00393: Swap(00002)
00394: Apply
00395: PushVar(00001)
00396: Swap(00002)
00397: Apply
00398:   Return
00399: PushFn(00379, 00007)
00400:   Return
00401: PushString("")
00402:   Return
00403: PushFn(00373, 00000)
00404: PushVar(00002)
00405: Swap(00002)
00406: Apply
00407: PushFn(00377, 00000)
00408: PushString("")
00409: PushString(""y"")
00410: Swap(00002)
00411: Apply
00412: PushString(""ys"")
00413: Swap(00002)
00414: Apply
00415: Swap(00002)
00416: Apply
00417: PushFn(00399, 00006)
00418: Swap(00002)
00419: Apply
00420: Swap(00002)
00421: Apply
00422: PushFn(00401, 00000)
00423: Swap(00002)
00424: Apply
00425:   Return
00426: PushFn(00403, 00005)
00427:   Return
00428: PushVar(00002)
00429: PushVar(00001)
00430: PushVar(00000)
00431: Swap(00003)
00432: Pop
00433: Apply
00434: Apply
00435:   Return
00436: PushFn(00428, 00002)
00437:   Return
00438: PushFn(00436, 00001)
00439:   Return
00440: PushVar(00000)
00441:   Return
00442: PushFn(00440, 00000)
00443:   Return
00444: PushString("")
00445:   Return
00446: PushFn(00444, 00000)
00447:   Return
00448: PushVar(00004)
00449:   Return
00450: PushFn(00438, 00000)
00451: PushVar(00001)
00452: Swap(00002)
00453: Apply
00454: PushFn(00442, 00000)
00455: PushString("")
00456: PushString(""y"")
00457: Swap(00002)
00458: Apply
00459: PushString(""ys"")
00460: Swap(00002)
00461: Apply
00462: Swap(00002)
00463: Apply
00464: PushFn(00446, 00000)
00465: Swap(00002)
00466: Apply
00467: Swap(00002)
00468: Apply
00469: PushFn(00448, 00004)
00470: Swap(00002)
00471: Apply
00472:   Return
00473: PushFn(00357, 00000)
00474: PushVar(00001)
00475: Swap(00002)
00476: Apply
00477: PushFn(00361, 00000)
00478: PushString("")
00479: PushString(""x"")
00480: Swap(00002)
00481: Apply
00482: PushString(""xs"")
00483: Swap(00002)
00484: Apply
00485: Swap(00002)
00486: Apply
00487: PushFn(00426, 00004)
00488: Swap(00002)
00489: Apply
00490: Swap(00002)
00491: Apply
00492: PushFn(00450, 00003)
00493: Swap(00002)
00494: Apply
00495:   Return
00496: PushFn(00473, 00003)
00497:   Return
00498: PushFn(00496, 00002)
00499:   Return
00500: PushFn(00345, 00000)
00501: PushString("")
00502: PushString(""ys"")
00503: Swap(00002)
00504: Apply
00505: PushString(""xs"")
00506: Swap(00002)
00507: Apply
00508: PushString(""acc"")
00509: Swap(00002)
00510: Apply
00511: Swap(00002)
00512: Apply
00513: PushFn(00498, 00001)
00514: Swap(00002)
00515: Apply
00516:   Return
00517: PushVar(00000)
00518: PushVar(00001)
00519: Swap(00002)
00520: Apply
00521:   Return
00522: PushFn(00517, 00001)
00523:   Return
00524: PushFn(00522, 00000)
00525:   Return
00526: PushVar(00000)
00527:   Return
00528: PushFn(00526, 00000)
00529:   Return
00530: PushVar(00005)
00531: PushVar(00002)
00532: PushString("")
00533: Swap(00002)
00534: Apply
00535: PushVar(00001)
00536: Swap(00002)
00537: Apply
00538: PushVar(00000)
00539: Swap(00002)
00540: Apply
00541: Swap(00002)
00542: Apply
00543:   Return
00544: PushFn(00530, 00005)
00545:   Return
00546: PushVar(00000)
00547: PushVar(00001)
00548: Swap(00002)
00549: Apply
00550:   Return
00551: PushFn(00546, 00001)
00552:   Return
00553: PushFn(00551, 00000)
00554:   Return
00555: PushVar(00000)
00556: Rec
00557:   Return
00558: PushFn(00555, 00000)
00559:   Return
00560: PushVar(00000)
00561:   Return
00562: PushFn(00560, 00000)
00563:   Return
00564: PushVar(00002)
00565: PushVar(00001)
00566: PushVar(00000)
00567: Swap(00003)
00568: Pop
00569: Apply
00570: Apply
00571:   Return
00572: PushFn(00564, 00002)
00573:   Return
00574: PushFn(00572, 00001)
00575:   Return
00576: PushVar(00000)
00577:   Return
00578: PushFn(00576, 00000)
00579:   Return
00580: PushVar(00002)
00581: PushVar(00001)
00582: PushVar(00000)
00583: Swap(00003)
00584: Pop
00585: Apply
00586: Apply
00587:   Return
00588: PushFn(00580, 00002)
00589:   Return
00590: PushFn(00588, 00001)
00591:   Return
00592: PushVar(00000)
00593:   Return
00594: PushFn(00592, 00000)
00595:   Return
00596: PushVar(00003)
00597: PushVar(00002)
00598: PushVar(00001)
00599: PushVar(00000)
00600: Swap(00004)
00601: If
00602: Apply
00603:   Return
00604: PushFn(00596, 00003)
00605:   Return
00606: PushFn(00604, 00002)
00607:   Return
00608: PushFn(00606, 00001)
00609:   Return
00610: PushVar(00007)
00611: PushVar(00004)
00612: Swap(00002)
00613: Apply
00614: PushVar(00002)
00615: Swap(00002)
00616: Apply
00617:   Return
00618: PushString("False")
00619:   Return
00620: PushFn(00608, 00000)
00621: PushVar(00006)
00622: PushVar(00002)
00623: Swap(00002)
00624: Apply
00625: PushVar(00000)
00626: Swap(00002)
00627: Apply
00628: Swap(00002)
00629: Apply
00630: PushString("True")
00631: Swap(00002)
00632: Apply
00633: PushFn(00610, 00007)
00634: Swap(00002)
00635: Apply
00636: PushFn(00618, 00000)
00637: Swap(00002)
00638: Apply
00639:   Return
00640: PushFn(00620, 00006)
00641:   Return
00642: PushString("False")
00643:   Return
00644: PushFn(00590, 00000)
00645: PushVar(00002)
00646: Swap(00002)
00647: Apply
00648: PushFn(00594, 00000)
00649: PushString("")
00650: PushString(""y"")
00651: Swap(00002)
00652: Apply
00653: PushString(""ys"")
00654: Swap(00002)
00655: Apply
00656: Swap(00002)
00657: Apply
00658: PushFn(00640, 00005)
00659: Swap(00002)
00660: Apply
00661: Swap(00002)
00662: Apply
00663: PushFn(00642, 00000)
00664: Swap(00002)
00665: Apply
00666:   Return
00667: PushFn(00644, 00004)
00668:   Return
00669: PushVar(00003)
00670: PushVar(00002)
00671: PushVar(00001)
00672: PushVar(00000)
00673: Swap(00004)
00674: If
00675: Apply
00676:   Return
00677: PushFn(00669, 00003)
00678:   Return
00679: PushFn(00677, 00002)
00680:   Return
00681: PushFn(00679, 00001)
00682:   Return
00683: PushString("True")
00684:   Return
00685: PushString("False")
00686:   Return
00687: PushFn(00681, 00000)
00688: PushVar(00002)
00689: Swap(00002)
00690: Apply
00691: PushVar(00001)
00692: Swap(00002)
00693: Apply
00694: PushFn(00683, 00000)
00695: Swap(00002)
00696: Apply
00697: PushFn(00685, 00000)
00698: Swap(00002)
00699: Apply
00700:   Return
00701: PushFn(00574, 00000)
00702: PushVar(00001)
00703: Swap(00002)
00704: Apply
00705: PushFn(00578, 00000)
00706: PushString("")
00707: PushString(""x"")
00708: Swap(00002)
00709: Apply
00710: PushString(""xs"")
00711: Swap(00002)
00712: Apply
00713: Swap(00002)
00714: Apply
00715: PushFn(00667, 00003)
00716: Swap(00002)
00717: Apply
00718: Swap(00002)
00719: Apply
00720: PushFn(00687, 00002)
00721: Swap(00002)
00722: Apply
00723:   Return
00724: PushFn(00701, 00002)
00725:   Return
00726: PushFn(00562, 00000)
00727: PushString("")
00728: PushString(""b"")
00729: Swap(00002)
00730: Apply
00731: PushString(""a"")
00732: Swap(00002)
00733: Apply
00734: Swap(00002)
00735: Apply
00736: PushFn(00724, 00001)
00737: Swap(00002)
00738: Apply
00739:   Return
00740: PushVar(00000)
00741: PushVar(00001)
00742: Swap(00002)
00743: Apply
00744:   Return
00745: PushFn(00740, 00001)
00746:   Return
00747: PushFn(00745, 00000)
00748:   Return
00749: PushVar(00000)
00750:   Return
00751: PushFn(00749, 00000)
00752:   Return
00753: PushVar(00002)
00754: PushVar(00001)
00755: PushVar(00000)
00756: Swap(00003)
00757: Pop
00758: Apply
00759: Apply
00760:   Return
00761: PushFn(00753, 00002)
00762:   Return
00763: PushFn(00761, 00001)
00764:   Return
00765: PushVar(00000)
00766:   Return
00767: PushFn(00765, 00000)
00768:   Return
00769: PushVar(00000)
00770:   Return
00771: PushFn(00769, 00000)
00772:   Return
00773: PushVar(00001)
00774:   Return
00775: PushFn(00763, 00000)
00776: PushVar(00000)
00777: Swap(00002)
00778: Apply
00779: PushFn(00767, 00000)
00780: PushString("")
00781: PushString(""x"")
00782: Swap(00002)
00783: Apply
00784: PushString(""_"")
00785: Swap(00002)
00786: Apply
00787: Swap(00002)
00788: Apply
00789: PushFn(00771, 00000)
00790: Swap(00002)
00791: Apply
00792: Swap(00002)
00793: Apply
00794: PushFn(00773, 00001)
00795: Swap(00002)
00796: Apply
00797:   Return
00798: PushVar(00000)
00799: PushVar(00001)
00800: Swap(00002)
00801: Apply
00802:   Return
00803: PushFn(00798, 00001)
00804:   Return
00805: PushFn(00803, 00000)
00806:   Return
00807: PushVar(00000)
00808:   Return
00809: PushFn(00807, 00000)
00810:   Return
00811: PushVar(00002)
00812: PushVar(00001)
00813: PushVar(00000)
00814: Swap(00003)
00815: Pop
00816: Apply
00817: Apply
00818:   Return
00819: PushFn(00811, 00002)
00820:   Return
00821: PushFn(00819, 00001)
00822:   Return
00823: PushVar(00000)
00824:   Return
00825: PushFn(00823, 00000)
00826:   Return
00827: PushVar(00003)
00828: PushVar(00001)
00829: Swap(00002)
00830: Apply
00831:   Return
00832: PushFn(00827, 00003)
00833:   Return
00834: PushVar(00001)
00835:   Return
00836: PushFn(00821, 00000)
00837: PushVar(00000)
00838: Swap(00002)
00839: Apply
00840: PushFn(00825, 00000)
00841: PushString("")
00842: PushString(""_"")
00843: Swap(00002)
00844: Apply
00845: PushString(""xs"")
00846: Swap(00002)
00847: Apply
00848: Swap(00002)
00849: Apply
00850: PushFn(00832, 00002)
00851: Swap(00002)
00852: Apply
00853: Swap(00002)
00854: Apply
00855: PushFn(00834, 00001)
00856: Swap(00002)
00857: Apply
00858:   Return
00859: PushVar(00000)
00860: PushVar(00001)
00861: Swap(00002)
00862: Apply
00863:   Return
00864: PushFn(00859, 00001)
00865:   Return
00866: PushFn(00864, 00000)
00867:   Return
00868: PushVar(00000)
00869:   Return
00870: PushFn(00868, 00000)
00871:   Return
00872: PushVar(00000)
00873: PushVar(00001)
00874: Swap(00002)
00875: Apply
00876:   Return
00877: PushFn(00872, 00001)
00878:   Return
00879: PushFn(00877, 00000)
00880:   Return
00881: PushVar(00000)
00882: PushVar(00001)
00883: Swap(00002)
00884: Apply
00885:   Return
00886: PushFn(00881, 00001)
00887:   Return
00888: PushFn(00886, 00000)
00889:   Return
00890: PushVar(00004)
00891: PushVar(00003)
00892: Swap(00002)
00893: Apply
00894:   Return
00895: PushVar(00000)
00896:   Return
00897: PushFn(00895, 00000)
00898:   Return
00899: PushVar(00000)
00900: PushVar(00001)
00901: Swap(00002)
00902: Apply
00903:   Return
00904: PushFn(00899, 00001)
00905:   Return
00906: PushFn(00904, 00000)
00907:   Return
00908: PushVar(00000)
00909: PushVar(00001)
00910: Swap(00002)
00911: Apply
00912:   Return
00913: PushFn(00908, 00001)
00914:   Return
00915: PushFn(00913, 00000)
00916:   Return
00917: PushVar(00003)
00918: PushVar(00002)
00919: PushVar(00001)
00920: PushVar(00000)
00921: Swap(00004)
00922: If
00923: Apply
00924:   Return
00925: PushFn(00917, 00003)
00926:   Return
00927: PushFn(00925, 00002)
00928:   Return
00929: PushFn(00927, 00001)
00930:   Return
00931: PushVar(00003)
00932: PushVar(00002)
00933: PushVar(00001)
00934: PushVar(00000)
00935: Swap(00004)
00936: If
00937: Apply
00938:   Return
00939: PushFn(00931, 00003)
00940:   Return
00941: PushFn(00939, 00002)
00942:   Return
00943: PushFn(00941, 00001)
00944:   Return
00945: PushEffect("no-match")
00946: PushString("")
00947: PushString("")
00948: PushVar(00002)
00949: Swap(00002)
00950: Apply
00951: PushVar(00003)
00952: Swap(00002)
00953: Apply
00954: Swap(00002)
00955: Apply
00956: PushString("")
00957: PushVar(00006)
00958: Swap(00002)
00959: Apply
00960: PushVar(00007)
00961: Swap(00002)
00962: Apply
00963: Swap(00002)
00964: Apply
00965: Swap(00002)
00966: Apply
00967:   Return
00968: PushString("")
00969:   Return
00970: PushFn(00943, 00000)
00971: PushVar(00011)
00972: PushVar(00005)
00973: Swap(00002)
00974: Apply
00975: PushVar(00001)
00976: Swap(00002)
00977: Apply
00978: Swap(00002)
00979: Apply
00980: PushString("False")
00981: Swap(00002)
00982: Apply
00983: PushFn(00945, 00007)
00984: Swap(00002)
00985: Apply
00986: PushFn(00968, 00000)
00987: Swap(00002)
00988: Apply
00989:   Return
00990: PushString("")
00991:   Return
00992: PushFn(00929, 00000)
00993: PushVar(00005)
00994: Swap(00002)
00995: Apply
00996: PushVar(00001)
00997: Swap(00002)
00998: Apply
00999: PushFn(00970, 00011)
01000: Swap(00002)
01001: Apply
01002: PushFn(00990, 00000)
01003: Swap(00002)
01004: Apply
01005:   Return
01006: PushFn(00915, 00000)
01007: PushString(""yval"")
01008: Swap(00002)
01009: Apply
01010: PushVar(00007)
01011: PushVar(00001)
01012: Swap(00002)
01013: Apply
01014: Swap(00002)
01015: Apply
01016: PushFn(00992, 00010)
01017: Swap(00002)
01018: Apply
01019:   Return
01020: PushFn(00906, 00000)
01021: PushString(""yvar"")
01022: Swap(00002)
01023: Apply
01024: PushVar(00007)
01025: PushVar(00000)
01026: Swap(00002)
01027: Apply
01028: Swap(00002)
01029: Apply
01030: PushFn(01006, 00009)
01031: Swap(00002)
01032: Apply
01033:   Return
01034: PushFn(01020, 00008)
01035:   Return
01036: PushFn(00890, 00004)
01037: PushVar(00013)
01038: PushFn(00897, 00000)
01039: PushString("")
01040: PushString(""pair"")
01041: Swap(00002)
01042: Apply
01043: PushString(""_"")
01044: Swap(00002)
01045: Apply
01046: Swap(00002)
01047: Apply
01048: PushFn(01034, 00007)
01049: Swap(00002)
01050: Apply
01051: Swap(00002)
01052: Apply
01053: PushString("")
01054: Swap(00002)
01055: Apply
01056: PushVar(00003)
01057: Swap(00002)
01058: Apply
01059: Swap(00002)
01060: Apply
01061:   Return
01062: PushFn(00888, 00000)
01063: PushString(""xval"")
01064: Swap(00002)
01065: Apply
01066: PushVar(00003)
01067: PushVar(00001)
01068: Swap(00002)
01069: Apply
01070: Swap(00002)
01071: Apply
01072: PushFn(01036, 00013)
01073: Swap(00002)
01074: Apply
01075:   Return
01076: PushFn(00879, 00000)
01077: PushString(""xvar"")
01078: Swap(00002)
01079: Apply
01080: PushVar(00003)
01081: PushVar(00000)
01082: Swap(00002)
01083: Apply
01084: Swap(00002)
01085: Apply
01086: PushFn(01062, 00012)
01087: Swap(00002)
01088: Apply
01089:   Return
01090: PushFn(01076, 00011)
01091:   Return
01092: PushVar(00000)
01093: PushVar(00001)
01094: Swap(00002)
01095: Apply
01096:   Return
01097: PushFn(01092, 00001)
01098:   Return
01099: PushFn(01097, 00000)
01100:   Return
01101: PushVar(00000)
01102: Rec
01103:   Return
01104: PushFn(01101, 00000)
01105:   Return
01106: PushVar(00000)
01107:   Return
01108: PushFn(01106, 00000)
01109:   Return
01110: PushVar(00002)
01111: PushVar(00001)
01112: PushVar(00000)
01113: Swap(00003)
01114: Pop
01115: Apply
01116: Apply
01117:   Return
01118: PushFn(01110, 00002)
01119:   Return
01120: PushFn(01118, 00001)
01121:   Return
01122: PushVar(00000)
01123:   Return
01124: PushFn(01122, 00000)
01125:   Return
01126: PushVar(00003)
01127: PushVar(00002)
01128: PushVar(00001)
01129: PushVar(00000)
01130: Swap(00004)
01131: If
01132: Apply
01133:   Return
01134: PushFn(01126, 00003)
01135:   Return
01136: PushFn(01134, 00002)
01137:   Return
01138: PushFn(01136, 00001)
01139:   Return
01140: PushString("")
01141: PushString("")
01142: PushVar(00003)
01143: Swap(00002)
01144: Apply
01145: PushVar(00001)
01146: Swap(00002)
01147: Apply
01148: Swap(00002)
01149: Apply
01150:   Return
01151: PushVar(00003)
01152: PushVar(00002)
01153: PushVar(00001)
01154: PushVar(00000)
01155: Swap(00004)
01156: If
01157: Apply
01158:   Return
01159: PushFn(01151, 00003)
01160:   Return
01161: PushFn(01159, 00002)
01162:   Return
01163: PushFn(01161, 00001)
01164:   Return
01165: PushVar(00000)
01166: PushVar(00001)
01167: Swap(00002)
01168: Apply
01169:   Return
01170: PushFn(01165, 00001)
01171:   Return
01172: PushFn(01170, 00000)
01173:   Return
01174: PushVar(00003)
01175: PushVar(00002)
01176: PushVar(00001)
01177: PushVar(00000)
01178: Swap(00004)
01179: If
01180: Apply
01181:   Return
01182: PushFn(01174, 00003)
01183:   Return
01184: PushFn(01182, 00002)
01185:   Return
01186: PushFn(01184, 00001)
01187:   Return
01188: PushEffect("no-match")
01189: PushString("")
01190: PushVar(00006)
01191: Swap(00002)
01192: Apply
01193: PushVar(00004)
01194: Swap(00002)
01195: Apply
01196: Swap(00002)
01197: Apply
01198:   Return
01199: PushVar(00009)
01200: PushVar(00015)
01201: PushVar(00016)
01202: PushVar(00018)
01203: PushVar(00008)
01204: Swap(00002)
01205: Apply
01206: Swap(00002)
01207: Apply
01208: PushVar(00013)
01209: PushVar(00004)
01210: Swap(00002)
01211: Apply
01212: PushVar(00006)
01213: Swap(00002)
01214: Apply
01215: Swap(00002)
01216: Apply
01217: Swap(00002)
01218: Apply
01219: Swap(00002)
01220: Apply
01221:   Return
01222: PushFn(01186, 00000)
01223: PushVar(00000)
01224: Swap(00002)
01225: Apply
01226: PushString("")
01227: Swap(00002)
01228: Apply
01229: PushFn(01188, 00006)
01230: Swap(00002)
01231: Apply
01232: PushFn(01199, 00018)
01233: Swap(00002)
01234: Apply
01235:   Return
01236: PushFn(01172, 00000)
01237: PushString(""zipped"")
01238: Swap(00002)
01239: Apply
01240: PushVar(00011)
01241: PushVar(00002)
01242: Swap(00002)
01243: Apply
01244: PushVar(00004)
01245: Swap(00002)
01246: Apply
01247: Swap(00002)
01248: Apply
01249: PushFn(01222, 00017)
01250: Swap(00002)
01251: Apply
01252:   Return
01253: PushVar(00003)
01254: PushVar(00002)
01255: PushVar(00001)
01256: PushVar(00000)
01257: Swap(00004)
01258: If
01259: Apply
01260:   Return
01261: PushFn(01253, 00003)
01262:   Return
01263: PushFn(01261, 00002)
01264:   Return
01265: PushFn(01263, 00001)
01266:   Return
01267: PushString("")
01268:   Return
01269: PushEffect("no-match")
01270: PushString("")
01271: PushVar(00005)
01272: Swap(00002)
01273: Apply
01274: PushVar(00003)
01275: Swap(00002)
01276: Apply
01277: Swap(00002)
01278: Apply
01279:   Return
01280: PushFn(01265, 00000)
01281: PushVar(00010)
01282: PushVar(00002)
01283: Swap(00002)
01284: Apply
01285: PushVar(00004)
01286: Swap(00002)
01287: Apply
01288: Swap(00002)
01289: Apply
01290: PushString("True")
01291: Swap(00002)
01292: Apply
01293: PushFn(01267, 00000)
01294: Swap(00002)
01295: Apply
01296: PushFn(01269, 00005)
01297: Swap(00002)
01298: Apply
01299:   Return
01300: PushFn(01163, 00000)
01301: PushVar(00002)
01302: Swap(00002)
01303: Apply
01304: PushString("Compound")
01305: Swap(00002)
01306: Apply
01307: PushFn(01236, 00016)
01308: Swap(00002)
01309: Apply
01310: PushFn(01280, 00010)
01311: Swap(00002)
01312: Apply
01313:   Return
01314: PushFn(01138, 00000)
01315: PushVar(00001)
01316: Swap(00002)
01317: Apply
01318: PushString("Binding")
01319: Swap(00002)
01320: Apply
01321: PushFn(01140, 00003)
01322: Swap(00002)
01323: Apply
01324: PushFn(01300, 00015)
01325: Swap(00002)
01326: Apply
01327:   Return
01328: PushFn(01314, 00014)
01329:   Return
01330: PushEffect("invalid")
01331: PushVar(00002)
01332: Swap(00002)
01333: Apply
01334:   Return
01335: PushFn(01120, 00000)
01336: PushVar(00001)
01337: Swap(00002)
01338: Apply
01339: PushFn(01124, 00000)
01340: PushString("")
01341: PushString(""pattern"")
01342: Swap(00002)
01343: Apply
01344: PushString(""type"")
01345: Swap(00002)
01346: Apply
01347: Swap(00002)
01348: Apply
01349: PushFn(01328, 00013)
01350: Swap(00002)
01351: Apply
01352: Swap(00002)
01353: Apply
01354: PushFn(01330, 00002)
01355: Swap(00002)
01356: Apply
01357:   Return
01358: PushFn(01335, 00012)
01359:   Return
01360: PushFn(01108, 00000)
01361: PushString("")
01362: PushString(""value"")
01363: Swap(00002)
01364: Apply
01365: PushString(""pattern"")
01366: Swap(00002)
01367: Apply
01368: Swap(00002)
01369: Apply
01370: PushFn(01358, 00011)
01371: Swap(00002)
01372: Apply
01373:   Return
01374: PushVar(00000)
01375: PushVar(00001)
01376: Swap(00002)
01377: Apply
01378:   Return
01379: PushFn(01374, 00001)
01380:   Return
01381: PushFn(01379, 00000)
01382:   Return
01383: PushVar(00000)
01384:   Return
01385: PushFn(01383, 00000)
01386:   Return
01387: PushVar(00000)
01388: Apply
01389: Apply
01390:   Return
01391: PushVar(00002)
01392: PushVar(00001)
01393: PushFn(01387, 00000)
01394: Swap(00003)
01395: Try
01396: Apply
01397: Unwind
01398:   Return
01399: PushFn(01391, 00002)
01400:   Return
01401: PushFn(01399, 00001)
01402:   Return
01403: PushVar(00000)
01404: PushVar(00001)
01405: Swap(00002)
01406: Apply
01407:   Return
01408: PushFn(01403, 00001)
01409:   Return
01410: PushFn(01408, 00000)
01411:   Return
01412: PushVar(00003)
01413: PushVar(00002)
01414: PushVar(00001)
01415: PushVar(00000)
01416: Swap(00004)
01417: If
01418: Apply
01419:   Return
01420: PushFn(01412, 00003)
01421:   Return
01422: PushFn(01420, 00002)
01423:   Return
01424: PushFn(01422, 00001)
01425:   Return
01426: PushVar(00004)
01427: PushString("")
01428: Swap(00002)
01429: Apply
01430:   Return
01431: PushVar(00016)
01432: PushVar(00004)
01433: Swap(00002)
01434: Apply
01435: PushVar(00001)
01436: Swap(00002)
01437: Apply
01438:   Return
01439: PushFn(01424, 00000)
01440: PushVar(00000)
01441: Swap(00002)
01442: Apply
01443: PushString("")
01444: Swap(00002)
01445: Apply
01446: PushFn(01426, 00004)
01447: Swap(00002)
01448: Apply
01449: PushFn(01431, 00016)
01450: Swap(00002)
01451: Apply
01452:   Return
01453: PushFn(01410, 00000)
01454: PushString(""args"")
01455: Swap(00002)
01456: Apply
01457: PushVar(00012)
01458: PushVar(00006)
01459: Swap(00002)
01460: Apply
01461: PushVar(00004)
01462: PushVar(00003)
01463: Swap(00002)
01464: Apply
01465: PushVar(00001)
01466: Swap(00002)
01467: Apply
01468: Swap(00002)
01469: Apply
01470: Swap(00002)
01471: Apply
01472: PushFn(01439, 00015)
01473: Swap(00002)
01474: Apply
01475:   Return
01476: PushVar(00000)
01477:   Return
01478: PushFn(01476, 00000)
01479:   Return
01480: PushEffect("no-match")
01481: PushVar(00000)
01482: Swap(00002)
01483: Apply
01484:   Return
01485: PushFn(01480, 00000)
01486:   Return
01487: PushFn(01401, 00000)
01488: PushFn(01453, 00014)
01489: Swap(00002)
01490: Apply
01491: PushEffect("no-match")
01492: Swap(00002)
01493: Apply
01494: PushFn(01478, 00000)
01495: PushString("")
01496: PushString(""arg"")
01497: Swap(00002)
01498: Apply
01499: PushString(""_"")
01500: Swap(00002)
01501: Apply
01502: Swap(00002)
01503: Apply
01504: PushFn(01485, 00000)
01505: Swap(00002)
01506: Apply
01507: Swap(00002)
01508: Apply
01509:   Return
01510: PushFn(01487, 00013)
01511:   Return
01512: PushFn(01510, 00012)
01513:   Return
01514: PushVar(00000)
01515: PushVar(00001)
01516: Swap(00002)
01517: Apply
01518:   Return
01519: PushFn(01514, 00001)
01520:   Return
01521: PushFn(01519, 00000)
01522:   Return
01523: PushVar(00000)
01524:   Return
01525: PushFn(01523, 00000)
01526:   Return
01527: PushVar(00000)
01528: PushVar(00001)
01529: Swap(00002)
01530: Apply
01531:   Return
01532: PushFn(01527, 00001)
01533:   Return
01534: PushFn(01532, 00000)
01535:   Return
01536: PushVar(00000)
01537:   Return
01538: PushFn(01536, 00000)
01539:   Return
01540: PushVar(00003)
01541: PushVar(00002)
01542: PushVar(00001)
01543: PushVar(00000)
01544: Swap(00004)
01545: If
01546: Apply
01547:   Return
01548: PushFn(01540, 00003)
01549:   Return
01550: PushFn(01548, 00002)
01551:   Return
01552: PushFn(01550, 00001)
01553:   Return
01554: PushVar(00000)
01555: Apply
01556: Apply
01557:   Return
01558: PushVar(00002)
01559: PushVar(00001)
01560: PushFn(01554, 00000)
01561: Swap(00003)
01562: Try
01563: Apply
01564: Unwind
01565:   Return
01566: PushFn(01558, 00002)
01567:   Return
01568: PushFn(01566, 00001)
01569:   Return
01570: PushString("Match")
01571: PushVar(00002)
01572: PushVar(00005)
01573: Swap(00002)
01574: Apply
01575: Swap(00002)
01576: Apply
01577:   Return
01578: PushVar(00000)
01579:   Return
01580: PushFn(01578, 00000)
01581:   Return
01582: PushString("")
01583:   Return
01584: PushFn(01582, 00000)
01585:   Return
01586: PushFn(01568, 00000)
01587: PushFn(01570, 00005)
01588: Swap(00002)
01589: Apply
01590: PushEffect("no-match")
01591: Swap(00002)
01592: Apply
01593: PushFn(01580, 00000)
01594: PushString("")
01595: PushString(""arg"")
01596: Swap(00002)
01597: Apply
01598: PushString(""r"")
01599: Swap(00002)
01600: Apply
01601: Swap(00002)
01602: Apply
01603: PushFn(01584, 00000)
01604: Swap(00002)
01605: Apply
01606: Swap(00002)
01607: Apply
01608:   Return
01609: PushVar(00002)
01610:   Return
01611: PushFn(01552, 00000)
01612: PushVar(00001)
01613: Swap(00002)
01614: Apply
01615: PushString("")
01616: Swap(00002)
01617: Apply
01618: PushFn(01586, 00004)
01619: Swap(00002)
01620: Apply
01621: PushFn(01609, 00002)
01622: Swap(00002)
01623: Apply
01624:   Return
01625: PushFn(01611, 00003)
01626:   Return
01627: PushVar(00002)
01628: PushVar(00001)
01629: PushVar(00000)
01630: Swap(00003)
01631: Pop
01632: Apply
01633: Apply
01634:   Return
01635: PushFn(01627, 00002)
01636:   Return
01637: PushFn(01635, 00001)
01638:   Return
01639: PushVar(00000)
01640:   Return
01641: PushFn(01639, 00000)
01642:   Return
01643: PushVar(00000)
01644:   Return
01645: PushFn(01643, 00000)
01646:   Return
01647: PushEffect("no-match")
01648: PushVar(00003)
01649: Swap(00002)
01650: Apply
01651:   Return
01652: PushFn(01637, 00000)
01653: PushVar(00000)
01654: Swap(00002)
01655: Apply
01656: PushFn(01641, 00000)
01657: PushString("")
01658: PushString(""result"")
01659: Swap(00002)
01660: Apply
01661: PushString(""_"")
01662: Swap(00002)
01663: Apply
01664: Swap(00002)
01665: Apply
01666: PushFn(01645, 00000)
01667: Swap(00002)
01668: Apply
01669: Swap(00002)
01670: Apply
01671: PushFn(01647, 00003)
01672: Swap(00002)
01673: Apply
01674:   Return
01675: PushFn(01534, 00000)
01676: PushString(""result"")
01677: Swap(00002)
01678: Apply
01679: PushVar(00014)
01680: PushFn(01538, 00000)
01681: PushString("")
01682: PushString(""clause"")
01683: Swap(00002)
01684: Apply
01685: PushString(""result"")
01686: Swap(00002)
01687: Apply
01688: Swap(00002)
01689: Apply
01690: PushFn(01625, 00002)
01691: Swap(00002)
01692: Apply
01693: Swap(00002)
01694: Apply
01695: PushString("")
01696: Swap(00002)
01697: Apply
01698: PushVar(00000)
01699: Swap(00002)
01700: Apply
01701: Swap(00002)
01702: Apply
01703: PushFn(01652, 00002)
01704: Swap(00002)
01705: Apply
01706:   Return
01707: PushFn(01675, 00014)
01708:   Return
01709: PushVar(00000)
01710: Apply
01711: Apply
01712:   Return
01713: PushVar(00002)
01714: PushVar(00001)
01715: PushFn(01709, 00000)
01716: Swap(00003)
01717: Try
01718: Apply
01719: Unwind
01720:   Return
01721: PushFn(01713, 00002)
01722:   Return
01723: PushFn(01721, 00001)
01724:   Return
01725: PushVar(00000)
01726:   Return
01727: PushFn(01725, 00000)
01728:   Return
01729: PushString("SecondIsFoo")
01730:   Return
01731: PushString("Twice")
01732: PushVar(00000)
01733: Swap(00002)
01734: Apply
01735: PushVar(00000)
01736: Swap(00002)
01737: Apply
01738:   Return
01739: PushFn(01731, 00000)
01740:   Return
01741: PushVar(00001)
01742: PushString("Foo")
01743: Swap(00002)
01744: Apply
01745: PushString("")
01746: PushVar(00002)
01747: PushString("Compound")
01748: PushString("Pair")
01749: PushString("Binding")
01750: PushString(""x"")
01751: Swap(00002)
01752: Apply
01753: Swap(00002)
01754: Apply
01755: PushString("Binding")
01756: PushString(""y"")
01757: Swap(00002)
01758: Apply
01759: Swap(00002)
01760: Apply
01761: Swap(00002)
01762: Apply
01763: Swap(00002)
01764: Apply
01765: PushFn(01727, 00000)
01766: Swap(00002)
01767: Apply
01768: Swap(00002)
01769: Apply
01770: PushVar(00002)
01771: PushString("Compound")
01772: PushString("Pair")
01773: PushString("Binding")
01774: PushString(""x"")
01775: Swap(00002)
01776: Apply
01777: Swap(00002)
01778: Apply
01779: PushString("Value")
01780: PushString("Foo")
01781: Swap(00002)
01782: Apply
01783: Swap(00002)
01784: Apply
01785: Swap(00002)
01786: Apply
01787: Swap(00002)
01788: Apply
01789: PushFn(01729, 00000)
01790: Swap(00002)
01791: Apply
01792: Swap(00002)
01793: Apply
01794: PushVar(00002)
01795: PushString("Compound")
01796: PushString("Pair")
01797: PushString("Binding")
01798: PushString(""x"")
01799: Swap(00002)
01800: Apply
01801: Swap(00002)
01802: Apply
01803: PushString("Binding")
01804: PushString(""x"")
01805: Swap(00002)
01806: Apply
01807: Swap(00002)
01808: Apply
01809: Swap(00002)
01810: Apply
01811: Swap(00002)
01812: Apply
01813: PushFn(01739, 00000)
01814: Swap(00002)
01815: Apply
01816: Swap(00002)
01817: Apply
01818: Swap(00002)
01819: Apply
01820:   Return
01821: PushVar(00000)
01822:   Return
01823: PushFn(01821, 00000)
01824:   Return
01825: PushString("NoMatch")
01826: PushVar(00000)
01827: Swap(00002)
01828: Apply
01829:   Return
01830: PushFn(01825, 00000)
01831:   Return
01832: PushEffect("throw")
01833: PushString("InvalidPair")
01834: Swap(00002)
01835: Apply
01836:   Return
01837: PushVar(00000)
01838:   Return
01839: PushFn(01837, 00000)
01840:   Return
01841: PushString("SecondIsFoo")
01842:   Return
01843: PushString("Twice")
01844: PushVar(00000)
01845: Swap(00002)
01846: Apply
01847: PushVar(00000)
01848: Swap(00002)
01849: Apply
01850:   Return
01851: PushFn(01843, 00000)
01852:   Return
01853: PushString("")
01854: PushFn(01723, 00000)
01855: PushFn(01741, 00002)
01856: Swap(00002)
01857: Apply
01858: PushEffect("no-match")
01859: Swap(00002)
01860: Apply
01861: PushFn(01823, 00000)
01862: PushString("")
01863: PushString(""arg"")
01864: Swap(00002)
01865: Apply
01866: PushString(""_"")
01867: Swap(00002)
01868: Apply
01869: Swap(00002)
01870: Apply
01871: PushFn(01830, 00000)
01872: Swap(00002)
01873: Apply
01874: Swap(00002)
01875: Apply
01876: Swap(00002)
01877: Apply
01878: PushVar(00000)
01879: PushString("Pair")
01880: PushString("Foo")
01881: Swap(00002)
01882: Apply
01883: PushString("Bar")
01884: Swap(00002)
01885: Apply
01886: Swap(00002)
01887: Apply
01888: PushString("")
01889: PushVar(00001)
01890: PushString("Binding")
01891: PushString(""_"")
01892: Swap(00002)
01893: Apply
01894: Swap(00002)
01895: Apply
01896: PushFn(01832, 00000)
01897: Swap(00002)
01898: Apply
01899: Swap(00002)
01900: Apply
01901: PushVar(00001)
01902: PushString("Compound")
01903: PushString("Pair")
01904: PushString("Binding")
01905: PushString(""x"")
01906: Swap(00002)
01907: Apply
01908: Swap(00002)
01909: Apply
01910: PushString("Binding")
01911: PushString(""y"")
01912: Swap(00002)
01913: Apply
01914: Swap(00002)
01915: Apply
01916: Swap(00002)
01917: Apply
01918: Swap(00002)
01919: Apply
01920: PushFn(01839, 00000)
01921: Swap(00002)
01922: Apply
01923: Swap(00002)
01924: Apply
01925: PushVar(00001)
01926: PushString("Compound")
01927: PushString("Pair")
01928: PushString("Binding")
01929: PushString(""x"")
01930: Swap(00002)
01931: Apply
01932: Swap(00002)
01933: Apply
01934: PushString("Value")
01935: PushString("Foo")
01936: Swap(00002)
01937: Apply
01938: Swap(00002)
01939: Apply
01940: Swap(00002)
01941: Apply
01942: Swap(00002)
01943: Apply
01944: PushFn(01841, 00000)
01945: Swap(00002)
01946: Apply
01947: Swap(00002)
01948: Apply
01949: PushVar(00001)
01950: PushString("Compound")
01951: PushString("Pair")
01952: PushString("Binding")
01953: PushString(""x"")
01954: Swap(00002)
01955: Apply
01956: Swap(00002)
01957: Apply
01958: PushString("Binding")
01959: PushString(""x"")
01960: Swap(00002)
01961: Apply
01962: Swap(00002)
01963: Apply
01964: Swap(00002)
01965: Apply
01966: Swap(00002)
01967: Apply
01968: PushFn(01851, 00000)
01969: Swap(00002)
01970: Apply
01971: Swap(00002)
01972: Apply
01973: Swap(00002)
01974: Apply
01975: Swap(00002)
01976: Apply
01977:   Return
01978: PushFn(01521, 00000)
01979: PushString(""match-with"")
01980: Swap(00002)
01981: Apply
01982: PushFn(01525, 00000)
01983: PushString("")
01984: PushString(""clauses"")
01985: Swap(00002)
01986: Apply
01987: PushString(""value"")
01988: Swap(00002)
01989: Apply
01990: Swap(00002)
01991: Apply
01992: PushFn(01707, 00013)
01993: Swap(00002)
01994: Apply
01995: Swap(00002)
01996: Apply
01997: PushFn(01853, 00001)
01998: Swap(00002)
01999: Apply
02000:   Return
02001: PushFn(01381, 00000)
02002: PushString(""->"")
02003: Swap(00002)
02004: Apply
02005: PushFn(01385, 00000)
02006: PushString("")
02007: PushString(""value"")
02008: Swap(00002)
02009: Apply
02010: PushString(""body"")
02011: Swap(00002)
02012: Apply
02013: PushString(""pattern"")
02014: Swap(00002)
02015: Apply
02016: Swap(00002)
02017: Apply
02018: PushFn(01512, 00011)
02019: Swap(00002)
02020: Apply
02021: Swap(00002)
02022: Apply
02023: PushFn(01978, 00012)
02024: Swap(00002)
02025: Apply
02026:   Return
02027: PushFn(01099, 00000)
02028: PushString(""unify"")
02029: Swap(00002)
02030: Apply
02031: PushFn(01104, 00000)
02032: PushString(""unify"")
02033: Swap(00002)
02034: Apply
02035: PushFn(01360, 00010)
02036: Swap(00002)
02037: Apply
02038: Swap(00002)
02039: Apply
02040: PushFn(02001, 00011)
02041: Swap(00002)
02042: Apply
02043:   Return
02044: PushFn(00866, 00000)
02045: PushString(""join"")
02046: Swap(00002)
02047: Apply
02048: PushVar(00009)
02049: PushFn(00870, 00000)
02050: PushString("")
02051: PushString(""pair"")
02052: Swap(00002)
02053: Apply
02054: PushString(""acc"")
02055: Swap(00002)
02056: Apply
02057: Swap(00002)
02058: Apply
02059: PushFn(01090, 00010)
02060: Swap(00002)
02061: Apply
02062: Swap(00002)
02063: Apply
02064: PushString("")
02065: Swap(00002)
02066: Apply
02067: Swap(00002)
02068: Apply
02069: PushFn(02027, 00010)
02070: Swap(00002)
02071: Apply
02072:   Return
02073: PushFn(00805, 00000)
02074: PushString(""second"")
02075: Swap(00002)
02076: Apply
02077: PushFn(00809, 00000)
02078: PushString(""xs"")
02079: Swap(00002)
02080: Apply
02081: PushFn(00836, 00001)
02082: Swap(00002)
02083: Apply
02084: Swap(00002)
02085: Apply
02086: PushFn(02044, 00009)
02087: Swap(00002)
02088: Apply
02089:   Return
02090: PushFn(00747, 00000)
02091: PushString(""first"")
02092: Swap(00002)
02093: Apply
02094: PushFn(00751, 00000)
02095: PushString(""xs"")
02096: Swap(00002)
02097: Apply
02098: PushFn(00775, 00000)
02099: Swap(00002)
02100: Apply
02101: Swap(00002)
02102: Apply
02103: PushFn(02073, 00008)
02104: Swap(00002)
02105: Apply
02106:   Return
02107: PushFn(00553, 00000)
02108: PushString(""=="")
02109: Swap(00002)
02110: Apply
02111: PushFn(00558, 00000)
02112: PushString(""=="")
02113: Swap(00002)
02114: Apply
02115: PushFn(00726, 00000)
02116: Swap(00002)
02117: Apply
02118: Swap(00002)
02119: Apply
02120: PushFn(02090, 00007)
02121: Swap(00002)
02122: Apply
02123:   Return
02124: PushFn(00524, 00000)
02125: PushString(""zip"")
02126: Swap(00002)
02127: Apply
02128: PushFn(00528, 00000)
02129: PushString("")
02130: PushString(""ys"")
02131: Swap(00002)
02132: Apply
02133: PushString(""xs"")
02134: Swap(00002)
02135: Apply
02136: Swap(00002)
02137: Apply
02138: PushFn(00544, 00004)
02139: Swap(00002)
02140: Apply
02141: Swap(00002)
02142: Apply
02143: PushFn(02107, 00006)
02144: Swap(00002)
02145: Apply
02146:   Return
02147: PushFn(00336, 00000)
02148: PushString(""zip"")
02149: Swap(00002)
02150: Apply
02151: PushFn(00341, 00000)
02152: PushString(""zip"")
02153: Swap(00002)
02154: Apply
02155: PushFn(00500, 00000)
02156: Swap(00002)
02157: Apply
02158: Swap(00002)
02159: Apply
02160: PushFn(02124, 00005)
02161: Swap(00002)
02162: Apply
02163:   Return
02164: PushFn(00257, 00000)
02165: PushString(""flatten"")
02166: Swap(00002)
02167: Apply
02168: PushFn(00261, 00000)
02169: PushString(""xs"")
02170: Swap(00002)
02171: Apply
02172: PushFn(00303, 00004)
02173: Swap(00002)
02174: Apply
02175: Swap(00002)
02176: Apply
02177: PushFn(02147, 00004)
02178: Swap(00002)
02179: Apply
02180:   Return
02181: PushFn(00202, 00000)
02182: PushString(""map"")
02183: Swap(00002)
02184: Apply
02185: PushFn(00206, 00000)
02186: PushString("")
02187: PushString(""xs"")
02188: Swap(00002)
02189: Apply
02190: PushString(""f"")
02191: Swap(00002)
02192: Apply
02193: Swap(00002)
02194: Apply
02195: PushFn(00248, 00003)
02196: Swap(00002)
02197: Apply
02198: Swap(00002)
02199: Apply
02200: PushFn(02164, 00003)
02201: Swap(00002)
02202: Apply
02203:   Return
02204: PushFn(00155, 00000)
02205: PushString(""rev"")
02206: Swap(00002)
02207: Apply
02208: PushFn(00159, 00000)
02209: PushString(""xs"")
02210: Swap(00002)
02211: Apply
02212: PushFn(00172, 00002)
02213: Swap(00002)
02214: Apply
02215: Swap(00002)
02216: Apply
02217: PushFn(02181, 00002)
02218: Swap(00002)
02219: Apply
02220:   Return
02221: PushFn(00106, 00000)
02222: PushString(""apply"")
02223: Swap(00002)
02224: Apply
02225: PushFn(00110, 00000)
02226: PushString("")
02227: PushString(""xs"")
02228: Swap(00002)
02229: Apply
02230: PushString(""f"")
02231: Swap(00002)
02232: Apply
02233: Swap(00002)
02234: Apply
02235: PushFn(00146, 00001)
02236: Swap(00002)
02237: Apply
02238: Swap(00002)
02239: Apply
02240: PushFn(02204, 00001)
02241: Swap(00002)
02242: Apply
02243:   Return
02244: PushFn(00007, 00000)
02245: PushString(""fold"")
02246: Swap(00002)
02247: Apply
02248: PushFn(00012, 00000)
02249: PushString(""fold"")
02250: Swap(00002)
02251: Apply
02252: PushFn(00082, 00000)
02253: Swap(00002)
02254: Apply
02255: Swap(00002)
02256: Apply
02257: PushFn(02221, 00000)
02258: Swap(00002)
02259: Apply

[Bar, NoMatch(Foo)]