:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
fold([:acc, :x] => { acc(x) }, [], [A, B, C])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(fold
  (=>
    [ :acc
      :x ]
    { (acc
        x) })
  [  ]
  [ A
    B
    C ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( 0
          ( ( =>
                =>
                  0
              ( ( []
                  "x" )
                "acc" ) )
            =>
              =>
                ( 1
                  0 ) ) )
        [] )
      ( ( ( []
            C )
          B )
        A ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00002)
00011:   Return
00012: LoadVar(00004)
00013: LoadVar(00005)
00014: ApplyArgToFn
00015: LoadVar(00003)
00016: LoadVar(00004)
00017: ApplyArgToFn
00018: LoadVar(00000)
00019: ApplyFnToArg
00020: ApplyFnToArg
00021: LoadVar(00001)
00022: ApplyFnToArg
00023:   Return
00024: LoadFn { code: 00012, fvars: 00005 }
00025:   Return
00026: LoadVar(00000)
00027:   Return
00028: LoadFn { code: 00026, fvars: 00000 }
00029:   Return
00030: LoadVar(00002)
00031: LoadVar(00001)
00032: LoadVar(00000)
00033: Unpack
00034: ApplyArgToFn
00035: ApplyArgToFn
00036:   Return
00037: LoadFn { code: 00030, fvars: 00002 }
00038:   Return
00039: LoadFn { code: 00037, fvars: 00001 }
00040:   Return
00041: LoadFn { code: 00010, fvars: 00002 }
00042: LoadFn { code: 00024, fvars: 00004 }
00043: PushString(""xs"")
00044: PushString(""x"")
00045: PushString("")
00046: ApplyArgToFn
00047: ApplyArgToFn
00048: LoadFn { code: 00028, fvars: 00000 }
00049: ApplyArgToFn
00050: ApplyArgToFn
00051: LoadVar(00000)
00052: LoadFn { code: 00039, fvars: 00000 }
00053: ApplyArgToFn
00054: ApplyArgToFn
00055: ApplyArgToFn
00056:   Return
00057: LoadFn { code: 00041, fvars: 00003 }
00058:   Return
00059: LoadFn { code: 00057, fvars: 00002 }
00060:   Return
00061: LoadVar(00000)
00062:   Return
00063: LoadFn { code: 00061, fvars: 00000 }
00064:   Return
00065: LoadFn { code: 00059, fvars: 00001 }
00066: PushString(""f"")
00067: PushString(""acc"")
00068: PushString(""xs"")
00069: PushString("")
00070: ApplyArgToFn
00071: ApplyArgToFn
00072: ApplyArgToFn
00073: LoadFn { code: 00063, fvars: 00000 }
00074: ApplyArgToFn
00075: ApplyArgToFn
00076:   Return
00077: LoadVar(00000)
00078: LoadFn { code: 00000, fvars: 00000 }
00079: ApplyArgToFn
00080:   Return
00081: LoadFn { code: 00077, fvars: 00000 }
00082:   Return
00083: LoadVar(00001)
00084: LoadVar(00000)
00085: ApplyArgToFn
00086:   Return
00087: LoadFn { code: 00083, fvars: 00001 }
00088:   Return
00089: LoadFn { code: 00087, fvars: 00000 }
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: ApplyArgToFn
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadVar(00000)
00098:   Return
00099: LoadFn { code: 00097, fvars: 00000 }
00100:   Return
00101: LoadFn { code: 00095, fvars: 00000 }
00102: PushString(""acc"")
00103: PushString(""x"")
00104: PushString("")
00105: ApplyArgToFn
00106: ApplyArgToFn
00107: LoadFn { code: 00099, fvars: 00000 }
00108: ApplyArgToFn
00109: ApplyArgToFn
00110: LoadVar(00000)
00111: ApplyArgToFn
00112: PushString("")
00113: ApplyFnToArg
00114: PushString("A")
00115: PushString("B")
00116: PushString("C")
00117: PushString("")
00118: ApplyArgToFn
00119: ApplyArgToFn
00120: ApplyArgToFn
00121: ApplyFnToArg
00122:   Return
00123: LoadFn { code: 00065, fvars: 00000 }
00124: PushString(""fold"")
00125: LoadFn { code: 00081, fvars: 00000 }
00126: ApplyArgToFn
00127: ApplyArgToFn
00128: PushString(""fold"")
00129: LoadFn { code: 00089, fvars: 00000 }
00130: ApplyArgToFn
00131: ApplyArgToFn
00132: LoadFn { code: 00101, fvars: 00000 }
00133: ApplyFnToArg
00134:   Return

[C, B, A]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:rev = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
rev([A, B, C])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :rev
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(rev
  [ A
    B
    C ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( 0
          ( ( ( []
                C )
              B )
            A ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00002)
00011:   Return
00012: LoadVar(00004)
00013: LoadVar(00005)
00014: ApplyArgToFn
00015: LoadVar(00003)
00016: LoadVar(00004)
00017: ApplyArgToFn
00018: LoadVar(00000)
00019: ApplyFnToArg
00020: ApplyFnToArg
00021: LoadVar(00001)
00022: ApplyFnToArg
00023:   Return
00024: LoadFn { code: 00012, fvars: 00005 }
00025:   Return
00026: LoadVar(00000)
00027:   Return
00028: LoadFn { code: 00026, fvars: 00000 }
00029:   Return
00030: LoadVar(00002)
00031: LoadVar(00001)
00032: LoadVar(00000)
00033: Unpack
00034: ApplyArgToFn
00035: ApplyArgToFn
00036:   Return
00037: LoadFn { code: 00030, fvars: 00002 }
00038:   Return
00039: LoadFn { code: 00037, fvars: 00001 }
00040:   Return
00041: LoadFn { code: 00010, fvars: 00002 }
00042: LoadFn { code: 00024, fvars: 00004 }
00043: PushString(""xs"")
00044: PushString(""x"")
00045: PushString("")
00046: ApplyArgToFn
00047: ApplyArgToFn
00048: LoadFn { code: 00028, fvars: 00000 }
00049: ApplyArgToFn
00050: ApplyArgToFn
00051: LoadVar(00000)
00052: LoadFn { code: 00039, fvars: 00000 }
00053: ApplyArgToFn
00054: ApplyArgToFn
00055: ApplyArgToFn
00056:   Return
00057: LoadFn { code: 00041, fvars: 00003 }
00058:   Return
00059: LoadFn { code: 00057, fvars: 00002 }
00060:   Return
00061: LoadVar(00000)
00062:   Return
00063: LoadFn { code: 00061, fvars: 00000 }
00064:   Return
00065: LoadFn { code: 00059, fvars: 00001 }
00066: PushString(""f"")
00067: PushString(""acc"")
00068: PushString(""xs"")
00069: PushString("")
00070: ApplyArgToFn
00071: ApplyArgToFn
00072: ApplyArgToFn
00073: LoadFn { code: 00063, fvars: 00000 }
00074: ApplyArgToFn
00075: ApplyArgToFn
00076:   Return
00077: LoadVar(00000)
00078: LoadFn { code: 00000, fvars: 00000 }
00079: ApplyArgToFn
00080:   Return
00081: LoadFn { code: 00077, fvars: 00000 }
00082:   Return
00083: LoadVar(00001)
00084: LoadVar(00000)
00085: ApplyArgToFn
00086:   Return
00087: LoadFn { code: 00083, fvars: 00001 }
00088:   Return
00089: LoadFn { code: 00087, fvars: 00000 }
00090:   Return
00091: PushString("A")
00092: PushString("B")
00093: PushString("C")
00094: PushString("")
00095: ApplyArgToFn
00096: ApplyArgToFn
00097: ApplyArgToFn
00098: LoadVar(00000)
00099: ApplyArgToFn
00100:   Return
00101: LoadVar(00000)
00102: LoadVar(00001)
00103: ApplyArgToFn
00104:   Return
00105: LoadFn { code: 00101, fvars: 00001 }
00106:   Return
00107: LoadVar(00000)
00108:   Return
00109: LoadFn { code: 00107, fvars: 00000 }
00110:   Return
00111: LoadFn { code: 00105, fvars: 00000 }
00112: PushString(""xs"")
00113: PushString(""x"")
00114: PushString("")
00115: ApplyArgToFn
00116: ApplyArgToFn
00117: LoadFn { code: 00109, fvars: 00000 }
00118: ApplyArgToFn
00119: ApplyArgToFn
00120: LoadVar(00001)
00121: ApplyArgToFn
00122: PushString("")
00123: ApplyFnToArg
00124: LoadVar(00000)
00125: ApplyFnToArg
00126:   Return
00127: LoadVar(00000)
00128:   Return
00129: LoadFn { code: 00127, fvars: 00000 }
00130:   Return
00131: LoadVar(00001)
00132: LoadVar(00000)
00133: ApplyArgToFn
00134:   Return
00135: LoadFn { code: 00131, fvars: 00001 }
00136:   Return
00137: LoadFn { code: 00135, fvars: 00000 }
00138:   Return
00139: LoadFn { code: 00091, fvars: 00000 }
00140: LoadFn { code: 00111, fvars: 00001 }
00141: PushString(""xs"")
00142: LoadFn { code: 00129, fvars: 00000 }
00143: ApplyArgToFn
00144: ApplyArgToFn
00145: PushString(""rev"")
00146: LoadFn { code: 00137, fvars: 00000 }
00147: ApplyArgToFn
00148: ApplyArgToFn
00149: ApplyArgToFn
00150:   Return
00151: LoadFn { code: 00065, fvars: 00000 }
00152: PushString(""fold"")
00153: LoadFn { code: 00081, fvars: 00000 }
00154: ApplyArgToFn
00155: ApplyArgToFn
00156: PushString(""fold"")
00157: LoadFn { code: 00089, fvars: 00000 }
00158: ApplyArgToFn
00159: ApplyArgToFn
00160: LoadFn { code: 00139, fvars: 00000 }
00161: ApplyFnToArg
00162:   Return

[C, B, A]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:apply = ([:f, :xs] => {
    fold([:f, :x] => { f(x) }, f, xs)
})
apply([:x, :y, :z] => { Triple(x, y, z) }, [A, B, C])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :apply
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :f
            :x ]
          { (f
              x) })
        f
        xs) }))
(apply
  (=>
    [ :x
      :y
      :z ]
    { (Triple
        x
        y
        z) })
  [ A
    B
    C ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "apply" )
        ( ( =>
              =>
                0
            ( ( []
                "xs" )
              "f" ) )
          =>
            =>
              ( ( ( 2
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "f" ) )
                      =>
                        =>
                          ( 1
                            0 ) ) )
                  1 )
                0 ) ) )
      =>
        ( ( 0
            ( ( =>
                  =>
                    0
                ( ( ( []
                      "z" )
                    "y" )
                  "x" ) )
              =>
                =>
                  =>
                    ( ( ( Triple
                          2 )
                        1 )
                      0 ) ) )
          ( ( ( []
                C )
              B )
            A ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00002)
00011:   Return
00012: LoadVar(00004)
00013: LoadVar(00005)
00014: ApplyArgToFn
00015: LoadVar(00003)
00016: LoadVar(00004)
00017: ApplyArgToFn
00018: LoadVar(00000)
00019: ApplyFnToArg
00020: ApplyFnToArg
00021: LoadVar(00001)
00022: ApplyFnToArg
00023:   Return
00024: LoadFn { code: 00012, fvars: 00005 }
00025:   Return
00026: LoadVar(00000)
00027:   Return
00028: LoadFn { code: 00026, fvars: 00000 }
00029:   Return
00030: LoadVar(00002)
00031: LoadVar(00001)
00032: LoadVar(00000)
00033: Unpack
00034: ApplyArgToFn
00035: ApplyArgToFn
00036:   Return
00037: LoadFn { code: 00030, fvars: 00002 }
00038:   Return
00039: LoadFn { code: 00037, fvars: 00001 }
00040:   Return
00041: LoadFn { code: 00010, fvars: 00002 }
00042: LoadFn { code: 00024, fvars: 00004 }
00043: PushString(""xs"")
00044: PushString(""x"")
00045: PushString("")
00046: ApplyArgToFn
00047: ApplyArgToFn
00048: LoadFn { code: 00028, fvars: 00000 }
00049: ApplyArgToFn
00050: ApplyArgToFn
00051: LoadVar(00000)
00052: LoadFn { code: 00039, fvars: 00000 }
00053: ApplyArgToFn
00054: ApplyArgToFn
00055: ApplyArgToFn
00056:   Return
00057: LoadFn { code: 00041, fvars: 00003 }
00058:   Return
00059: LoadFn { code: 00057, fvars: 00002 }
00060:   Return
00061: LoadVar(00000)
00062:   Return
00063: LoadFn { code: 00061, fvars: 00000 }
00064:   Return
00065: LoadFn { code: 00059, fvars: 00001 }
00066: PushString(""f"")
00067: PushString(""acc"")
00068: PushString(""xs"")
00069: PushString("")
00070: ApplyArgToFn
00071: ApplyArgToFn
00072: ApplyArgToFn
00073: LoadFn { code: 00063, fvars: 00000 }
00074: ApplyArgToFn
00075: ApplyArgToFn
00076:   Return
00077: LoadVar(00000)
00078: LoadFn { code: 00000, fvars: 00000 }
00079: ApplyArgToFn
00080:   Return
00081: LoadFn { code: 00077, fvars: 00000 }
00082:   Return
00083: LoadVar(00001)
00084: LoadVar(00000)
00085: ApplyArgToFn
00086:   Return
00087: LoadFn { code: 00083, fvars: 00001 }
00088:   Return
00089: LoadFn { code: 00087, fvars: 00000 }
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: LoadVar(00002)
00094: PushString("Triple")
00095: ApplyArgToFn
00096: ApplyArgToFn
00097: ApplyArgToFn
00098:   Return
00099: LoadFn { code: 00091, fvars: 00002 }
00100:   Return
00101: LoadFn { code: 00099, fvars: 00001 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadFn { code: 00101, fvars: 00000 }
00108: PushString(""x"")
00109: PushString(""y"")
00110: PushString(""z"")
00111: PushString("")
00112: ApplyArgToFn
00113: ApplyArgToFn
00114: ApplyArgToFn
00115: LoadFn { code: 00105, fvars: 00000 }
00116: ApplyArgToFn
00117: ApplyArgToFn
00118: LoadVar(00000)
00119: ApplyArgToFn
00120: PushString("A")
00121: PushString("B")
00122: PushString("C")
00123: PushString("")
00124: ApplyArgToFn
00125: ApplyArgToFn
00126: ApplyArgToFn
00127: ApplyFnToArg
00128:   Return
00129: LoadVar(00000)
00130: LoadVar(00001)
00131: ApplyArgToFn
00132:   Return
00133: LoadFn { code: 00129, fvars: 00001 }
00134:   Return
00135: LoadVar(00000)
00136:   Return
00137: LoadFn { code: 00135, fvars: 00000 }
00138:   Return
00139: LoadFn { code: 00133, fvars: 00000 }
00140: PushString(""f"")
00141: PushString(""x"")
00142: PushString("")
00143: ApplyArgToFn
00144: ApplyArgToFn
00145: LoadFn { code: 00137, fvars: 00000 }
00146: ApplyArgToFn
00147: ApplyArgToFn
00148: LoadVar(00002)
00149: ApplyArgToFn
00150: LoadVar(00001)
00151: ApplyFnToArg
00152: LoadVar(00000)
00153: ApplyFnToArg
00154:   Return
00155: LoadFn { code: 00139, fvars: 00002 }
00156:   Return
00157: LoadVar(00000)
00158:   Return
00159: LoadFn { code: 00157, fvars: 00000 }
00160:   Return
00161: LoadVar(00001)
00162: LoadVar(00000)
00163: ApplyArgToFn
00164:   Return
00165: LoadFn { code: 00161, fvars: 00001 }
00166:   Return
00167: LoadFn { code: 00165, fvars: 00000 }
00168:   Return
00169: LoadFn { code: 00107, fvars: 00000 }
00170: LoadFn { code: 00155, fvars: 00001 }
00171: PushString(""f"")
00172: PushString(""xs"")
00173: PushString("")
00174: ApplyArgToFn
00175: ApplyArgToFn
00176: LoadFn { code: 00159, fvars: 00000 }
00177: ApplyArgToFn
00178: ApplyArgToFn
00179: PushString(""apply"")
00180: LoadFn { code: 00167, fvars: 00000 }
00181: ApplyArgToFn
00182: ApplyArgToFn
00183: ApplyArgToFn
00184:   Return
00185: LoadFn { code: 00065, fvars: 00000 }
00186: PushString(""fold"")
00187: LoadFn { code: 00081, fvars: 00000 }
00188: ApplyArgToFn
00189: ApplyArgToFn
00190: PushString(""fold"")
00191: LoadFn { code: 00089, fvars: 00000 }
00192: ApplyArgToFn
00193: ApplyArgToFn
00194: LoadFn { code: 00169, fvars: 00000 }
00195: ApplyFnToArg
00196:   Return

Triple(A, B, C)

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:rev = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:map = ([:f, :xs] => {
    fold([:xs, :x] => { xs(f(x)) }, [], rev(xs))
})
map(:x => { Foo(x) }, [A, B, C])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :rev
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :map
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              (f
                x)) })
        [  ]
        (rev
          xs)) }))
(map
  (=>
    :x
    { (Foo
        x) })
  [ A
    B
    C ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "map" )
            ( ( =>
                  =>
                    0
                ( ( []
                    "xs" )
                  "f" ) )
              =>
                =>
                  ( ( ( 3
                        ( ( =>
                              =>
                                0
                            ( ( []
                                "x" )
                              "xs" ) )
                          =>
                            =>
                              ( 1
                                ( 3
                                  0 ) ) ) )
                      [] )
                    ( 2
                      0 ) ) ) )
          =>
            ( ( 0
                ( ( =>
                      =>
                        0
                    "x" )
                  =>
                    ( Foo
                      0 ) ) )
              ( ( ( []
                    C )
                  B )
                A ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00002)
00011:   Return
00012: LoadVar(00004)
00013: LoadVar(00005)
00014: ApplyArgToFn
00015: LoadVar(00003)
00016: LoadVar(00004)
00017: ApplyArgToFn
00018: LoadVar(00000)
00019: ApplyFnToArg
00020: ApplyFnToArg
00021: LoadVar(00001)
00022: ApplyFnToArg
00023:   Return
00024: LoadFn { code: 00012, fvars: 00005 }
00025:   Return
00026: LoadVar(00000)
00027:   Return
00028: LoadFn { code: 00026, fvars: 00000 }
00029:   Return
00030: LoadVar(00002)
00031: LoadVar(00001)
00032: LoadVar(00000)
00033: Unpack
00034: ApplyArgToFn
00035: ApplyArgToFn
00036:   Return
00037: LoadFn { code: 00030, fvars: 00002 }
00038:   Return
00039: LoadFn { code: 00037, fvars: 00001 }
00040:   Return
00041: LoadFn { code: 00010, fvars: 00002 }
00042: LoadFn { code: 00024, fvars: 00004 }
00043: PushString(""xs"")
00044: PushString(""x"")
00045: PushString("")
00046: ApplyArgToFn
00047: ApplyArgToFn
00048: LoadFn { code: 00028, fvars: 00000 }
00049: ApplyArgToFn
00050: ApplyArgToFn
00051: LoadVar(00000)
00052: LoadFn { code: 00039, fvars: 00000 }
00053: ApplyArgToFn
00054: ApplyArgToFn
00055: ApplyArgToFn
00056:   Return
00057: LoadFn { code: 00041, fvars: 00003 }
00058:   Return
00059: LoadFn { code: 00057, fvars: 00002 }
00060:   Return
00061: LoadVar(00000)
00062:   Return
00063: LoadFn { code: 00061, fvars: 00000 }
00064:   Return
00065: LoadFn { code: 00059, fvars: 00001 }
00066: PushString(""f"")
00067: PushString(""acc"")
00068: PushString(""xs"")
00069: PushString("")
00070: ApplyArgToFn
00071: ApplyArgToFn
00072: ApplyArgToFn
00073: LoadFn { code: 00063, fvars: 00000 }
00074: ApplyArgToFn
00075: ApplyArgToFn
00076:   Return
00077: LoadVar(00000)
00078: LoadFn { code: 00000, fvars: 00000 }
00079: ApplyArgToFn
00080:   Return
00081: LoadFn { code: 00077, fvars: 00000 }
00082:   Return
00083: LoadVar(00001)
00084: LoadVar(00000)
00085: ApplyArgToFn
00086:   Return
00087: LoadFn { code: 00083, fvars: 00001 }
00088:   Return
00089: LoadFn { code: 00087, fvars: 00000 }
00090:   Return
00091: LoadVar(00000)
00092: PushString("Foo")
00093: ApplyArgToFn
00094:   Return
00095: LoadVar(00000)
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadFn { code: 00091, fvars: 00000 }
00100: PushString(""x"")
00101: LoadFn { code: 00097, fvars: 00000 }
00102: ApplyArgToFn
00103: ApplyArgToFn
00104: LoadVar(00000)
00105: ApplyArgToFn
00106: PushString("A")
00107: PushString("B")
00108: PushString("C")
00109: PushString("")
00110: ApplyArgToFn
00111: ApplyArgToFn
00112: ApplyArgToFn
00113: ApplyFnToArg
00114:   Return
00115: LoadVar(00000)
00116: LoadVar(00003)
00117: ApplyArgToFn
00118: LoadVar(00001)
00119: ApplyArgToFn
00120:   Return
00121: LoadFn { code: 00115, fvars: 00003 }
00122:   Return
00123: LoadVar(00000)
00124:   Return
00125: LoadFn { code: 00123, fvars: 00000 }
00126:   Return
00127: LoadFn { code: 00121, fvars: 00002 }
00128: PushString(""xs"")
00129: PushString(""x"")
00130: PushString("")
00131: ApplyArgToFn
00132: ApplyArgToFn
00133: LoadFn { code: 00125, fvars: 00000 }
00134: ApplyArgToFn
00135: ApplyArgToFn
00136: LoadVar(00003)
00137: ApplyArgToFn
00138: PushString("")
00139: ApplyFnToArg
00140: LoadVar(00000)
00141: LoadVar(00002)
00142: ApplyArgToFn
00143: ApplyFnToArg
00144:   Return
00145: LoadFn { code: 00127, fvars: 00003 }
00146:   Return
00147: LoadVar(00000)
00148:   Return
00149: LoadFn { code: 00147, fvars: 00000 }
00150:   Return
00151: LoadVar(00001)
00152: LoadVar(00000)
00153: ApplyArgToFn
00154:   Return
00155: LoadFn { code: 00151, fvars: 00001 }
00156:   Return
00157: LoadFn { code: 00155, fvars: 00000 }
00158:   Return
00159: LoadFn { code: 00099, fvars: 00000 }
00160: LoadFn { code: 00145, fvars: 00002 }
00161: PushString(""f"")
00162: PushString(""xs"")
00163: PushString("")
00164: ApplyArgToFn
00165: ApplyArgToFn
00166: LoadFn { code: 00149, fvars: 00000 }
00167: ApplyArgToFn
00168: ApplyArgToFn
00169: PushString(""map"")
00170: LoadFn { code: 00157, fvars: 00000 }
00171: ApplyArgToFn
00172: ApplyArgToFn
00173: ApplyArgToFn
00174:   Return
00175: LoadVar(00000)
00176: LoadVar(00001)
00177: ApplyArgToFn
00178:   Return
00179: LoadFn { code: 00175, fvars: 00001 }
00180:   Return
00181: LoadVar(00000)
00182:   Return
00183: LoadFn { code: 00181, fvars: 00000 }
00184:   Return
00185: LoadFn { code: 00179, fvars: 00000 }
00186: PushString(""xs"")
00187: PushString(""x"")
00188: PushString("")
00189: ApplyArgToFn
00190: ApplyArgToFn
00191: LoadFn { code: 00183, fvars: 00000 }
00192: ApplyArgToFn
00193: ApplyArgToFn
00194: LoadVar(00001)
00195: ApplyArgToFn
00196: PushString("")
00197: ApplyFnToArg
00198: LoadVar(00000)
00199: ApplyFnToArg
00200:   Return
00201: LoadVar(00000)
00202:   Return
00203: LoadFn { code: 00201, fvars: 00000 }
00204:   Return
00205: LoadVar(00001)
00206: LoadVar(00000)
00207: ApplyArgToFn
00208:   Return
00209: LoadFn { code: 00205, fvars: 00001 }
00210:   Return
00211: LoadFn { code: 00209, fvars: 00000 }
00212:   Return
00213: LoadFn { code: 00159, fvars: 00001 }
00214: LoadFn { code: 00185, fvars: 00001 }
00215: PushString(""xs"")
00216: LoadFn { code: 00203, fvars: 00000 }
00217: ApplyArgToFn
00218: ApplyArgToFn
00219: PushString(""rev"")
00220: LoadFn { code: 00211, fvars: 00000 }
00221: ApplyArgToFn
00222: ApplyArgToFn
00223: ApplyArgToFn
00224:   Return
00225: LoadFn { code: 00065, fvars: 00000 }
00226: PushString(""fold"")
00227: LoadFn { code: 00081, fvars: 00000 }
00228: ApplyArgToFn
00229: ApplyArgToFn
00230: PushString(""fold"")
00231: LoadFn { code: 00089, fvars: 00000 }
00232: ApplyArgToFn
00233: ApplyArgToFn
00234: LoadFn { code: 00213, fvars: 00000 }
00235: ApplyFnToArg
00236:   Return

[Foo(A), Foo(B), Foo(C)]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:rev = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:zip = (:zip ~> { [:acc, :xs, :ys] => {
    __unpack(xs, [:xs, :x] => {
        __unpack(ys, [:ys, :y] => { zip(acc([x, y]), xs, ys) }, {})
    }, {
        __unpack(ys, [:ys, :y] => {}, { acc })
    })
}})
:zip = ([:xs, :ys] => { rev(zip([], xs, ys)) })
[
    zip([A, B, C], [X, Y, Z])
    zip([A, B, C], [X, Y])
    zip([A, B], [X, Y, Z])
    zip(Foo, [X, Y, Z])
    zip(Foo, Bar)
]

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :rev
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :zip
  (~>
    :zip
    { (=>
        [ :acc
          :xs
          :ys ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (__unpack
                  ys
                  (=>
                    [ :ys
                      :y ]
                    { (zip
                        (acc
                          [ x
                            y ])
                        xs
                        ys) })
                  {  }) })
            { (__unpack
                ys
                (=>
                  [ :ys
                    :y ]
                  {  })
                { acc }) }) }) }))
(=
  :zip
  (=>
    [ :xs
      :ys ]
    { (rev
        (zip
          [  ]
          xs
          ys)) }))
[ (zip
    [ A
      B
      C ]
    [ X
      Y
      Z ])
  (zip
    [ A
      B
      C ]
    [ X
      Y ])
  (zip
    [ A
      B ]
    [ X
      Y
      Z ])
  (zip
    Foo
    [ X
      Y
      Z ])
  (zip
    Foo
    Bar) ]

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "zip" )
            ( ( =>
                  =>
                    ~>
                      0
                "zip" )
              =>
                ( ( =>
                      =>
                        0
                    ( ( ( []
                          "ys" )
                        "xs" )
                      "acc" ) )
                  =>
                    =>
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( pop
                                      2
                                      1
                                      0 )
                              1 )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "x" )
                                  "xs" ) )
                              =>
                                =>
                                  ( ( ( =>
                                          =>
                                            =>
                                              ( pop
                                                2
                                                1
                                                0 )
                                        2 )
                                      ( ( =>
                                            =>
                                              0
                                          ( ( []
                                              "y" )
                                            "ys" ) )
                                        =>
                                          =>
                                            ( ( ( 7
                                                  ( 6
                                                    ( ( []
                                                        0 )
                                                      2 ) ) )
                                                3 )
                                              1 ) ) )
                                    =>
                                      [] ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( pop
                                          2
                                          1
                                          0 )
                                  1 )
                                ( ( =>
                                      =>
                                        0
                                    ( ( []
                                        "y" )
                                      "ys" ) )
                                  =>
                                    =>
                                      [] ) )
                              =>
                                4 ) ) ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "zip" )
                ( ( =>
                      =>
                        0
                    ( ( []
                        "ys" )
                      "xs" ) )
                  =>
                    =>
                      ( 3
                        ( ( ( 2
                              [] )
                            1 )
                          0 ) ) ) )
              =>
                ( ( ( ( ( []
                          ( ( 0
                              Foo )
                            Bar ) )
                        ( ( 0
                            Foo )
                          ( ( ( []
                                Z )
                              Y )
                            X ) ) )
                      ( ( 0
                          ( ( []
                              B )
                            A ) )
                        ( ( ( []
                              Z )
                            Y )
                          X ) ) )
                    ( ( 0
                        ( ( ( []
                              C )
                            B )
                          A ) )
                      ( ( []
                          Y )
                        X ) ) )
                  ( ( 0
                      ( ( ( []
                            C )
                          B )
                        A ) )
                    ( ( ( []
                          Z )
                        Y )
                      X ) ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00002)
00011:   Return
00012: LoadVar(00004)
00013: LoadVar(00005)
00014: ApplyArgToFn
00015: LoadVar(00003)
00016: LoadVar(00004)
00017: ApplyArgToFn
00018: LoadVar(00000)
00019: ApplyFnToArg
00020: ApplyFnToArg
00021: LoadVar(00001)
00022: ApplyFnToArg
00023:   Return
00024: LoadFn { code: 00012, fvars: 00005 }
00025:   Return
00026: LoadVar(00000)
00027:   Return
00028: LoadFn { code: 00026, fvars: 00000 }
00029:   Return
00030: LoadVar(00002)
00031: LoadVar(00001)
00032: LoadVar(00000)
00033: Unpack
00034: ApplyArgToFn
00035: ApplyArgToFn
00036:   Return
00037: LoadFn { code: 00030, fvars: 00002 }
00038:   Return
00039: LoadFn { code: 00037, fvars: 00001 }
00040:   Return
00041: LoadFn { code: 00010, fvars: 00002 }
00042: LoadFn { code: 00024, fvars: 00004 }
00043: PushString(""xs"")
00044: PushString(""x"")
00045: PushString("")
00046: ApplyArgToFn
00047: ApplyArgToFn
00048: LoadFn { code: 00028, fvars: 00000 }
00049: ApplyArgToFn
00050: ApplyArgToFn
00051: LoadVar(00000)
00052: LoadFn { code: 00039, fvars: 00000 }
00053: ApplyArgToFn
00054: ApplyArgToFn
00055: ApplyArgToFn
00056:   Return
00057: LoadFn { code: 00041, fvars: 00003 }
00058:   Return
00059: LoadFn { code: 00057, fvars: 00002 }
00060:   Return
00061: LoadVar(00000)
00062:   Return
00063: LoadFn { code: 00061, fvars: 00000 }
00064:   Return
00065: LoadFn { code: 00059, fvars: 00001 }
00066: PushString(""f"")
00067: PushString(""acc"")
00068: PushString(""xs"")
00069: PushString("")
00070: ApplyArgToFn
00071: ApplyArgToFn
00072: ApplyArgToFn
00073: LoadFn { code: 00063, fvars: 00000 }
00074: ApplyArgToFn
00075: ApplyArgToFn
00076:   Return
00077: LoadVar(00000)
00078: LoadFn { code: 00000, fvars: 00000 }
00079: ApplyArgToFn
00080:   Return
00081: LoadFn { code: 00077, fvars: 00000 }
00082:   Return
00083: LoadVar(00001)
00084: LoadVar(00000)
00085: ApplyArgToFn
00086:   Return
00087: LoadFn { code: 00083, fvars: 00001 }
00088:   Return
00089: LoadFn { code: 00087, fvars: 00000 }
00090:   Return
00091: LoadVar(00004)
00092:   Return
00093: PushString("")
00094:   Return
00095: LoadFn { code: 00093, fvars: 00000 }
00096:   Return
00097: LoadVar(00000)
00098:   Return
00099: LoadFn { code: 00097, fvars: 00000 }
00100:   Return
00101: LoadVar(00002)
00102: LoadVar(00001)
00103: LoadVar(00000)
00104: Unpack
00105: ApplyArgToFn
00106: ApplyArgToFn
00107:   Return
00108: LoadFn { code: 00101, fvars: 00002 }
00109:   Return
00110: LoadFn { code: 00108, fvars: 00001 }
00111:   Return
00112: LoadFn { code: 00091, fvars: 00004 }
00113: LoadFn { code: 00095, fvars: 00000 }
00114: PushString(""ys"")
00115: PushString(""y"")
00116: PushString("")
00117: ApplyArgToFn
00118: ApplyArgToFn
00119: LoadFn { code: 00099, fvars: 00000 }
00120: ApplyArgToFn
00121: ApplyArgToFn
00122: LoadVar(00001)
00123: LoadFn { code: 00110, fvars: 00000 }
00124: ApplyArgToFn
00125: ApplyArgToFn
00126: ApplyArgToFn
00127:   Return
00128: PushString("")
00129:   Return
00130: LoadVar(00002)
00131: LoadVar(00000)
00132: PushString("")
00133: ApplyArgToFn
00134: ApplyArgToFn
00135: LoadVar(00006)
00136: ApplyArgToFn
00137: LoadVar(00007)
00138: ApplyArgToFn
00139: LoadVar(00003)
00140: ApplyFnToArg
00141: LoadVar(00001)
00142: ApplyFnToArg
00143:   Return
00144: LoadFn { code: 00130, fvars: 00007 }
00145:   Return
00146: LoadVar(00000)
00147:   Return
00148: LoadFn { code: 00146, fvars: 00000 }
00149:   Return
00150: LoadVar(00002)
00151: LoadVar(00001)
00152: LoadVar(00000)
00153: Unpack
00154: ApplyArgToFn
00155: ApplyArgToFn
00156:   Return
00157: LoadFn { code: 00150, fvars: 00002 }
00158:   Return
00159: LoadFn { code: 00157, fvars: 00001 }
00160:   Return
00161: LoadFn { code: 00128, fvars: 00000 }
00162: LoadFn { code: 00144, fvars: 00006 }
00163: PushString(""ys"")
00164: PushString(""y"")
00165: PushString("")
00166: ApplyArgToFn
00167: ApplyArgToFn
00168: LoadFn { code: 00148, fvars: 00000 }
00169: ApplyArgToFn
00170: ApplyArgToFn
00171: LoadVar(00002)
00172: LoadFn { code: 00159, fvars: 00000 }
00173: ApplyArgToFn
00174: ApplyArgToFn
00175: ApplyArgToFn
00176:   Return
00177: LoadFn { code: 00161, fvars: 00005 }
00178:   Return
00179: LoadVar(00000)
00180:   Return
00181: LoadFn { code: 00179, fvars: 00000 }
00182:   Return
00183: LoadVar(00002)
00184: LoadVar(00001)
00185: LoadVar(00000)
00186: Unpack
00187: ApplyArgToFn
00188: ApplyArgToFn
00189:   Return
00190: LoadFn { code: 00183, fvars: 00002 }
00191:   Return
00192: LoadFn { code: 00190, fvars: 00001 }
00193:   Return
00194: LoadFn { code: 00112, fvars: 00003 }
00195: LoadFn { code: 00177, fvars: 00004 }
00196: PushString(""xs"")
00197: PushString(""x"")
00198: PushString("")
00199: ApplyArgToFn
00200: ApplyArgToFn
00201: LoadFn { code: 00181, fvars: 00000 }
00202: ApplyArgToFn
00203: ApplyArgToFn
00204: LoadVar(00001)
00205: LoadFn { code: 00192, fvars: 00000 }
00206: ApplyArgToFn
00207: ApplyArgToFn
00208: ApplyArgToFn
00209:   Return
00210: LoadFn { code: 00194, fvars: 00003 }
00211:   Return
00212: LoadFn { code: 00210, fvars: 00002 }
00213:   Return
00214: LoadVar(00000)
00215:   Return
00216: LoadFn { code: 00214, fvars: 00000 }
00217:   Return
00218: LoadFn { code: 00212, fvars: 00001 }
00219: PushString(""acc"")
00220: PushString(""xs"")
00221: PushString(""ys"")
00222: PushString("")
00223: ApplyArgToFn
00224: ApplyArgToFn
00225: ApplyArgToFn
00226: LoadFn { code: 00216, fvars: 00000 }
00227: ApplyArgToFn
00228: ApplyArgToFn
00229:   Return
00230: LoadVar(00000)
00231: LoadFn { code: 00000, fvars: 00000 }
00232: ApplyArgToFn
00233:   Return
00234: LoadFn { code: 00230, fvars: 00000 }
00235:   Return
00236: LoadVar(00001)
00237: LoadVar(00000)
00238: ApplyArgToFn
00239:   Return
00240: LoadFn { code: 00236, fvars: 00001 }
00241:   Return
00242: LoadFn { code: 00240, fvars: 00000 }
00243:   Return
00244: PushString("Foo")
00245: LoadVar(00000)
00246: ApplyArgToFn
00247: PushString("Bar")
00248: ApplyFnToArg
00249: PushString("")
00250: ApplyArgToFn
00251: PushString("Foo")
00252: LoadVar(00000)
00253: ApplyArgToFn
00254: PushString("X")
00255: PushString("Y")
00256: PushString("Z")
00257: PushString("")
00258: ApplyArgToFn
00259: ApplyArgToFn
00260: ApplyArgToFn
00261: ApplyFnToArg
00262: ApplyFnToArg
00263: PushString("A")
00264: PushString("B")
00265: PushString("")
00266: ApplyArgToFn
00267: ApplyArgToFn
00268: LoadVar(00000)
00269: ApplyArgToFn
00270: PushString("X")
00271: PushString("Y")
00272: PushString("Z")
00273: PushString("")
00274: ApplyArgToFn
00275: ApplyArgToFn
00276: ApplyArgToFn
00277: ApplyFnToArg
00278: ApplyFnToArg
00279: PushString("A")
00280: PushString("B")
00281: PushString("C")
00282: PushString("")
00283: ApplyArgToFn
00284: ApplyArgToFn
00285: ApplyArgToFn
00286: LoadVar(00000)
00287: ApplyArgToFn
00288: PushString("X")
00289: PushString("Y")
00290: PushString("")
00291: ApplyArgToFn
00292: ApplyArgToFn
00293: ApplyFnToArg
00294: ApplyFnToArg
00295: PushString("A")
00296: PushString("B")
00297: PushString("C")
00298: PushString("")
00299: ApplyArgToFn
00300: ApplyArgToFn
00301: ApplyArgToFn
00302: LoadVar(00000)
00303: ApplyArgToFn
00304: PushString("X")
00305: PushString("Y")
00306: PushString("Z")
00307: PushString("")
00308: ApplyArgToFn
00309: ApplyArgToFn
00310: ApplyArgToFn
00311: ApplyFnToArg
00312: ApplyFnToArg
00313:   Return
00314: PushString("")
00315: LoadVar(00002)
00316: ApplyArgToFn
00317: LoadVar(00001)
00318: ApplyFnToArg
00319: LoadVar(00000)
00320: ApplyFnToArg
00321: LoadVar(00003)
00322: ApplyArgToFn
00323:   Return
00324: LoadFn { code: 00314, fvars: 00003 }
00325:   Return
00326: LoadVar(00000)
00327:   Return
00328: LoadFn { code: 00326, fvars: 00000 }
00329:   Return
00330: LoadVar(00001)
00331: LoadVar(00000)
00332: ApplyArgToFn
00333:   Return
00334: LoadFn { code: 00330, fvars: 00001 }
00335:   Return
00336: LoadFn { code: 00334, fvars: 00000 }
00337:   Return
00338: LoadFn { code: 00244, fvars: 00000 }
00339: LoadFn { code: 00324, fvars: 00002 }
00340: PushString(""xs"")
00341: PushString(""ys"")
00342: PushString("")
00343: ApplyArgToFn
00344: ApplyArgToFn
00345: LoadFn { code: 00328, fvars: 00000 }
00346: ApplyArgToFn
00347: ApplyArgToFn
00348: PushString(""zip"")
00349: LoadFn { code: 00336, fvars: 00000 }
00350: ApplyArgToFn
00351: ApplyArgToFn
00352: ApplyArgToFn
00353:   Return
00354: LoadFn { code: 00218, fvars: 00000 }
00355: PushString(""zip"")
00356: LoadFn { code: 00234, fvars: 00000 }
00357: ApplyArgToFn
00358: ApplyArgToFn
00359: PushString(""zip"")
00360: LoadFn { code: 00242, fvars: 00000 }
00361: ApplyArgToFn
00362: ApplyArgToFn
00363: LoadFn { code: 00338, fvars: 00001 }
00364: ApplyFnToArg
00365:   Return
00366: LoadVar(00000)
00367: LoadVar(00001)
00368: ApplyArgToFn
00369:   Return
00370: LoadFn { code: 00366, fvars: 00001 }
00371:   Return
00372: LoadVar(00000)
00373:   Return
00374: LoadFn { code: 00372, fvars: 00000 }
00375:   Return
00376: LoadFn { code: 00370, fvars: 00000 }
00377: PushString(""xs"")
00378: PushString(""x"")
00379: PushString("")
00380: ApplyArgToFn
00381: ApplyArgToFn
00382: LoadFn { code: 00374, fvars: 00000 }
00383: ApplyArgToFn
00384: ApplyArgToFn
00385: LoadVar(00001)
00386: ApplyArgToFn
00387: PushString("")
00388: ApplyFnToArg
00389: LoadVar(00000)
00390: ApplyFnToArg
00391:   Return
00392: LoadVar(00000)
00393:   Return
00394: LoadFn { code: 00392, fvars: 00000 }
00395:   Return
00396: LoadVar(00001)
00397: LoadVar(00000)
00398: ApplyArgToFn
00399:   Return
00400: LoadFn { code: 00396, fvars: 00001 }
00401:   Return
00402: LoadFn { code: 00400, fvars: 00000 }
00403:   Return
00404: LoadFn { code: 00354, fvars: 00000 }
00405: LoadFn { code: 00376, fvars: 00001 }
00406: PushString(""xs"")
00407: LoadFn { code: 00394, fvars: 00000 }
00408: ApplyArgToFn
00409: ApplyArgToFn
00410: PushString(""rev"")
00411: LoadFn { code: 00402, fvars: 00000 }
00412: ApplyArgToFn
00413: ApplyArgToFn
00414: ApplyArgToFn
00415:   Return
00416: LoadFn { code: 00065, fvars: 00000 }
00417: PushString(""fold"")
00418: LoadFn { code: 00081, fvars: 00000 }
00419: ApplyArgToFn
00420: ApplyArgToFn
00421: PushString(""fold"")
00422: LoadFn { code: 00089, fvars: 00000 }
00423: ApplyArgToFn
00424: ApplyArgToFn
00425: LoadFn { code: 00404, fvars: 00000 }
00426: ApplyFnToArg
00427:   Return

[[[A, X], [B, Y], [C, Z]], [], [], [], []]

---

:== = (:== ~> { [:a, :b] => {
    __unpack(a, [:xs, :x] => {
        __unpack(b, [:ys, :y] => {
            __compare(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        __compare(a, b, { True }, { False })
    })
}})
[
    Foo == Foo
    Foo == Bar
    Foo(Bar) == Foo(Bar)
    Foo(Bar) == Foo(Baz)
    :a == :a
    :a == :b
    :f(:a) == :f(:a)
    :f(:a) == :g(:a)
]

(=
  :==
  (~>
    :==
    { (=>
        [ :a
          :b ]
        { (__unpack
            a
            (=>
              [ :xs
                :x ]
              { (__unpack
                  b
                  (=>
                    [ :ys
                      :y ]
                    { (__compare
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (__compare
                a
                b
                { True }
                { False }) }) }) }))
[ (==
    Foo
    Foo)
  (==
    Foo
    Bar)
  (==
    (Foo
      Bar)
    (Foo
      Bar))
  (==
    (Foo
      Bar)
    (Foo
      Baz))
  (==
    :a
    :a)
  (==
    :a
    :b)
  (==
    (:f
      :a)
    (:f
      :a))
  (==
    (:f
      :a)
    (:g
      :a)) ]

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "==" )
    ( ( =>
          =>
            ~>
              0
        "==" )
      =>
        ( ( =>
              =>
                0
            ( ( []
                "b" )
              "a" ) )
          =>
            =>
              ( ( ( =>
                      =>
                        =>
                          ( pop
                            2
                            1
                            0 )
                    1 )
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( pop
                                      2
                                      1
                                      0 )
                              2 )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "y" )
                                  "ys" ) )
                              =>
                                =>
                                  ( ( ( ( =>
                                            =>
                                              =>
                                                =>
                                                  ( if
                                                    3
                                                    2
                                                    1
                                                    0 )
                                          ( ( 6
                                              2 )
                                            0 ) )
                                        True )
                                      =>
                                        ( ( 7
                                            4 )
                                          2 ) )
                                    =>
                                      False ) ) )
                          =>
                            False ) ) )
                =>
                  ( ( ( ( =>
                            =>
                              =>
                                =>
                                  ( if
                                    3
                                    2
                                    1
                                    0 )
                          2 )
                        1 )
                      =>
                        True )
                    =>
                      False ) ) ) ) )
  =>
    ( ( ( ( ( ( ( ( []
                    ( ( 0
                        ( "f"
                          "a" ) )
                      ( "g"
                        "a" ) ) )
                  ( ( 0
                      ( "f"
                        "a" ) )
                    ( "f"
                      "a" ) ) )
                ( ( 0
                    "a" )
                  "b" ) )
              ( ( 0
                  "a" )
                "a" ) )
            ( ( 0
                ( Foo
                  Bar ) )
              ( Foo
                Baz ) ) )
          ( ( 0
              ( Foo
                Bar ) )
            ( Foo
              Bar ) ) )
        ( ( 0
            Foo )
          Bar ) )
      ( ( 0
          Foo )
        Foo ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: PushString("False")
00011:   Return
00012: PushString("True")
00013:   Return
00014: LoadVar(00003)
00015: LoadVar(00002)
00016: LoadVar(00001)
00017: LoadVar(00000)
00018: Cmp
00019: ApplyArgToFn
00020:   Return
00021: LoadFn { code: 00014, fvars: 00003 }
00022:   Return
00023: LoadFn { code: 00021, fvars: 00002 }
00024:   Return
00025: LoadFn { code: 00023, fvars: 00001 }
00026:   Return
00027: LoadFn { code: 00010, fvars: 00000 }
00028: LoadFn { code: 00012, fvars: 00000 }
00029: LoadVar(00001)
00030: LoadVar(00002)
00031: LoadFn { code: 00025, fvars: 00000 }
00032: ApplyArgToFn
00033: ApplyArgToFn
00034: ApplyArgToFn
00035: ApplyArgToFn
00036:   Return
00037: PushString("False")
00038:   Return
00039: LoadVar(00003)
00040: LoadVar(00002)
00041: LoadVar(00001)
00042: LoadVar(00000)
00043: Cmp
00044: ApplyArgToFn
00045:   Return
00046: LoadFn { code: 00039, fvars: 00003 }
00047:   Return
00048: LoadFn { code: 00046, fvars: 00002 }
00049:   Return
00050: LoadFn { code: 00048, fvars: 00001 }
00051:   Return
00052: LoadVar(00004)
00053: LoadVar(00007)
00054: ApplyArgToFn
00055: LoadVar(00002)
00056: ApplyFnToArg
00057:   Return
00058: PushString("False")
00059:   Return
00060: LoadVar(00002)
00061: LoadVar(00006)
00062: ApplyArgToFn
00063: LoadVar(00000)
00064: ApplyFnToArg
00065: LoadFn { code: 00050, fvars: 00000 }
00066: ApplyArgToFn
00067: PushString("True")
00068: ApplyFnToArg
00069: LoadFn { code: 00052, fvars: 00007 }
00070: ApplyFnToArg
00071: LoadFn { code: 00058, fvars: 00000 }
00072: ApplyFnToArg
00073:   Return
00074: LoadFn { code: 00060, fvars: 00006 }
00075:   Return
00076: LoadVar(00000)
00077:   Return
00078: LoadFn { code: 00076, fvars: 00000 }
00079:   Return
00080: LoadVar(00002)
00081: LoadVar(00001)
00082: LoadVar(00000)
00083: Unpack
00084: ApplyArgToFn
00085: ApplyArgToFn
00086:   Return
00087: LoadFn { code: 00080, fvars: 00002 }
00088:   Return
00089: LoadFn { code: 00087, fvars: 00001 }
00090:   Return
00091: LoadFn { code: 00037, fvars: 00000 }
00092: LoadFn { code: 00074, fvars: 00005 }
00093: PushString(""ys"")
00094: PushString(""y"")
00095: PushString("")
00096: ApplyArgToFn
00097: ApplyArgToFn
00098: LoadFn { code: 00078, fvars: 00000 }
00099: ApplyArgToFn
00100: ApplyArgToFn
00101: LoadVar(00002)
00102: LoadFn { code: 00089, fvars: 00000 }
00103: ApplyArgToFn
00104: ApplyArgToFn
00105: ApplyArgToFn
00106:   Return
00107: LoadFn { code: 00091, fvars: 00004 }
00108:   Return
00109: LoadVar(00000)
00110:   Return
00111: LoadFn { code: 00109, fvars: 00000 }
00112:   Return
00113: LoadVar(00002)
00114: LoadVar(00001)
00115: LoadVar(00000)
00116: Unpack
00117: ApplyArgToFn
00118: ApplyArgToFn
00119:   Return
00120: LoadFn { code: 00113, fvars: 00002 }
00121:   Return
00122: LoadFn { code: 00120, fvars: 00001 }
00123:   Return
00124: LoadFn { code: 00027, fvars: 00002 }
00125: LoadFn { code: 00107, fvars: 00003 }
00126: PushString(""xs"")
00127: PushString(""x"")
00128: PushString("")
00129: ApplyArgToFn
00130: ApplyArgToFn
00131: LoadFn { code: 00111, fvars: 00000 }
00132: ApplyArgToFn
00133: ApplyArgToFn
00134: LoadVar(00001)
00135: LoadFn { code: 00122, fvars: 00000 }
00136: ApplyArgToFn
00137: ApplyArgToFn
00138: ApplyArgToFn
00139:   Return
00140: LoadFn { code: 00124, fvars: 00002 }
00141:   Return
00142: LoadVar(00000)
00143:   Return
00144: LoadFn { code: 00142, fvars: 00000 }
00145:   Return
00146: LoadFn { code: 00140, fvars: 00001 }
00147: PushString(""a"")
00148: PushString(""b"")
00149: PushString("")
00150: ApplyArgToFn
00151: ApplyArgToFn
00152: LoadFn { code: 00144, fvars: 00000 }
00153: ApplyArgToFn
00154: ApplyArgToFn
00155:   Return
00156: LoadVar(00000)
00157: LoadFn { code: 00000, fvars: 00000 }
00158: ApplyArgToFn
00159:   Return
00160: LoadFn { code: 00156, fvars: 00000 }
00161:   Return
00162: LoadVar(00001)
00163: LoadVar(00000)
00164: ApplyArgToFn
00165:   Return
00166: LoadFn { code: 00162, fvars: 00001 }
00167:   Return
00168: LoadFn { code: 00166, fvars: 00000 }
00169:   Return
00170: PushString(""a"")
00171: PushString(""f"")
00172: ApplyArgToFn
00173: LoadVar(00000)
00174: ApplyArgToFn
00175: PushString(""a"")
00176: PushString(""g"")
00177: ApplyArgToFn
00178: ApplyFnToArg
00179: PushString("")
00180: ApplyArgToFn
00181: PushString(""a"")
00182: PushString(""f"")
00183: ApplyArgToFn
00184: LoadVar(00000)
00185: ApplyArgToFn
00186: PushString(""a"")
00187: PushString(""f"")
00188: ApplyArgToFn
00189: ApplyFnToArg
00190: ApplyFnToArg
00191: PushString(""a"")
00192: LoadVar(00000)
00193: ApplyArgToFn
00194: PushString(""b"")
00195: ApplyFnToArg
00196: ApplyFnToArg
00197: PushString(""a"")
00198: LoadVar(00000)
00199: ApplyArgToFn
00200: PushString(""a"")
00201: ApplyFnToArg
00202: ApplyFnToArg
00203: PushString("Bar")
00204: PushString("Foo")
00205: ApplyArgToFn
00206: LoadVar(00000)
00207: ApplyArgToFn
00208: PushString("Baz")
00209: PushString("Foo")
00210: ApplyArgToFn
00211: ApplyFnToArg
00212: ApplyFnToArg
00213: PushString("Bar")
00214: PushString("Foo")
00215: ApplyArgToFn
00216: LoadVar(00000)
00217: ApplyArgToFn
00218: PushString("Bar")
00219: PushString("Foo")
00220: ApplyArgToFn
00221: ApplyFnToArg
00222: ApplyFnToArg
00223: PushString("Foo")
00224: LoadVar(00000)
00225: ApplyArgToFn
00226: PushString("Bar")
00227: ApplyFnToArg
00228: ApplyFnToArg
00229: PushString("Foo")
00230: LoadVar(00000)
00231: ApplyArgToFn
00232: PushString("Foo")
00233: ApplyFnToArg
00234: ApplyFnToArg
00235:   Return
00236: LoadFn { code: 00146, fvars: 00000 }
00237: PushString(""=="")
00238: LoadFn { code: 00160, fvars: 00000 }
00239: ApplyArgToFn
00240: ApplyArgToFn
00241: PushString(""=="")
00242: LoadFn { code: 00168, fvars: 00000 }
00243: ApplyArgToFn
00244: ApplyArgToFn
00245: LoadFn { code: 00170, fvars: 00000 }
00246: ApplyFnToArg
00247:   Return

[True, False, True, False, True, False, True, False]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:rev = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:flatten = (:xs => {
    rev(fold([:acc, :x] => {
        fold([:acc, :x] => { acc(x) }, acc, x)
    }, [], xs))
})
flatten([[A, B], [C, D]])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :rev
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :flatten
  (=>
    :xs
    { (rev
        (fold
          (=>
            [ :acc
              :x ]
            { (fold
                (=>
                  [ :acc
                    :x ]
                  { (acc
                      x) })
                acc
                x) })
          [  ]
          xs)) }))
(flatten
  [ [ A
      B ]
    [ C
      D ] ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "flatten" )
            ( ( =>
                  =>
                    0
                "xs" )
              =>
                ( 1
                  ( ( ( 2
                        ( ( =>
                              =>
                                0
                            ( ( []
                                "x" )
                              "acc" ) )
                          =>
                            =>
                              ( ( ( 4
                                    ( ( =>
                                          =>
                                            0
                                        ( ( []
                                            "x" )
                                          "acc" ) )
                                      =>
                                        =>
                                          ( 1
                                            0 ) ) )
                                  1 )
                                0 ) ) )
                      [] )
                    0 ) ) ) )
          =>
            ( 0
              ( ( []
                  ( ( []
                      D )
                    C ) )
                ( ( []
                    B )
                  A ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00002)
00011:   Return
00012: LoadVar(00004)
00013: LoadVar(00005)
00014: ApplyArgToFn
00015: LoadVar(00003)
00016: LoadVar(00004)
00017: ApplyArgToFn
00018: LoadVar(00000)
00019: ApplyFnToArg
00020: ApplyFnToArg
00021: LoadVar(00001)
00022: ApplyFnToArg
00023:   Return
00024: LoadFn { code: 00012, fvars: 00005 }
00025:   Return
00026: LoadVar(00000)
00027:   Return
00028: LoadFn { code: 00026, fvars: 00000 }
00029:   Return
00030: LoadVar(00002)
00031: LoadVar(00001)
00032: LoadVar(00000)
00033: Unpack
00034: ApplyArgToFn
00035: ApplyArgToFn
00036:   Return
00037: LoadFn { code: 00030, fvars: 00002 }
00038:   Return
00039: LoadFn { code: 00037, fvars: 00001 }
00040:   Return
00041: LoadFn { code: 00010, fvars: 00002 }
00042: LoadFn { code: 00024, fvars: 00004 }
00043: PushString(""xs"")
00044: PushString(""x"")
00045: PushString("")
00046: ApplyArgToFn
00047: ApplyArgToFn
00048: LoadFn { code: 00028, fvars: 00000 }
00049: ApplyArgToFn
00050: ApplyArgToFn
00051: LoadVar(00000)
00052: LoadFn { code: 00039, fvars: 00000 }
00053: ApplyArgToFn
00054: ApplyArgToFn
00055: ApplyArgToFn
00056:   Return
00057: LoadFn { code: 00041, fvars: 00003 }
00058:   Return
00059: LoadFn { code: 00057, fvars: 00002 }
00060:   Return
00061: LoadVar(00000)
00062:   Return
00063: LoadFn { code: 00061, fvars: 00000 }
00064:   Return
00065: LoadFn { code: 00059, fvars: 00001 }
00066: PushString(""f"")
00067: PushString(""acc"")
00068: PushString(""xs"")
00069: PushString("")
00070: ApplyArgToFn
00071: ApplyArgToFn
00072: ApplyArgToFn
00073: LoadFn { code: 00063, fvars: 00000 }
00074: ApplyArgToFn
00075: ApplyArgToFn
00076:   Return
00077: LoadVar(00000)
00078: LoadFn { code: 00000, fvars: 00000 }
00079: ApplyArgToFn
00080:   Return
00081: LoadFn { code: 00077, fvars: 00000 }
00082:   Return
00083: LoadVar(00001)
00084: LoadVar(00000)
00085: ApplyArgToFn
00086:   Return
00087: LoadFn { code: 00083, fvars: 00001 }
00088:   Return
00089: LoadFn { code: 00087, fvars: 00000 }
00090:   Return
00091: PushString("A")
00092: PushString("B")
00093: PushString("")
00094: ApplyArgToFn
00095: ApplyArgToFn
00096: PushString("C")
00097: PushString("D")
00098: PushString("")
00099: ApplyArgToFn
00100: ApplyArgToFn
00101: PushString("")
00102: ApplyArgToFn
00103: ApplyArgToFn
00104: LoadVar(00000)
00105: ApplyArgToFn
00106:   Return
00107: LoadVar(00000)
00108: LoadVar(00001)
00109: ApplyArgToFn
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00000)
00114:   Return
00115: LoadFn { code: 00113, fvars: 00000 }
00116:   Return
00117: LoadFn { code: 00111, fvars: 00000 }
00118: PushString(""acc"")
00119: PushString(""x"")
00120: PushString("")
00121: ApplyArgToFn
00122: ApplyArgToFn
00123: LoadFn { code: 00115, fvars: 00000 }
00124: ApplyArgToFn
00125: ApplyArgToFn
00126: LoadVar(00004)
00127: ApplyArgToFn
00128: LoadVar(00001)
00129: ApplyFnToArg
00130: LoadVar(00000)
00131: ApplyFnToArg
00132:   Return
00133: LoadFn { code: 00117, fvars: 00004 }
00134:   Return
00135: LoadVar(00000)
00136:   Return
00137: LoadFn { code: 00135, fvars: 00000 }
00138:   Return
00139: LoadFn { code: 00133, fvars: 00003 }
00140: PushString(""acc"")
00141: PushString(""x"")
00142: PushString("")
00143: ApplyArgToFn
00144: ApplyArgToFn
00145: LoadFn { code: 00137, fvars: 00000 }
00146: ApplyArgToFn
00147: ApplyArgToFn
00148: LoadVar(00002)
00149: ApplyArgToFn
00150: PushString("")
00151: ApplyFnToArg
00152: LoadVar(00000)
00153: ApplyFnToArg
00154: LoadVar(00001)
00155: ApplyArgToFn
00156:   Return
00157: LoadVar(00000)
00158:   Return
00159: LoadFn { code: 00157, fvars: 00000 }
00160:   Return
00161: LoadVar(00001)
00162: LoadVar(00000)
00163: ApplyArgToFn
00164:   Return
00165: LoadFn { code: 00161, fvars: 00001 }
00166:   Return
00167: LoadFn { code: 00165, fvars: 00000 }
00168:   Return
00169: LoadFn { code: 00091, fvars: 00000 }
00170: LoadFn { code: 00139, fvars: 00002 }
00171: PushString(""xs"")
00172: LoadFn { code: 00159, fvars: 00000 }
00173: ApplyArgToFn
00174: ApplyArgToFn
00175: PushString(""flatten"")
00176: LoadFn { code: 00167, fvars: 00000 }
00177: ApplyArgToFn
00178: ApplyArgToFn
00179: ApplyArgToFn
00180:   Return
00181: LoadVar(00000)
00182: LoadVar(00001)
00183: ApplyArgToFn
00184:   Return
00185: LoadFn { code: 00181, fvars: 00001 }
00186:   Return
00187: LoadVar(00000)
00188:   Return
00189: LoadFn { code: 00187, fvars: 00000 }
00190:   Return
00191: LoadFn { code: 00185, fvars: 00000 }
00192: PushString(""xs"")
00193: PushString(""x"")
00194: PushString("")
00195: ApplyArgToFn
00196: ApplyArgToFn
00197: LoadFn { code: 00189, fvars: 00000 }
00198: ApplyArgToFn
00199: ApplyArgToFn
00200: LoadVar(00001)
00201: ApplyArgToFn
00202: PushString("")
00203: ApplyFnToArg
00204: LoadVar(00000)
00205: ApplyFnToArg
00206:   Return
00207: LoadVar(00000)
00208:   Return
00209: LoadFn { code: 00207, fvars: 00000 }
00210:   Return
00211: LoadVar(00001)
00212: LoadVar(00000)
00213: ApplyArgToFn
00214:   Return
00215: LoadFn { code: 00211, fvars: 00001 }
00216:   Return
00217: LoadFn { code: 00215, fvars: 00000 }
00218:   Return
00219: LoadFn { code: 00169, fvars: 00001 }
00220: LoadFn { code: 00191, fvars: 00001 }
00221: PushString(""xs"")
00222: LoadFn { code: 00209, fvars: 00000 }
00223: ApplyArgToFn
00224: ApplyArgToFn
00225: PushString(""rev"")
00226: LoadFn { code: 00217, fvars: 00000 }
00227: ApplyArgToFn
00228: ApplyArgToFn
00229: ApplyArgToFn
00230:   Return
00231: LoadFn { code: 00065, fvars: 00000 }
00232: PushString(""fold"")
00233: LoadFn { code: 00081, fvars: 00000 }
00234: ApplyArgToFn
00235: ApplyArgToFn
00236: PushString(""fold"")
00237: LoadFn { code: 00089, fvars: 00000 }
00238: ApplyArgToFn
00239: ApplyArgToFn
00240: LoadFn { code: 00219, fvars: 00000 }
00241: ApplyFnToArg
00242:   Return

[A, B, C, D]

---

:destructure = (:destructure ~> { [:acc, :compound] => {
    __unpack(compound, [:xs, :x] => {
        destructure(acc(x), xs)
    }, {
        [compound, acc]
    })
} })([])
destructure(Foo(Bar, Baz, Qux))

(=
  :destructure
  ((~>
    :destructure
    { (=>
        [ :acc
          :compound ]
        { (__unpack
            compound
            (=>
              [ :xs
                :x ]
              { (destructure
                  (acc
                    x)
                  xs) })
            { [ compound
                acc ] }) }) })
    [  ]))
(destructure
  (Foo
    Bar
    Baz
    Qux))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "destructure" )
    ( ( ( =>
            =>
              ~>
                0
          "destructure" )
        =>
          ( ( =>
                =>
                  0
              ( ( []
                  "compound" )
                "acc" ) )
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( 4
                              ( 3
                                0 ) )
                            1 ) ) )
                  =>
                    ( ( []
                        2 )
                      1 ) ) ) )
      [] ) )
  =>
    ( 0
      ( ( ( Foo
            Bar )
          Baz )
        Qux ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00001)
00011: LoadVar(00002)
00012: PushString("")
00013: ApplyArgToFn
00014: ApplyArgToFn
00015:   Return
00016: LoadVar(00000)
00017: LoadVar(00003)
00018: ApplyArgToFn
00019: LoadVar(00004)
00020: ApplyArgToFn
00021: LoadVar(00001)
00022: ApplyFnToArg
00023:   Return
00024: LoadFn { code: 00016, fvars: 00004 }
00025:   Return
00026: LoadVar(00000)
00027:   Return
00028: LoadFn { code: 00026, fvars: 00000 }
00029:   Return
00030: LoadVar(00002)
00031: LoadVar(00001)
00032: LoadVar(00000)
00033: Unpack
00034: ApplyArgToFn
00035: ApplyArgToFn
00036:   Return
00037: LoadFn { code: 00030, fvars: 00002 }
00038:   Return
00039: LoadFn { code: 00037, fvars: 00001 }
00040:   Return
00041: LoadFn { code: 00010, fvars: 00002 }
00042: LoadFn { code: 00024, fvars: 00003 }
00043: PushString(""xs"")
00044: PushString(""x"")
00045: PushString("")
00046: ApplyArgToFn
00047: ApplyArgToFn
00048: LoadFn { code: 00028, fvars: 00000 }
00049: ApplyArgToFn
00050: ApplyArgToFn
00051: LoadVar(00000)
00052: LoadFn { code: 00039, fvars: 00000 }
00053: ApplyArgToFn
00054: ApplyArgToFn
00055: ApplyArgToFn
00056:   Return
00057: LoadFn { code: 00041, fvars: 00002 }
00058:   Return
00059: LoadVar(00000)
00060:   Return
00061: LoadFn { code: 00059, fvars: 00000 }
00062:   Return
00063: LoadFn { code: 00057, fvars: 00001 }
00064: PushString(""acc"")
00065: PushString(""compound"")
00066: PushString("")
00067: ApplyArgToFn
00068: ApplyArgToFn
00069: LoadFn { code: 00061, fvars: 00000 }
00070: ApplyArgToFn
00071: ApplyArgToFn
00072:   Return
00073: LoadVar(00000)
00074: LoadFn { code: 00000, fvars: 00000 }
00075: ApplyArgToFn
00076:   Return
00077: LoadFn { code: 00073, fvars: 00000 }
00078:   Return
00079: LoadVar(00001)
00080: LoadVar(00000)
00081: ApplyArgToFn
00082:   Return
00083: LoadFn { code: 00079, fvars: 00001 }
00084:   Return
00085: LoadFn { code: 00083, fvars: 00000 }
00086:   Return
00087: PushString("Qux")
00088: PushString("Baz")
00089: PushString("Bar")
00090: PushString("Foo")
00091: ApplyArgToFn
00092: ApplyArgToFn
00093: ApplyArgToFn
00094: LoadVar(00000)
00095: ApplyArgToFn
00096:   Return
00097: LoadFn { code: 00063, fvars: 00000 }
00098: PushString(""destructure"")
00099: LoadFn { code: 00077, fvars: 00000 }
00100: ApplyArgToFn
00101: ApplyArgToFn
00102: PushString("")
00103: ApplyFnToArg
00104: PushString(""destructure"")
00105: LoadFn { code: 00085, fvars: 00000 }
00106: ApplyArgToFn
00107: ApplyArgToFn
00108: LoadFn { code: 00087, fvars: 00000 }
00109: ApplyFnToArg
00110:   Return

[Foo, [Bar, Baz, Qux]]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:apply = ([:f, :xs] => {
    fold([:f, :x] => { f(x) }, f, xs)
})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:map = ([:f, :xs] => {
    fold([:xs, :x] => { xs(f(x)) }, [], reverse(xs))
})
:flatten = (:xs => {
    reverse(fold([:acc, :x] => {
        fold([:acc, :x] => { acc(x) }, acc, x)
    }, [], xs))
})
:zip = (:zip ~> { [:acc, :xs, :ys] => {
    __unpack(xs, [:xs, :x] => {
        __unpack(ys, [:ys, :y] => { zip(acc([x, y]), xs, ys) }, {})
    }, {
        __unpack(ys, [:ys, :y] => {}, { acc })
    })
}})
:zip = ([:xs, :ys] => {
    reverse(zip([], xs, ys))
})
:destructure = (:destructure ~> { [:acc, :compound] => {
    __unpack(compound, [:xs, :x] => {
        destructure(acc(x), xs)
    }, {
        [compound, acc]
    })
} })([])
:== = (:== ~> { [:a, :b] => {
    __unpack(a, [:xs, :x] => {
        __unpack(b, [:ys, :y] => {
            __compare(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        __compare(a, b, { True }, { False })
    })
}})
:first = (:xs => {
    __unpack(xs, [:_, :x] => { x }, { xs })
})
:second = (:xs => {
    __unpack(xs, [:xs, :_] => { first(xs) }, { xs })
})
:join = fold([:acc, :pair] => {
    :xvar = first(pair)
    :xval = second(pair)
    fold([:_, :pair] => {
        :yvar = first(pair)
        :yval = second(pair)
        __compare(xvar, yvar, {
            __compare(xval == yval, False, {
                no-match!([[xvar, xval], [yvar, yval]])
            }, {})
        }, {})
    }, [], acc)
    acc(pair)
}, [])
:unify = (:unify ~> { [:pattern, :value] => {
    __unpack(pattern, [:type, :pattern] => {
        __unpack(type, [:type, :f] => {
            __compare(type, Compound, {
                :v = destructure(value)
                :vf = first(v)
                :vargs = second(v)
                :zipped = reverse(zip(pattern(f), vargs(vf)))
                __compare(zipped, [], {
                    no-match!([type(f, pattern), value])
                }, {
                    join(flatten(map(apply(unify), zipped)))
                })
            }, {
                invalid!(type(f, pattern))
            })
        }, {
            __compare(type, Binding, {
                [[pattern, value]]
            }, {
                __compare(pattern == value, True, {}, {
                    no-match!([pattern, value])
                })
            })
        })
    }, {
        invalid!(pattern)
    })
}})
:-> = ([:pattern, :body, :value] => {
    __handle( {
        :args = map(second, unify(pattern, value))
        __compare(args, [], {
            body()
        }, {
            apply(body, args)
        })
    }, no-match!, [:_, :arg] => {
        no-match!(arg)
    })
})
__handle({
    [
        (Foo -> { Bar })(Foo)
        (:x -> { x })(Foo)
        (:x -> { Bar })(Foo)
        (Pair(Foo, Bar) -> { Foo })(Pair(Foo, Bar))
        (Pair(:x, :y) -> { y })(Pair(Foo, Bar))
        (Pair(:x, Bar) -> { x })(Pair(Foo, Bar))
        (Pair(:x, :x) -> { x })(Pair(Bar, Bar))
        (:foo(:x, :y) -> { y })(Pair(Foo, Bar))
        (Pair(:x, :x) -> { x })(Pair(Foo, Bar))
    ]
}, no-match!, [:r, :arg] => {
    r(NoMatch(arg))
})

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :apply
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :f
            :x ]
          { (f
              x) })
        f
        xs) }))
(=
  :reverse
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :map
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              (f
                x)) })
        [  ]
        (reverse
          xs)) }))
(=
  :flatten
  (=>
    :xs
    { (reverse
        (fold
          (=>
            [ :acc
              :x ]
            { (fold
                (=>
                  [ :acc
                    :x ]
                  { (acc
                      x) })
                acc
                x) })
          [  ]
          xs)) }))
(=
  :zip
  (~>
    :zip
    { (=>
        [ :acc
          :xs
          :ys ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (__unpack
                  ys
                  (=>
                    [ :ys
                      :y ]
                    { (zip
                        (acc
                          [ x
                            y ])
                        xs
                        ys) })
                  {  }) })
            { (__unpack
                ys
                (=>
                  [ :ys
                    :y ]
                  {  })
                { acc }) }) }) }))
(=
  :zip
  (=>
    [ :xs
      :ys ]
    { (reverse
        (zip
          [  ]
          xs
          ys)) }))
(=
  :destructure
  ((~>
    :destructure
    { (=>
        [ :acc
          :compound ]
        { (__unpack
            compound
            (=>
              [ :xs
                :x ]
              { (destructure
                  (acc
                    x)
                  xs) })
            { [ compound
                acc ] }) }) })
    [  ]))
(=
  :==
  (~>
    :==
    { (=>
        [ :a
          :b ]
        { (__unpack
            a
            (=>
              [ :xs
                :x ]
              { (__unpack
                  b
                  (=>
                    [ :ys
                      :y ]
                    { (__compare
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (__compare
                a
                b
                { True }
                { False }) }) }) }))
(=
  :first
  (=>
    :xs
    { (__unpack
        xs
        (=>
          [ :_
            :x ]
          { x })
        { xs }) }))
(=
  :second
  (=>
    :xs
    { (__unpack
        xs
        (=>
          [ :xs
            :_ ]
          { (first
              xs) })
        { xs }) }))
(=
  :join
  (fold
    (=>
      [ :acc
        :pair ]
      { (=
          :xvar
          (first
            pair))
        (=
          :xval
          (second
            pair))
        (fold
          (=>
            [ :_
              :pair ]
            { (=
                :yvar
                (first
                  pair))
              (=
                :yval
                (second
                  pair))
              (__compare
                xvar
                yvar
                { (__compare
                    (==
                      xval
                      yval)
                    False
                    { (no-match!
                        [ [ xvar
                            xval ]
                          [ yvar
                            yval ] ]) }
                    {  }) }
                {  }) })
          [  ]
          acc)
        (acc
          pair) })
    [  ]))
(=
  :unify
  (~>
    :unify
    { (=>
        [ :pattern
          :value ]
        { (__unpack
            pattern
            (=>
              [ :type
                :pattern ]
              { (__unpack
                  type
                  (=>
                    [ :type
                      :f ]
                    { (__compare
                        type
                        Compound
                        { (=
                            :v
                            (destructure
                              value))
                          (=
                            :vf
                            (first
                              v))
                          (=
                            :vargs
                            (second
                              v))
                          (=
                            :zipped
                            (reverse
                              (zip
                                (pattern
                                  f)
                                (vargs
                                  vf))))
                          (__compare
                            zipped
                            [  ]
                            { (no-match!
                                [ (type
                                    f
                                    pattern)
                                  value ]) }
                            { (join
                                (flatten
                                  (map
                                    (apply
                                      unify)
                                    zipped))) }) }
                        { (invalid!
                            (type
                              f
                              pattern)) }) })
                  { (__compare
                      type
                      Binding
                      { [ [ pattern
                            value ] ] }
                      { (__compare
                          (==
                            pattern
                            value)
                          True
                          {  }
                          { (no-match!
                              [ pattern
                                value ]) }) }) }) })
            { (invalid!
                pattern) }) }) }))
(=
  :->
  (=>
    [ :pattern
      :body
      :value ]
    { (__handle
        { (=
            :args
            (map
              second
              (unify
                pattern
                value)))
          (__compare
            args
            [  ]
            { (body) }
            { (apply
                body
                args) }) }
        no-match!
        (=>
          [ :_
            :arg ]
          { (no-match!
              arg) })) }))
(__handle
  { [ ((->
        Foo
        { Bar })
        Foo)
      ((->
        :x
        { x })
        Foo)
      ((->
        :x
        { Bar })
        Foo)
      ((->
        (Pair
          Foo
          Bar)
        { Foo })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          :x
          :y)
        { y })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          :x
          Bar)
        { x })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          :x
          :x)
        { x })
        (Pair
          Bar
          Bar))
      ((->
        (:foo
          :x
          :y)
        { y })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          :x
          :x)
        { x })
        (Pair
          Foo
          Bar)) ] }
  no-match!
  (=>
    [ :r
      :arg ]
    { (r
        (NoMatch
          arg)) }))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "apply" )
        ( ( =>
              =>
                0
            ( ( []
                "xs" )
              "f" ) )
          =>
            =>
              ( ( ( 2
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "f" ) )
                      =>
                        =>
                          ( 1
                            0 ) ) )
                  1 )
                0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "reverse" )
            ( ( =>
                  =>
                    0
                "xs" )
              =>
                ( ( ( 2
                      ( ( =>
                            =>
                              0
                          ( ( []
                              "x" )
                            "xs" ) )
                        =>
                          =>
                            ( 1
                              0 ) ) )
                    [] )
                  0 ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "map" )
                ( ( =>
                      =>
                        0
                    ( ( []
                        "xs" )
                      "f" ) )
                  =>
                    =>
                      ( ( ( 4
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "x" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 1
                                    ( 3
                                      0 ) ) ) )
                          [] )
                        ( 2
                          0 ) ) ) )
              =>
                ( ( ( =>
                        =>
                          =>
                            ( 0
                              1 )
                      "flatten" )
                    ( ( =>
                          =>
                            0
                        "xs" )
                      =>
                        ( 2
                          ( ( ( 4
                                ( ( =>
                                      =>
                                        0
                                    ( ( []
                                        "x" )
                                      "acc" ) )
                                  =>
                                    =>
                                      ( ( ( 6
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "x" )
                                                  "acc" ) )
                                              =>
                                                =>
                                                  ( 1
                                                    0 ) ) )
                                          1 )
                                        0 ) ) )
                              [] )
                            0 ) ) ) )
                  =>
                    ( ( ( =>
                            =>
                              =>
                                ( 0
                                  1 )
                          "zip" )
                        ( ( =>
                              =>
                                ~>
                                  0
                            "zip" )
                          =>
                            ( ( =>
                                  =>
                                    0
                                ( ( ( []
                                      "ys" )
                                    "xs" )
                                  "acc" ) )
                              =>
                                =>
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( pop
                                                  2
                                                  1
                                                  0 )
                                          1 )
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "x" )
                                              "xs" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    2 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "y" )
                                                        "ys" ) )
                                                    =>
                                                      =>
                                                        ( ( ( 7
                                                              ( 6
                                                                ( ( []
                                                                    0 )
                                                                  2 ) ) )
                                                            3 )
                                                          1 ) ) )
                                                =>
                                                  [] ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              1 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "y" )
                                                  "ys" ) )
                                              =>
                                                =>
                                                  [] ) )
                                          =>
                                            4 ) ) ) ) )
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( 0
                                      1 )
                              "zip" )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "ys" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 5
                                    ( ( ( 2
                                          [] )
                                        1 )
                                      0 ) ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( 0
                                          1 )
                                  "destructure" )
                                ( ( ( =>
                                        =>
                                          ~>
                                            0
                                      "destructure" )
                                    =>
                                      ( ( =>
                                            =>
                                              0
                                          ( ( []
                                              "compound" )
                                            "acc" ) )
                                        =>
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "x" )
                                                      "xs" ) )
                                                  =>
                                                    =>
                                                      ( ( 4
                                                          ( 3
                                                            0 ) )
                                                        1 ) ) )
                                              =>
                                                ( ( []
                                                    2 )
                                                  1 ) ) ) )
                                  [] ) )
                              =>
                                ( ( ( =>
                                        =>
                                          =>
                                            ( 0
                                              1 )
                                      "==" )
                                    ( ( =>
                                          =>
                                            ~>
                                              0
                                        "==" )
                                      =>
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "b" )
                                              "a" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    1 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "x" )
                                                        "xs" ) )
                                                    =>
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( pop
                                                                      2
                                                                      1
                                                                      0 )
                                                              2 )
                                                            ( ( =>
                                                                  =>
                                                                    0
                                                                ( ( []
                                                                    "y" )
                                                                  "ys" ) )
                                                              =>
                                                                =>
                                                                  ( ( ( ( =>
                                                                            =>
                                                                              =>
                                                                                =>
                                                                                  ( if
                                                                                    3
                                                                                    2
                                                                                    1
                                                                                    0 )
                                                                          ( ( 6
                                                                              2 )
                                                                            0 ) )
                                                                        True )
                                                                      =>
                                                                        ( ( 7
                                                                            4 )
                                                                          2 ) )
                                                                    =>
                                                                      False ) ) )
                                                          =>
                                                            False ) ) )
                                                =>
                                                  ( ( ( ( =>
                                                            =>
                                                              =>
                                                                =>
                                                                  ( if
                                                                    3
                                                                    2
                                                                    1
                                                                    0 )
                                                          2 )
                                                        1 )
                                                      =>
                                                        True )
                                                    =>
                                                      False ) ) ) ) )
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( 0
                                                  1 )
                                          "first" )
                                        ( ( =>
                                              =>
                                                0
                                            "xs" )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "x" )
                                                      "_" ) )
                                                  =>
                                                    =>
                                                      0 ) )
                                              =>
                                                1 ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( 0
                                                      1 )
                                              "second" )
                                            ( ( =>
                                                  =>
                                                    0
                                                "xs" )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( pop
                                                              2
                                                              1
                                                              0 )
                                                      0 )
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "_" )
                                                          "xs" ) )
                                                      =>
                                                        =>
                                                          ( 3
                                                            1 ) ) )
                                                  =>
                                                    1 ) ) )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( 0
                                                          1 )
                                                  "join" )
                                                ( ( 10
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "pair" )
                                                          "acc" ) )
                                                      =>
                                                        =>
                                                          ( ( ( =>
                                                                  =>
                                                                    =>
                                                                      ( 0
                                                                        1 )
                                                                "xvar" )
                                                              ( 3
                                                                0 ) )
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( 0
                                                                            1 )
                                                                    "xval" )
                                                                  ( 3
                                                                    1 ) )
                                                                =>
                                                                  ( =>
                                                                      ( 4
                                                                        3 )
                                                                    ( ( ( 14
                                                                          ( ( =>
                                                                                =>
                                                                                  0
                                                                              ( ( []
                                                                                  "pair" )
                                                                                "_" ) )
                                                                            =>
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( 0
                                                                                              1 )
                                                                                      "yvar" )
                                                                                    ( 7
                                                                                      0 ) )
                                                                                  =>
                                                                                    ( ( ( =>
                                                                                            =>
                                                                                              =>
                                                                                                ( 0
                                                                                                  1 )
                                                                                          "yval" )
                                                                                        ( 7
                                                                                          1 ) )
                                                                                      =>
                                                                                        ( ( ( ( =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        ( if
                                                                                                          3
                                                                                                          2
                                                                                                          1
                                                                                                          0 )
                                                                                                5 )
                                                                                              1 )
                                                                                            =>
                                                                                              ( ( ( ( =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            =>
                                                                                                              ( if
                                                                                                                3
                                                                                                                2
                                                                                                                1
                                                                                                                0 )
                                                                                                      ( ( 11
                                                                                                          5 )
                                                                                                        1 ) )
                                                                                                    False )
                                                                                                  =>
                                                                                                    ( no-match!
                                                                                                      ( ( []
                                                                                                          ( ( []
                                                                                                              2 )
                                                                                                            3 ) )
                                                                                                        ( ( []
                                                                                                            6 )
                                                                                                          7 ) ) ) )
                                                                                                =>
                                                                                                  [] ) )
                                                                                          =>
                                                                                            [] ) ) ) ) )
                                                                        [] )
                                                                      3 ) ) ) ) ) )
                                                  [] ) )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( 0
                                                              1 )
                                                      "unify" )
                                                    ( ( =>
                                                          =>
                                                            ~>
                                                              0
                                                        "unify" )
                                                      =>
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( []
                                                                "value" )
                                                              "pattern" ) )
                                                          =>
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( pop
                                                                            2
                                                                            1
                                                                            0 )
                                                                    1 )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "pattern" )
                                                                        "type" ) )
                                                                    =>
                                                                      =>
                                                                        ( ( ( =>
                                                                                =>
                                                                                  =>
                                                                                    ( pop
                                                                                      2
                                                                                      1
                                                                                      0 )
                                                                              1 )
                                                                            ( ( =>
                                                                                  =>
                                                                                    0
                                                                                ( ( []
                                                                                    "f" )
                                                                                  "type" ) )
                                                                              =>
                                                                                =>
                                                                                  ( ( ( ( =>
                                                                                            =>
                                                                                              =>
                                                                                                =>
                                                                                                  ( if
                                                                                                    3
                                                                                                    2
                                                                                                    1
                                                                                                    0 )
                                                                                          1 )
                                                                                        Compound )
                                                                                      =>
                                                                                        ( ( ( =>
                                                                                                =>
                                                                                                  =>
                                                                                                    ( 0
                                                                                                      1 )
                                                                                              "v" )
                                                                                            ( 12
                                                                                              5 ) )
                                                                                          =>
                                                                                            ( ( ( =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        ( 0
                                                                                                          1 )
                                                                                                  "vf" )
                                                                                                ( 11
                                                                                                  0 ) )
                                                                                              =>
                                                                                                ( ( ( =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            ( 0
                                                                                                              1 )
                                                                                                      "vargs" )
                                                                                                    ( 11
                                                                                                      1 ) )
                                                                                                  =>
                                                                                                    ( ( ( =>
                                                                                                            =>
                                                                                                              =>
                                                                                                                ( 0
                                                                                                                  1 )
                                                                                                          "zipped" )
                                                                                                        ( 20
                                                                                                          ( ( 16
                                                                                                              ( 6
                                                                                                                4 ) )
                                                                                                            ( 0
                                                                                                              1 ) ) ) )
                                                                                                      =>
                                                                                                        ( ( ( ( =>
                                                                                                                  =>
                                                                                                                    =>
                                                                                                                      =>
                                                                                                                        ( if
                                                                                                                          3
                                                                                                                          2
                                                                                                                          1
                                                                                                                          0 )
                                                                                                                0 )
                                                                                                              [] )
                                                                                                            =>
                                                                                                              ( no-match!
                                                                                                                ( ( []
                                                                                                                    10 )
                                                                                                                  ( ( 7
                                                                                                                      6 )
                                                                                                                    8 ) ) ) )
                                                                                                          =>
                                                                                                            ( 13
                                                                                                              ( 20
                                                                                                                ( ( 21
                                                                                                                    ( 23
                                                                                                                      12 ) )
                                                                                                                  1 ) ) ) ) ) ) ) ) )
                                                                                    =>
                                                                                      ( invalid!
                                                                                        ( ( 2
                                                                                            1 )
                                                                                          3 ) ) ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    2 )
                                                                                  Binding )
                                                                                =>
                                                                                  ( []
                                                                                    ( ( []
                                                                                        4 )
                                                                                      2 ) ) )
                                                                              =>
                                                                                ( ( ( ( =>
                                                                                          =>
                                                                                            =>
                                                                                              =>
                                                                                                ( if
                                                                                                  3
                                                                                                  2
                                                                                                  1
                                                                                                  0 )
                                                                                        ( ( 10
                                                                                            2 )
                                                                                          4 ) )
                                                                                      True )
                                                                                    =>
                                                                                      [] )
                                                                                  =>
                                                                                    ( no-match!
                                                                                      ( ( []
                                                                                          5 )
                                                                                        3 ) ) ) ) ) ) )
                                                                =>
                                                                  ( invalid!
                                                                    2 ) ) ) ) )
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( 0
                                                                  1 )
                                                          "->" )
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( ( []
                                                                  "value" )
                                                                "body" )
                                                              "pattern" ) )
                                                          =>
                                                            =>
                                                              =>
                                                                ( ( ( =>
                                                                        =>
                                                                          =>
                                                                            ( try
                                                                              2
                                                                              1
                                                                              0 )
                                                                      =>
                                                                        ( ( ( =>
                                                                                =>
                                                                                  =>
                                                                                    ( 0
                                                                                      1 )
                                                                              "args" )
                                                                            ( ( 13
                                                                                6 )
                                                                              ( ( 4
                                                                                  3 )
                                                                                1 ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    0 )
                                                                                  [] )
                                                                                =>
                                                                                  ( 4
                                                                                    [] ) )
                                                                              =>
                                                                                ( ( 17
                                                                                    4 )
                                                                                  1 ) ) ) )
                                                                    no-match! )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "arg" )
                                                                        "_" ) )
                                                                    =>
                                                                      =>
                                                                        ( no-match!
                                                                          0 ) ) ) ) )
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( try
                                                                      2
                                                                      1
                                                                      0 )
                                                              =>
                                                                ( ( ( ( ( ( ( ( ( []
                                                                                  ( ( ( 1
                                                                                        ( ( Compound
                                                                                            ( Value
                                                                                              Pair ) )
                                                                                          ( ( []
                                                                                              ( Binding
                                                                                                "x" ) )
                                                                                            ( Binding
                                                                                              "x" ) ) ) )
                                                                                      =>
                                                                                        =>
                                                                                          0 )
                                                                                    ( ( Pair
                                                                                        Foo )
                                                                                      Bar ) ) )
                                                                                ( ( ( 1
                                                                                      ( ( Compound
                                                                                          ( Binding
                                                                                            "foo" ) )
                                                                                        ( ( []
                                                                                            ( Binding
                                                                                              "y" ) )
                                                                                          ( Binding
                                                                                            "x" ) ) ) )
                                                                                    =>
                                                                                      =>
                                                                                        =>
                                                                                          1 )
                                                                                  ( ( Pair
                                                                                      Foo )
                                                                                    Bar ) ) )
                                                                              ( ( ( 1
                                                                                    ( ( Compound
                                                                                        ( Value
                                                                                          Pair ) )
                                                                                      ( ( []
                                                                                          ( Binding
                                                                                            "x" ) )
                                                                                        ( Binding
                                                                                          "x" ) ) ) )
                                                                                  =>
                                                                                    =>
                                                                                      0 )
                                                                                ( ( Pair
                                                                                    Bar )
                                                                                  Bar ) ) )
                                                                            ( ( ( 1
                                                                                  ( ( Compound
                                                                                      ( Value
                                                                                        Pair ) )
                                                                                    ( ( []
                                                                                        ( Value
                                                                                          Bar ) )
                                                                                      ( Binding
                                                                                        "x" ) ) ) )
                                                                                =>
                                                                                  0 )
                                                                              ( ( Pair
                                                                                  Foo )
                                                                                Bar ) ) )
                                                                          ( ( ( 1
                                                                                ( ( Compound
                                                                                    ( Value
                                                                                      Pair ) )
                                                                                  ( ( []
                                                                                      ( Binding
                                                                                        "y" ) )
                                                                                    ( Binding
                                                                                      "x" ) ) ) )
                                                                              =>
                                                                                =>
                                                                                  0 )
                                                                            ( ( Pair
                                                                                Foo )
                                                                              Bar ) ) )
                                                                        ( ( ( 1
                                                                              ( Value
                                                                                ( ( Pair
                                                                                    Foo )
                                                                                  Bar ) ) )
                                                                            =>
                                                                              Foo )
                                                                          ( ( Pair
                                                                              Foo )
                                                                            Bar ) ) )
                                                                      ( ( ( 1
                                                                            ( Binding
                                                                              "x" ) )
                                                                          =>
                                                                            Bar )
                                                                        Foo ) )
                                                                    ( ( ( 1
                                                                          ( Binding
                                                                            "x" ) )
                                                                        =>
                                                                          0 )
                                                                      Foo ) )
                                                                  ( ( ( 1
                                                                        ( Value
                                                                          Foo ) )
                                                                      =>
                                                                        Bar )
                                                                    Foo ) ) )
                                                            no-match! )
                                                          ( ( =>
                                                                =>
                                                                  0
                                                              ( ( []
                                                                  "arg" )
                                                                "r" ) )
                                                            =>
                                                              =>
                                                                ( 1
                                                                  ( NoMatch
                                                                    0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00002)
00011:   Return
00012: LoadVar(00004)
00013: LoadVar(00005)
00014: ApplyArgToFn
00015: LoadVar(00003)
00016: LoadVar(00004)
00017: ApplyArgToFn
00018: LoadVar(00000)
00019: ApplyFnToArg
00020: ApplyFnToArg
00021: LoadVar(00001)
00022: ApplyFnToArg
00023:   Return
00024: LoadFn { code: 00012, fvars: 00005 }
00025:   Return
00026: LoadVar(00000)
00027:   Return
00028: LoadFn { code: 00026, fvars: 00000 }
00029:   Return
00030: LoadVar(00002)
00031: LoadVar(00001)
00032: LoadVar(00000)
00033: Unpack
00034: ApplyArgToFn
00035: ApplyArgToFn
00036:   Return
00037: LoadFn { code: 00030, fvars: 00002 }
00038:   Return
00039: LoadFn { code: 00037, fvars: 00001 }
00040:   Return
00041: LoadFn { code: 00010, fvars: 00002 }
00042: LoadFn { code: 00024, fvars: 00004 }
00043: PushString(""xs"")
00044: PushString(""x"")
00045: PushString("")
00046: ApplyArgToFn
00047: ApplyArgToFn
00048: LoadFn { code: 00028, fvars: 00000 }
00049: ApplyArgToFn
00050: ApplyArgToFn
00051: LoadVar(00000)
00052: LoadFn { code: 00039, fvars: 00000 }
00053: ApplyArgToFn
00054: ApplyArgToFn
00055: ApplyArgToFn
00056:   Return
00057: LoadFn { code: 00041, fvars: 00003 }
00058:   Return
00059: LoadFn { code: 00057, fvars: 00002 }
00060:   Return
00061: LoadVar(00000)
00062:   Return
00063: LoadFn { code: 00061, fvars: 00000 }
00064:   Return
00065: LoadFn { code: 00059, fvars: 00001 }
00066: PushString(""f"")
00067: PushString(""acc"")
00068: PushString(""xs"")
00069: PushString("")
00070: ApplyArgToFn
00071: ApplyArgToFn
00072: ApplyArgToFn
00073: LoadFn { code: 00063, fvars: 00000 }
00074: ApplyArgToFn
00075: ApplyArgToFn
00076:   Return
00077: LoadVar(00000)
00078: LoadFn { code: 00000, fvars: 00000 }
00079: ApplyArgToFn
00080:   Return
00081: LoadFn { code: 00077, fvars: 00000 }
00082:   Return
00083: LoadVar(00001)
00084: LoadVar(00000)
00085: ApplyArgToFn
00086:   Return
00087: LoadFn { code: 00083, fvars: 00001 }
00088:   Return
00089: LoadFn { code: 00087, fvars: 00000 }
00090:   Return
00091: LoadVar(00004)
00092:   Return
00093: PushString("")
00094:   Return
00095: LoadFn { code: 00093, fvars: 00000 }
00096:   Return
00097: LoadVar(00000)
00098:   Return
00099: LoadFn { code: 00097, fvars: 00000 }
00100:   Return
00101: LoadVar(00002)
00102: LoadVar(00001)
00103: LoadVar(00000)
00104: Unpack
00105: ApplyArgToFn
00106: ApplyArgToFn
00107:   Return
00108: LoadFn { code: 00101, fvars: 00002 }
00109:   Return
00110: LoadFn { code: 00108, fvars: 00001 }
00111:   Return
00112: LoadFn { code: 00091, fvars: 00004 }
00113: LoadFn { code: 00095, fvars: 00000 }
00114: PushString(""ys"")
00115: PushString(""y"")
00116: PushString("")
00117: ApplyArgToFn
00118: ApplyArgToFn
00119: LoadFn { code: 00099, fvars: 00000 }
00120: ApplyArgToFn
00121: ApplyArgToFn
00122: LoadVar(00001)
00123: LoadFn { code: 00110, fvars: 00000 }
00124: ApplyArgToFn
00125: ApplyArgToFn
00126: ApplyArgToFn
00127:   Return
00128: PushString("")
00129:   Return
00130: LoadVar(00002)
00131: LoadVar(00000)
00132: PushString("")
00133: ApplyArgToFn
00134: ApplyArgToFn
00135: LoadVar(00006)
00136: ApplyArgToFn
00137: LoadVar(00007)
00138: ApplyArgToFn
00139: LoadVar(00003)
00140: ApplyFnToArg
00141: LoadVar(00001)
00142: ApplyFnToArg
00143:   Return
00144: LoadFn { code: 00130, fvars: 00007 }
00145:   Return
00146: LoadVar(00000)
00147:   Return
00148: LoadFn { code: 00146, fvars: 00000 }
00149:   Return
00150: LoadVar(00002)
00151: LoadVar(00001)
00152: LoadVar(00000)
00153: Unpack
00154: ApplyArgToFn
00155: ApplyArgToFn
00156:   Return
00157: LoadFn { code: 00150, fvars: 00002 }
00158:   Return
00159: LoadFn { code: 00157, fvars: 00001 }
00160:   Return
00161: LoadFn { code: 00128, fvars: 00000 }
00162: LoadFn { code: 00144, fvars: 00006 }
00163: PushString(""ys"")
00164: PushString(""y"")
00165: PushString("")
00166: ApplyArgToFn
00167: ApplyArgToFn
00168: LoadFn { code: 00148, fvars: 00000 }
00169: ApplyArgToFn
00170: ApplyArgToFn
00171: LoadVar(00002)
00172: LoadFn { code: 00159, fvars: 00000 }
00173: ApplyArgToFn
00174: ApplyArgToFn
00175: ApplyArgToFn
00176:   Return
00177: LoadFn { code: 00161, fvars: 00005 }
00178:   Return
00179: LoadVar(00000)
00180:   Return
00181: LoadFn { code: 00179, fvars: 00000 }
00182:   Return
00183: LoadVar(00002)
00184: LoadVar(00001)
00185: LoadVar(00000)
00186: Unpack
00187: ApplyArgToFn
00188: ApplyArgToFn
00189:   Return
00190: LoadFn { code: 00183, fvars: 00002 }
00191:   Return
00192: LoadFn { code: 00190, fvars: 00001 }
00193:   Return
00194: LoadFn { code: 00112, fvars: 00003 }
00195: LoadFn { code: 00177, fvars: 00004 }
00196: PushString(""xs"")
00197: PushString(""x"")
00198: PushString("")
00199: ApplyArgToFn
00200: ApplyArgToFn
00201: LoadFn { code: 00181, fvars: 00000 }
00202: ApplyArgToFn
00203: ApplyArgToFn
00204: LoadVar(00001)
00205: LoadFn { code: 00192, fvars: 00000 }
00206: ApplyArgToFn
00207: ApplyArgToFn
00208: ApplyArgToFn
00209:   Return
00210: LoadFn { code: 00194, fvars: 00003 }
00211:   Return
00212: LoadFn { code: 00210, fvars: 00002 }
00213:   Return
00214: LoadVar(00000)
00215:   Return
00216: LoadFn { code: 00214, fvars: 00000 }
00217:   Return
00218: LoadFn { code: 00212, fvars: 00001 }
00219: PushString(""acc"")
00220: PushString(""xs"")
00221: PushString(""ys"")
00222: PushString("")
00223: ApplyArgToFn
00224: ApplyArgToFn
00225: ApplyArgToFn
00226: LoadFn { code: 00216, fvars: 00000 }
00227: ApplyArgToFn
00228: ApplyArgToFn
00229:   Return
00230: LoadVar(00000)
00231: LoadFn { code: 00000, fvars: 00000 }
00232: ApplyArgToFn
00233:   Return
00234: LoadFn { code: 00230, fvars: 00000 }
00235:   Return
00236: LoadVar(00001)
00237: LoadVar(00000)
00238: ApplyArgToFn
00239:   Return
00240: LoadFn { code: 00236, fvars: 00001 }
00241:   Return
00242: LoadFn { code: 00240, fvars: 00000 }
00243:   Return
00244: LoadVar(00001)
00245: LoadVar(00002)
00246: PushString("")
00247: ApplyArgToFn
00248: ApplyArgToFn
00249:   Return
00250: LoadVar(00000)
00251: LoadVar(00003)
00252: ApplyArgToFn
00253: LoadVar(00004)
00254: ApplyArgToFn
00255: LoadVar(00001)
00256: ApplyFnToArg
00257:   Return
00258: LoadFn { code: 00250, fvars: 00004 }
00259:   Return
00260: LoadVar(00000)
00261:   Return
00262: LoadFn { code: 00260, fvars: 00000 }
00263:   Return
00264: LoadVar(00002)
00265: LoadVar(00001)
00266: LoadVar(00000)
00267: Unpack
00268: ApplyArgToFn
00269: ApplyArgToFn
00270:   Return
00271: LoadFn { code: 00264, fvars: 00002 }
00272:   Return
00273: LoadFn { code: 00271, fvars: 00001 }
00274:   Return
00275: LoadFn { code: 00244, fvars: 00002 }
00276: LoadFn { code: 00258, fvars: 00003 }
00277: PushString(""xs"")
00278: PushString(""x"")
00279: PushString("")
00280: ApplyArgToFn
00281: ApplyArgToFn
00282: LoadFn { code: 00262, fvars: 00000 }
00283: ApplyArgToFn
00284: ApplyArgToFn
00285: LoadVar(00000)
00286: LoadFn { code: 00273, fvars: 00000 }
00287: ApplyArgToFn
00288: ApplyArgToFn
00289: ApplyArgToFn
00290:   Return
00291: LoadFn { code: 00275, fvars: 00002 }
00292:   Return
00293: LoadVar(00000)
00294:   Return
00295: LoadFn { code: 00293, fvars: 00000 }
00296:   Return
00297: LoadFn { code: 00291, fvars: 00001 }
00298: PushString(""acc"")
00299: PushString(""compound"")
00300: PushString("")
00301: ApplyArgToFn
00302: ApplyArgToFn
00303: LoadFn { code: 00295, fvars: 00000 }
00304: ApplyArgToFn
00305: ApplyArgToFn
00306:   Return
00307: LoadVar(00000)
00308: LoadFn { code: 00000, fvars: 00000 }
00309: ApplyArgToFn
00310:   Return
00311: LoadFn { code: 00307, fvars: 00000 }
00312:   Return
00313: LoadVar(00001)
00314: LoadVar(00000)
00315: ApplyArgToFn
00316:   Return
00317: LoadFn { code: 00313, fvars: 00001 }
00318:   Return
00319: LoadFn { code: 00317, fvars: 00000 }
00320:   Return
00321: PushString("False")
00322:   Return
00323: PushString("True")
00324:   Return
00325: LoadVar(00003)
00326: LoadVar(00002)
00327: LoadVar(00001)
00328: LoadVar(00000)
00329: Cmp
00330: ApplyArgToFn
00331:   Return
00332: LoadFn { code: 00325, fvars: 00003 }
00333:   Return
00334: LoadFn { code: 00332, fvars: 00002 }
00335:   Return
00336: LoadFn { code: 00334, fvars: 00001 }
00337:   Return
00338: LoadFn { code: 00321, fvars: 00000 }
00339: LoadFn { code: 00323, fvars: 00000 }
00340: LoadVar(00001)
00341: LoadVar(00002)
00342: LoadFn { code: 00336, fvars: 00000 }
00343: ApplyArgToFn
00344: ApplyArgToFn
00345: ApplyArgToFn
00346: ApplyArgToFn
00347:   Return
00348: PushString("False")
00349:   Return
00350: LoadVar(00003)
00351: LoadVar(00002)
00352: LoadVar(00001)
00353: LoadVar(00000)
00354: Cmp
00355: ApplyArgToFn
00356:   Return
00357: LoadFn { code: 00350, fvars: 00003 }
00358:   Return
00359: LoadFn { code: 00357, fvars: 00002 }
00360:   Return
00361: LoadFn { code: 00359, fvars: 00001 }
00362:   Return
00363: LoadVar(00004)
00364: LoadVar(00007)
00365: ApplyArgToFn
00366: LoadVar(00002)
00367: ApplyFnToArg
00368:   Return
00369: PushString("False")
00370:   Return
00371: LoadVar(00002)
00372: LoadVar(00006)
00373: ApplyArgToFn
00374: LoadVar(00000)
00375: ApplyFnToArg
00376: LoadFn { code: 00361, fvars: 00000 }
00377: ApplyArgToFn
00378: PushString("True")
00379: ApplyFnToArg
00380: LoadFn { code: 00363, fvars: 00007 }
00381: ApplyFnToArg
00382: LoadFn { code: 00369, fvars: 00000 }
00383: ApplyFnToArg
00384:   Return
00385: LoadFn { code: 00371, fvars: 00006 }
00386:   Return
00387: LoadVar(00000)
00388:   Return
00389: LoadFn { code: 00387, fvars: 00000 }
00390:   Return
00391: LoadVar(00002)
00392: LoadVar(00001)
00393: LoadVar(00000)
00394: Unpack
00395: ApplyArgToFn
00396: ApplyArgToFn
00397:   Return
00398: LoadFn { code: 00391, fvars: 00002 }
00399:   Return
00400: LoadFn { code: 00398, fvars: 00001 }
00401:   Return
00402: LoadFn { code: 00348, fvars: 00000 }
00403: LoadFn { code: 00385, fvars: 00005 }
00404: PushString(""ys"")
00405: PushString(""y"")
00406: PushString("")
00407: ApplyArgToFn
00408: ApplyArgToFn
00409: LoadFn { code: 00389, fvars: 00000 }
00410: ApplyArgToFn
00411: ApplyArgToFn
00412: LoadVar(00002)
00413: LoadFn { code: 00400, fvars: 00000 }
00414: ApplyArgToFn
00415: ApplyArgToFn
00416: ApplyArgToFn
00417:   Return
00418: LoadFn { code: 00402, fvars: 00004 }
00419:   Return
00420: LoadVar(00000)
00421:   Return
00422: LoadFn { code: 00420, fvars: 00000 }
00423:   Return
00424: LoadVar(00002)
00425: LoadVar(00001)
00426: LoadVar(00000)
00427: Unpack
00428: ApplyArgToFn
00429: ApplyArgToFn
00430:   Return
00431: LoadFn { code: 00424, fvars: 00002 }
00432:   Return
00433: LoadFn { code: 00431, fvars: 00001 }
00434:   Return
00435: LoadFn { code: 00338, fvars: 00002 }
00436: LoadFn { code: 00418, fvars: 00003 }
00437: PushString(""xs"")
00438: PushString(""x"")
00439: PushString("")
00440: ApplyArgToFn
00441: ApplyArgToFn
00442: LoadFn { code: 00422, fvars: 00000 }
00443: ApplyArgToFn
00444: ApplyArgToFn
00445: LoadVar(00001)
00446: LoadFn { code: 00433, fvars: 00000 }
00447: ApplyArgToFn
00448: ApplyArgToFn
00449: ApplyArgToFn
00450:   Return
00451: LoadFn { code: 00435, fvars: 00002 }
00452:   Return
00453: LoadVar(00000)
00454:   Return
00455: LoadFn { code: 00453, fvars: 00000 }
00456:   Return
00457: LoadFn { code: 00451, fvars: 00001 }
00458: PushString(""a"")
00459: PushString(""b"")
00460: PushString("")
00461: ApplyArgToFn
00462: ApplyArgToFn
00463: LoadFn { code: 00455, fvars: 00000 }
00464: ApplyArgToFn
00465: ApplyArgToFn
00466:   Return
00467: LoadVar(00000)
00468: LoadFn { code: 00000, fvars: 00000 }
00469: ApplyArgToFn
00470:   Return
00471: LoadFn { code: 00467, fvars: 00000 }
00472:   Return
00473: LoadVar(00001)
00474: LoadVar(00000)
00475: ApplyArgToFn
00476:   Return
00477: LoadFn { code: 00473, fvars: 00001 }
00478:   Return
00479: LoadFn { code: 00477, fvars: 00000 }
00480:   Return
00481: LoadVar(00001)
00482: LoadVar(00000)
00483: ApplyArgToFn
00484:   Return
00485: LoadFn { code: 00481, fvars: 00001 }
00486:   Return
00487: LoadFn { code: 00485, fvars: 00000 }
00488:   Return
00489: LoadVar(00001)
00490: LoadVar(00000)
00491: ApplyArgToFn
00492:   Return
00493: LoadFn { code: 00489, fvars: 00001 }
00494:   Return
00495: LoadFn { code: 00493, fvars: 00000 }
00496:   Return
00497: LoadVar(00001)
00498: LoadVar(00000)
00499: ApplyArgToFn
00500:   Return
00501: LoadFn { code: 00497, fvars: 00001 }
00502:   Return
00503: LoadFn { code: 00501, fvars: 00000 }
00504:   Return
00505: LoadVar(00001)
00506: LoadVar(00000)
00507: ApplyArgToFn
00508:   Return
00509: LoadFn { code: 00505, fvars: 00001 }
00510:   Return
00511: LoadFn { code: 00509, fvars: 00000 }
00512:   Return
00513: PushString("")
00514:   Return
00515: LoadVar(00003)
00516: LoadVar(00002)
00517: LoadVar(00001)
00518: LoadVar(00000)
00519: Cmp
00520: ApplyArgToFn
00521:   Return
00522: LoadFn { code: 00515, fvars: 00003 }
00523:   Return
00524: LoadFn { code: 00522, fvars: 00002 }
00525:   Return
00526: LoadFn { code: 00524, fvars: 00001 }
00527:   Return
00528: LoadVar(00007)
00529: LoadVar(00006)
00530: PushString("")
00531: ApplyArgToFn
00532: ApplyArgToFn
00533: LoadVar(00003)
00534: LoadVar(00002)
00535: PushString("")
00536: ApplyArgToFn
00537: ApplyArgToFn
00538: PushString("")
00539: ApplyArgToFn
00540: ApplyArgToFn
00541: PushEffect("no-match")
00542: ApplyArgToFn
00543:   Return
00544: PushString("")
00545:   Return
00546: LoadVar(00005)
00547: LoadVar(00011)
00548: ApplyArgToFn
00549: LoadVar(00001)
00550: ApplyFnToArg
00551: LoadFn { code: 00526, fvars: 00000 }
00552: ApplyArgToFn
00553: PushString("False")
00554: ApplyFnToArg
00555: LoadFn { code: 00528, fvars: 00007 }
00556: ApplyFnToArg
00557: LoadFn { code: 00544, fvars: 00000 }
00558: ApplyFnToArg
00559:   Return
00560: LoadVar(00003)
00561: LoadVar(00002)
00562: LoadVar(00001)
00563: LoadVar(00000)
00564: Cmp
00565: ApplyArgToFn
00566:   Return
00567: LoadFn { code: 00560, fvars: 00003 }
00568:   Return
00569: LoadFn { code: 00567, fvars: 00002 }
00570:   Return
00571: LoadFn { code: 00569, fvars: 00001 }
00572:   Return
00573: LoadFn { code: 00513, fvars: 00000 }
00574: LoadFn { code: 00546, fvars: 00011 }
00575: LoadVar(00001)
00576: LoadVar(00005)
00577: LoadFn { code: 00571, fvars: 00000 }
00578: ApplyArgToFn
00579: ApplyArgToFn
00580: ApplyArgToFn
00581: ApplyArgToFn
00582:   Return
00583: LoadVar(00001)
00584: LoadVar(00007)
00585: ApplyArgToFn
00586: PushString(""yval"")
00587: LoadFn { code: 00511, fvars: 00000 }
00588: ApplyArgToFn
00589: ApplyArgToFn
00590: LoadFn { code: 00573, fvars: 00010 }
00591: ApplyFnToArg
00592:   Return
00593: LoadVar(00000)
00594: LoadVar(00007)
00595: ApplyArgToFn
00596: PushString(""yvar"")
00597: LoadFn { code: 00503, fvars: 00000 }
00598: ApplyArgToFn
00599: ApplyArgToFn
00600: LoadFn { code: 00583, fvars: 00009 }
00601: ApplyFnToArg
00602:   Return
00603: LoadFn { code: 00593, fvars: 00008 }
00604:   Return
00605: LoadVar(00000)
00606:   Return
00607: LoadFn { code: 00605, fvars: 00000 }
00608:   Return
00609: LoadVar(00003)
00610: LoadVar(00004)
00611: ApplyArgToFn
00612:   Return
00613: LoadFn { code: 00603, fvars: 00007 }
00614: PushString(""_"")
00615: PushString(""pair"")
00616: PushString("")
00617: ApplyArgToFn
00618: ApplyArgToFn
00619: LoadFn { code: 00607, fvars: 00000 }
00620: ApplyArgToFn
00621: ApplyArgToFn
00622: LoadVar(00014)
00623: ApplyArgToFn
00624: PushString("")
00625: ApplyFnToArg
00626: LoadVar(00003)
00627: ApplyFnToArg
00628: LoadFn { code: 00609, fvars: 00004 }
00629: ApplyArgToFn
00630:   Return
00631: LoadVar(00001)
00632: LoadVar(00003)
00633: ApplyArgToFn
00634: PushString(""xval"")
00635: LoadFn { code: 00495, fvars: 00000 }
00636: ApplyArgToFn
00637: ApplyArgToFn
00638: LoadFn { code: 00613, fvars: 00014 }
00639: ApplyFnToArg
00640:   Return
00641: LoadVar(00000)
00642: LoadVar(00003)
00643: ApplyArgToFn
00644: PushString(""xvar"")
00645: LoadFn { code: 00487, fvars: 00000 }
00646: ApplyArgToFn
00647: ApplyArgToFn
00648: LoadFn { code: 00631, fvars: 00013 }
00649: ApplyFnToArg
00650:   Return
00651: LoadFn { code: 00641, fvars: 00012 }
00652:   Return
00653: LoadVar(00000)
00654:   Return
00655: LoadFn { code: 00653, fvars: 00000 }
00656:   Return
00657: LoadVar(00001)
00658: LoadVar(00000)
00659: ApplyArgToFn
00660:   Return
00661: LoadFn { code: 00657, fvars: 00001 }
00662:   Return
00663: LoadFn { code: 00661, fvars: 00000 }
00664:   Return
00665: LoadVar(00002)
00666: PushEffect("invalid")
00667: ApplyArgToFn
00668:   Return
00669: LoadVar(00003)
00670: LoadVar(00002)
00671: LoadVar(00001)
00672: LoadVar(00000)
00673: Cmp
00674: ApplyArgToFn
00675:   Return
00676: LoadFn { code: 00669, fvars: 00003 }
00677:   Return
00678: LoadFn { code: 00676, fvars: 00002 }
00679:   Return
00680: LoadFn { code: 00678, fvars: 00001 }
00681:   Return
00682: PushString("")
00683:   Return
00684: LoadVar(00003)
00685: LoadVar(00005)
00686: PushString("")
00687: ApplyArgToFn
00688: ApplyArgToFn
00689: PushEffect("no-match")
00690: ApplyArgToFn
00691:   Return
00692: LoadVar(00002)
00693: LoadVar(00010)
00694: ApplyArgToFn
00695: LoadVar(00004)
00696: ApplyFnToArg
00697: LoadFn { code: 00680, fvars: 00000 }
00698: ApplyArgToFn
00699: PushString("True")
00700: ApplyFnToArg
00701: LoadFn { code: 00682, fvars: 00000 }
00702: ApplyFnToArg
00703: LoadFn { code: 00684, fvars: 00005 }
00704: ApplyFnToArg
00705:   Return
00706: LoadVar(00002)
00707: LoadVar(00004)
00708: PushString("")
00709: ApplyArgToFn
00710: ApplyArgToFn
00711: PushString("")
00712: ApplyArgToFn
00713:   Return
00714: LoadVar(00003)
00715: LoadVar(00002)
00716: LoadVar(00001)
00717: LoadVar(00000)
00718: Cmp
00719: ApplyArgToFn
00720:   Return
00721: LoadFn { code: 00714, fvars: 00003 }
00722:   Return
00723: LoadFn { code: 00721, fvars: 00002 }
00724:   Return
00725: LoadFn { code: 00723, fvars: 00001 }
00726:   Return
00727: LoadFn { code: 00692, fvars: 00010 }
00728: LoadFn { code: 00706, fvars: 00004 }
00729: PushString("Binding")
00730: LoadVar(00002)
00731: LoadFn { code: 00725, fvars: 00000 }
00732: ApplyArgToFn
00733: ApplyArgToFn
00734: ApplyArgToFn
00735: ApplyArgToFn
00736:   Return
00737: LoadVar(00001)
00738: LoadVar(00002)
00739: ApplyArgToFn
00740: LoadVar(00003)
00741: ApplyFnToArg
00742: PushEffect("invalid")
00743: ApplyArgToFn
00744:   Return
00745: LoadVar(00001)
00746: LoadVar(00000)
00747: ApplyArgToFn
00748:   Return
00749: LoadFn { code: 00745, fvars: 00001 }
00750:   Return
00751: LoadFn { code: 00749, fvars: 00000 }
00752:   Return
00753: LoadVar(00001)
00754: LoadVar(00000)
00755: ApplyArgToFn
00756:   Return
00757: LoadFn { code: 00753, fvars: 00001 }
00758:   Return
00759: LoadFn { code: 00757, fvars: 00000 }
00760:   Return
00761: LoadVar(00001)
00762: LoadVar(00000)
00763: ApplyArgToFn
00764:   Return
00765: LoadFn { code: 00761, fvars: 00001 }
00766:   Return
00767: LoadFn { code: 00765, fvars: 00000 }
00768:   Return
00769: LoadVar(00001)
00770: LoadVar(00000)
00771: ApplyArgToFn
00772:   Return
00773: LoadFn { code: 00769, fvars: 00001 }
00774:   Return
00775: LoadFn { code: 00773, fvars: 00000 }
00776:   Return
00777: LoadVar(00012)
00778: LoadVar(00023)
00779: ApplyArgToFn
00780: LoadVar(00021)
00781: ApplyArgToFn
00782: LoadVar(00001)
00783: ApplyFnToArg
00784: LoadVar(00020)
00785: ApplyArgToFn
00786: LoadVar(00013)
00787: ApplyArgToFn
00788:   Return
00789: LoadVar(00006)
00790: LoadVar(00007)
00791: ApplyArgToFn
00792: LoadVar(00008)
00793: ApplyFnToArg
00794: LoadVar(00010)
00795: PushString("")
00796: ApplyArgToFn
00797: ApplyArgToFn
00798: PushEffect("no-match")
00799: ApplyArgToFn
00800:   Return
00801: LoadVar(00003)
00802: LoadVar(00002)
00803: LoadVar(00001)
00804: LoadVar(00000)
00805: Cmp
00806: ApplyArgToFn
00807:   Return
00808: LoadFn { code: 00801, fvars: 00003 }
00809:   Return
00810: LoadFn { code: 00808, fvars: 00002 }
00811:   Return
00812: LoadFn { code: 00810, fvars: 00001 }
00813:   Return
00814: LoadFn { code: 00777, fvars: 00023 }
00815: LoadFn { code: 00789, fvars: 00010 }
00816: PushString("")
00817: LoadVar(00000)
00818: LoadFn { code: 00812, fvars: 00000 }
00819: ApplyArgToFn
00820: ApplyArgToFn
00821: ApplyArgToFn
00822: ApplyArgToFn
00823:   Return
00824: LoadVar(00004)
00825: LoadVar(00006)
00826: ApplyArgToFn
00827: LoadVar(00016)
00828: ApplyArgToFn
00829: LoadVar(00001)
00830: LoadVar(00000)
00831: ApplyArgToFn
00832: ApplyFnToArg
00833: LoadVar(00020)
00834: ApplyArgToFn
00835: PushString(""zipped"")
00836: LoadFn { code: 00775, fvars: 00000 }
00837: ApplyArgToFn
00838: ApplyArgToFn
00839: LoadFn { code: 00814, fvars: 00022 }
00840: ApplyFnToArg
00841:   Return
00842: LoadVar(00001)
00843: LoadVar(00011)
00844: ApplyArgToFn
00845: PushString(""vargs"")
00846: LoadFn { code: 00767, fvars: 00000 }
00847: ApplyArgToFn
00848: ApplyArgToFn
00849: LoadFn { code: 00824, fvars: 00021 }
00850: ApplyFnToArg
00851:   Return
00852: LoadVar(00000)
00853: LoadVar(00011)
00854: ApplyArgToFn
00855: PushString(""vf"")
00856: LoadFn { code: 00759, fvars: 00000 }
00857: ApplyArgToFn
00858: ApplyArgToFn
00859: LoadFn { code: 00842, fvars: 00020 }
00860: ApplyFnToArg
00861:   Return
00862: LoadVar(00005)
00863: LoadVar(00012)
00864: ApplyArgToFn
00865: PushString(""v"")
00866: LoadFn { code: 00751, fvars: 00000 }
00867: ApplyArgToFn
00868: ApplyArgToFn
00869: LoadFn { code: 00852, fvars: 00019 }
00870: ApplyFnToArg
00871:   Return
00872: LoadVar(00003)
00873: LoadVar(00002)
00874: LoadVar(00001)
00875: LoadVar(00000)
00876: Cmp
00877: ApplyArgToFn
00878:   Return
00879: LoadFn { code: 00872, fvars: 00003 }
00880:   Return
00881: LoadFn { code: 00879, fvars: 00002 }
00882:   Return
00883: LoadFn { code: 00881, fvars: 00001 }
00884:   Return
00885: LoadFn { code: 00737, fvars: 00003 }
00886: LoadFn { code: 00862, fvars: 00018 }
00887: PushString("Compound")
00888: LoadVar(00001)
00889: LoadFn { code: 00883, fvars: 00000 }
00890: ApplyArgToFn
00891: ApplyArgToFn
00892: ApplyArgToFn
00893: ApplyArgToFn
00894:   Return
00895: LoadFn { code: 00885, fvars: 00017 }
00896:   Return
00897: LoadVar(00000)
00898:   Return
00899: LoadFn { code: 00897, fvars: 00000 }
00900:   Return
00901: LoadVar(00002)
00902: LoadVar(00001)
00903: LoadVar(00000)
00904: Unpack
00905: ApplyArgToFn
00906: ApplyArgToFn
00907:   Return
00908: LoadFn { code: 00901, fvars: 00002 }
00909:   Return
00910: LoadFn { code: 00908, fvars: 00001 }
00911:   Return
00912: LoadFn { code: 00727, fvars: 00009 }
00913: LoadFn { code: 00895, fvars: 00016 }
00914: PushString(""type"")
00915: PushString(""f"")
00916: PushString("")
00917: ApplyArgToFn
00918: ApplyArgToFn
00919: LoadFn { code: 00899, fvars: 00000 }
00920: ApplyArgToFn
00921: ApplyArgToFn
00922: LoadVar(00001)
00923: LoadFn { code: 00910, fvars: 00000 }
00924: ApplyArgToFn
00925: ApplyArgToFn
00926: ApplyArgToFn
00927:   Return
00928: LoadFn { code: 00912, fvars: 00015 }
00929:   Return
00930: LoadVar(00000)
00931:   Return
00932: LoadFn { code: 00930, fvars: 00000 }
00933:   Return
00934: LoadVar(00002)
00935: LoadVar(00001)
00936: LoadVar(00000)
00937: Unpack
00938: ApplyArgToFn
00939: ApplyArgToFn
00940:   Return
00941: LoadFn { code: 00934, fvars: 00002 }
00942:   Return
00943: LoadFn { code: 00941, fvars: 00001 }
00944:   Return
00945: LoadFn { code: 00665, fvars: 00002 }
00946: LoadFn { code: 00928, fvars: 00014 }
00947: PushString(""type"")
00948: PushString(""pattern"")
00949: PushString("")
00950: ApplyArgToFn
00951: ApplyArgToFn
00952: LoadFn { code: 00932, fvars: 00000 }
00953: ApplyArgToFn
00954: ApplyArgToFn
00955: LoadVar(00001)
00956: LoadFn { code: 00943, fvars: 00000 }
00957: ApplyArgToFn
00958: ApplyArgToFn
00959: ApplyArgToFn
00960:   Return
00961: LoadFn { code: 00945, fvars: 00013 }
00962:   Return
00963: LoadVar(00000)
00964:   Return
00965: LoadFn { code: 00963, fvars: 00000 }
00966:   Return
00967: LoadFn { code: 00961, fvars: 00012 }
00968: PushString(""pattern"")
00969: PushString(""value"")
00970: PushString("")
00971: ApplyArgToFn
00972: ApplyArgToFn
00973: LoadFn { code: 00965, fvars: 00000 }
00974: ApplyArgToFn
00975: ApplyArgToFn
00976:   Return
00977: LoadVar(00000)
00978: LoadFn { code: 00000, fvars: 00000 }
00979: ApplyArgToFn
00980:   Return
00981: LoadFn { code: 00977, fvars: 00000 }
00982:   Return
00983: LoadVar(00001)
00984: LoadVar(00000)
00985: ApplyArgToFn
00986:   Return
00987: LoadFn { code: 00983, fvars: 00001 }
00988:   Return
00989: LoadFn { code: 00987, fvars: 00000 }
00990:   Return
00991: LoadVar(00000)
00992: PushString("NoMatch")
00993: ApplyArgToFn
00994: LoadVar(00001)
00995: ApplyArgToFn
00996:   Return
00997: LoadFn { code: 00991, fvars: 00001 }
00998:   Return
00999: LoadVar(00000)
01000:   Return
01001: LoadFn { code: 00999, fvars: 00000 }
01002:   Return
01003: LoadVar(00000)
01004:   Return
01005: LoadFn { code: 01003, fvars: 00000 }
01006:   Return
01007: LoadVar(00001)
01008:   Return
01009: LoadFn { code: 01007, fvars: 00001 }
01010:   Return
01011: LoadFn { code: 01009, fvars: 00000 }
01012:   Return
01013: LoadVar(00000)
01014:   Return
01015: LoadFn { code: 01013, fvars: 00000 }
01016:   Return
01017: LoadVar(00000)
01018:   Return
01019: LoadVar(00000)
01020:   Return
01021: LoadFn { code: 01019, fvars: 00000 }
01022:   Return
01023: PushString("Foo")
01024:   Return
01025: PushString("Bar")
01026:   Return
01027: LoadVar(00000)
01028:   Return
01029: PushString("Bar")
01030:   Return
01031: PushString(""x"")
01032: PushString("Binding")
01033: ApplyArgToFn
01034: PushString(""x"")
01035: PushString("Binding")
01036: ApplyArgToFn
01037: PushString("")
01038: ApplyArgToFn
01039: ApplyArgToFn
01040: PushString("Pair")
01041: PushString("Value")
01042: ApplyArgToFn
01043: PushString("Compound")
01044: ApplyArgToFn
01045: ApplyArgToFn
01046: LoadVar(00001)
01047: ApplyArgToFn
01048: LoadFn { code: 01005, fvars: 00000 }
01049: ApplyFnToArg
01050: PushString("Bar")
01051: PushString("Foo")
01052: PushString("Pair")
01053: ApplyArgToFn
01054: ApplyArgToFn
01055: ApplyFnToArg
01056: PushString("")
01057: ApplyArgToFn
01058: PushString(""x"")
01059: PushString("Binding")
01060: ApplyArgToFn
01061: PushString(""y"")
01062: PushString("Binding")
01063: ApplyArgToFn
01064: PushString("")
01065: ApplyArgToFn
01066: ApplyArgToFn
01067: PushString(""foo"")
01068: PushString("Binding")
01069: ApplyArgToFn
01070: PushString("Compound")
01071: ApplyArgToFn
01072: ApplyArgToFn
01073: LoadVar(00001)
01074: ApplyArgToFn
01075: LoadFn { code: 01011, fvars: 00000 }
01076: ApplyFnToArg
01077: PushString("Bar")
01078: PushString("Foo")
01079: PushString("Pair")
01080: ApplyArgToFn
01081: ApplyArgToFn
01082: ApplyFnToArg
01083: ApplyFnToArg
01084: PushString(""x"")
01085: PushString("Binding")
01086: ApplyArgToFn
01087: PushString(""x"")
01088: PushString("Binding")
01089: ApplyArgToFn
01090: PushString("")
01091: ApplyArgToFn
01092: ApplyArgToFn
01093: PushString("Pair")
01094: PushString("Value")
01095: ApplyArgToFn
01096: PushString("Compound")
01097: ApplyArgToFn
01098: ApplyArgToFn
01099: LoadVar(00001)
01100: ApplyArgToFn
01101: LoadFn { code: 01015, fvars: 00000 }
01102: ApplyFnToArg
01103: PushString("Bar")
01104: PushString("Bar")
01105: PushString("Pair")
01106: ApplyArgToFn
01107: ApplyArgToFn
01108: ApplyFnToArg
01109: ApplyFnToArg
01110: PushString(""x"")
01111: PushString("Binding")
01112: ApplyArgToFn
01113: PushString("Bar")
01114: PushString("Value")
01115: ApplyArgToFn
01116: PushString("")
01117: ApplyArgToFn
01118: ApplyArgToFn
01119: PushString("Pair")
01120: PushString("Value")
01121: ApplyArgToFn
01122: PushString("Compound")
01123: ApplyArgToFn
01124: ApplyArgToFn
01125: LoadVar(00001)
01126: ApplyArgToFn
01127: LoadFn { code: 01017, fvars: 00000 }
01128: ApplyFnToArg
01129: PushString("Bar")
01130: PushString("Foo")
01131: PushString("Pair")
01132: ApplyArgToFn
01133: ApplyArgToFn
01134: ApplyFnToArg
01135: ApplyFnToArg
01136: PushString(""x"")
01137: PushString("Binding")
01138: ApplyArgToFn
01139: PushString(""y"")
01140: PushString("Binding")
01141: ApplyArgToFn
01142: PushString("")
01143: ApplyArgToFn
01144: ApplyArgToFn
01145: PushString("Pair")
01146: PushString("Value")
01147: ApplyArgToFn
01148: PushString("Compound")
01149: ApplyArgToFn
01150: ApplyArgToFn
01151: LoadVar(00001)
01152: ApplyArgToFn
01153: LoadFn { code: 01021, fvars: 00000 }
01154: ApplyFnToArg
01155: PushString("Bar")
01156: PushString("Foo")
01157: PushString("Pair")
01158: ApplyArgToFn
01159: ApplyArgToFn
01160: ApplyFnToArg
01161: ApplyFnToArg
01162: PushString("Bar")
01163: PushString("Foo")
01164: PushString("Pair")
01165: ApplyArgToFn
01166: ApplyArgToFn
01167: PushString("Value")
01168: ApplyArgToFn
01169: LoadVar(00001)
01170: ApplyArgToFn
01171: LoadFn { code: 01023, fvars: 00000 }
01172: ApplyFnToArg
01173: PushString("Bar")
01174: PushString("Foo")
01175: PushString("Pair")
01176: ApplyArgToFn
01177: ApplyArgToFn
01178: ApplyFnToArg
01179: ApplyFnToArg
01180: PushString(""x"")
01181: PushString("Binding")
01182: ApplyArgToFn
01183: LoadVar(00001)
01184: ApplyArgToFn
01185: LoadFn { code: 01025, fvars: 00000 }
01186: ApplyFnToArg
01187: PushString("Foo")
01188: ApplyFnToArg
01189: ApplyFnToArg
01190: PushString(""x"")
01191: PushString("Binding")
01192: ApplyArgToFn
01193: LoadVar(00001)
01194: ApplyArgToFn
01195: LoadFn { code: 01027, fvars: 00000 }
01196: ApplyFnToArg
01197: PushString("Foo")
01198: ApplyFnToArg
01199: ApplyFnToArg
01200: PushString("Foo")
01201: PushString("Value")
01202: ApplyArgToFn
01203: LoadVar(00001)
01204: ApplyArgToFn
01205: LoadFn { code: 01029, fvars: 00000 }
01206: ApplyFnToArg
01207: PushString("Foo")
01208: ApplyFnToArg
01209: ApplyFnToArg
01210:   Return
01211: LoadVar(00002)
01212: LoadVar(00001)
01213: LoadVar(00000)
01214: Try
01215: ApplyArgToFn
01216: Unwind
01217: ApplyArgToFn
01218: ApplyArgToFn
01219:   Return
01220: LoadFn { code: 01211, fvars: 00002 }
01221:   Return
01222: LoadFn { code: 01220, fvars: 00001 }
01223:   Return
01224: LoadFn { code: 00997, fvars: 00000 }
01225: PushString(""r"")
01226: PushString(""arg"")
01227: PushString("")
01228: ApplyArgToFn
01229: ApplyArgToFn
01230: LoadFn { code: 01001, fvars: 00000 }
01231: ApplyArgToFn
01232: ApplyArgToFn
01233: PushEffect("no-match")
01234: LoadFn { code: 01031, fvars: 00001 }
01235: LoadFn { code: 01222, fvars: 00000 }
01236: ApplyArgToFn
01237: ApplyArgToFn
01238: ApplyArgToFn
01239:   Return
01240: LoadVar(00000)
01241: PushEffect("no-match")
01242: ApplyArgToFn
01243:   Return
01244: LoadFn { code: 01240, fvars: 00000 }
01245:   Return
01246: LoadVar(00000)
01247:   Return
01248: LoadFn { code: 01246, fvars: 00000 }
01249:   Return
01250: LoadVar(00001)
01251: LoadVar(00000)
01252: ApplyArgToFn
01253:   Return
01254: LoadFn { code: 01250, fvars: 00001 }
01255:   Return
01256: LoadFn { code: 01254, fvars: 00000 }
01257:   Return
01258: LoadVar(00004)
01259: LoadVar(00017)
01260: ApplyArgToFn
01261: LoadVar(00001)
01262: ApplyFnToArg
01263:   Return
01264: PushString("")
01265: LoadVar(00004)
01266: ApplyArgToFn
01267:   Return
01268: LoadVar(00003)
01269: LoadVar(00002)
01270: LoadVar(00001)
01271: LoadVar(00000)
01272: Cmp
01273: ApplyArgToFn
01274:   Return
01275: LoadFn { code: 01268, fvars: 00003 }
01276:   Return
01277: LoadFn { code: 01275, fvars: 00002 }
01278:   Return
01279: LoadFn { code: 01277, fvars: 00001 }
01280:   Return
01281: LoadFn { code: 01258, fvars: 00017 }
01282: LoadFn { code: 01264, fvars: 00004 }
01283: PushString("")
01284: LoadVar(00000)
01285: LoadFn { code: 01279, fvars: 00000 }
01286: ApplyArgToFn
01287: ApplyArgToFn
01288: ApplyArgToFn
01289: ApplyArgToFn
01290:   Return
01291: LoadVar(00006)
01292: LoadVar(00013)
01293: ApplyArgToFn
01294: LoadVar(00003)
01295: LoadVar(00004)
01296: ApplyArgToFn
01297: LoadVar(00001)
01298: ApplyFnToArg
01299: ApplyFnToArg
01300: PushString(""args"")
01301: LoadFn { code: 01256, fvars: 00000 }
01302: ApplyArgToFn
01303: ApplyArgToFn
01304: LoadFn { code: 01281, fvars: 00016 }
01305: ApplyFnToArg
01306:   Return
01307: LoadVar(00002)
01308: LoadVar(00001)
01309: LoadVar(00000)
01310: Try
01311: ApplyArgToFn
01312: Unwind
01313: ApplyArgToFn
01314: ApplyArgToFn
01315:   Return
01316: LoadFn { code: 01307, fvars: 00002 }
01317:   Return
01318: LoadFn { code: 01316, fvars: 00001 }
01319:   Return
01320: LoadFn { code: 01244, fvars: 00000 }
01321: PushString(""_"")
01322: PushString(""arg"")
01323: PushString("")
01324: ApplyArgToFn
01325: ApplyArgToFn
01326: LoadFn { code: 01248, fvars: 00000 }
01327: ApplyArgToFn
01328: ApplyArgToFn
01329: PushEffect("no-match")
01330: LoadFn { code: 01291, fvars: 00015 }
01331: LoadFn { code: 01318, fvars: 00000 }
01332: ApplyArgToFn
01333: ApplyArgToFn
01334: ApplyArgToFn
01335:   Return
01336: LoadFn { code: 01320, fvars: 00014 }
01337:   Return
01338: LoadFn { code: 01336, fvars: 00013 }
01339:   Return
01340: LoadVar(00000)
01341:   Return
01342: LoadFn { code: 01340, fvars: 00000 }
01343:   Return
01344: LoadVar(00001)
01345: LoadVar(00000)
01346: ApplyArgToFn
01347:   Return
01348: LoadFn { code: 01344, fvars: 00001 }
01349:   Return
01350: LoadFn { code: 01348, fvars: 00000 }
01351:   Return
01352: LoadFn { code: 01224, fvars: 00000 }
01353: LoadFn { code: 01338, fvars: 00012 }
01354: PushString(""pattern"")
01355: PushString(""body"")
01356: PushString(""value"")
01357: PushString("")
01358: ApplyArgToFn
01359: ApplyArgToFn
01360: ApplyArgToFn
01361: LoadFn { code: 01342, fvars: 00000 }
01362: ApplyArgToFn
01363: ApplyArgToFn
01364: PushString(""->"")
01365: LoadFn { code: 01350, fvars: 00000 }
01366: ApplyArgToFn
01367: ApplyArgToFn
01368: ApplyArgToFn
01369:   Return
01370: LoadFn { code: 00967, fvars: 00011 }
01371: PushString(""unify"")
01372: LoadFn { code: 00981, fvars: 00000 }
01373: ApplyArgToFn
01374: ApplyArgToFn
01375: PushString(""unify"")
01376: LoadFn { code: 00989, fvars: 00000 }
01377: ApplyArgToFn
01378: ApplyArgToFn
01379: LoadFn { code: 01352, fvars: 00011 }
01380: ApplyFnToArg
01381:   Return
01382: LoadFn { code: 00651, fvars: 00011 }
01383: PushString(""acc"")
01384: PushString(""pair"")
01385: PushString("")
01386: ApplyArgToFn
01387: ApplyArgToFn
01388: LoadFn { code: 00655, fvars: 00000 }
01389: ApplyArgToFn
01390: ApplyArgToFn
01391: LoadVar(00010)
01392: ApplyArgToFn
01393: PushString("")
01394: ApplyFnToArg
01395: PushString(""join"")
01396: LoadFn { code: 00663, fvars: 00000 }
01397: ApplyArgToFn
01398: ApplyArgToFn
01399: LoadFn { code: 01370, fvars: 00010 }
01400: ApplyFnToArg
01401:   Return
01402: LoadVar(00001)
01403:   Return
01404: LoadVar(00001)
01405: LoadVar(00003)
01406: ApplyArgToFn
01407:   Return
01408: LoadFn { code: 01404, fvars: 00003 }
01409:   Return
01410: LoadVar(00000)
01411:   Return
01412: LoadFn { code: 01410, fvars: 00000 }
01413:   Return
01414: LoadVar(00002)
01415: LoadVar(00001)
01416: LoadVar(00000)
01417: Unpack
01418: ApplyArgToFn
01419: ApplyArgToFn
01420:   Return
01421: LoadFn { code: 01414, fvars: 00002 }
01422:   Return
01423: LoadFn { code: 01421, fvars: 00001 }
01424:   Return
01425: LoadFn { code: 01402, fvars: 00001 }
01426: LoadFn { code: 01408, fvars: 00002 }
01427: PushString(""xs"")
01428: PushString(""_"")
01429: PushString("")
01430: ApplyArgToFn
01431: ApplyArgToFn
01432: LoadFn { code: 01412, fvars: 00000 }
01433: ApplyArgToFn
01434: ApplyArgToFn
01435: LoadVar(00000)
01436: LoadFn { code: 01423, fvars: 00000 }
01437: ApplyArgToFn
01438: ApplyArgToFn
01439: ApplyArgToFn
01440:   Return
01441: LoadVar(00000)
01442:   Return
01443: LoadFn { code: 01441, fvars: 00000 }
01444:   Return
01445: LoadVar(00001)
01446: LoadVar(00000)
01447: ApplyArgToFn
01448:   Return
01449: LoadFn { code: 01445, fvars: 00001 }
01450:   Return
01451: LoadFn { code: 01449, fvars: 00000 }
01452:   Return
01453: LoadFn { code: 01382, fvars: 00010 }
01454: LoadFn { code: 01425, fvars: 00001 }
01455: PushString(""xs"")
01456: LoadFn { code: 01443, fvars: 00000 }
01457: ApplyArgToFn
01458: ApplyArgToFn
01459: PushString(""second"")
01460: LoadFn { code: 01451, fvars: 00000 }
01461: ApplyArgToFn
01462: ApplyArgToFn
01463: ApplyArgToFn
01464:   Return
01465: LoadVar(00001)
01466:   Return
01467: LoadVar(00000)
01468:   Return
01469: LoadFn { code: 01467, fvars: 00000 }
01470:   Return
01471: LoadVar(00000)
01472:   Return
01473: LoadFn { code: 01471, fvars: 00000 }
01474:   Return
01475: LoadVar(00002)
01476: LoadVar(00001)
01477: LoadVar(00000)
01478: Unpack
01479: ApplyArgToFn
01480: ApplyArgToFn
01481:   Return
01482: LoadFn { code: 01475, fvars: 00002 }
01483:   Return
01484: LoadFn { code: 01482, fvars: 00001 }
01485:   Return
01486: LoadFn { code: 01465, fvars: 00001 }
01487: LoadFn { code: 01469, fvars: 00000 }
01488: PushString(""_"")
01489: PushString(""x"")
01490: PushString("")
01491: ApplyArgToFn
01492: ApplyArgToFn
01493: LoadFn { code: 01473, fvars: 00000 }
01494: ApplyArgToFn
01495: ApplyArgToFn
01496: LoadVar(00000)
01497: LoadFn { code: 01484, fvars: 00000 }
01498: ApplyArgToFn
01499: ApplyArgToFn
01500: ApplyArgToFn
01501:   Return
01502: LoadVar(00000)
01503:   Return
01504: LoadFn { code: 01502, fvars: 00000 }
01505:   Return
01506: LoadVar(00001)
01507: LoadVar(00000)
01508: ApplyArgToFn
01509:   Return
01510: LoadFn { code: 01506, fvars: 00001 }
01511:   Return
01512: LoadFn { code: 01510, fvars: 00000 }
01513:   Return
01514: LoadFn { code: 01453, fvars: 00009 }
01515: LoadFn { code: 01486, fvars: 00000 }
01516: PushString(""xs"")
01517: LoadFn { code: 01504, fvars: 00000 }
01518: ApplyArgToFn
01519: ApplyArgToFn
01520: PushString(""first"")
01521: LoadFn { code: 01512, fvars: 00000 }
01522: ApplyArgToFn
01523: ApplyArgToFn
01524: ApplyArgToFn
01525:   Return
01526: LoadFn { code: 00457, fvars: 00000 }
01527: PushString(""=="")
01528: LoadFn { code: 00471, fvars: 00000 }
01529: ApplyArgToFn
01530: ApplyArgToFn
01531: PushString(""=="")
01532: LoadFn { code: 00479, fvars: 00000 }
01533: ApplyArgToFn
01534: ApplyArgToFn
01535: LoadFn { code: 01514, fvars: 00008 }
01536: ApplyFnToArg
01537:   Return
01538: LoadFn { code: 00297, fvars: 00000 }
01539: PushString(""destructure"")
01540: LoadFn { code: 00311, fvars: 00000 }
01541: ApplyArgToFn
01542: ApplyArgToFn
01543: PushString("")
01544: ApplyFnToArg
01545: PushString(""destructure"")
01546: LoadFn { code: 00319, fvars: 00000 }
01547: ApplyArgToFn
01548: ApplyArgToFn
01549: LoadFn { code: 01526, fvars: 00007 }
01550: ApplyFnToArg
01551:   Return
01552: PushString("")
01553: LoadVar(00002)
01554: ApplyArgToFn
01555: LoadVar(00001)
01556: ApplyFnToArg
01557: LoadVar(00000)
01558: ApplyFnToArg
01559: LoadVar(00005)
01560: ApplyArgToFn
01561:   Return
01562: LoadFn { code: 01552, fvars: 00005 }
01563:   Return
01564: LoadVar(00000)
01565:   Return
01566: LoadFn { code: 01564, fvars: 00000 }
01567:   Return
01568: LoadVar(00001)
01569: LoadVar(00000)
01570: ApplyArgToFn
01571:   Return
01572: LoadFn { code: 01568, fvars: 00001 }
01573:   Return
01574: LoadFn { code: 01572, fvars: 00000 }
01575:   Return
01576: LoadFn { code: 01538, fvars: 00006 }
01577: LoadFn { code: 01562, fvars: 00004 }
01578: PushString(""xs"")
01579: PushString(""ys"")
01580: PushString("")
01581: ApplyArgToFn
01582: ApplyArgToFn
01583: LoadFn { code: 01566, fvars: 00000 }
01584: ApplyArgToFn
01585: ApplyArgToFn
01586: PushString(""zip"")
01587: LoadFn { code: 01574, fvars: 00000 }
01588: ApplyArgToFn
01589: ApplyArgToFn
01590: ApplyArgToFn
01591:   Return
01592: LoadFn { code: 00218, fvars: 00000 }
01593: PushString(""zip"")
01594: LoadFn { code: 00234, fvars: 00000 }
01595: ApplyArgToFn
01596: ApplyArgToFn
01597: PushString(""zip"")
01598: LoadFn { code: 00242, fvars: 00000 }
01599: ApplyArgToFn
01600: ApplyArgToFn
01601: LoadFn { code: 01576, fvars: 00005 }
01602: ApplyFnToArg
01603:   Return
01604: LoadVar(00000)
01605: LoadVar(00001)
01606: ApplyArgToFn
01607:   Return
01608: LoadFn { code: 01604, fvars: 00001 }
01609:   Return
01610: LoadVar(00000)
01611:   Return
01612: LoadFn { code: 01610, fvars: 00000 }
01613:   Return
01614: LoadFn { code: 01608, fvars: 00000 }
01615: PushString(""acc"")
01616: PushString(""x"")
01617: PushString("")
01618: ApplyArgToFn
01619: ApplyArgToFn
01620: LoadFn { code: 01612, fvars: 00000 }
01621: ApplyArgToFn
01622: ApplyArgToFn
01623: LoadVar(00006)
01624: ApplyArgToFn
01625: LoadVar(00001)
01626: ApplyFnToArg
01627: LoadVar(00000)
01628: ApplyFnToArg
01629:   Return
01630: LoadFn { code: 01614, fvars: 00006 }
01631:   Return
01632: LoadVar(00000)
01633:   Return
01634: LoadFn { code: 01632, fvars: 00000 }
01635:   Return
01636: LoadFn { code: 01630, fvars: 00005 }
01637: PushString(""acc"")
01638: PushString(""x"")
01639: PushString("")
01640: ApplyArgToFn
01641: ApplyArgToFn
01642: LoadFn { code: 01634, fvars: 00000 }
01643: ApplyArgToFn
01644: ApplyArgToFn
01645: LoadVar(00004)
01646: ApplyArgToFn
01647: PushString("")
01648: ApplyFnToArg
01649: LoadVar(00000)
01650: ApplyFnToArg
01651: LoadVar(00002)
01652: ApplyArgToFn
01653:   Return
01654: LoadVar(00000)
01655:   Return
01656: LoadFn { code: 01654, fvars: 00000 }
01657:   Return
01658: LoadVar(00001)
01659: LoadVar(00000)
01660: ApplyArgToFn
01661:   Return
01662: LoadFn { code: 01658, fvars: 00001 }
01663:   Return
01664: LoadFn { code: 01662, fvars: 00000 }
01665:   Return
01666: LoadFn { code: 01592, fvars: 00004 }
01667: LoadFn { code: 01636, fvars: 00004 }
01668: PushString(""xs"")
01669: LoadFn { code: 01656, fvars: 00000 }
01670: ApplyArgToFn
01671: ApplyArgToFn
01672: PushString(""flatten"")
01673: LoadFn { code: 01664, fvars: 00000 }
01674: ApplyArgToFn
01675: ApplyArgToFn
01676: ApplyArgToFn
01677:   Return
01678: LoadVar(00000)
01679: LoadVar(00003)
01680: ApplyArgToFn
01681: LoadVar(00001)
01682: ApplyArgToFn
01683:   Return
01684: LoadFn { code: 01678, fvars: 00003 }
01685:   Return
01686: LoadVar(00000)
01687:   Return
01688: LoadFn { code: 01686, fvars: 00000 }
01689:   Return
01690: LoadFn { code: 01684, fvars: 00002 }
01691: PushString(""xs"")
01692: PushString(""x"")
01693: PushString("")
01694: ApplyArgToFn
01695: ApplyArgToFn
01696: LoadFn { code: 01688, fvars: 00000 }
01697: ApplyArgToFn
01698: ApplyArgToFn
01699: LoadVar(00004)
01700: ApplyArgToFn
01701: PushString("")
01702: ApplyFnToArg
01703: LoadVar(00000)
01704: LoadVar(00002)
01705: ApplyArgToFn
01706: ApplyFnToArg
01707:   Return
01708: LoadFn { code: 01690, fvars: 00004 }
01709:   Return
01710: LoadVar(00000)
01711:   Return
01712: LoadFn { code: 01710, fvars: 00000 }
01713:   Return
01714: LoadVar(00001)
01715: LoadVar(00000)
01716: ApplyArgToFn
01717:   Return
01718: LoadFn { code: 01714, fvars: 00001 }
01719:   Return
01720: LoadFn { code: 01718, fvars: 00000 }
01721:   Return
01722: LoadFn { code: 01666, fvars: 00003 }
01723: LoadFn { code: 01708, fvars: 00003 }
01724: PushString(""f"")
01725: PushString(""xs"")
01726: PushString("")
01727: ApplyArgToFn
01728: ApplyArgToFn
01729: LoadFn { code: 01712, fvars: 00000 }
01730: ApplyArgToFn
01731: ApplyArgToFn
01732: PushString(""map"")
01733: LoadFn { code: 01720, fvars: 00000 }
01734: ApplyArgToFn
01735: ApplyArgToFn
01736: ApplyArgToFn
01737:   Return
01738: LoadVar(00000)
01739: LoadVar(00001)
01740: ApplyArgToFn
01741:   Return
01742: LoadFn { code: 01738, fvars: 00001 }
01743:   Return
01744: LoadVar(00000)
01745:   Return
01746: LoadFn { code: 01744, fvars: 00000 }
01747:   Return
01748: LoadFn { code: 01742, fvars: 00000 }
01749: PushString(""xs"")
01750: PushString(""x"")
01751: PushString("")
01752: ApplyArgToFn
01753: ApplyArgToFn
01754: LoadFn { code: 01746, fvars: 00000 }
01755: ApplyArgToFn
01756: ApplyArgToFn
01757: LoadVar(00002)
01758: ApplyArgToFn
01759: PushString("")
01760: ApplyFnToArg
01761: LoadVar(00000)
01762: ApplyFnToArg
01763:   Return
01764: LoadVar(00000)
01765:   Return
01766: LoadFn { code: 01764, fvars: 00000 }
01767:   Return
01768: LoadVar(00001)
01769: LoadVar(00000)
01770: ApplyArgToFn
01771:   Return
01772: LoadFn { code: 01768, fvars: 00001 }
01773:   Return
01774: LoadFn { code: 01772, fvars: 00000 }
01775:   Return
01776: LoadFn { code: 01722, fvars: 00002 }
01777: LoadFn { code: 01748, fvars: 00002 }
01778: PushString(""xs"")
01779: LoadFn { code: 01766, fvars: 00000 }
01780: ApplyArgToFn
01781: ApplyArgToFn
01782: PushString(""reverse"")
01783: LoadFn { code: 01774, fvars: 00000 }
01784: ApplyArgToFn
01785: ApplyArgToFn
01786: ApplyArgToFn
01787:   Return
01788: LoadVar(00000)
01789: LoadVar(00001)
01790: ApplyArgToFn
01791:   Return
01792: LoadFn { code: 01788, fvars: 00001 }
01793:   Return
01794: LoadVar(00000)
01795:   Return
01796: LoadFn { code: 01794, fvars: 00000 }
01797:   Return
01798: LoadFn { code: 01792, fvars: 00000 }
01799: PushString(""f"")
01800: PushString(""x"")
01801: PushString("")
01802: ApplyArgToFn
01803: ApplyArgToFn
01804: LoadFn { code: 01796, fvars: 00000 }
01805: ApplyArgToFn
01806: ApplyArgToFn
01807: LoadVar(00002)
01808: ApplyArgToFn
01809: LoadVar(00001)
01810: ApplyFnToArg
01811: LoadVar(00000)
01812: ApplyFnToArg
01813:   Return
01814: LoadFn { code: 01798, fvars: 00002 }
01815:   Return
01816: LoadVar(00000)
01817:   Return
01818: LoadFn { code: 01816, fvars: 00000 }
01819:   Return
01820: LoadVar(00001)
01821: LoadVar(00000)
01822: ApplyArgToFn
01823:   Return
01824: LoadFn { code: 01820, fvars: 00001 }
01825:   Return
01826: LoadFn { code: 01824, fvars: 00000 }
01827:   Return
01828: LoadFn { code: 01776, fvars: 00001 }
01829: LoadFn { code: 01814, fvars: 00001 }
01830: PushString(""f"")
01831: PushString(""xs"")
01832: PushString("")
01833: ApplyArgToFn
01834: ApplyArgToFn
01835: LoadFn { code: 01818, fvars: 00000 }
01836: ApplyArgToFn
01837: ApplyArgToFn
01838: PushString(""apply"")
01839: LoadFn { code: 01826, fvars: 00000 }
01840: ApplyArgToFn
01841: ApplyArgToFn
01842: ApplyArgToFn
01843:   Return
01844: LoadFn { code: 00065, fvars: 00000 }
01845: PushString(""fold"")
01846: LoadFn { code: 00081, fvars: 00000 }
01847: ApplyArgToFn
01848: ApplyArgToFn
01849: PushString(""fold"")
01850: LoadFn { code: 00089, fvars: 00000 }
01851: ApplyArgToFn
01852: ApplyArgToFn
01853: LoadFn { code: 01828, fvars: 00000 }
01854: ApplyFnToArg
01855:   Return

[Bar, Foo, Bar, Foo, Bar, Foo, Bar, Foo, NoMatch([["x", Foo], ["x", Bar]])]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:apply = ([:f, :xs] => {
    fold([:f, :x] => { f(x) }, f, xs)
})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:map = ([:f, :xs] => {
    fold([:xs, :x] => { xs(f(x)) }, [], reverse(xs))
})
:flatten = (:xs => {
    reverse(fold([:acc, :x] => {
        fold([:acc, :x] => { acc(x) }, acc, x)
    }, [], xs))
})
:zip = (:zip ~> { [:acc, :xs, :ys] => {
    __unpack(xs, [:xs, :x] => {
        __unpack(ys, [:ys, :y] => { zip(acc([x, y]), xs, ys) }, {})
    }, {
        __unpack(ys, [:ys, :y] => {}, { acc })
    })
}})
:zip = ([:xs, :ys] => {
    reverse(zip([], xs, ys))
})
:destructure = (:destructure ~> { [:acc, :compound] => {
    __unpack(compound, [:xs, :x] => {
        destructure(acc(x), xs)
    }, {
        [compound, acc]
    })
} })([])
:== = (:== ~> { [:a, :b] => {
    __unpack(a, [:xs, :x] => {
        __unpack(b, [:ys, :y] => {
            __compare(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        __compare(a, b, { True }, { False })
    })
}})
:first = (:xs => {
    __unpack(xs, [:_, :x] => { x }, { xs })
})
:second = (:xs => {
    __unpack(xs, [:xs, :_] => { first(xs) }, { xs })
})
:join = fold([:acc, :pair] => {
    :xvar = first(pair)
    :xval = second(pair)
    fold([:_, :pair] => {
        :yvar = first(pair)
        :yval = second(pair)
        __compare(xvar, yvar, {
            __compare(xval == yval, False, {
                no-match!([[xvar, xval], [yvar, yval]])
            }, {})
        }, {})
    }, [], acc)
    acc(pair)
}, [])
:unify = (:unify ~> { [:pattern, :value] => {
    __unpack(pattern, [:type, :pattern] => {
        __compare(type, Binding, {
            [[pattern, value]]
        }, {
            __compare(type, List, {
                :zipped = zip(pattern, value)
                __compare(zipped, [], {
                    no-match!([type(pattern), value])
                }, {
                    join(flatten(map(apply(unify), zipped)))
                })
            }, {
                __unpack(type, [:type, :f] => {
                    __compare(type, Compound, {
                        :v = destructure(value)
                        :vf = first(v)
                        :vargs = second(v)
                        :zipped = reverse(zip(pattern(f), vargs(vf)))
                        __compare(zipped, [], {
                            no-match!([type(f, pattern), value])
                        }, {
                            join(flatten(map(apply(unify), zipped)))
                        })
                    }, {
                        invalid!(type(f, pattern))
                    })
                }, {
                    __compare(pattern == value, True, {}, {
                        no-match!([pattern, value])
                    })
                })
            })
        })
    }, {
        invalid!(pattern)
    })
}})
:-> = ([:pattern, :body, :value] => {
    __handle( {
        :args = map(second, unify(pattern, value))
        __compare(args, [], {
            body()
        }, {
            apply(body, args)
        })
    }, no-match!, [:_, :arg] => {
        no-match!(arg)
    })
})
__handle({
    [
        (Foo -> { Bar })(Foo)
        (:x -> { x })(Foo)
        (:x -> { Bar })(Foo)
        (Pair(Foo, Bar) -> { Foo })(Pair(Foo, Bar))
        (Pair(:x, :y) -> { y })(Pair(Foo, Bar))
        (Pair(:x, Bar) -> { x })(Pair(Foo, Bar))
        (Pair(:x, :x) -> { x })(Pair(Bar, Bar))
        (:foo(:x, :y) -> { y })(Pair(Foo, Bar))
        ([:x, :y] -> { y })([Foo, Bar])
        (Pair(:x, :x) -> { x })(Pair(Foo, Bar))
    ]
}, no-match!, [:r, :arg] => {
    r(NoMatch(arg))
})

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :apply
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :f
            :x ]
          { (f
              x) })
        f
        xs) }))
(=
  :reverse
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :map
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              (f
                x)) })
        [  ]
        (reverse
          xs)) }))
(=
  :flatten
  (=>
    :xs
    { (reverse
        (fold
          (=>
            [ :acc
              :x ]
            { (fold
                (=>
                  [ :acc
                    :x ]
                  { (acc
                      x) })
                acc
                x) })
          [  ]
          xs)) }))
(=
  :zip
  (~>
    :zip
    { (=>
        [ :acc
          :xs
          :ys ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (__unpack
                  ys
                  (=>
                    [ :ys
                      :y ]
                    { (zip
                        (acc
                          [ x
                            y ])
                        xs
                        ys) })
                  {  }) })
            { (__unpack
                ys
                (=>
                  [ :ys
                    :y ]
                  {  })
                { acc }) }) }) }))
(=
  :zip
  (=>
    [ :xs
      :ys ]
    { (reverse
        (zip
          [  ]
          xs
          ys)) }))
(=
  :destructure
  ((~>
    :destructure
    { (=>
        [ :acc
          :compound ]
        { (__unpack
            compound
            (=>
              [ :xs
                :x ]
              { (destructure
                  (acc
                    x)
                  xs) })
            { [ compound
                acc ] }) }) })
    [  ]))
(=
  :==
  (~>
    :==
    { (=>
        [ :a
          :b ]
        { (__unpack
            a
            (=>
              [ :xs
                :x ]
              { (__unpack
                  b
                  (=>
                    [ :ys
                      :y ]
                    { (__compare
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (__compare
                a
                b
                { True }
                { False }) }) }) }))
(=
  :first
  (=>
    :xs
    { (__unpack
        xs
        (=>
          [ :_
            :x ]
          { x })
        { xs }) }))
(=
  :second
  (=>
    :xs
    { (__unpack
        xs
        (=>
          [ :xs
            :_ ]
          { (first
              xs) })
        { xs }) }))
(=
  :join
  (fold
    (=>
      [ :acc
        :pair ]
      { (=
          :xvar
          (first
            pair))
        (=
          :xval
          (second
            pair))
        (fold
          (=>
            [ :_
              :pair ]
            { (=
                :yvar
                (first
                  pair))
              (=
                :yval
                (second
                  pair))
              (__compare
                xvar
                yvar
                { (__compare
                    (==
                      xval
                      yval)
                    False
                    { (no-match!
                        [ [ xvar
                            xval ]
                          [ yvar
                            yval ] ]) }
                    {  }) }
                {  }) })
          [  ]
          acc)
        (acc
          pair) })
    [  ]))
(=
  :unify
  (~>
    :unify
    { (=>
        [ :pattern
          :value ]
        { (__unpack
            pattern
            (=>
              [ :type
                :pattern ]
              { (__compare
                  type
                  Binding
                  { [ [ pattern
                        value ] ] }
                  { (__compare
                      type
                      List
                      { (=
                          :zipped
                          (zip
                            pattern
                            value))
                        (__compare
                          zipped
                          [  ]
                          { (no-match!
                              [ (type
                                  pattern)
                                value ]) }
                          { (join
                              (flatten
                                (map
                                  (apply
                                    unify)
                                  zipped))) }) }
                      { (__unpack
                          type
                          (=>
                            [ :type
                              :f ]
                            { (__compare
                                type
                                Compound
                                { (=
                                    :v
                                    (destructure
                                      value))
                                  (=
                                    :vf
                                    (first
                                      v))
                                  (=
                                    :vargs
                                    (second
                                      v))
                                  (=
                                    :zipped
                                    (reverse
                                      (zip
                                        (pattern
                                          f)
                                        (vargs
                                          vf))))
                                  (__compare
                                    zipped
                                    [  ]
                                    { (no-match!
                                        [ (type
                                            f
                                            pattern)
                                          value ]) }
                                    { (join
                                        (flatten
                                          (map
                                            (apply
                                              unify)
                                            zipped))) }) }
                                { (invalid!
                                    (type
                                      f
                                      pattern)) }) })
                          { (__compare
                              (==
                                pattern
                                value)
                              True
                              {  }
                              { (no-match!
                                  [ pattern
                                    value ]) }) }) }) }) })
            { (invalid!
                pattern) }) }) }))
(=
  :->
  (=>
    [ :pattern
      :body
      :value ]
    { (__handle
        { (=
            :args
            (map
              second
              (unify
                pattern
                value)))
          (__compare
            args
            [  ]
            { (body) }
            { (apply
                body
                args) }) }
        no-match!
        (=>
          [ :_
            :arg ]
          { (no-match!
              arg) })) }))
(__handle
  { [ ((->
        Foo
        { Bar })
        Foo)
      ((->
        :x
        { x })
        Foo)
      ((->
        :x
        { Bar })
        Foo)
      ((->
        (Pair
          Foo
          Bar)
        { Foo })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          :x
          :y)
        { y })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          :x
          Bar)
        { x })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          :x
          :x)
        { x })
        (Pair
          Bar
          Bar))
      ((->
        (:foo
          :x
          :y)
        { y })
        (Pair
          Foo
          Bar))
      ((->
        [ :x
          :y ]
        { y })
        [ Foo
          Bar ])
      ((->
        (Pair
          :x
          :x)
        { x })
        (Pair
          Foo
          Bar)) ] }
  no-match!
  (=>
    [ :r
      :arg ]
    { (r
        (NoMatch
          arg)) }))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "apply" )
        ( ( =>
              =>
                0
            ( ( []
                "xs" )
              "f" ) )
          =>
            =>
              ( ( ( 2
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "f" ) )
                      =>
                        =>
                          ( 1
                            0 ) ) )
                  1 )
                0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "reverse" )
            ( ( =>
                  =>
                    0
                "xs" )
              =>
                ( ( ( 2
                      ( ( =>
                            =>
                              0
                          ( ( []
                              "x" )
                            "xs" ) )
                        =>
                          =>
                            ( 1
                              0 ) ) )
                    [] )
                  0 ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "map" )
                ( ( =>
                      =>
                        0
                    ( ( []
                        "xs" )
                      "f" ) )
                  =>
                    =>
                      ( ( ( 4
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "x" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 1
                                    ( 3
                                      0 ) ) ) )
                          [] )
                        ( 2
                          0 ) ) ) )
              =>
                ( ( ( =>
                        =>
                          =>
                            ( 0
                              1 )
                      "flatten" )
                    ( ( =>
                          =>
                            0
                        "xs" )
                      =>
                        ( 2
                          ( ( ( 4
                                ( ( =>
                                      =>
                                        0
                                    ( ( []
                                        "x" )
                                      "acc" ) )
                                  =>
                                    =>
                                      ( ( ( 6
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "x" )
                                                  "acc" ) )
                                              =>
                                                =>
                                                  ( 1
                                                    0 ) ) )
                                          1 )
                                        0 ) ) )
                              [] )
                            0 ) ) ) )
                  =>
                    ( ( ( =>
                            =>
                              =>
                                ( 0
                                  1 )
                          "zip" )
                        ( ( =>
                              =>
                                ~>
                                  0
                            "zip" )
                          =>
                            ( ( =>
                                  =>
                                    0
                                ( ( ( []
                                      "ys" )
                                    "xs" )
                                  "acc" ) )
                              =>
                                =>
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( pop
                                                  2
                                                  1
                                                  0 )
                                          1 )
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "x" )
                                              "xs" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    2 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "y" )
                                                        "ys" ) )
                                                    =>
                                                      =>
                                                        ( ( ( 7
                                                              ( 6
                                                                ( ( []
                                                                    0 )
                                                                  2 ) ) )
                                                            3 )
                                                          1 ) ) )
                                                =>
                                                  [] ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              1 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "y" )
                                                  "ys" ) )
                                              =>
                                                =>
                                                  [] ) )
                                          =>
                                            4 ) ) ) ) )
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( 0
                                      1 )
                              "zip" )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "ys" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 5
                                    ( ( ( 2
                                          [] )
                                        1 )
                                      0 ) ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( 0
                                          1 )
                                  "destructure" )
                                ( ( ( =>
                                        =>
                                          ~>
                                            0
                                      "destructure" )
                                    =>
                                      ( ( =>
                                            =>
                                              0
                                          ( ( []
                                              "compound" )
                                            "acc" ) )
                                        =>
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "x" )
                                                      "xs" ) )
                                                  =>
                                                    =>
                                                      ( ( 4
                                                          ( 3
                                                            0 ) )
                                                        1 ) ) )
                                              =>
                                                ( ( []
                                                    2 )
                                                  1 ) ) ) )
                                  [] ) )
                              =>
                                ( ( ( =>
                                        =>
                                          =>
                                            ( 0
                                              1 )
                                      "==" )
                                    ( ( =>
                                          =>
                                            ~>
                                              0
                                        "==" )
                                      =>
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "b" )
                                              "a" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    1 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "x" )
                                                        "xs" ) )
                                                    =>
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( pop
                                                                      2
                                                                      1
                                                                      0 )
                                                              2 )
                                                            ( ( =>
                                                                  =>
                                                                    0
                                                                ( ( []
                                                                    "y" )
                                                                  "ys" ) )
                                                              =>
                                                                =>
                                                                  ( ( ( ( =>
                                                                            =>
                                                                              =>
                                                                                =>
                                                                                  ( if
                                                                                    3
                                                                                    2
                                                                                    1
                                                                                    0 )
                                                                          ( ( 6
                                                                              2 )
                                                                            0 ) )
                                                                        True )
                                                                      =>
                                                                        ( ( 7
                                                                            4 )
                                                                          2 ) )
                                                                    =>
                                                                      False ) ) )
                                                          =>
                                                            False ) ) )
                                                =>
                                                  ( ( ( ( =>
                                                            =>
                                                              =>
                                                                =>
                                                                  ( if
                                                                    3
                                                                    2
                                                                    1
                                                                    0 )
                                                          2 )
                                                        1 )
                                                      =>
                                                        True )
                                                    =>
                                                      False ) ) ) ) )
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( 0
                                                  1 )
                                          "first" )
                                        ( ( =>
                                              =>
                                                0
                                            "xs" )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "x" )
                                                      "_" ) )
                                                  =>
                                                    =>
                                                      0 ) )
                                              =>
                                                1 ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( 0
                                                      1 )
                                              "second" )
                                            ( ( =>
                                                  =>
                                                    0
                                                "xs" )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( pop
                                                              2
                                                              1
                                                              0 )
                                                      0 )
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "_" )
                                                          "xs" ) )
                                                      =>
                                                        =>
                                                          ( 3
                                                            1 ) ) )
                                                  =>
                                                    1 ) ) )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( 0
                                                          1 )
                                                  "join" )
                                                ( ( 10
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "pair" )
                                                          "acc" ) )
                                                      =>
                                                        =>
                                                          ( ( ( =>
                                                                  =>
                                                                    =>
                                                                      ( 0
                                                                        1 )
                                                                "xvar" )
                                                              ( 3
                                                                0 ) )
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( 0
                                                                            1 )
                                                                    "xval" )
                                                                  ( 3
                                                                    1 ) )
                                                                =>
                                                                  ( =>
                                                                      ( 4
                                                                        3 )
                                                                    ( ( ( 14
                                                                          ( ( =>
                                                                                =>
                                                                                  0
                                                                              ( ( []
                                                                                  "pair" )
                                                                                "_" ) )
                                                                            =>
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( 0
                                                                                              1 )
                                                                                      "yvar" )
                                                                                    ( 7
                                                                                      0 ) )
                                                                                  =>
                                                                                    ( ( ( =>
                                                                                            =>
                                                                                              =>
                                                                                                ( 0
                                                                                                  1 )
                                                                                          "yval" )
                                                                                        ( 7
                                                                                          1 ) )
                                                                                      =>
                                                                                        ( ( ( ( =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        ( if
                                                                                                          3
                                                                                                          2
                                                                                                          1
                                                                                                          0 )
                                                                                                5 )
                                                                                              1 )
                                                                                            =>
                                                                                              ( ( ( ( =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            =>
                                                                                                              ( if
                                                                                                                3
                                                                                                                2
                                                                                                                1
                                                                                                                0 )
                                                                                                      ( ( 11
                                                                                                          5 )
                                                                                                        1 ) )
                                                                                                    False )
                                                                                                  =>
                                                                                                    ( no-match!
                                                                                                      ( ( []
                                                                                                          ( ( []
                                                                                                              2 )
                                                                                                            3 ) )
                                                                                                        ( ( []
                                                                                                            6 )
                                                                                                          7 ) ) ) )
                                                                                                =>
                                                                                                  [] ) )
                                                                                          =>
                                                                                            [] ) ) ) ) )
                                                                        [] )
                                                                      3 ) ) ) ) ) )
                                                  [] ) )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( 0
                                                              1 )
                                                      "unify" )
                                                    ( ( =>
                                                          =>
                                                            ~>
                                                              0
                                                        "unify" )
                                                      =>
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( []
                                                                "value" )
                                                              "pattern" ) )
                                                          =>
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( pop
                                                                            2
                                                                            1
                                                                            0 )
                                                                    1 )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "pattern" )
                                                                        "type" ) )
                                                                    =>
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                1 )
                                                                              Binding )
                                                                            =>
                                                                              ( []
                                                                                ( ( []
                                                                                    3 )
                                                                                  1 ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    2 )
                                                                                  List )
                                                                                =>
                                                                                  ( ( ( =>
                                                                                          =>
                                                                                            =>
                                                                                              ( 0
                                                                                                1 )
                                                                                        "zipped" )
                                                                                      ( ( 12
                                                                                          2 )
                                                                                        4 ) )
                                                                                    =>
                                                                                      ( ( ( ( =>
                                                                                                =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      ( if
                                                                                                        3
                                                                                                        2
                                                                                                        1
                                                                                                        0 )
                                                                                              0 )
                                                                                            [] )
                                                                                          =>
                                                                                            ( no-match!
                                                                                              ( ( []
                                                                                                  6 )
                                                                                                ( 5
                                                                                                  4 ) ) ) )
                                                                                        =>
                                                                                          ( 9
                                                                                            ( 16
                                                                                              ( ( 17
                                                                                                  ( 19
                                                                                                    8 ) )
                                                                                                1 ) ) ) ) ) )
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( pop
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                      3 )
                                                                                    ( ( =>
                                                                                          =>
                                                                                            0
                                                                                        ( ( []
                                                                                            "f" )
                                                                                          "type" ) )
                                                                                      =>
                                                                                        =>
                                                                                          ( ( ( ( =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        =>
                                                                                                          ( if
                                                                                                            3
                                                                                                            2
                                                                                                            1
                                                                                                            0 )
                                                                                                  1 )
                                                                                                Compound )
                                                                                              =>
                                                                                                ( ( ( =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            ( 0
                                                                                                              1 )
                                                                                                      "v" )
                                                                                                    ( 14
                                                                                                      7 ) )
                                                                                                  =>
                                                                                                    ( ( ( =>
                                                                                                            =>
                                                                                                              =>
                                                                                                                ( 0
                                                                                                                  1 )
                                                                                                          "vf" )
                                                                                                        ( 13
                                                                                                          0 ) )
                                                                                                      =>
                                                                                                        ( ( ( =>
                                                                                                                =>
                                                                                                                  =>
                                                                                                                    ( 0
                                                                                                                      1 )
                                                                                                              "vargs" )
                                                                                                            ( 13
                                                                                                              1 ) )
                                                                                                          =>
                                                                                                            ( ( ( =>
                                                                                                                    =>
                                                                                                                      =>
                                                                                                                        ( 0
                                                                                                                          1 )
                                                                                                                  "zipped" )
                                                                                                                ( 22
                                                                                                                  ( ( 18
                                                                                                                      ( 8
                                                                                                                        4 ) )
                                                                                                                    ( 0
                                                                                                                      1 ) ) ) )
                                                                                                              =>
                                                                                                                ( ( ( ( =>
                                                                                                                          =>
                                                                                                                            =>
                                                                                                                              =>
                                                                                                                                ( if
                                                                                                                                  3
                                                                                                                                  2
                                                                                                                                  1
                                                                                                                                  0 )
                                                                                                                        0 )
                                                                                                                      [] )
                                                                                                                    =>
                                                                                                                      ( no-match!
                                                                                                                        ( ( []
                                                                                                                            12 )
                                                                                                                          ( ( 7
                                                                                                                              6 )
                                                                                                                            10 ) ) ) )
                                                                                                                  =>
                                                                                                                    ( 15
                                                                                                                      ( 22
                                                                                                                        ( ( 23
                                                                                                                            ( 25
                                                                                                                              14 ) )
                                                                                                                          1 ) ) ) ) ) ) ) ) )
                                                                                            =>
                                                                                              ( invalid!
                                                                                                ( ( 2
                                                                                                    1 )
                                                                                                  5 ) ) ) ) )
                                                                                  =>
                                                                                    ( ( ( ( =>
                                                                                              =>
                                                                                                =>
                                                                                                  =>
                                                                                                    ( if
                                                                                                      3
                                                                                                      2
                                                                                                      1
                                                                                                      0 )
                                                                                            ( ( 11
                                                                                                3 )
                                                                                              5 ) )
                                                                                          True )
                                                                                        =>
                                                                                          [] )
                                                                                      =>
                                                                                        ( no-match!
                                                                                          ( ( []
                                                                                              6 )
                                                                                            4 ) ) ) ) ) ) ) )
                                                                =>
                                                                  ( invalid!
                                                                    2 ) ) ) ) )
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( 0
                                                                  1 )
                                                          "->" )
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( ( []
                                                                  "value" )
                                                                "body" )
                                                              "pattern" ) )
                                                          =>
                                                            =>
                                                              =>
                                                                ( ( ( =>
                                                                        =>
                                                                          =>
                                                                            ( try
                                                                              2
                                                                              1
                                                                              0 )
                                                                      =>
                                                                        ( ( ( =>
                                                                                =>
                                                                                  =>
                                                                                    ( 0
                                                                                      1 )
                                                                              "args" )
                                                                            ( ( 13
                                                                                6 )
                                                                              ( ( 4
                                                                                  3 )
                                                                                1 ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    0 )
                                                                                  [] )
                                                                                =>
                                                                                  ( 4
                                                                                    [] ) )
                                                                              =>
                                                                                ( ( 17
                                                                                    4 )
                                                                                  1 ) ) ) )
                                                                    no-match! )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "arg" )
                                                                        "_" ) )
                                                                    =>
                                                                      =>
                                                                        ( no-match!
                                                                          0 ) ) ) ) )
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( try
                                                                      2
                                                                      1
                                                                      0 )
                                                              =>
                                                                ( ( ( ( ( ( ( ( ( ( []
                                                                                    ( ( ( 1
                                                                                          ( ( Compound
                                                                                              ( Value
                                                                                                Pair ) )
                                                                                            ( ( []
                                                                                                ( Binding
                                                                                                  "x" ) )
                                                                                              ( Binding
                                                                                                "x" ) ) ) )
                                                                                        =>
                                                                                          =>
                                                                                            0 )
                                                                                      ( ( Pair
                                                                                          Foo )
                                                                                        Bar ) ) )
                                                                                  ( ( ( 1
                                                                                        ( List
                                                                                          ( ( []
                                                                                              ( Binding
                                                                                                "y" ) )
                                                                                            ( Binding
                                                                                              "x" ) ) ) )
                                                                                      =>
                                                                                        =>
                                                                                          1 )
                                                                                    ( ( []
                                                                                        Bar )
                                                                                      Foo ) ) )
                                                                                ( ( ( 1
                                                                                      ( ( Compound
                                                                                          ( Binding
                                                                                            "foo" ) )
                                                                                        ( ( []
                                                                                            ( Binding
                                                                                              "y" ) )
                                                                                          ( Binding
                                                                                            "x" ) ) ) )
                                                                                    =>
                                                                                      =>
                                                                                        =>
                                                                                          1 )
                                                                                  ( ( Pair
                                                                                      Foo )
                                                                                    Bar ) ) )
                                                                              ( ( ( 1
                                                                                    ( ( Compound
                                                                                        ( Value
                                                                                          Pair ) )
                                                                                      ( ( []
                                                                                          ( Binding
                                                                                            "x" ) )
                                                                                        ( Binding
                                                                                          "x" ) ) ) )
                                                                                  =>
                                                                                    =>
                                                                                      0 )
                                                                                ( ( Pair
                                                                                    Bar )
                                                                                  Bar ) ) )
                                                                            ( ( ( 1
                                                                                  ( ( Compound
                                                                                      ( Value
                                                                                        Pair ) )
                                                                                    ( ( []
                                                                                        ( Value
                                                                                          Bar ) )
                                                                                      ( Binding
                                                                                        "x" ) ) ) )
                                                                                =>
                                                                                  0 )
                                                                              ( ( Pair
                                                                                  Foo )
                                                                                Bar ) ) )
                                                                          ( ( ( 1
                                                                                ( ( Compound
                                                                                    ( Value
                                                                                      Pair ) )
                                                                                  ( ( []
                                                                                      ( Binding
                                                                                        "y" ) )
                                                                                    ( Binding
                                                                                      "x" ) ) ) )
                                                                              =>
                                                                                =>
                                                                                  0 )
                                                                            ( ( Pair
                                                                                Foo )
                                                                              Bar ) ) )
                                                                        ( ( ( 1
                                                                              ( Value
                                                                                ( ( Pair
                                                                                    Foo )
                                                                                  Bar ) ) )
                                                                            =>
                                                                              Foo )
                                                                          ( ( Pair
                                                                              Foo )
                                                                            Bar ) ) )
                                                                      ( ( ( 1
                                                                            ( Binding
                                                                              "x" ) )
                                                                          =>
                                                                            Bar )
                                                                        Foo ) )
                                                                    ( ( ( 1
                                                                          ( Binding
                                                                            "x" ) )
                                                                        =>
                                                                          0 )
                                                                      Foo ) )
                                                                  ( ( ( 1
                                                                        ( Value
                                                                          Foo ) )
                                                                      =>
                                                                        Bar )
                                                                    Foo ) ) )
                                                            no-match! )
                                                          ( ( =>
                                                                =>
                                                                  0
                                                              ( ( []
                                                                  "arg" )
                                                                "r" ) )
                                                            =>
                                                              =>
                                                                ( 1
                                                                  ( NoMatch
                                                                    0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00002)
00011:   Return
00012: LoadVar(00004)
00013: LoadVar(00005)
00014: ApplyArgToFn
00015: LoadVar(00003)
00016: LoadVar(00004)
00017: ApplyArgToFn
00018: LoadVar(00000)
00019: ApplyFnToArg
00020: ApplyFnToArg
00021: LoadVar(00001)
00022: ApplyFnToArg
00023:   Return
00024: LoadFn { code: 00012, fvars: 00005 }
00025:   Return
00026: LoadVar(00000)
00027:   Return
00028: LoadFn { code: 00026, fvars: 00000 }
00029:   Return
00030: LoadVar(00002)
00031: LoadVar(00001)
00032: LoadVar(00000)
00033: Unpack
00034: ApplyArgToFn
00035: ApplyArgToFn
00036:   Return
00037: LoadFn { code: 00030, fvars: 00002 }
00038:   Return
00039: LoadFn { code: 00037, fvars: 00001 }
00040:   Return
00041: LoadFn { code: 00010, fvars: 00002 }
00042: LoadFn { code: 00024, fvars: 00004 }
00043: PushString(""xs"")
00044: PushString(""x"")
00045: PushString("")
00046: ApplyArgToFn
00047: ApplyArgToFn
00048: LoadFn { code: 00028, fvars: 00000 }
00049: ApplyArgToFn
00050: ApplyArgToFn
00051: LoadVar(00000)
00052: LoadFn { code: 00039, fvars: 00000 }
00053: ApplyArgToFn
00054: ApplyArgToFn
00055: ApplyArgToFn
00056:   Return
00057: LoadFn { code: 00041, fvars: 00003 }
00058:   Return
00059: LoadFn { code: 00057, fvars: 00002 }
00060:   Return
00061: LoadVar(00000)
00062:   Return
00063: LoadFn { code: 00061, fvars: 00000 }
00064:   Return
00065: LoadFn { code: 00059, fvars: 00001 }
00066: PushString(""f"")
00067: PushString(""acc"")
00068: PushString(""xs"")
00069: PushString("")
00070: ApplyArgToFn
00071: ApplyArgToFn
00072: ApplyArgToFn
00073: LoadFn { code: 00063, fvars: 00000 }
00074: ApplyArgToFn
00075: ApplyArgToFn
00076:   Return
00077: LoadVar(00000)
00078: LoadFn { code: 00000, fvars: 00000 }
00079: ApplyArgToFn
00080:   Return
00081: LoadFn { code: 00077, fvars: 00000 }
00082:   Return
00083: LoadVar(00001)
00084: LoadVar(00000)
00085: ApplyArgToFn
00086:   Return
00087: LoadFn { code: 00083, fvars: 00001 }
00088:   Return
00089: LoadFn { code: 00087, fvars: 00000 }
00090:   Return
00091: LoadVar(00004)
00092:   Return
00093: PushString("")
00094:   Return
00095: LoadFn { code: 00093, fvars: 00000 }
00096:   Return
00097: LoadVar(00000)
00098:   Return
00099: LoadFn { code: 00097, fvars: 00000 }
00100:   Return
00101: LoadVar(00002)
00102: LoadVar(00001)
00103: LoadVar(00000)
00104: Unpack
00105: ApplyArgToFn
00106: ApplyArgToFn
00107:   Return
00108: LoadFn { code: 00101, fvars: 00002 }
00109:   Return
00110: LoadFn { code: 00108, fvars: 00001 }
00111:   Return
00112: LoadFn { code: 00091, fvars: 00004 }
00113: LoadFn { code: 00095, fvars: 00000 }
00114: PushString(""ys"")
00115: PushString(""y"")
00116: PushString("")
00117: ApplyArgToFn
00118: ApplyArgToFn
00119: LoadFn { code: 00099, fvars: 00000 }
00120: ApplyArgToFn
00121: ApplyArgToFn
00122: LoadVar(00001)
00123: LoadFn { code: 00110, fvars: 00000 }
00124: ApplyArgToFn
00125: ApplyArgToFn
00126: ApplyArgToFn
00127:   Return
00128: PushString("")
00129:   Return
00130: LoadVar(00002)
00131: LoadVar(00000)
00132: PushString("")
00133: ApplyArgToFn
00134: ApplyArgToFn
00135: LoadVar(00006)
00136: ApplyArgToFn
00137: LoadVar(00007)
00138: ApplyArgToFn
00139: LoadVar(00003)
00140: ApplyFnToArg
00141: LoadVar(00001)
00142: ApplyFnToArg
00143:   Return
00144: LoadFn { code: 00130, fvars: 00007 }
00145:   Return
00146: LoadVar(00000)
00147:   Return
00148: LoadFn { code: 00146, fvars: 00000 }
00149:   Return
00150: LoadVar(00002)
00151: LoadVar(00001)
00152: LoadVar(00000)
00153: Unpack
00154: ApplyArgToFn
00155: ApplyArgToFn
00156:   Return
00157: LoadFn { code: 00150, fvars: 00002 }
00158:   Return
00159: LoadFn { code: 00157, fvars: 00001 }
00160:   Return
00161: LoadFn { code: 00128, fvars: 00000 }
00162: LoadFn { code: 00144, fvars: 00006 }
00163: PushString(""ys"")
00164: PushString(""y"")
00165: PushString("")
00166: ApplyArgToFn
00167: ApplyArgToFn
00168: LoadFn { code: 00148, fvars: 00000 }
00169: ApplyArgToFn
00170: ApplyArgToFn
00171: LoadVar(00002)
00172: LoadFn { code: 00159, fvars: 00000 }
00173: ApplyArgToFn
00174: ApplyArgToFn
00175: ApplyArgToFn
00176:   Return
00177: LoadFn { code: 00161, fvars: 00005 }
00178:   Return
00179: LoadVar(00000)
00180:   Return
00181: LoadFn { code: 00179, fvars: 00000 }
00182:   Return
00183: LoadVar(00002)
00184: LoadVar(00001)
00185: LoadVar(00000)
00186: Unpack
00187: ApplyArgToFn
00188: ApplyArgToFn
00189:   Return
00190: LoadFn { code: 00183, fvars: 00002 }
00191:   Return
00192: LoadFn { code: 00190, fvars: 00001 }
00193:   Return
00194: LoadFn { code: 00112, fvars: 00003 }
00195: LoadFn { code: 00177, fvars: 00004 }
00196: PushString(""xs"")
00197: PushString(""x"")
00198: PushString("")
00199: ApplyArgToFn
00200: ApplyArgToFn
00201: LoadFn { code: 00181, fvars: 00000 }
00202: ApplyArgToFn
00203: ApplyArgToFn
00204: LoadVar(00001)
00205: LoadFn { code: 00192, fvars: 00000 }
00206: ApplyArgToFn
00207: ApplyArgToFn
00208: ApplyArgToFn
00209:   Return
00210: LoadFn { code: 00194, fvars: 00003 }
00211:   Return
00212: LoadFn { code: 00210, fvars: 00002 }
00213:   Return
00214: LoadVar(00000)
00215:   Return
00216: LoadFn { code: 00214, fvars: 00000 }
00217:   Return
00218: LoadFn { code: 00212, fvars: 00001 }
00219: PushString(""acc"")
00220: PushString(""xs"")
00221: PushString(""ys"")
00222: PushString("")
00223: ApplyArgToFn
00224: ApplyArgToFn
00225: ApplyArgToFn
00226: LoadFn { code: 00216, fvars: 00000 }
00227: ApplyArgToFn
00228: ApplyArgToFn
00229:   Return
00230: LoadVar(00000)
00231: LoadFn { code: 00000, fvars: 00000 }
00232: ApplyArgToFn
00233:   Return
00234: LoadFn { code: 00230, fvars: 00000 }
00235:   Return
00236: LoadVar(00001)
00237: LoadVar(00000)
00238: ApplyArgToFn
00239:   Return
00240: LoadFn { code: 00236, fvars: 00001 }
00241:   Return
00242: LoadFn { code: 00240, fvars: 00000 }
00243:   Return
00244: LoadVar(00001)
00245: LoadVar(00002)
00246: PushString("")
00247: ApplyArgToFn
00248: ApplyArgToFn
00249:   Return
00250: LoadVar(00000)
00251: LoadVar(00003)
00252: ApplyArgToFn
00253: LoadVar(00004)
00254: ApplyArgToFn
00255: LoadVar(00001)
00256: ApplyFnToArg
00257:   Return
00258: LoadFn { code: 00250, fvars: 00004 }
00259:   Return
00260: LoadVar(00000)
00261:   Return
00262: LoadFn { code: 00260, fvars: 00000 }
00263:   Return
00264: LoadVar(00002)
00265: LoadVar(00001)
00266: LoadVar(00000)
00267: Unpack
00268: ApplyArgToFn
00269: ApplyArgToFn
00270:   Return
00271: LoadFn { code: 00264, fvars: 00002 }
00272:   Return
00273: LoadFn { code: 00271, fvars: 00001 }
00274:   Return
00275: LoadFn { code: 00244, fvars: 00002 }
00276: LoadFn { code: 00258, fvars: 00003 }
00277: PushString(""xs"")
00278: PushString(""x"")
00279: PushString("")
00280: ApplyArgToFn
00281: ApplyArgToFn
00282: LoadFn { code: 00262, fvars: 00000 }
00283: ApplyArgToFn
00284: ApplyArgToFn
00285: LoadVar(00000)
00286: LoadFn { code: 00273, fvars: 00000 }
00287: ApplyArgToFn
00288: ApplyArgToFn
00289: ApplyArgToFn
00290:   Return
00291: LoadFn { code: 00275, fvars: 00002 }
00292:   Return
00293: LoadVar(00000)
00294:   Return
00295: LoadFn { code: 00293, fvars: 00000 }
00296:   Return
00297: LoadFn { code: 00291, fvars: 00001 }
00298: PushString(""acc"")
00299: PushString(""compound"")
00300: PushString("")
00301: ApplyArgToFn
00302: ApplyArgToFn
00303: LoadFn { code: 00295, fvars: 00000 }
00304: ApplyArgToFn
00305: ApplyArgToFn
00306:   Return
00307: LoadVar(00000)
00308: LoadFn { code: 00000, fvars: 00000 }
00309: ApplyArgToFn
00310:   Return
00311: LoadFn { code: 00307, fvars: 00000 }
00312:   Return
00313: LoadVar(00001)
00314: LoadVar(00000)
00315: ApplyArgToFn
00316:   Return
00317: LoadFn { code: 00313, fvars: 00001 }
00318:   Return
00319: LoadFn { code: 00317, fvars: 00000 }
00320:   Return
00321: PushString("False")
00322:   Return
00323: PushString("True")
00324:   Return
00325: LoadVar(00003)
00326: LoadVar(00002)
00327: LoadVar(00001)
00328: LoadVar(00000)
00329: Cmp
00330: ApplyArgToFn
00331:   Return
00332: LoadFn { code: 00325, fvars: 00003 }
00333:   Return
00334: LoadFn { code: 00332, fvars: 00002 }
00335:   Return
00336: LoadFn { code: 00334, fvars: 00001 }
00337:   Return
00338: LoadFn { code: 00321, fvars: 00000 }
00339: LoadFn { code: 00323, fvars: 00000 }
00340: LoadVar(00001)
00341: LoadVar(00002)
00342: LoadFn { code: 00336, fvars: 00000 }
00343: ApplyArgToFn
00344: ApplyArgToFn
00345: ApplyArgToFn
00346: ApplyArgToFn
00347:   Return
00348: PushString("False")
00349:   Return
00350: LoadVar(00003)
00351: LoadVar(00002)
00352: LoadVar(00001)
00353: LoadVar(00000)
00354: Cmp
00355: ApplyArgToFn
00356:   Return
00357: LoadFn { code: 00350, fvars: 00003 }
00358:   Return
00359: LoadFn { code: 00357, fvars: 00002 }
00360:   Return
00361: LoadFn { code: 00359, fvars: 00001 }
00362:   Return
00363: LoadVar(00004)
00364: LoadVar(00007)
00365: ApplyArgToFn
00366: LoadVar(00002)
00367: ApplyFnToArg
00368:   Return
00369: PushString("False")
00370:   Return
00371: LoadVar(00002)
00372: LoadVar(00006)
00373: ApplyArgToFn
00374: LoadVar(00000)
00375: ApplyFnToArg
00376: LoadFn { code: 00361, fvars: 00000 }
00377: ApplyArgToFn
00378: PushString("True")
00379: ApplyFnToArg
00380: LoadFn { code: 00363, fvars: 00007 }
00381: ApplyFnToArg
00382: LoadFn { code: 00369, fvars: 00000 }
00383: ApplyFnToArg
00384:   Return
00385: LoadFn { code: 00371, fvars: 00006 }
00386:   Return
00387: LoadVar(00000)
00388:   Return
00389: LoadFn { code: 00387, fvars: 00000 }
00390:   Return
00391: LoadVar(00002)
00392: LoadVar(00001)
00393: LoadVar(00000)
00394: Unpack
00395: ApplyArgToFn
00396: ApplyArgToFn
00397:   Return
00398: LoadFn { code: 00391, fvars: 00002 }
00399:   Return
00400: LoadFn { code: 00398, fvars: 00001 }
00401:   Return
00402: LoadFn { code: 00348, fvars: 00000 }
00403: LoadFn { code: 00385, fvars: 00005 }
00404: PushString(""ys"")
00405: PushString(""y"")
00406: PushString("")
00407: ApplyArgToFn
00408: ApplyArgToFn
00409: LoadFn { code: 00389, fvars: 00000 }
00410: ApplyArgToFn
00411: ApplyArgToFn
00412: LoadVar(00002)
00413: LoadFn { code: 00400, fvars: 00000 }
00414: ApplyArgToFn
00415: ApplyArgToFn
00416: ApplyArgToFn
00417:   Return
00418: LoadFn { code: 00402, fvars: 00004 }
00419:   Return
00420: LoadVar(00000)
00421:   Return
00422: LoadFn { code: 00420, fvars: 00000 }
00423:   Return
00424: LoadVar(00002)
00425: LoadVar(00001)
00426: LoadVar(00000)
00427: Unpack
00428: ApplyArgToFn
00429: ApplyArgToFn
00430:   Return
00431: LoadFn { code: 00424, fvars: 00002 }
00432:   Return
00433: LoadFn { code: 00431, fvars: 00001 }
00434:   Return
00435: LoadFn { code: 00338, fvars: 00002 }
00436: LoadFn { code: 00418, fvars: 00003 }
00437: PushString(""xs"")
00438: PushString(""x"")
00439: PushString("")
00440: ApplyArgToFn
00441: ApplyArgToFn
00442: LoadFn { code: 00422, fvars: 00000 }
00443: ApplyArgToFn
00444: ApplyArgToFn
00445: LoadVar(00001)
00446: LoadFn { code: 00433, fvars: 00000 }
00447: ApplyArgToFn
00448: ApplyArgToFn
00449: ApplyArgToFn
00450:   Return
00451: LoadFn { code: 00435, fvars: 00002 }
00452:   Return
00453: LoadVar(00000)
00454:   Return
00455: LoadFn { code: 00453, fvars: 00000 }
00456:   Return
00457: LoadFn { code: 00451, fvars: 00001 }
00458: PushString(""a"")
00459: PushString(""b"")
00460: PushString("")
00461: ApplyArgToFn
00462: ApplyArgToFn
00463: LoadFn { code: 00455, fvars: 00000 }
00464: ApplyArgToFn
00465: ApplyArgToFn
00466:   Return
00467: LoadVar(00000)
00468: LoadFn { code: 00000, fvars: 00000 }
00469: ApplyArgToFn
00470:   Return
00471: LoadFn { code: 00467, fvars: 00000 }
00472:   Return
00473: LoadVar(00001)
00474: LoadVar(00000)
00475: ApplyArgToFn
00476:   Return
00477: LoadFn { code: 00473, fvars: 00001 }
00478:   Return
00479: LoadFn { code: 00477, fvars: 00000 }
00480:   Return
00481: LoadVar(00001)
00482: LoadVar(00000)
00483: ApplyArgToFn
00484:   Return
00485: LoadFn { code: 00481, fvars: 00001 }
00486:   Return
00487: LoadFn { code: 00485, fvars: 00000 }
00488:   Return
00489: LoadVar(00001)
00490: LoadVar(00000)
00491: ApplyArgToFn
00492:   Return
00493: LoadFn { code: 00489, fvars: 00001 }
00494:   Return
00495: LoadFn { code: 00493, fvars: 00000 }
00496:   Return
00497: LoadVar(00001)
00498: LoadVar(00000)
00499: ApplyArgToFn
00500:   Return
00501: LoadFn { code: 00497, fvars: 00001 }
00502:   Return
00503: LoadFn { code: 00501, fvars: 00000 }
00504:   Return
00505: LoadVar(00001)
00506: LoadVar(00000)
00507: ApplyArgToFn
00508:   Return
00509: LoadFn { code: 00505, fvars: 00001 }
00510:   Return
00511: LoadFn { code: 00509, fvars: 00000 }
00512:   Return
00513: PushString("")
00514:   Return
00515: LoadVar(00003)
00516: LoadVar(00002)
00517: LoadVar(00001)
00518: LoadVar(00000)
00519: Cmp
00520: ApplyArgToFn
00521:   Return
00522: LoadFn { code: 00515, fvars: 00003 }
00523:   Return
00524: LoadFn { code: 00522, fvars: 00002 }
00525:   Return
00526: LoadFn { code: 00524, fvars: 00001 }
00527:   Return
00528: LoadVar(00007)
00529: LoadVar(00006)
00530: PushString("")
00531: ApplyArgToFn
00532: ApplyArgToFn
00533: LoadVar(00003)
00534: LoadVar(00002)
00535: PushString("")
00536: ApplyArgToFn
00537: ApplyArgToFn
00538: PushString("")
00539: ApplyArgToFn
00540: ApplyArgToFn
00541: PushEffect("no-match")
00542: ApplyArgToFn
00543:   Return
00544: PushString("")
00545:   Return
00546: LoadVar(00005)
00547: LoadVar(00011)
00548: ApplyArgToFn
00549: LoadVar(00001)
00550: ApplyFnToArg
00551: LoadFn { code: 00526, fvars: 00000 }
00552: ApplyArgToFn
00553: PushString("False")
00554: ApplyFnToArg
00555: LoadFn { code: 00528, fvars: 00007 }
00556: ApplyFnToArg
00557: LoadFn { code: 00544, fvars: 00000 }
00558: ApplyFnToArg
00559:   Return
00560: LoadVar(00003)
00561: LoadVar(00002)
00562: LoadVar(00001)
00563: LoadVar(00000)
00564: Cmp
00565: ApplyArgToFn
00566:   Return
00567: LoadFn { code: 00560, fvars: 00003 }
00568:   Return
00569: LoadFn { code: 00567, fvars: 00002 }
00570:   Return
00571: LoadFn { code: 00569, fvars: 00001 }
00572:   Return
00573: LoadFn { code: 00513, fvars: 00000 }
00574: LoadFn { code: 00546, fvars: 00011 }
00575: LoadVar(00001)
00576: LoadVar(00005)
00577: LoadFn { code: 00571, fvars: 00000 }
00578: ApplyArgToFn
00579: ApplyArgToFn
00580: ApplyArgToFn
00581: ApplyArgToFn
00582:   Return
00583: LoadVar(00001)
00584: LoadVar(00007)
00585: ApplyArgToFn
00586: PushString(""yval"")
00587: LoadFn { code: 00511, fvars: 00000 }
00588: ApplyArgToFn
00589: ApplyArgToFn
00590: LoadFn { code: 00573, fvars: 00010 }
00591: ApplyFnToArg
00592:   Return
00593: LoadVar(00000)
00594: LoadVar(00007)
00595: ApplyArgToFn
00596: PushString(""yvar"")
00597: LoadFn { code: 00503, fvars: 00000 }
00598: ApplyArgToFn
00599: ApplyArgToFn
00600: LoadFn { code: 00583, fvars: 00009 }
00601: ApplyFnToArg
00602:   Return
00603: LoadFn { code: 00593, fvars: 00008 }
00604:   Return
00605: LoadVar(00000)
00606:   Return
00607: LoadFn { code: 00605, fvars: 00000 }
00608:   Return
00609: LoadVar(00003)
00610: LoadVar(00004)
00611: ApplyArgToFn
00612:   Return
00613: LoadFn { code: 00603, fvars: 00007 }
00614: PushString(""_"")
00615: PushString(""pair"")
00616: PushString("")
00617: ApplyArgToFn
00618: ApplyArgToFn
00619: LoadFn { code: 00607, fvars: 00000 }
00620: ApplyArgToFn
00621: ApplyArgToFn
00622: LoadVar(00014)
00623: ApplyArgToFn
00624: PushString("")
00625: ApplyFnToArg
00626: LoadVar(00003)
00627: ApplyFnToArg
00628: LoadFn { code: 00609, fvars: 00004 }
00629: ApplyArgToFn
00630:   Return
00631: LoadVar(00001)
00632: LoadVar(00003)
00633: ApplyArgToFn
00634: PushString(""xval"")
00635: LoadFn { code: 00495, fvars: 00000 }
00636: ApplyArgToFn
00637: ApplyArgToFn
00638: LoadFn { code: 00613, fvars: 00014 }
00639: ApplyFnToArg
00640:   Return
00641: LoadVar(00000)
00642: LoadVar(00003)
00643: ApplyArgToFn
00644: PushString(""xvar"")
00645: LoadFn { code: 00487, fvars: 00000 }
00646: ApplyArgToFn
00647: ApplyArgToFn
00648: LoadFn { code: 00631, fvars: 00013 }
00649: ApplyFnToArg
00650:   Return
00651: LoadFn { code: 00641, fvars: 00012 }
00652:   Return
00653: LoadVar(00000)
00654:   Return
00655: LoadFn { code: 00653, fvars: 00000 }
00656:   Return
00657: LoadVar(00001)
00658: LoadVar(00000)
00659: ApplyArgToFn
00660:   Return
00661: LoadFn { code: 00657, fvars: 00001 }
00662:   Return
00663: LoadFn { code: 00661, fvars: 00000 }
00664:   Return
00665: LoadVar(00002)
00666: PushEffect("invalid")
00667: ApplyArgToFn
00668:   Return
00669: LoadVar(00003)
00670: LoadVar(00002)
00671: LoadVar(00001)
00672: LoadVar(00000)
00673: Cmp
00674: ApplyArgToFn
00675:   Return
00676: LoadFn { code: 00669, fvars: 00003 }
00677:   Return
00678: LoadFn { code: 00676, fvars: 00002 }
00679:   Return
00680: LoadFn { code: 00678, fvars: 00001 }
00681:   Return
00682: PushString("")
00683:   Return
00684: LoadVar(00004)
00685: LoadVar(00006)
00686: PushString("")
00687: ApplyArgToFn
00688: ApplyArgToFn
00689: PushEffect("no-match")
00690: ApplyArgToFn
00691:   Return
00692: LoadVar(00003)
00693: LoadVar(00011)
00694: ApplyArgToFn
00695: LoadVar(00005)
00696: ApplyFnToArg
00697: LoadFn { code: 00680, fvars: 00000 }
00698: ApplyArgToFn
00699: PushString("True")
00700: ApplyFnToArg
00701: LoadFn { code: 00682, fvars: 00000 }
00702: ApplyFnToArg
00703: LoadFn { code: 00684, fvars: 00006 }
00704: ApplyFnToArg
00705:   Return
00706: LoadVar(00001)
00707: LoadVar(00002)
00708: ApplyArgToFn
00709: LoadVar(00005)
00710: ApplyFnToArg
00711: PushEffect("invalid")
00712: ApplyArgToFn
00713:   Return
00714: LoadVar(00001)
00715: LoadVar(00000)
00716: ApplyArgToFn
00717:   Return
00718: LoadFn { code: 00714, fvars: 00001 }
00719:   Return
00720: LoadFn { code: 00718, fvars: 00000 }
00721:   Return
00722: LoadVar(00001)
00723: LoadVar(00000)
00724: ApplyArgToFn
00725:   Return
00726: LoadFn { code: 00722, fvars: 00001 }
00727:   Return
00728: LoadFn { code: 00726, fvars: 00000 }
00729:   Return
00730: LoadVar(00001)
00731: LoadVar(00000)
00732: ApplyArgToFn
00733:   Return
00734: LoadFn { code: 00730, fvars: 00001 }
00735:   Return
00736: LoadFn { code: 00734, fvars: 00000 }
00737:   Return
00738: LoadVar(00001)
00739: LoadVar(00000)
00740: ApplyArgToFn
00741:   Return
00742: LoadFn { code: 00738, fvars: 00001 }
00743:   Return
00744: LoadFn { code: 00742, fvars: 00000 }
00745:   Return
00746: LoadVar(00014)
00747: LoadVar(00025)
00748: ApplyArgToFn
00749: LoadVar(00023)
00750: ApplyArgToFn
00751: LoadVar(00001)
00752: ApplyFnToArg
00753: LoadVar(00022)
00754: ApplyArgToFn
00755: LoadVar(00015)
00756: ApplyArgToFn
00757:   Return
00758: LoadVar(00006)
00759: LoadVar(00007)
00760: ApplyArgToFn
00761: LoadVar(00010)
00762: ApplyFnToArg
00763: LoadVar(00012)
00764: PushString("")
00765: ApplyArgToFn
00766: ApplyArgToFn
00767: PushEffect("no-match")
00768: ApplyArgToFn
00769:   Return
00770: LoadVar(00003)
00771: LoadVar(00002)
00772: LoadVar(00001)
00773: LoadVar(00000)
00774: Cmp
00775: ApplyArgToFn
00776:   Return
00777: LoadFn { code: 00770, fvars: 00003 }
00778:   Return
00779: LoadFn { code: 00777, fvars: 00002 }
00780:   Return
00781: LoadFn { code: 00779, fvars: 00001 }
00782:   Return
00783: LoadFn { code: 00746, fvars: 00025 }
00784: LoadFn { code: 00758, fvars: 00012 }
00785: PushString("")
00786: LoadVar(00000)
00787: LoadFn { code: 00781, fvars: 00000 }
00788: ApplyArgToFn
00789: ApplyArgToFn
00790: ApplyArgToFn
00791: ApplyArgToFn
00792:   Return
00793: LoadVar(00004)
00794: LoadVar(00008)
00795: ApplyArgToFn
00796: LoadVar(00018)
00797: ApplyArgToFn
00798: LoadVar(00001)
00799: LoadVar(00000)
00800: ApplyArgToFn
00801: ApplyFnToArg
00802: LoadVar(00022)
00803: ApplyArgToFn
00804: PushString(""zipped"")
00805: LoadFn { code: 00744, fvars: 00000 }
00806: ApplyArgToFn
00807: ApplyArgToFn
00808: LoadFn { code: 00783, fvars: 00024 }
00809: ApplyFnToArg
00810:   Return
00811: LoadVar(00001)
00812: LoadVar(00013)
00813: ApplyArgToFn
00814: PushString(""vargs"")
00815: LoadFn { code: 00736, fvars: 00000 }
00816: ApplyArgToFn
00817: ApplyArgToFn
00818: LoadFn { code: 00793, fvars: 00023 }
00819: ApplyFnToArg
00820:   Return
00821: LoadVar(00000)
00822: LoadVar(00013)
00823: ApplyArgToFn
00824: PushString(""vf"")
00825: LoadFn { code: 00728, fvars: 00000 }
00826: ApplyArgToFn
00827: ApplyArgToFn
00828: LoadFn { code: 00811, fvars: 00022 }
00829: ApplyFnToArg
00830:   Return
00831: LoadVar(00007)
00832: LoadVar(00014)
00833: ApplyArgToFn
00834: PushString(""v"")
00835: LoadFn { code: 00720, fvars: 00000 }
00836: ApplyArgToFn
00837: ApplyArgToFn
00838: LoadFn { code: 00821, fvars: 00021 }
00839: ApplyFnToArg
00840:   Return
00841: LoadVar(00003)
00842: LoadVar(00002)
00843: LoadVar(00001)
00844: LoadVar(00000)
00845: Cmp
00846: ApplyArgToFn
00847:   Return
00848: LoadFn { code: 00841, fvars: 00003 }
00849:   Return
00850: LoadFn { code: 00848, fvars: 00002 }
00851:   Return
00852: LoadFn { code: 00850, fvars: 00001 }
00853:   Return
00854: LoadFn { code: 00706, fvars: 00005 }
00855: LoadFn { code: 00831, fvars: 00020 }
00856: PushString("Compound")
00857: LoadVar(00001)
00858: LoadFn { code: 00852, fvars: 00000 }
00859: ApplyArgToFn
00860: ApplyArgToFn
00861: ApplyArgToFn
00862: ApplyArgToFn
00863:   Return
00864: LoadFn { code: 00854, fvars: 00019 }
00865:   Return
00866: LoadVar(00000)
00867:   Return
00868: LoadFn { code: 00866, fvars: 00000 }
00869:   Return
00870: LoadVar(00002)
00871: LoadVar(00001)
00872: LoadVar(00000)
00873: Unpack
00874: ApplyArgToFn
00875: ApplyArgToFn
00876:   Return
00877: LoadFn { code: 00870, fvars: 00002 }
00878:   Return
00879: LoadFn { code: 00877, fvars: 00001 }
00880:   Return
00881: LoadFn { code: 00692, fvars: 00011 }
00882: LoadFn { code: 00864, fvars: 00018 }
00883: PushString(""type"")
00884: PushString(""f"")
00885: PushString("")
00886: ApplyArgToFn
00887: ApplyArgToFn
00888: LoadFn { code: 00868, fvars: 00000 }
00889: ApplyArgToFn
00890: ApplyArgToFn
00891: LoadVar(00003)
00892: LoadFn { code: 00879, fvars: 00000 }
00893: ApplyArgToFn
00894: ApplyArgToFn
00895: ApplyArgToFn
00896:   Return
00897: LoadVar(00001)
00898: LoadVar(00000)
00899: ApplyArgToFn
00900:   Return
00901: LoadFn { code: 00897, fvars: 00001 }
00902:   Return
00903: LoadFn { code: 00901, fvars: 00000 }
00904:   Return
00905: LoadVar(00008)
00906: LoadVar(00019)
00907: ApplyArgToFn
00908: LoadVar(00017)
00909: ApplyArgToFn
00910: LoadVar(00001)
00911: ApplyFnToArg
00912: LoadVar(00016)
00913: ApplyArgToFn
00914: LoadVar(00009)
00915: ApplyArgToFn
00916:   Return
00917: LoadVar(00004)
00918: LoadVar(00005)
00919: ApplyArgToFn
00920: LoadVar(00006)
00921: PushString("")
00922: ApplyArgToFn
00923: ApplyArgToFn
00924: PushEffect("no-match")
00925: ApplyArgToFn
00926:   Return
00927: LoadVar(00003)
00928: LoadVar(00002)
00929: LoadVar(00001)
00930: LoadVar(00000)
00931: Cmp
00932: ApplyArgToFn
00933:   Return
00934: LoadFn { code: 00927, fvars: 00003 }
00935:   Return
00936: LoadFn { code: 00934, fvars: 00002 }
00937:   Return
00938: LoadFn { code: 00936, fvars: 00001 }
00939:   Return
00940: LoadFn { code: 00905, fvars: 00019 }
00941: LoadFn { code: 00917, fvars: 00006 }
00942: PushString("")
00943: LoadVar(00000)
00944: LoadFn { code: 00938, fvars: 00000 }
00945: ApplyArgToFn
00946: ApplyArgToFn
00947: ApplyArgToFn
00948: ApplyArgToFn
00949:   Return
00950: LoadVar(00002)
00951: LoadVar(00012)
00952: ApplyArgToFn
00953: LoadVar(00004)
00954: ApplyFnToArg
00955: PushString(""zipped"")
00956: LoadFn { code: 00903, fvars: 00000 }
00957: ApplyArgToFn
00958: ApplyArgToFn
00959: LoadFn { code: 00940, fvars: 00018 }
00960: ApplyFnToArg
00961:   Return
00962: LoadVar(00003)
00963: LoadVar(00002)
00964: LoadVar(00001)
00965: LoadVar(00000)
00966: Cmp
00967: ApplyArgToFn
00968:   Return
00969: LoadFn { code: 00962, fvars: 00003 }
00970:   Return
00971: LoadFn { code: 00969, fvars: 00002 }
00972:   Return
00973: LoadFn { code: 00971, fvars: 00001 }
00974:   Return
00975: LoadFn { code: 00881, fvars: 00017 }
00976: LoadFn { code: 00950, fvars: 00017 }
00977: PushString("List")
00978: LoadVar(00002)
00979: LoadFn { code: 00973, fvars: 00000 }
00980: ApplyArgToFn
00981: ApplyArgToFn
00982: ApplyArgToFn
00983: ApplyArgToFn
00984:   Return
00985: LoadVar(00001)
00986: LoadVar(00003)
00987: PushString("")
00988: ApplyArgToFn
00989: ApplyArgToFn
00990: PushString("")
00991: ApplyArgToFn
00992:   Return
00993: LoadVar(00003)
00994: LoadVar(00002)
00995: LoadVar(00001)
00996: LoadVar(00000)
00997: Cmp
00998: ApplyArgToFn
00999:   Return
01000: LoadFn { code: 00993, fvars: 00003 }
01001:   Return
01002: LoadFn { code: 01000, fvars: 00002 }
01003:   Return
01004: LoadFn { code: 01002, fvars: 00001 }
01005:   Return
01006: LoadFn { code: 00975, fvars: 00016 }
01007: LoadFn { code: 00985, fvars: 00003 }
01008: PushString("Binding")
01009: LoadVar(00001)
01010: LoadFn { code: 01004, fvars: 00000 }
01011: ApplyArgToFn
01012: ApplyArgToFn
01013: ApplyArgToFn
01014: ApplyArgToFn
01015:   Return
01016: LoadFn { code: 01006, fvars: 00015 }
01017:   Return
01018: LoadVar(00000)
01019:   Return
01020: LoadFn { code: 01018, fvars: 00000 }
01021:   Return
01022: LoadVar(00002)
01023: LoadVar(00001)
01024: LoadVar(00000)
01025: Unpack
01026: ApplyArgToFn
01027: ApplyArgToFn
01028:   Return
01029: LoadFn { code: 01022, fvars: 00002 }
01030:   Return
01031: LoadFn { code: 01029, fvars: 00001 }
01032:   Return
01033: LoadFn { code: 00665, fvars: 00002 }
01034: LoadFn { code: 01016, fvars: 00014 }
01035: PushString(""type"")
01036: PushString(""pattern"")
01037: PushString("")
01038: ApplyArgToFn
01039: ApplyArgToFn
01040: LoadFn { code: 01020, fvars: 00000 }
01041: ApplyArgToFn
01042: ApplyArgToFn
01043: LoadVar(00001)
01044: LoadFn { code: 01031, fvars: 00000 }
01045: ApplyArgToFn
01046: ApplyArgToFn
01047: ApplyArgToFn
01048:   Return
01049: LoadFn { code: 01033, fvars: 00013 }
01050:   Return
01051: LoadVar(00000)
01052:   Return
01053: LoadFn { code: 01051, fvars: 00000 }
01054:   Return
01055: LoadFn { code: 01049, fvars: 00012 }
01056: PushString(""pattern"")
01057: PushString(""value"")
01058: PushString("")
01059: ApplyArgToFn
01060: ApplyArgToFn
01061: LoadFn { code: 01053, fvars: 00000 }
01062: ApplyArgToFn
01063: ApplyArgToFn
01064:   Return
01065: LoadVar(00000)
01066: LoadFn { code: 00000, fvars: 00000 }
01067: ApplyArgToFn
01068:   Return
01069: LoadFn { code: 01065, fvars: 00000 }
01070:   Return
01071: LoadVar(00001)
01072: LoadVar(00000)
01073: ApplyArgToFn
01074:   Return
01075: LoadFn { code: 01071, fvars: 00001 }
01076:   Return
01077: LoadFn { code: 01075, fvars: 00000 }
01078:   Return
01079: LoadVar(00000)
01080: PushString("NoMatch")
01081: ApplyArgToFn
01082: LoadVar(00001)
01083: ApplyArgToFn
01084:   Return
01085: LoadFn { code: 01079, fvars: 00001 }
01086:   Return
01087: LoadVar(00000)
01088:   Return
01089: LoadFn { code: 01087, fvars: 00000 }
01090:   Return
01091: LoadVar(00000)
01092:   Return
01093: LoadFn { code: 01091, fvars: 00000 }
01094:   Return
01095: LoadVar(00001)
01096:   Return
01097: LoadFn { code: 01095, fvars: 00001 }
01098:   Return
01099: LoadVar(00001)
01100:   Return
01101: LoadFn { code: 01099, fvars: 00001 }
01102:   Return
01103: LoadFn { code: 01101, fvars: 00000 }
01104:   Return
01105: LoadVar(00000)
01106:   Return
01107: LoadFn { code: 01105, fvars: 00000 }
01108:   Return
01109: LoadVar(00000)
01110:   Return
01111: LoadVar(00000)
01112:   Return
01113: LoadFn { code: 01111, fvars: 00000 }
01114:   Return
01115: PushString("Foo")
01116:   Return
01117: PushString("Bar")
01118:   Return
01119: LoadVar(00000)
01120:   Return
01121: PushString("Bar")
01122:   Return
01123: PushString(""x"")
01124: PushString("Binding")
01125: ApplyArgToFn
01126: PushString(""x"")
01127: PushString("Binding")
01128: ApplyArgToFn
01129: PushString("")
01130: ApplyArgToFn
01131: ApplyArgToFn
01132: PushString("Pair")
01133: PushString("Value")
01134: ApplyArgToFn
01135: PushString("Compound")
01136: ApplyArgToFn
01137: ApplyArgToFn
01138: LoadVar(00001)
01139: ApplyArgToFn
01140: LoadFn { code: 01093, fvars: 00000 }
01141: ApplyFnToArg
01142: PushString("Bar")
01143: PushString("Foo")
01144: PushString("Pair")
01145: ApplyArgToFn
01146: ApplyArgToFn
01147: ApplyFnToArg
01148: PushString("")
01149: ApplyArgToFn
01150: PushString(""x"")
01151: PushString("Binding")
01152: ApplyArgToFn
01153: PushString(""y"")
01154: PushString("Binding")
01155: ApplyArgToFn
01156: PushString("")
01157: ApplyArgToFn
01158: ApplyArgToFn
01159: PushString("List")
01160: ApplyArgToFn
01161: LoadVar(00001)
01162: ApplyArgToFn
01163: LoadFn { code: 01097, fvars: 00000 }
01164: ApplyFnToArg
01165: PushString("Foo")
01166: PushString("Bar")
01167: PushString("")
01168: ApplyArgToFn
01169: ApplyArgToFn
01170: ApplyFnToArg
01171: ApplyFnToArg
01172: PushString(""x"")
01173: PushString("Binding")
01174: ApplyArgToFn
01175: PushString(""y"")
01176: PushString("Binding")
01177: ApplyArgToFn
01178: PushString("")
01179: ApplyArgToFn
01180: ApplyArgToFn
01181: PushString(""foo"")
01182: PushString("Binding")
01183: ApplyArgToFn
01184: PushString("Compound")
01185: ApplyArgToFn
01186: ApplyArgToFn
01187: LoadVar(00001)
01188: ApplyArgToFn
01189: LoadFn { code: 01103, fvars: 00000 }
01190: ApplyFnToArg
01191: PushString("Bar")
01192: PushString("Foo")
01193: PushString("Pair")
01194: ApplyArgToFn
01195: ApplyArgToFn
01196: ApplyFnToArg
01197: ApplyFnToArg
01198: PushString(""x"")
01199: PushString("Binding")
01200: ApplyArgToFn
01201: PushString(""x"")
01202: PushString("Binding")
01203: ApplyArgToFn
01204: PushString("")
01205: ApplyArgToFn
01206: ApplyArgToFn
01207: PushString("Pair")
01208: PushString("Value")
01209: ApplyArgToFn
01210: PushString("Compound")
01211: ApplyArgToFn
01212: ApplyArgToFn
01213: LoadVar(00001)
01214: ApplyArgToFn
01215: LoadFn { code: 01107, fvars: 00000 }
01216: ApplyFnToArg
01217: PushString("Bar")
01218: PushString("Bar")
01219: PushString("Pair")
01220: ApplyArgToFn
01221: ApplyArgToFn
01222: ApplyFnToArg
01223: ApplyFnToArg
01224: PushString(""x"")
01225: PushString("Binding")
01226: ApplyArgToFn
01227: PushString("Bar")
01228: PushString("Value")
01229: ApplyArgToFn
01230: PushString("")
01231: ApplyArgToFn
01232: ApplyArgToFn
01233: PushString("Pair")
01234: PushString("Value")
01235: ApplyArgToFn
01236: PushString("Compound")
01237: ApplyArgToFn
01238: ApplyArgToFn
01239: LoadVar(00001)
01240: ApplyArgToFn
01241: LoadFn { code: 01109, fvars: 00000 }
01242: ApplyFnToArg
01243: PushString("Bar")
01244: PushString("Foo")
01245: PushString("Pair")
01246: ApplyArgToFn
01247: ApplyArgToFn
01248: ApplyFnToArg
01249: ApplyFnToArg
01250: PushString(""x"")
01251: PushString("Binding")
01252: ApplyArgToFn
01253: PushString(""y"")
01254: PushString("Binding")
01255: ApplyArgToFn
01256: PushString("")
01257: ApplyArgToFn
01258: ApplyArgToFn
01259: PushString("Pair")
01260: PushString("Value")
01261: ApplyArgToFn
01262: PushString("Compound")
01263: ApplyArgToFn
01264: ApplyArgToFn
01265: LoadVar(00001)
01266: ApplyArgToFn
01267: LoadFn { code: 01113, fvars: 00000 }
01268: ApplyFnToArg
01269: PushString("Bar")
01270: PushString("Foo")
01271: PushString("Pair")
01272: ApplyArgToFn
01273: ApplyArgToFn
01274: ApplyFnToArg
01275: ApplyFnToArg
01276: PushString("Bar")
01277: PushString("Foo")
01278: PushString("Pair")
01279: ApplyArgToFn
01280: ApplyArgToFn
01281: PushString("Value")
01282: ApplyArgToFn
01283: LoadVar(00001)
01284: ApplyArgToFn
01285: LoadFn { code: 01115, fvars: 00000 }
01286: ApplyFnToArg
01287: PushString("Bar")
01288: PushString("Foo")
01289: PushString("Pair")
01290: ApplyArgToFn
01291: ApplyArgToFn
01292: ApplyFnToArg
01293: ApplyFnToArg
01294: PushString(""x"")
01295: PushString("Binding")
01296: ApplyArgToFn
01297: LoadVar(00001)
01298: ApplyArgToFn
01299: LoadFn { code: 01117, fvars: 00000 }
01300: ApplyFnToArg
01301: PushString("Foo")
01302: ApplyFnToArg
01303: ApplyFnToArg
01304: PushString(""x"")
01305: PushString("Binding")
01306: ApplyArgToFn
01307: LoadVar(00001)
01308: ApplyArgToFn
01309: LoadFn { code: 01119, fvars: 00000 }
01310: ApplyFnToArg
01311: PushString("Foo")
01312: ApplyFnToArg
01313: ApplyFnToArg
01314: PushString("Foo")
01315: PushString("Value")
01316: ApplyArgToFn
01317: LoadVar(00001)
01318: ApplyArgToFn
01319: LoadFn { code: 01121, fvars: 00000 }
01320: ApplyFnToArg
01321: PushString("Foo")
01322: ApplyFnToArg
01323: ApplyFnToArg
01324:   Return
01325: LoadVar(00002)
01326: LoadVar(00001)
01327: LoadVar(00000)
01328: Try
01329: ApplyArgToFn
01330: Unwind
01331: ApplyArgToFn
01332: ApplyArgToFn
01333:   Return
01334: LoadFn { code: 01325, fvars: 00002 }
01335:   Return
01336: LoadFn { code: 01334, fvars: 00001 }
01337:   Return
01338: LoadFn { code: 01085, fvars: 00000 }
01339: PushString(""r"")
01340: PushString(""arg"")
01341: PushString("")
01342: ApplyArgToFn
01343: ApplyArgToFn
01344: LoadFn { code: 01089, fvars: 00000 }
01345: ApplyArgToFn
01346: ApplyArgToFn
01347: PushEffect("no-match")
01348: LoadFn { code: 01123, fvars: 00001 }
01349: LoadFn { code: 01336, fvars: 00000 }
01350: ApplyArgToFn
01351: ApplyArgToFn
01352: ApplyArgToFn
01353:   Return
01354: LoadVar(00000)
01355: PushEffect("no-match")
01356: ApplyArgToFn
01357:   Return
01358: LoadFn { code: 01354, fvars: 00000 }
01359:   Return
01360: LoadVar(00000)
01361:   Return
01362: LoadFn { code: 01360, fvars: 00000 }
01363:   Return
01364: LoadVar(00001)
01365: LoadVar(00000)
01366: ApplyArgToFn
01367:   Return
01368: LoadFn { code: 01364, fvars: 00001 }
01369:   Return
01370: LoadFn { code: 01368, fvars: 00000 }
01371:   Return
01372: LoadVar(00004)
01373: LoadVar(00017)
01374: ApplyArgToFn
01375: LoadVar(00001)
01376: ApplyFnToArg
01377:   Return
01378: PushString("")
01379: LoadVar(00004)
01380: ApplyArgToFn
01381:   Return
01382: LoadVar(00003)
01383: LoadVar(00002)
01384: LoadVar(00001)
01385: LoadVar(00000)
01386: Cmp
01387: ApplyArgToFn
01388:   Return
01389: LoadFn { code: 01382, fvars: 00003 }
01390:   Return
01391: LoadFn { code: 01389, fvars: 00002 }
01392:   Return
01393: LoadFn { code: 01391, fvars: 00001 }
01394:   Return
01395: LoadFn { code: 01372, fvars: 00017 }
01396: LoadFn { code: 01378, fvars: 00004 }
01397: PushString("")
01398: LoadVar(00000)
01399: LoadFn { code: 01393, fvars: 00000 }
01400: ApplyArgToFn
01401: ApplyArgToFn
01402: ApplyArgToFn
01403: ApplyArgToFn
01404:   Return
01405: LoadVar(00006)
01406: LoadVar(00013)
01407: ApplyArgToFn
01408: LoadVar(00003)
01409: LoadVar(00004)
01410: ApplyArgToFn
01411: LoadVar(00001)
01412: ApplyFnToArg
01413: ApplyFnToArg
01414: PushString(""args"")
01415: LoadFn { code: 01370, fvars: 00000 }
01416: ApplyArgToFn
01417: ApplyArgToFn
01418: LoadFn { code: 01395, fvars: 00016 }
01419: ApplyFnToArg
01420:   Return
01421: LoadVar(00002)
01422: LoadVar(00001)
01423: LoadVar(00000)
01424: Try
01425: ApplyArgToFn
01426: Unwind
01427: ApplyArgToFn
01428: ApplyArgToFn
01429:   Return
01430: LoadFn { code: 01421, fvars: 00002 }
01431:   Return
01432: LoadFn { code: 01430, fvars: 00001 }
01433:   Return
01434: LoadFn { code: 01358, fvars: 00000 }
01435: PushString(""_"")
01436: PushString(""arg"")
01437: PushString("")
01438: ApplyArgToFn
01439: ApplyArgToFn
01440: LoadFn { code: 01362, fvars: 00000 }
01441: ApplyArgToFn
01442: ApplyArgToFn
01443: PushEffect("no-match")
01444: LoadFn { code: 01405, fvars: 00015 }
01445: LoadFn { code: 01432, fvars: 00000 }
01446: ApplyArgToFn
01447: ApplyArgToFn
01448: ApplyArgToFn
01449:   Return
01450: LoadFn { code: 01434, fvars: 00014 }
01451:   Return
01452: LoadFn { code: 01450, fvars: 00013 }
01453:   Return
01454: LoadVar(00000)
01455:   Return
01456: LoadFn { code: 01454, fvars: 00000 }
01457:   Return
01458: LoadVar(00001)
01459: LoadVar(00000)
01460: ApplyArgToFn
01461:   Return
01462: LoadFn { code: 01458, fvars: 00001 }
01463:   Return
01464: LoadFn { code: 01462, fvars: 00000 }
01465:   Return
01466: LoadFn { code: 01338, fvars: 00000 }
01467: LoadFn { code: 01452, fvars: 00012 }
01468: PushString(""pattern"")
01469: PushString(""body"")
01470: PushString(""value"")
01471: PushString("")
01472: ApplyArgToFn
01473: ApplyArgToFn
01474: ApplyArgToFn
01475: LoadFn { code: 01456, fvars: 00000 }
01476: ApplyArgToFn
01477: ApplyArgToFn
01478: PushString(""->"")
01479: LoadFn { code: 01464, fvars: 00000 }
01480: ApplyArgToFn
01481: ApplyArgToFn
01482: ApplyArgToFn
01483:   Return
01484: LoadFn { code: 01055, fvars: 00011 }
01485: PushString(""unify"")
01486: LoadFn { code: 01069, fvars: 00000 }
01487: ApplyArgToFn
01488: ApplyArgToFn
01489: PushString(""unify"")
01490: LoadFn { code: 01077, fvars: 00000 }
01491: ApplyArgToFn
01492: ApplyArgToFn
01493: LoadFn { code: 01466, fvars: 00011 }
01494: ApplyFnToArg
01495:   Return
01496: LoadFn { code: 00651, fvars: 00011 }
01497: PushString(""acc"")
01498: PushString(""pair"")
01499: PushString("")
01500: ApplyArgToFn
01501: ApplyArgToFn
01502: LoadFn { code: 00655, fvars: 00000 }
01503: ApplyArgToFn
01504: ApplyArgToFn
01505: LoadVar(00010)
01506: ApplyArgToFn
01507: PushString("")
01508: ApplyFnToArg
01509: PushString(""join"")
01510: LoadFn { code: 00663, fvars: 00000 }
01511: ApplyArgToFn
01512: ApplyArgToFn
01513: LoadFn { code: 01484, fvars: 00010 }
01514: ApplyFnToArg
01515:   Return
01516: LoadVar(00001)
01517:   Return
01518: LoadVar(00001)
01519: LoadVar(00003)
01520: ApplyArgToFn
01521:   Return
01522: LoadFn { code: 01518, fvars: 00003 }
01523:   Return
01524: LoadVar(00000)
01525:   Return
01526: LoadFn { code: 01524, fvars: 00000 }
01527:   Return
01528: LoadVar(00002)
01529: LoadVar(00001)
01530: LoadVar(00000)
01531: Unpack
01532: ApplyArgToFn
01533: ApplyArgToFn
01534:   Return
01535: LoadFn { code: 01528, fvars: 00002 }
01536:   Return
01537: LoadFn { code: 01535, fvars: 00001 }
01538:   Return
01539: LoadFn { code: 01516, fvars: 00001 }
01540: LoadFn { code: 01522, fvars: 00002 }
01541: PushString(""xs"")
01542: PushString(""_"")
01543: PushString("")
01544: ApplyArgToFn
01545: ApplyArgToFn
01546: LoadFn { code: 01526, fvars: 00000 }
01547: ApplyArgToFn
01548: ApplyArgToFn
01549: LoadVar(00000)
01550: LoadFn { code: 01537, fvars: 00000 }
01551: ApplyArgToFn
01552: ApplyArgToFn
01553: ApplyArgToFn
01554:   Return
01555: LoadVar(00000)
01556:   Return
01557: LoadFn { code: 01555, fvars: 00000 }
01558:   Return
01559: LoadVar(00001)
01560: LoadVar(00000)
01561: ApplyArgToFn
01562:   Return
01563: LoadFn { code: 01559, fvars: 00001 }
01564:   Return
01565: LoadFn { code: 01563, fvars: 00000 }
01566:   Return
01567: LoadFn { code: 01496, fvars: 00010 }
01568: LoadFn { code: 01539, fvars: 00001 }
01569: PushString(""xs"")
01570: LoadFn { code: 01557, fvars: 00000 }
01571: ApplyArgToFn
01572: ApplyArgToFn
01573: PushString(""second"")
01574: LoadFn { code: 01565, fvars: 00000 }
01575: ApplyArgToFn
01576: ApplyArgToFn
01577: ApplyArgToFn
01578:   Return
01579: LoadVar(00001)
01580:   Return
01581: LoadVar(00000)
01582:   Return
01583: LoadFn { code: 01581, fvars: 00000 }
01584:   Return
01585: LoadVar(00000)
01586:   Return
01587: LoadFn { code: 01585, fvars: 00000 }
01588:   Return
01589: LoadVar(00002)
01590: LoadVar(00001)
01591: LoadVar(00000)
01592: Unpack
01593: ApplyArgToFn
01594: ApplyArgToFn
01595:   Return
01596: LoadFn { code: 01589, fvars: 00002 }
01597:   Return
01598: LoadFn { code: 01596, fvars: 00001 }
01599:   Return
01600: LoadFn { code: 01579, fvars: 00001 }
01601: LoadFn { code: 01583, fvars: 00000 }
01602: PushString(""_"")
01603: PushString(""x"")
01604: PushString("")
01605: ApplyArgToFn
01606: ApplyArgToFn
01607: LoadFn { code: 01587, fvars: 00000 }
01608: ApplyArgToFn
01609: ApplyArgToFn
01610: LoadVar(00000)
01611: LoadFn { code: 01598, fvars: 00000 }
01612: ApplyArgToFn
01613: ApplyArgToFn
01614: ApplyArgToFn
01615:   Return
01616: LoadVar(00000)
01617:   Return
01618: LoadFn { code: 01616, fvars: 00000 }
01619:   Return
01620: LoadVar(00001)
01621: LoadVar(00000)
01622: ApplyArgToFn
01623:   Return
01624: LoadFn { code: 01620, fvars: 00001 }
01625:   Return
01626: LoadFn { code: 01624, fvars: 00000 }
01627:   Return
01628: LoadFn { code: 01567, fvars: 00009 }
01629: LoadFn { code: 01600, fvars: 00000 }
01630: PushString(""xs"")
01631: LoadFn { code: 01618, fvars: 00000 }
01632: ApplyArgToFn
01633: ApplyArgToFn
01634: PushString(""first"")
01635: LoadFn { code: 01626, fvars: 00000 }
01636: ApplyArgToFn
01637: ApplyArgToFn
01638: ApplyArgToFn
01639:   Return
01640: LoadFn { code: 00457, fvars: 00000 }
01641: PushString(""=="")
01642: LoadFn { code: 00471, fvars: 00000 }
01643: ApplyArgToFn
01644: ApplyArgToFn
01645: PushString(""=="")
01646: LoadFn { code: 00479, fvars: 00000 }
01647: ApplyArgToFn
01648: ApplyArgToFn
01649: LoadFn { code: 01628, fvars: 00008 }
01650: ApplyFnToArg
01651:   Return
01652: LoadFn { code: 00297, fvars: 00000 }
01653: PushString(""destructure"")
01654: LoadFn { code: 00311, fvars: 00000 }
01655: ApplyArgToFn
01656: ApplyArgToFn
01657: PushString("")
01658: ApplyFnToArg
01659: PushString(""destructure"")
01660: LoadFn { code: 00319, fvars: 00000 }
01661: ApplyArgToFn
01662: ApplyArgToFn
01663: LoadFn { code: 01640, fvars: 00007 }
01664: ApplyFnToArg
01665:   Return
01666: PushString("")
01667: LoadVar(00002)
01668: ApplyArgToFn
01669: LoadVar(00001)
01670: ApplyFnToArg
01671: LoadVar(00000)
01672: ApplyFnToArg
01673: LoadVar(00005)
01674: ApplyArgToFn
01675:   Return
01676: LoadFn { code: 01666, fvars: 00005 }
01677:   Return
01678: LoadVar(00000)
01679:   Return
01680: LoadFn { code: 01678, fvars: 00000 }
01681:   Return
01682: LoadVar(00001)
01683: LoadVar(00000)
01684: ApplyArgToFn
01685:   Return
01686: LoadFn { code: 01682, fvars: 00001 }
01687:   Return
01688: LoadFn { code: 01686, fvars: 00000 }
01689:   Return
01690: LoadFn { code: 01652, fvars: 00006 }
01691: LoadFn { code: 01676, fvars: 00004 }
01692: PushString(""xs"")
01693: PushString(""ys"")
01694: PushString("")
01695: ApplyArgToFn
01696: ApplyArgToFn
01697: LoadFn { code: 01680, fvars: 00000 }
01698: ApplyArgToFn
01699: ApplyArgToFn
01700: PushString(""zip"")
01701: LoadFn { code: 01688, fvars: 00000 }
01702: ApplyArgToFn
01703: ApplyArgToFn
01704: ApplyArgToFn
01705:   Return
01706: LoadFn { code: 00218, fvars: 00000 }
01707: PushString(""zip"")
01708: LoadFn { code: 00234, fvars: 00000 }
01709: ApplyArgToFn
01710: ApplyArgToFn
01711: PushString(""zip"")
01712: LoadFn { code: 00242, fvars: 00000 }
01713: ApplyArgToFn
01714: ApplyArgToFn
01715: LoadFn { code: 01690, fvars: 00005 }
01716: ApplyFnToArg
01717:   Return
01718: LoadVar(00000)
01719: LoadVar(00001)
01720: ApplyArgToFn
01721:   Return
01722: LoadFn { code: 01718, fvars: 00001 }
01723:   Return
01724: LoadVar(00000)
01725:   Return
01726: LoadFn { code: 01724, fvars: 00000 }
01727:   Return
01728: LoadFn { code: 01722, fvars: 00000 }
01729: PushString(""acc"")
01730: PushString(""x"")
01731: PushString("")
01732: ApplyArgToFn
01733: ApplyArgToFn
01734: LoadFn { code: 01726, fvars: 00000 }
01735: ApplyArgToFn
01736: ApplyArgToFn
01737: LoadVar(00006)
01738: ApplyArgToFn
01739: LoadVar(00001)
01740: ApplyFnToArg
01741: LoadVar(00000)
01742: ApplyFnToArg
01743:   Return
01744: LoadFn { code: 01728, fvars: 00006 }
01745:   Return
01746: LoadVar(00000)
01747:   Return
01748: LoadFn { code: 01746, fvars: 00000 }
01749:   Return
01750: LoadFn { code: 01744, fvars: 00005 }
01751: PushString(""acc"")
01752: PushString(""x"")
01753: PushString("")
01754: ApplyArgToFn
01755: ApplyArgToFn
01756: LoadFn { code: 01748, fvars: 00000 }
01757: ApplyArgToFn
01758: ApplyArgToFn
01759: LoadVar(00004)
01760: ApplyArgToFn
01761: PushString("")
01762: ApplyFnToArg
01763: LoadVar(00000)
01764: ApplyFnToArg
01765: LoadVar(00002)
01766: ApplyArgToFn
01767:   Return
01768: LoadVar(00000)
01769:   Return
01770: LoadFn { code: 01768, fvars: 00000 }
01771:   Return
01772: LoadVar(00001)
01773: LoadVar(00000)
01774: ApplyArgToFn
01775:   Return
01776: LoadFn { code: 01772, fvars: 00001 }
01777:   Return
01778: LoadFn { code: 01776, fvars: 00000 }
01779:   Return
01780: LoadFn { code: 01706, fvars: 00004 }
01781: LoadFn { code: 01750, fvars: 00004 }
01782: PushString(""xs"")
01783: LoadFn { code: 01770, fvars: 00000 }
01784: ApplyArgToFn
01785: ApplyArgToFn
01786: PushString(""flatten"")
01787: LoadFn { code: 01778, fvars: 00000 }
01788: ApplyArgToFn
01789: ApplyArgToFn
01790: ApplyArgToFn
01791:   Return
01792: LoadVar(00000)
01793: LoadVar(00003)
01794: ApplyArgToFn
01795: LoadVar(00001)
01796: ApplyArgToFn
01797:   Return
01798: LoadFn { code: 01792, fvars: 00003 }
01799:   Return
01800: LoadVar(00000)
01801:   Return
01802: LoadFn { code: 01800, fvars: 00000 }
01803:   Return
01804: LoadFn { code: 01798, fvars: 00002 }
01805: PushString(""xs"")
01806: PushString(""x"")
01807: PushString("")
01808: ApplyArgToFn
01809: ApplyArgToFn
01810: LoadFn { code: 01802, fvars: 00000 }
01811: ApplyArgToFn
01812: ApplyArgToFn
01813: LoadVar(00004)
01814: ApplyArgToFn
01815: PushString("")
01816: ApplyFnToArg
01817: LoadVar(00000)
01818: LoadVar(00002)
01819: ApplyArgToFn
01820: ApplyFnToArg
01821:   Return
01822: LoadFn { code: 01804, fvars: 00004 }
01823:   Return
01824: LoadVar(00000)
01825:   Return
01826: LoadFn { code: 01824, fvars: 00000 }
01827:   Return
01828: LoadVar(00001)
01829: LoadVar(00000)
01830: ApplyArgToFn
01831:   Return
01832: LoadFn { code: 01828, fvars: 00001 }
01833:   Return
01834: LoadFn { code: 01832, fvars: 00000 }
01835:   Return
01836: LoadFn { code: 01780, fvars: 00003 }
01837: LoadFn { code: 01822, fvars: 00003 }
01838: PushString(""f"")
01839: PushString(""xs"")
01840: PushString("")
01841: ApplyArgToFn
01842: ApplyArgToFn
01843: LoadFn { code: 01826, fvars: 00000 }
01844: ApplyArgToFn
01845: ApplyArgToFn
01846: PushString(""map"")
01847: LoadFn { code: 01834, fvars: 00000 }
01848: ApplyArgToFn
01849: ApplyArgToFn
01850: ApplyArgToFn
01851:   Return
01852: LoadVar(00000)
01853: LoadVar(00001)
01854: ApplyArgToFn
01855:   Return
01856: LoadFn { code: 01852, fvars: 00001 }
01857:   Return
01858: LoadVar(00000)
01859:   Return
01860: LoadFn { code: 01858, fvars: 00000 }
01861:   Return
01862: LoadFn { code: 01856, fvars: 00000 }
01863: PushString(""xs"")
01864: PushString(""x"")
01865: PushString("")
01866: ApplyArgToFn
01867: ApplyArgToFn
01868: LoadFn { code: 01860, fvars: 00000 }
01869: ApplyArgToFn
01870: ApplyArgToFn
01871: LoadVar(00002)
01872: ApplyArgToFn
01873: PushString("")
01874: ApplyFnToArg
01875: LoadVar(00000)
01876: ApplyFnToArg
01877:   Return
01878: LoadVar(00000)
01879:   Return
01880: LoadFn { code: 01878, fvars: 00000 }
01881:   Return
01882: LoadVar(00001)
01883: LoadVar(00000)
01884: ApplyArgToFn
01885:   Return
01886: LoadFn { code: 01882, fvars: 00001 }
01887:   Return
01888: LoadFn { code: 01886, fvars: 00000 }
01889:   Return
01890: LoadFn { code: 01836, fvars: 00002 }
01891: LoadFn { code: 01862, fvars: 00002 }
01892: PushString(""xs"")
01893: LoadFn { code: 01880, fvars: 00000 }
01894: ApplyArgToFn
01895: ApplyArgToFn
01896: PushString(""reverse"")
01897: LoadFn { code: 01888, fvars: 00000 }
01898: ApplyArgToFn
01899: ApplyArgToFn
01900: ApplyArgToFn
01901:   Return
01902: LoadVar(00000)
01903: LoadVar(00001)
01904: ApplyArgToFn
01905:   Return
01906: LoadFn { code: 01902, fvars: 00001 }
01907:   Return
01908: LoadVar(00000)
01909:   Return
01910: LoadFn { code: 01908, fvars: 00000 }
01911:   Return
01912: LoadFn { code: 01906, fvars: 00000 }
01913: PushString(""f"")
01914: PushString(""x"")
01915: PushString("")
01916: ApplyArgToFn
01917: ApplyArgToFn
01918: LoadFn { code: 01910, fvars: 00000 }
01919: ApplyArgToFn
01920: ApplyArgToFn
01921: LoadVar(00002)
01922: ApplyArgToFn
01923: LoadVar(00001)
01924: ApplyFnToArg
01925: LoadVar(00000)
01926: ApplyFnToArg
01927:   Return
01928: LoadFn { code: 01912, fvars: 00002 }
01929:   Return
01930: LoadVar(00000)
01931:   Return
01932: LoadFn { code: 01930, fvars: 00000 }
01933:   Return
01934: LoadVar(00001)
01935: LoadVar(00000)
01936: ApplyArgToFn
01937:   Return
01938: LoadFn { code: 01934, fvars: 00001 }
01939:   Return
01940: LoadFn { code: 01938, fvars: 00000 }
01941:   Return
01942: LoadFn { code: 01890, fvars: 00001 }
01943: LoadFn { code: 01928, fvars: 00001 }
01944: PushString(""f"")
01945: PushString(""xs"")
01946: PushString("")
01947: ApplyArgToFn
01948: ApplyArgToFn
01949: LoadFn { code: 01932, fvars: 00000 }
01950: ApplyArgToFn
01951: ApplyArgToFn
01952: PushString(""apply"")
01953: LoadFn { code: 01940, fvars: 00000 }
01954: ApplyArgToFn
01955: ApplyArgToFn
01956: ApplyArgToFn
01957:   Return
01958: LoadFn { code: 00065, fvars: 00000 }
01959: PushString(""fold"")
01960: LoadFn { code: 00081, fvars: 00000 }
01961: ApplyArgToFn
01962: ApplyArgToFn
01963: PushString(""fold"")
01964: LoadFn { code: 00089, fvars: 00000 }
01965: ApplyArgToFn
01966: ApplyArgToFn
01967: LoadFn { code: 01942, fvars: 00000 }
01968: ApplyFnToArg
01969:   Return

[Bar, Foo, Bar, Foo, Bar, Foo, Bar, Foo, Bar, NoMatch([["x", Foo], ["x", Bar]])]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:apply = ([:f, :xs] => {
    fold([:f, :x] => { f(x) }, f, xs)
})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:map = ([:f, :xs] => {
    fold([:xs, :x] => { xs(f(x)) }, [], reverse(xs))
})
:flatten = (:xs => {
    reverse(fold([:acc, :x] => {
        fold([:acc, :x] => { acc(x) }, acc, x)
    }, [], xs))
})
:zip = (:zip ~> { [:acc, :xs, :ys] => {
    __unpack(xs, [:xs, :x] => {
        __unpack(ys, [:ys, :y] => { zip(acc([x, y]), xs, ys) }, {})
    }, {
        __unpack(ys, [:ys, :y] => {}, { acc })
    })
}})
:zip = ([:xs, :ys] => {
    reverse(zip([], xs, ys))
})
:destructure = (:destructure ~> { [:acc, :compound] => {
    __unpack(compound, [:xs, :x] => {
        destructure(acc(x), xs)
    }, {
        [compound, acc]
    })
} })([])
:== = (:== ~> { [:a, :b] => {
    __unpack(a, [:xs, :x] => {
        __unpack(b, [:ys, :y] => {
            __compare(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        __compare(a, b, { True }, { False })
    })
}})
:first = (:xs => {
    __unpack(xs, [:_, :x] => { x }, { xs })
})
:second = (:xs => {
    __unpack(xs, [:xs, :_] => { first(xs) }, { xs })
})
:join = fold([:acc, :pair] => {
    :xvar = first(pair)
    :xval = second(pair)
    fold([:_, :pair] => {
        :yvar = first(pair)
        :yval = second(pair)
        __compare(xvar, yvar, {
            __compare(xval == yval, False, {
                no-match!([[xvar, xval], [yvar, yval]])
            }, {})
        }, {})
    }, [], acc)
    acc(pair)
}, [])
:unify = (:unify ~> { [:pattern, :value] => {
    __unpack(pattern, [:type, :pattern] => {
        __compare(type, Binding, {
            [[pattern, value]]
        }, {
            __compare(type, List, {
                :zipped = zip(pattern, value)
                __compare(zipped, [], {
                    no-match!([type(pattern), value])
                }, {
                    join(flatten(map(apply(unify), zipped)))
                })
            }, {
                __unpack(type, [:type, :f] => {
                    __compare(type, Compound, {
                        :v = destructure(value)
                        :vf = first(v)
                        :vargs = second(v)
                        :zipped = reverse(zip(pattern(f), vargs(vf)))
                        __compare(zipped, [], {
                            no-match!([type(f, pattern), value])
                        }, {
                            join(flatten(map(apply(unify), zipped)))
                        })
                    }, {
                        invalid!(type(f, pattern))
                    })
                }, {
                    __compare(pattern == value, True, {}, {
                        no-match!([pattern, value])
                    })
                })
            })
        })
    }, {
        invalid!(pattern)
    })
}})
:-> = ([:pattern, :body, :value] => {
    __handle( {
        :args = map(second, unify(pattern, value))
        __compare(args, [], {
            body()
        }, {
            apply(body, args)
        })
    }, no-match!, [:_, :arg] => {
        no-match!(arg)
    })
})
:match = ([:value, :clauses] => {
    :result = fold([:result, :clause] => {
        __compare(result, [], {
            __handle({
                Match(clause(value))
            }, no-match!, [:r, :arg] => {})
        }, {
            result
        })
    }, [], clauses)
    __unpack(result, [:_, :result] => {
        result
    }, {
        no-match!(value)
    })
})
[
    match(Pair(Foo, Bar), [
        Pair(:x, :x) -> { Twice(x, x) }
        Pair(:x, Foo) -> { SecondIsFoo }
        Pair(:x, :y) -> { y }
        :_ -> { throw!(InvalidPair) }
    ])
    __handle({
        match(Foo, [
            Pair(:x, :x) -> { Twice(x, x) }
            Pair(:x, Foo) -> { SecondIsFoo }
            Pair(:x, :y) -> { y }
        ])
    }, no-match!, [:_, :arg] => {
        NoMatch(arg)
    })
]

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :apply
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :f
            :x ]
          { (f
              x) })
        f
        xs) }))
(=
  :reverse
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :map
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              (f
                x)) })
        [  ]
        (reverse
          xs)) }))
(=
  :flatten
  (=>
    :xs
    { (reverse
        (fold
          (=>
            [ :acc
              :x ]
            { (fold
                (=>
                  [ :acc
                    :x ]
                  { (acc
                      x) })
                acc
                x) })
          [  ]
          xs)) }))
(=
  :zip
  (~>
    :zip
    { (=>
        [ :acc
          :xs
          :ys ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (__unpack
                  ys
                  (=>
                    [ :ys
                      :y ]
                    { (zip
                        (acc
                          [ x
                            y ])
                        xs
                        ys) })
                  {  }) })
            { (__unpack
                ys
                (=>
                  [ :ys
                    :y ]
                  {  })
                { acc }) }) }) }))
(=
  :zip
  (=>
    [ :xs
      :ys ]
    { (reverse
        (zip
          [  ]
          xs
          ys)) }))
(=
  :destructure
  ((~>
    :destructure
    { (=>
        [ :acc
          :compound ]
        { (__unpack
            compound
            (=>
              [ :xs
                :x ]
              { (destructure
                  (acc
                    x)
                  xs) })
            { [ compound
                acc ] }) }) })
    [  ]))
(=
  :==
  (~>
    :==
    { (=>
        [ :a
          :b ]
        { (__unpack
            a
            (=>
              [ :xs
                :x ]
              { (__unpack
                  b
                  (=>
                    [ :ys
                      :y ]
                    { (__compare
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (__compare
                a
                b
                { True }
                { False }) }) }) }))
(=
  :first
  (=>
    :xs
    { (__unpack
        xs
        (=>
          [ :_
            :x ]
          { x })
        { xs }) }))
(=
  :second
  (=>
    :xs
    { (__unpack
        xs
        (=>
          [ :xs
            :_ ]
          { (first
              xs) })
        { xs }) }))
(=
  :join
  (fold
    (=>
      [ :acc
        :pair ]
      { (=
          :xvar
          (first
            pair))
        (=
          :xval
          (second
            pair))
        (fold
          (=>
            [ :_
              :pair ]
            { (=
                :yvar
                (first
                  pair))
              (=
                :yval
                (second
                  pair))
              (__compare
                xvar
                yvar
                { (__compare
                    (==
                      xval
                      yval)
                    False
                    { (no-match!
                        [ [ xvar
                            xval ]
                          [ yvar
                            yval ] ]) }
                    {  }) }
                {  }) })
          [  ]
          acc)
        (acc
          pair) })
    [  ]))
(=
  :unify
  (~>
    :unify
    { (=>
        [ :pattern
          :value ]
        { (__unpack
            pattern
            (=>
              [ :type
                :pattern ]
              { (__compare
                  type
                  Binding
                  { [ [ pattern
                        value ] ] }
                  { (__compare
                      type
                      List
                      { (=
                          :zipped
                          (zip
                            pattern
                            value))
                        (__compare
                          zipped
                          [  ]
                          { (no-match!
                              [ (type
                                  pattern)
                                value ]) }
                          { (join
                              (flatten
                                (map
                                  (apply
                                    unify)
                                  zipped))) }) }
                      { (__unpack
                          type
                          (=>
                            [ :type
                              :f ]
                            { (__compare
                                type
                                Compound
                                { (=
                                    :v
                                    (destructure
                                      value))
                                  (=
                                    :vf
                                    (first
                                      v))
                                  (=
                                    :vargs
                                    (second
                                      v))
                                  (=
                                    :zipped
                                    (reverse
                                      (zip
                                        (pattern
                                          f)
                                        (vargs
                                          vf))))
                                  (__compare
                                    zipped
                                    [  ]
                                    { (no-match!
                                        [ (type
                                            f
                                            pattern)
                                          value ]) }
                                    { (join
                                        (flatten
                                          (map
                                            (apply
                                              unify)
                                            zipped))) }) }
                                { (invalid!
                                    (type
                                      f
                                      pattern)) }) })
                          { (__compare
                              (==
                                pattern
                                value)
                              True
                              {  }
                              { (no-match!
                                  [ pattern
                                    value ]) }) }) }) }) })
            { (invalid!
                pattern) }) }) }))
(=
  :->
  (=>
    [ :pattern
      :body
      :value ]
    { (__handle
        { (=
            :args
            (map
              second
              (unify
                pattern
                value)))
          (__compare
            args
            [  ]
            { (body) }
            { (apply
                body
                args) }) }
        no-match!
        (=>
          [ :_
            :arg ]
          { (no-match!
              arg) })) }))
(=
  :match
  (=>
    [ :value
      :clauses ]
    { (=
        :result
        (fold
          (=>
            [ :result
              :clause ]
            { (__compare
                result
                [  ]
                { (__handle
                    { (Match
                        (clause
                          value)) }
                    no-match!
                    (=>
                      [ :r
                        :arg ]
                      {  })) }
                { result }) })
          [  ]
          clauses))
      (__unpack
        result
        (=>
          [ :_
            :result ]
          { result })
        { (no-match!
            value) }) }))
[ (match
    (Pair
      Foo
      Bar)
    [ (->
        (Pair
          :x
          :x)
        { (Twice
            x
            x) })
      (->
        (Pair
          :x
          Foo)
        { SecondIsFoo })
      (->
        (Pair
          :x
          :y)
        { y })
      (->
        :_
        { (throw!
            InvalidPair) }) ])
  (__handle
    { (match
        Foo
        [ (->
            (Pair
              :x
              :x)
            { (Twice
                x
                x) })
          (->
            (Pair
              :x
              Foo)
            { SecondIsFoo })
          (->
            (Pair
              :x
              :y)
            { y }) ]) }
    no-match!
    (=>
      [ :_
        :arg ]
      { (NoMatch
          arg) })) ]

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "apply" )
        ( ( =>
              =>
                0
            ( ( []
                "xs" )
              "f" ) )
          =>
            =>
              ( ( ( 2
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "f" ) )
                      =>
                        =>
                          ( 1
                            0 ) ) )
                  1 )
                0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "reverse" )
            ( ( =>
                  =>
                    0
                "xs" )
              =>
                ( ( ( 2
                      ( ( =>
                            =>
                              0
                          ( ( []
                              "x" )
                            "xs" ) )
                        =>
                          =>
                            ( 1
                              0 ) ) )
                    [] )
                  0 ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "map" )
                ( ( =>
                      =>
                        0
                    ( ( []
                        "xs" )
                      "f" ) )
                  =>
                    =>
                      ( ( ( 4
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "x" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 1
                                    ( 3
                                      0 ) ) ) )
                          [] )
                        ( 2
                          0 ) ) ) )
              =>
                ( ( ( =>
                        =>
                          =>
                            ( 0
                              1 )
                      "flatten" )
                    ( ( =>
                          =>
                            0
                        "xs" )
                      =>
                        ( 2
                          ( ( ( 4
                                ( ( =>
                                      =>
                                        0
                                    ( ( []
                                        "x" )
                                      "acc" ) )
                                  =>
                                    =>
                                      ( ( ( 6
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "x" )
                                                  "acc" ) )
                                              =>
                                                =>
                                                  ( 1
                                                    0 ) ) )
                                          1 )
                                        0 ) ) )
                              [] )
                            0 ) ) ) )
                  =>
                    ( ( ( =>
                            =>
                              =>
                                ( 0
                                  1 )
                          "zip" )
                        ( ( =>
                              =>
                                ~>
                                  0
                            "zip" )
                          =>
                            ( ( =>
                                  =>
                                    0
                                ( ( ( []
                                      "ys" )
                                    "xs" )
                                  "acc" ) )
                              =>
                                =>
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( pop
                                                  2
                                                  1
                                                  0 )
                                          1 )
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "x" )
                                              "xs" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    2 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "y" )
                                                        "ys" ) )
                                                    =>
                                                      =>
                                                        ( ( ( 7
                                                              ( 6
                                                                ( ( []
                                                                    0 )
                                                                  2 ) ) )
                                                            3 )
                                                          1 ) ) )
                                                =>
                                                  [] ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              1 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "y" )
                                                  "ys" ) )
                                              =>
                                                =>
                                                  [] ) )
                                          =>
                                            4 ) ) ) ) )
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( 0
                                      1 )
                              "zip" )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "ys" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 5
                                    ( ( ( 2
                                          [] )
                                        1 )
                                      0 ) ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( 0
                                          1 )
                                  "destructure" )
                                ( ( ( =>
                                        =>
                                          ~>
                                            0
                                      "destructure" )
                                    =>
                                      ( ( =>
                                            =>
                                              0
                                          ( ( []
                                              "compound" )
                                            "acc" ) )
                                        =>
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "x" )
                                                      "xs" ) )
                                                  =>
                                                    =>
                                                      ( ( 4
                                                          ( 3
                                                            0 ) )
                                                        1 ) ) )
                                              =>
                                                ( ( []
                                                    2 )
                                                  1 ) ) ) )
                                  [] ) )
                              =>
                                ( ( ( =>
                                        =>
                                          =>
                                            ( 0
                                              1 )
                                      "==" )
                                    ( ( =>
                                          =>
                                            ~>
                                              0
                                        "==" )
                                      =>
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "b" )
                                              "a" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    1 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "x" )
                                                        "xs" ) )
                                                    =>
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( pop
                                                                      2
                                                                      1
                                                                      0 )
                                                              2 )
                                                            ( ( =>
                                                                  =>
                                                                    0
                                                                ( ( []
                                                                    "y" )
                                                                  "ys" ) )
                                                              =>
                                                                =>
                                                                  ( ( ( ( =>
                                                                            =>
                                                                              =>
                                                                                =>
                                                                                  ( if
                                                                                    3
                                                                                    2
                                                                                    1
                                                                                    0 )
                                                                          ( ( 6
                                                                              2 )
                                                                            0 ) )
                                                                        True )
                                                                      =>
                                                                        ( ( 7
                                                                            4 )
                                                                          2 ) )
                                                                    =>
                                                                      False ) ) )
                                                          =>
                                                            False ) ) )
                                                =>
                                                  ( ( ( ( =>
                                                            =>
                                                              =>
                                                                =>
                                                                  ( if
                                                                    3
                                                                    2
                                                                    1
                                                                    0 )
                                                          2 )
                                                        1 )
                                                      =>
                                                        True )
                                                    =>
                                                      False ) ) ) ) )
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( 0
                                                  1 )
                                          "first" )
                                        ( ( =>
                                              =>
                                                0
                                            "xs" )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "x" )
                                                      "_" ) )
                                                  =>
                                                    =>
                                                      0 ) )
                                              =>
                                                1 ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( 0
                                                      1 )
                                              "second" )
                                            ( ( =>
                                                  =>
                                                    0
                                                "xs" )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( pop
                                                              2
                                                              1
                                                              0 )
                                                      0 )
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "_" )
                                                          "xs" ) )
                                                      =>
                                                        =>
                                                          ( 3
                                                            1 ) ) )
                                                  =>
                                                    1 ) ) )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( 0
                                                          1 )
                                                  "join" )
                                                ( ( 10
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "pair" )
                                                          "acc" ) )
                                                      =>
                                                        =>
                                                          ( ( ( =>
                                                                  =>
                                                                    =>
                                                                      ( 0
                                                                        1 )
                                                                "xvar" )
                                                              ( 3
                                                                0 ) )
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( 0
                                                                            1 )
                                                                    "xval" )
                                                                  ( 3
                                                                    1 ) )
                                                                =>
                                                                  ( =>
                                                                      ( 4
                                                                        3 )
                                                                    ( ( ( 14
                                                                          ( ( =>
                                                                                =>
                                                                                  0
                                                                              ( ( []
                                                                                  "pair" )
                                                                                "_" ) )
                                                                            =>
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( 0
                                                                                              1 )
                                                                                      "yvar" )
                                                                                    ( 7
                                                                                      0 ) )
                                                                                  =>
                                                                                    ( ( ( =>
                                                                                            =>
                                                                                              =>
                                                                                                ( 0
                                                                                                  1 )
                                                                                          "yval" )
                                                                                        ( 7
                                                                                          1 ) )
                                                                                      =>
                                                                                        ( ( ( ( =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        ( if
                                                                                                          3
                                                                                                          2
                                                                                                          1
                                                                                                          0 )
                                                                                                5 )
                                                                                              1 )
                                                                                            =>
                                                                                              ( ( ( ( =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            =>
                                                                                                              ( if
                                                                                                                3
                                                                                                                2
                                                                                                                1
                                                                                                                0 )
                                                                                                      ( ( 11
                                                                                                          5 )
                                                                                                        1 ) )
                                                                                                    False )
                                                                                                  =>
                                                                                                    ( no-match!
                                                                                                      ( ( []
                                                                                                          ( ( []
                                                                                                              2 )
                                                                                                            3 ) )
                                                                                                        ( ( []
                                                                                                            6 )
                                                                                                          7 ) ) ) )
                                                                                                =>
                                                                                                  [] ) )
                                                                                          =>
                                                                                            [] ) ) ) ) )
                                                                        [] )
                                                                      3 ) ) ) ) ) )
                                                  [] ) )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( 0
                                                              1 )
                                                      "unify" )
                                                    ( ( =>
                                                          =>
                                                            ~>
                                                              0
                                                        "unify" )
                                                      =>
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( []
                                                                "value" )
                                                              "pattern" ) )
                                                          =>
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( pop
                                                                            2
                                                                            1
                                                                            0 )
                                                                    1 )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "pattern" )
                                                                        "type" ) )
                                                                    =>
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                1 )
                                                                              Binding )
                                                                            =>
                                                                              ( []
                                                                                ( ( []
                                                                                    3 )
                                                                                  1 ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    2 )
                                                                                  List )
                                                                                =>
                                                                                  ( ( ( =>
                                                                                          =>
                                                                                            =>
                                                                                              ( 0
                                                                                                1 )
                                                                                        "zipped" )
                                                                                      ( ( 12
                                                                                          2 )
                                                                                        4 ) )
                                                                                    =>
                                                                                      ( ( ( ( =>
                                                                                                =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      ( if
                                                                                                        3
                                                                                                        2
                                                                                                        1
                                                                                                        0 )
                                                                                              0 )
                                                                                            [] )
                                                                                          =>
                                                                                            ( no-match!
                                                                                              ( ( []
                                                                                                  6 )
                                                                                                ( 5
                                                                                                  4 ) ) ) )
                                                                                        =>
                                                                                          ( 9
                                                                                            ( 16
                                                                                              ( ( 17
                                                                                                  ( 19
                                                                                                    8 ) )
                                                                                                1 ) ) ) ) ) )
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( pop
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                      3 )
                                                                                    ( ( =>
                                                                                          =>
                                                                                            0
                                                                                        ( ( []
                                                                                            "f" )
                                                                                          "type" ) )
                                                                                      =>
                                                                                        =>
                                                                                          ( ( ( ( =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        =>
                                                                                                          ( if
                                                                                                            3
                                                                                                            2
                                                                                                            1
                                                                                                            0 )
                                                                                                  1 )
                                                                                                Compound )
                                                                                              =>
                                                                                                ( ( ( =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            ( 0
                                                                                                              1 )
                                                                                                      "v" )
                                                                                                    ( 14
                                                                                                      7 ) )
                                                                                                  =>
                                                                                                    ( ( ( =>
                                                                                                            =>
                                                                                                              =>
                                                                                                                ( 0
                                                                                                                  1 )
                                                                                                          "vf" )
                                                                                                        ( 13
                                                                                                          0 ) )
                                                                                                      =>
                                                                                                        ( ( ( =>
                                                                                                                =>
                                                                                                                  =>
                                                                                                                    ( 0
                                                                                                                      1 )
                                                                                                              "vargs" )
                                                                                                            ( 13
                                                                                                              1 ) )
                                                                                                          =>
                                                                                                            ( ( ( =>
                                                                                                                    =>
                                                                                                                      =>
                                                                                                                        ( 0
                                                                                                                          1 )
                                                                                                                  "zipped" )
                                                                                                                ( 22
                                                                                                                  ( ( 18
                                                                                                                      ( 8
                                                                                                                        4 ) )
                                                                                                                    ( 0
                                                                                                                      1 ) ) ) )
                                                                                                              =>
                                                                                                                ( ( ( ( =>
                                                                                                                          =>
                                                                                                                            =>
                                                                                                                              =>
                                                                                                                                ( if
                                                                                                                                  3
                                                                                                                                  2
                                                                                                                                  1
                                                                                                                                  0 )
                                                                                                                        0 )
                                                                                                                      [] )
                                                                                                                    =>
                                                                                                                      ( no-match!
                                                                                                                        ( ( []
                                                                                                                            12 )
                                                                                                                          ( ( 7
                                                                                                                              6 )
                                                                                                                            10 ) ) ) )
                                                                                                                  =>
                                                                                                                    ( 15
                                                                                                                      ( 22
                                                                                                                        ( ( 23
                                                                                                                            ( 25
                                                                                                                              14 ) )
                                                                                                                          1 ) ) ) ) ) ) ) ) )
                                                                                            =>
                                                                                              ( invalid!
                                                                                                ( ( 2
                                                                                                    1 )
                                                                                                  5 ) ) ) ) )
                                                                                  =>
                                                                                    ( ( ( ( =>
                                                                                              =>
                                                                                                =>
                                                                                                  =>
                                                                                                    ( if
                                                                                                      3
                                                                                                      2
                                                                                                      1
                                                                                                      0 )
                                                                                            ( ( 11
                                                                                                3 )
                                                                                              5 ) )
                                                                                          True )
                                                                                        =>
                                                                                          [] )
                                                                                      =>
                                                                                        ( no-match!
                                                                                          ( ( []
                                                                                              6 )
                                                                                            4 ) ) ) ) ) ) ) )
                                                                =>
                                                                  ( invalid!
                                                                    2 ) ) ) ) )
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( 0
                                                                  1 )
                                                          "->" )
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( ( []
                                                                  "value" )
                                                                "body" )
                                                              "pattern" ) )
                                                          =>
                                                            =>
                                                              =>
                                                                ( ( ( =>
                                                                        =>
                                                                          =>
                                                                            ( try
                                                                              2
                                                                              1
                                                                              0 )
                                                                      =>
                                                                        ( ( ( =>
                                                                                =>
                                                                                  =>
                                                                                    ( 0
                                                                                      1 )
                                                                              "args" )
                                                                            ( ( 13
                                                                                6 )
                                                                              ( ( 4
                                                                                  3 )
                                                                                1 ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    0 )
                                                                                  [] )
                                                                                =>
                                                                                  ( 4
                                                                                    [] ) )
                                                                              =>
                                                                                ( ( 17
                                                                                    4 )
                                                                                  1 ) ) ) )
                                                                    no-match! )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "arg" )
                                                                        "_" ) )
                                                                    =>
                                                                      =>
                                                                        ( no-match!
                                                                          0 ) ) ) ) )
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( 0
                                                                      1 )
                                                              "match" )
                                                            ( ( =>
                                                                  =>
                                                                    0
                                                                ( ( []
                                                                    "clauses" )
                                                                  "value" ) )
                                                              =>
                                                                =>
                                                                  ( ( ( =>
                                                                          =>
                                                                            =>
                                                                              ( 0
                                                                                1 )
                                                                        "result" )
                                                                      ( ( ( 15
                                                                            ( ( =>
                                                                                  =>
                                                                                    0
                                                                                ( ( []
                                                                                    "clause" )
                                                                                  "result" ) )
                                                                              =>
                                                                                =>
                                                                                  ( ( ( ( =>
                                                                                            =>
                                                                                              =>
                                                                                                =>
                                                                                                  ( if
                                                                                                    3
                                                                                                    2
                                                                                                    1
                                                                                                    0 )
                                                                                          1 )
                                                                                        [] )
                                                                                      =>
                                                                                        ( ( ( =>
                                                                                                =>
                                                                                                  =>
                                                                                                    ( try
                                                                                                      2
                                                                                                      1
                                                                                                      0 )
                                                                                              =>
                                                                                                ( Match
                                                                                                  ( 2
                                                                                                    5 ) ) )
                                                                                            no-match! )
                                                                                          ( ( =>
                                                                                                =>
                                                                                                  0
                                                                                              ( ( []
                                                                                                  "arg" )
                                                                                                "r" ) )
                                                                                            =>
                                                                                              =>
                                                                                                [] ) ) )
                                                                                    =>
                                                                                      2 ) ) )
                                                                          [] )
                                                                        0 ) )
                                                                    =>
                                                                      ( ( ( =>
                                                                              =>
                                                                                =>
                                                                                  ( pop
                                                                                    2
                                                                                    1
                                                                                    0 )
                                                                            0 )
                                                                          ( ( =>
                                                                                =>
                                                                                  0
                                                                              ( ( []
                                                                                  "result" )
                                                                                "_" ) )
                                                                            =>
                                                                              =>
                                                                                0 ) )
                                                                        =>
                                                                          ( no-match!
                                                                            3 ) ) ) ) )
                                                          =>
                                                            ( ( []
                                                                ( ( ( =>
                                                                        =>
                                                                          =>
                                                                            ( try
                                                                              2
                                                                              1
                                                                              0 )
                                                                      =>
                                                                        ( ( 1
                                                                            Foo )
                                                                          ( ( ( []
                                                                                ( ( 2
                                                                                    ( ( Compound
                                                                                        ( Value
                                                                                          Pair ) )
                                                                                      ( ( []
                                                                                          ( Binding
                                                                                            "y" ) )
                                                                                        ( Binding
                                                                                          "x" ) ) ) )
                                                                                  =>
                                                                                    =>
                                                                                      0 ) )
                                                                              ( ( 2
                                                                                  ( ( Compound
                                                                                      ( Value
                                                                                        Pair ) )
                                                                                    ( ( []
                                                                                        ( Value
                                                                                          Foo ) )
                                                                                      ( Binding
                                                                                        "x" ) ) ) )
                                                                                =>
                                                                                  SecondIsFoo ) )
                                                                            ( ( 2
                                                                                ( ( Compound
                                                                                    ( Value
                                                                                      Pair ) )
                                                                                  ( ( []
                                                                                      ( Binding
                                                                                        "x" ) )
                                                                                    ( Binding
                                                                                      "x" ) ) ) )
                                                                              =>
                                                                                =>
                                                                                  ( ( Twice
                                                                                      0 )
                                                                                    0 ) ) ) ) )
                                                                    no-match! )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "arg" )
                                                                        "_" ) )
                                                                    =>
                                                                      =>
                                                                        ( NoMatch
                                                                          0 ) ) ) )
                                                              ( ( 0
                                                                  ( ( Pair
                                                                      Foo )
                                                                    Bar ) )
                                                                ( ( ( ( []
                                                                        ( ( 1
                                                                            ( Binding
                                                                              "_" ) )
                                                                          =>
                                                                            ( throw!
                                                                              InvalidPair ) ) )
                                                                      ( ( 1
                                                                          ( ( Compound
                                                                              ( Value
                                                                                Pair ) )
                                                                            ( ( []
                                                                                ( Binding
                                                                                  "y" ) )
                                                                              ( Binding
                                                                                "x" ) ) ) )
                                                                        =>
                                                                          =>
                                                                            0 ) )
                                                                    ( ( 1
                                                                        ( ( Compound
                                                                            ( Value
                                                                              Pair ) )
                                                                          ( ( []
                                                                              ( Value
                                                                                Foo ) )
                                                                            ( Binding
                                                                              "x" ) ) ) )
                                                                      =>
                                                                        SecondIsFoo ) )
                                                                  ( ( 1
                                                                      ( ( Compound
                                                                          ( Value
                                                                            Pair ) )
                                                                        ( ( []
                                                                            ( Binding
                                                                              "x" ) )
                                                                          ( Binding
                                                                            "x" ) ) ) )
                                                                    =>
                                                                      =>
                                                                        ( ( Twice
                                                                            0 )
                                                                          0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00002)
00011:   Return
00012: LoadVar(00004)
00013: LoadVar(00005)
00014: ApplyArgToFn
00015: LoadVar(00003)
00016: LoadVar(00004)
00017: ApplyArgToFn
00018: LoadVar(00000)
00019: ApplyFnToArg
00020: ApplyFnToArg
00021: LoadVar(00001)
00022: ApplyFnToArg
00023:   Return
00024: LoadFn { code: 00012, fvars: 00005 }
00025:   Return
00026: LoadVar(00000)
00027:   Return
00028: LoadFn { code: 00026, fvars: 00000 }
00029:   Return
00030: LoadVar(00002)
00031: LoadVar(00001)
00032: LoadVar(00000)
00033: Unpack
00034: ApplyArgToFn
00035: ApplyArgToFn
00036:   Return
00037: LoadFn { code: 00030, fvars: 00002 }
00038:   Return
00039: LoadFn { code: 00037, fvars: 00001 }
00040:   Return
00041: LoadFn { code: 00010, fvars: 00002 }
00042: LoadFn { code: 00024, fvars: 00004 }
00043: PushString(""xs"")
00044: PushString(""x"")
00045: PushString("")
00046: ApplyArgToFn
00047: ApplyArgToFn
00048: LoadFn { code: 00028, fvars: 00000 }
00049: ApplyArgToFn
00050: ApplyArgToFn
00051: LoadVar(00000)
00052: LoadFn { code: 00039, fvars: 00000 }
00053: ApplyArgToFn
00054: ApplyArgToFn
00055: ApplyArgToFn
00056:   Return
00057: LoadFn { code: 00041, fvars: 00003 }
00058:   Return
00059: LoadFn { code: 00057, fvars: 00002 }
00060:   Return
00061: LoadVar(00000)
00062:   Return
00063: LoadFn { code: 00061, fvars: 00000 }
00064:   Return
00065: LoadFn { code: 00059, fvars: 00001 }
00066: PushString(""f"")
00067: PushString(""acc"")
00068: PushString(""xs"")
00069: PushString("")
00070: ApplyArgToFn
00071: ApplyArgToFn
00072: ApplyArgToFn
00073: LoadFn { code: 00063, fvars: 00000 }
00074: ApplyArgToFn
00075: ApplyArgToFn
00076:   Return
00077: LoadVar(00000)
00078: LoadFn { code: 00000, fvars: 00000 }
00079: ApplyArgToFn
00080:   Return
00081: LoadFn { code: 00077, fvars: 00000 }
00082:   Return
00083: LoadVar(00001)
00084: LoadVar(00000)
00085: ApplyArgToFn
00086:   Return
00087: LoadFn { code: 00083, fvars: 00001 }
00088:   Return
00089: LoadFn { code: 00087, fvars: 00000 }
00090:   Return
00091: LoadVar(00004)
00092:   Return
00093: PushString("")
00094:   Return
00095: LoadFn { code: 00093, fvars: 00000 }
00096:   Return
00097: LoadVar(00000)
00098:   Return
00099: LoadFn { code: 00097, fvars: 00000 }
00100:   Return
00101: LoadVar(00002)
00102: LoadVar(00001)
00103: LoadVar(00000)
00104: Unpack
00105: ApplyArgToFn
00106: ApplyArgToFn
00107:   Return
00108: LoadFn { code: 00101, fvars: 00002 }
00109:   Return
00110: LoadFn { code: 00108, fvars: 00001 }
00111:   Return
00112: LoadFn { code: 00091, fvars: 00004 }
00113: LoadFn { code: 00095, fvars: 00000 }
00114: PushString(""ys"")
00115: PushString(""y"")
00116: PushString("")
00117: ApplyArgToFn
00118: ApplyArgToFn
00119: LoadFn { code: 00099, fvars: 00000 }
00120: ApplyArgToFn
00121: ApplyArgToFn
00122: LoadVar(00001)
00123: LoadFn { code: 00110, fvars: 00000 }
00124: ApplyArgToFn
00125: ApplyArgToFn
00126: ApplyArgToFn
00127:   Return
00128: PushString("")
00129:   Return
00130: LoadVar(00002)
00131: LoadVar(00000)
00132: PushString("")
00133: ApplyArgToFn
00134: ApplyArgToFn
00135: LoadVar(00006)
00136: ApplyArgToFn
00137: LoadVar(00007)
00138: ApplyArgToFn
00139: LoadVar(00003)
00140: ApplyFnToArg
00141: LoadVar(00001)
00142: ApplyFnToArg
00143:   Return
00144: LoadFn { code: 00130, fvars: 00007 }
00145:   Return
00146: LoadVar(00000)
00147:   Return
00148: LoadFn { code: 00146, fvars: 00000 }
00149:   Return
00150: LoadVar(00002)
00151: LoadVar(00001)
00152: LoadVar(00000)
00153: Unpack
00154: ApplyArgToFn
00155: ApplyArgToFn
00156:   Return
00157: LoadFn { code: 00150, fvars: 00002 }
00158:   Return
00159: LoadFn { code: 00157, fvars: 00001 }
00160:   Return
00161: LoadFn { code: 00128, fvars: 00000 }
00162: LoadFn { code: 00144, fvars: 00006 }
00163: PushString(""ys"")
00164: PushString(""y"")
00165: PushString("")
00166: ApplyArgToFn
00167: ApplyArgToFn
00168: LoadFn { code: 00148, fvars: 00000 }
00169: ApplyArgToFn
00170: ApplyArgToFn
00171: LoadVar(00002)
00172: LoadFn { code: 00159, fvars: 00000 }
00173: ApplyArgToFn
00174: ApplyArgToFn
00175: ApplyArgToFn
00176:   Return
00177: LoadFn { code: 00161, fvars: 00005 }
00178:   Return
00179: LoadVar(00000)
00180:   Return
00181: LoadFn { code: 00179, fvars: 00000 }
00182:   Return
00183: LoadVar(00002)
00184: LoadVar(00001)
00185: LoadVar(00000)
00186: Unpack
00187: ApplyArgToFn
00188: ApplyArgToFn
00189:   Return
00190: LoadFn { code: 00183, fvars: 00002 }
00191:   Return
00192: LoadFn { code: 00190, fvars: 00001 }
00193:   Return
00194: LoadFn { code: 00112, fvars: 00003 }
00195: LoadFn { code: 00177, fvars: 00004 }
00196: PushString(""xs"")
00197: PushString(""x"")
00198: PushString("")
00199: ApplyArgToFn
00200: ApplyArgToFn
00201: LoadFn { code: 00181, fvars: 00000 }
00202: ApplyArgToFn
00203: ApplyArgToFn
00204: LoadVar(00001)
00205: LoadFn { code: 00192, fvars: 00000 }
00206: ApplyArgToFn
00207: ApplyArgToFn
00208: ApplyArgToFn
00209:   Return
00210: LoadFn { code: 00194, fvars: 00003 }
00211:   Return
00212: LoadFn { code: 00210, fvars: 00002 }
00213:   Return
00214: LoadVar(00000)
00215:   Return
00216: LoadFn { code: 00214, fvars: 00000 }
00217:   Return
00218: LoadFn { code: 00212, fvars: 00001 }
00219: PushString(""acc"")
00220: PushString(""xs"")
00221: PushString(""ys"")
00222: PushString("")
00223: ApplyArgToFn
00224: ApplyArgToFn
00225: ApplyArgToFn
00226: LoadFn { code: 00216, fvars: 00000 }
00227: ApplyArgToFn
00228: ApplyArgToFn
00229:   Return
00230: LoadVar(00000)
00231: LoadFn { code: 00000, fvars: 00000 }
00232: ApplyArgToFn
00233:   Return
00234: LoadFn { code: 00230, fvars: 00000 }
00235:   Return
00236: LoadVar(00001)
00237: LoadVar(00000)
00238: ApplyArgToFn
00239:   Return
00240: LoadFn { code: 00236, fvars: 00001 }
00241:   Return
00242: LoadFn { code: 00240, fvars: 00000 }
00243:   Return
00244: LoadVar(00001)
00245: LoadVar(00002)
00246: PushString("")
00247: ApplyArgToFn
00248: ApplyArgToFn
00249:   Return
00250: LoadVar(00000)
00251: LoadVar(00003)
00252: ApplyArgToFn
00253: LoadVar(00004)
00254: ApplyArgToFn
00255: LoadVar(00001)
00256: ApplyFnToArg
00257:   Return
00258: LoadFn { code: 00250, fvars: 00004 }
00259:   Return
00260: LoadVar(00000)
00261:   Return
00262: LoadFn { code: 00260, fvars: 00000 }
00263:   Return
00264: LoadVar(00002)
00265: LoadVar(00001)
00266: LoadVar(00000)
00267: Unpack
00268: ApplyArgToFn
00269: ApplyArgToFn
00270:   Return
00271: LoadFn { code: 00264, fvars: 00002 }
00272:   Return
00273: LoadFn { code: 00271, fvars: 00001 }
00274:   Return
00275: LoadFn { code: 00244, fvars: 00002 }
00276: LoadFn { code: 00258, fvars: 00003 }
00277: PushString(""xs"")
00278: PushString(""x"")
00279: PushString("")
00280: ApplyArgToFn
00281: ApplyArgToFn
00282: LoadFn { code: 00262, fvars: 00000 }
00283: ApplyArgToFn
00284: ApplyArgToFn
00285: LoadVar(00000)
00286: LoadFn { code: 00273, fvars: 00000 }
00287: ApplyArgToFn
00288: ApplyArgToFn
00289: ApplyArgToFn
00290:   Return
00291: LoadFn { code: 00275, fvars: 00002 }
00292:   Return
00293: LoadVar(00000)
00294:   Return
00295: LoadFn { code: 00293, fvars: 00000 }
00296:   Return
00297: LoadFn { code: 00291, fvars: 00001 }
00298: PushString(""acc"")
00299: PushString(""compound"")
00300: PushString("")
00301: ApplyArgToFn
00302: ApplyArgToFn
00303: LoadFn { code: 00295, fvars: 00000 }
00304: ApplyArgToFn
00305: ApplyArgToFn
00306:   Return
00307: LoadVar(00000)
00308: LoadFn { code: 00000, fvars: 00000 }
00309: ApplyArgToFn
00310:   Return
00311: LoadFn { code: 00307, fvars: 00000 }
00312:   Return
00313: LoadVar(00001)
00314: LoadVar(00000)
00315: ApplyArgToFn
00316:   Return
00317: LoadFn { code: 00313, fvars: 00001 }
00318:   Return
00319: LoadFn { code: 00317, fvars: 00000 }
00320:   Return
00321: PushString("False")
00322:   Return
00323: PushString("True")
00324:   Return
00325: LoadVar(00003)
00326: LoadVar(00002)
00327: LoadVar(00001)
00328: LoadVar(00000)
00329: Cmp
00330: ApplyArgToFn
00331:   Return
00332: LoadFn { code: 00325, fvars: 00003 }
00333:   Return
00334: LoadFn { code: 00332, fvars: 00002 }
00335:   Return
00336: LoadFn { code: 00334, fvars: 00001 }
00337:   Return
00338: LoadFn { code: 00321, fvars: 00000 }
00339: LoadFn { code: 00323, fvars: 00000 }
00340: LoadVar(00001)
00341: LoadVar(00002)
00342: LoadFn { code: 00336, fvars: 00000 }
00343: ApplyArgToFn
00344: ApplyArgToFn
00345: ApplyArgToFn
00346: ApplyArgToFn
00347:   Return
00348: PushString("False")
00349:   Return
00350: LoadVar(00003)
00351: LoadVar(00002)
00352: LoadVar(00001)
00353: LoadVar(00000)
00354: Cmp
00355: ApplyArgToFn
00356:   Return
00357: LoadFn { code: 00350, fvars: 00003 }
00358:   Return
00359: LoadFn { code: 00357, fvars: 00002 }
00360:   Return
00361: LoadFn { code: 00359, fvars: 00001 }
00362:   Return
00363: LoadVar(00004)
00364: LoadVar(00007)
00365: ApplyArgToFn
00366: LoadVar(00002)
00367: ApplyFnToArg
00368:   Return
00369: PushString("False")
00370:   Return
00371: LoadVar(00002)
00372: LoadVar(00006)
00373: ApplyArgToFn
00374: LoadVar(00000)
00375: ApplyFnToArg
00376: LoadFn { code: 00361, fvars: 00000 }
00377: ApplyArgToFn
00378: PushString("True")
00379: ApplyFnToArg
00380: LoadFn { code: 00363, fvars: 00007 }
00381: ApplyFnToArg
00382: LoadFn { code: 00369, fvars: 00000 }
00383: ApplyFnToArg
00384:   Return
00385: LoadFn { code: 00371, fvars: 00006 }
00386:   Return
00387: LoadVar(00000)
00388:   Return
00389: LoadFn { code: 00387, fvars: 00000 }
00390:   Return
00391: LoadVar(00002)
00392: LoadVar(00001)
00393: LoadVar(00000)
00394: Unpack
00395: ApplyArgToFn
00396: ApplyArgToFn
00397:   Return
00398: LoadFn { code: 00391, fvars: 00002 }
00399:   Return
00400: LoadFn { code: 00398, fvars: 00001 }
00401:   Return
00402: LoadFn { code: 00348, fvars: 00000 }
00403: LoadFn { code: 00385, fvars: 00005 }
00404: PushString(""ys"")
00405: PushString(""y"")
00406: PushString("")
00407: ApplyArgToFn
00408: ApplyArgToFn
00409: LoadFn { code: 00389, fvars: 00000 }
00410: ApplyArgToFn
00411: ApplyArgToFn
00412: LoadVar(00002)
00413: LoadFn { code: 00400, fvars: 00000 }
00414: ApplyArgToFn
00415: ApplyArgToFn
00416: ApplyArgToFn
00417:   Return
00418: LoadFn { code: 00402, fvars: 00004 }
00419:   Return
00420: LoadVar(00000)
00421:   Return
00422: LoadFn { code: 00420, fvars: 00000 }
00423:   Return
00424: LoadVar(00002)
00425: LoadVar(00001)
00426: LoadVar(00000)
00427: Unpack
00428: ApplyArgToFn
00429: ApplyArgToFn
00430:   Return
00431: LoadFn { code: 00424, fvars: 00002 }
00432:   Return
00433: LoadFn { code: 00431, fvars: 00001 }
00434:   Return
00435: LoadFn { code: 00338, fvars: 00002 }
00436: LoadFn { code: 00418, fvars: 00003 }
00437: PushString(""xs"")
00438: PushString(""x"")
00439: PushString("")
00440: ApplyArgToFn
00441: ApplyArgToFn
00442: LoadFn { code: 00422, fvars: 00000 }
00443: ApplyArgToFn
00444: ApplyArgToFn
00445: LoadVar(00001)
00446: LoadFn { code: 00433, fvars: 00000 }
00447: ApplyArgToFn
00448: ApplyArgToFn
00449: ApplyArgToFn
00450:   Return
00451: LoadFn { code: 00435, fvars: 00002 }
00452:   Return
00453: LoadVar(00000)
00454:   Return
00455: LoadFn { code: 00453, fvars: 00000 }
00456:   Return
00457: LoadFn { code: 00451, fvars: 00001 }
00458: PushString(""a"")
00459: PushString(""b"")
00460: PushString("")
00461: ApplyArgToFn
00462: ApplyArgToFn
00463: LoadFn { code: 00455, fvars: 00000 }
00464: ApplyArgToFn
00465: ApplyArgToFn
00466:   Return
00467: LoadVar(00000)
00468: LoadFn { code: 00000, fvars: 00000 }
00469: ApplyArgToFn
00470:   Return
00471: LoadFn { code: 00467, fvars: 00000 }
00472:   Return
00473: LoadVar(00001)
00474: LoadVar(00000)
00475: ApplyArgToFn
00476:   Return
00477: LoadFn { code: 00473, fvars: 00001 }
00478:   Return
00479: LoadFn { code: 00477, fvars: 00000 }
00480:   Return
00481: LoadVar(00001)
00482: LoadVar(00000)
00483: ApplyArgToFn
00484:   Return
00485: LoadFn { code: 00481, fvars: 00001 }
00486:   Return
00487: LoadFn { code: 00485, fvars: 00000 }
00488:   Return
00489: LoadVar(00001)
00490: LoadVar(00000)
00491: ApplyArgToFn
00492:   Return
00493: LoadFn { code: 00489, fvars: 00001 }
00494:   Return
00495: LoadFn { code: 00493, fvars: 00000 }
00496:   Return
00497: LoadVar(00001)
00498: LoadVar(00000)
00499: ApplyArgToFn
00500:   Return
00501: LoadFn { code: 00497, fvars: 00001 }
00502:   Return
00503: LoadFn { code: 00501, fvars: 00000 }
00504:   Return
00505: LoadVar(00001)
00506: LoadVar(00000)
00507: ApplyArgToFn
00508:   Return
00509: LoadFn { code: 00505, fvars: 00001 }
00510:   Return
00511: LoadFn { code: 00509, fvars: 00000 }
00512:   Return
00513: PushString("")
00514:   Return
00515: LoadVar(00003)
00516: LoadVar(00002)
00517: LoadVar(00001)
00518: LoadVar(00000)
00519: Cmp
00520: ApplyArgToFn
00521:   Return
00522: LoadFn { code: 00515, fvars: 00003 }
00523:   Return
00524: LoadFn { code: 00522, fvars: 00002 }
00525:   Return
00526: LoadFn { code: 00524, fvars: 00001 }
00527:   Return
00528: LoadVar(00007)
00529: LoadVar(00006)
00530: PushString("")
00531: ApplyArgToFn
00532: ApplyArgToFn
00533: LoadVar(00003)
00534: LoadVar(00002)
00535: PushString("")
00536: ApplyArgToFn
00537: ApplyArgToFn
00538: PushString("")
00539: ApplyArgToFn
00540: ApplyArgToFn
00541: PushEffect("no-match")
00542: ApplyArgToFn
00543:   Return
00544: PushString("")
00545:   Return
00546: LoadVar(00005)
00547: LoadVar(00011)
00548: ApplyArgToFn
00549: LoadVar(00001)
00550: ApplyFnToArg
00551: LoadFn { code: 00526, fvars: 00000 }
00552: ApplyArgToFn
00553: PushString("False")
00554: ApplyFnToArg
00555: LoadFn { code: 00528, fvars: 00007 }
00556: ApplyFnToArg
00557: LoadFn { code: 00544, fvars: 00000 }
00558: ApplyFnToArg
00559:   Return
00560: LoadVar(00003)
00561: LoadVar(00002)
00562: LoadVar(00001)
00563: LoadVar(00000)
00564: Cmp
00565: ApplyArgToFn
00566:   Return
00567: LoadFn { code: 00560, fvars: 00003 }
00568:   Return
00569: LoadFn { code: 00567, fvars: 00002 }
00570:   Return
00571: LoadFn { code: 00569, fvars: 00001 }
00572:   Return
00573: LoadFn { code: 00513, fvars: 00000 }
00574: LoadFn { code: 00546, fvars: 00011 }
00575: LoadVar(00001)
00576: LoadVar(00005)
00577: LoadFn { code: 00571, fvars: 00000 }
00578: ApplyArgToFn
00579: ApplyArgToFn
00580: ApplyArgToFn
00581: ApplyArgToFn
00582:   Return
00583: LoadVar(00001)
00584: LoadVar(00007)
00585: ApplyArgToFn
00586: PushString(""yval"")
00587: LoadFn { code: 00511, fvars: 00000 }
00588: ApplyArgToFn
00589: ApplyArgToFn
00590: LoadFn { code: 00573, fvars: 00010 }
00591: ApplyFnToArg
00592:   Return
00593: LoadVar(00000)
00594: LoadVar(00007)
00595: ApplyArgToFn
00596: PushString(""yvar"")
00597: LoadFn { code: 00503, fvars: 00000 }
00598: ApplyArgToFn
00599: ApplyArgToFn
00600: LoadFn { code: 00583, fvars: 00009 }
00601: ApplyFnToArg
00602:   Return
00603: LoadFn { code: 00593, fvars: 00008 }
00604:   Return
00605: LoadVar(00000)
00606:   Return
00607: LoadFn { code: 00605, fvars: 00000 }
00608:   Return
00609: LoadVar(00003)
00610: LoadVar(00004)
00611: ApplyArgToFn
00612:   Return
00613: LoadFn { code: 00603, fvars: 00007 }
00614: PushString(""_"")
00615: PushString(""pair"")
00616: PushString("")
00617: ApplyArgToFn
00618: ApplyArgToFn
00619: LoadFn { code: 00607, fvars: 00000 }
00620: ApplyArgToFn
00621: ApplyArgToFn
00622: LoadVar(00014)
00623: ApplyArgToFn
00624: PushString("")
00625: ApplyFnToArg
00626: LoadVar(00003)
00627: ApplyFnToArg
00628: LoadFn { code: 00609, fvars: 00004 }
00629: ApplyArgToFn
00630:   Return
00631: LoadVar(00001)
00632: LoadVar(00003)
00633: ApplyArgToFn
00634: PushString(""xval"")
00635: LoadFn { code: 00495, fvars: 00000 }
00636: ApplyArgToFn
00637: ApplyArgToFn
00638: LoadFn { code: 00613, fvars: 00014 }
00639: ApplyFnToArg
00640:   Return
00641: LoadVar(00000)
00642: LoadVar(00003)
00643: ApplyArgToFn
00644: PushString(""xvar"")
00645: LoadFn { code: 00487, fvars: 00000 }
00646: ApplyArgToFn
00647: ApplyArgToFn
00648: LoadFn { code: 00631, fvars: 00013 }
00649: ApplyFnToArg
00650:   Return
00651: LoadFn { code: 00641, fvars: 00012 }
00652:   Return
00653: LoadVar(00000)
00654:   Return
00655: LoadFn { code: 00653, fvars: 00000 }
00656:   Return
00657: LoadVar(00001)
00658: LoadVar(00000)
00659: ApplyArgToFn
00660:   Return
00661: LoadFn { code: 00657, fvars: 00001 }
00662:   Return
00663: LoadFn { code: 00661, fvars: 00000 }
00664:   Return
00665: LoadVar(00002)
00666: PushEffect("invalid")
00667: ApplyArgToFn
00668:   Return
00669: LoadVar(00003)
00670: LoadVar(00002)
00671: LoadVar(00001)
00672: LoadVar(00000)
00673: Cmp
00674: ApplyArgToFn
00675:   Return
00676: LoadFn { code: 00669, fvars: 00003 }
00677:   Return
00678: LoadFn { code: 00676, fvars: 00002 }
00679:   Return
00680: LoadFn { code: 00678, fvars: 00001 }
00681:   Return
00682: PushString("")
00683:   Return
00684: LoadVar(00004)
00685: LoadVar(00006)
00686: PushString("")
00687: ApplyArgToFn
00688: ApplyArgToFn
00689: PushEffect("no-match")
00690: ApplyArgToFn
00691:   Return
00692: LoadVar(00003)
00693: LoadVar(00011)
00694: ApplyArgToFn
00695: LoadVar(00005)
00696: ApplyFnToArg
00697: LoadFn { code: 00680, fvars: 00000 }
00698: ApplyArgToFn
00699: PushString("True")
00700: ApplyFnToArg
00701: LoadFn { code: 00682, fvars: 00000 }
00702: ApplyFnToArg
00703: LoadFn { code: 00684, fvars: 00006 }
00704: ApplyFnToArg
00705:   Return
00706: LoadVar(00001)
00707: LoadVar(00002)
00708: ApplyArgToFn
00709: LoadVar(00005)
00710: ApplyFnToArg
00711: PushEffect("invalid")
00712: ApplyArgToFn
00713:   Return
00714: LoadVar(00001)
00715: LoadVar(00000)
00716: ApplyArgToFn
00717:   Return
00718: LoadFn { code: 00714, fvars: 00001 }
00719:   Return
00720: LoadFn { code: 00718, fvars: 00000 }
00721:   Return
00722: LoadVar(00001)
00723: LoadVar(00000)
00724: ApplyArgToFn
00725:   Return
00726: LoadFn { code: 00722, fvars: 00001 }
00727:   Return
00728: LoadFn { code: 00726, fvars: 00000 }
00729:   Return
00730: LoadVar(00001)
00731: LoadVar(00000)
00732: ApplyArgToFn
00733:   Return
00734: LoadFn { code: 00730, fvars: 00001 }
00735:   Return
00736: LoadFn { code: 00734, fvars: 00000 }
00737:   Return
00738: LoadVar(00001)
00739: LoadVar(00000)
00740: ApplyArgToFn
00741:   Return
00742: LoadFn { code: 00738, fvars: 00001 }
00743:   Return
00744: LoadFn { code: 00742, fvars: 00000 }
00745:   Return
00746: LoadVar(00014)
00747: LoadVar(00025)
00748: ApplyArgToFn
00749: LoadVar(00023)
00750: ApplyArgToFn
00751: LoadVar(00001)
00752: ApplyFnToArg
00753: LoadVar(00022)
00754: ApplyArgToFn
00755: LoadVar(00015)
00756: ApplyArgToFn
00757:   Return
00758: LoadVar(00006)
00759: LoadVar(00007)
00760: ApplyArgToFn
00761: LoadVar(00010)
00762: ApplyFnToArg
00763: LoadVar(00012)
00764: PushString("")
00765: ApplyArgToFn
00766: ApplyArgToFn
00767: PushEffect("no-match")
00768: ApplyArgToFn
00769:   Return
00770: LoadVar(00003)
00771: LoadVar(00002)
00772: LoadVar(00001)
00773: LoadVar(00000)
00774: Cmp
00775: ApplyArgToFn
00776:   Return
00777: LoadFn { code: 00770, fvars: 00003 }
00778:   Return
00779: LoadFn { code: 00777, fvars: 00002 }
00780:   Return
00781: LoadFn { code: 00779, fvars: 00001 }
00782:   Return
00783: LoadFn { code: 00746, fvars: 00025 }
00784: LoadFn { code: 00758, fvars: 00012 }
00785: PushString("")
00786: LoadVar(00000)
00787: LoadFn { code: 00781, fvars: 00000 }
00788: ApplyArgToFn
00789: ApplyArgToFn
00790: ApplyArgToFn
00791: ApplyArgToFn
00792:   Return
00793: LoadVar(00004)
00794: LoadVar(00008)
00795: ApplyArgToFn
00796: LoadVar(00018)
00797: ApplyArgToFn
00798: LoadVar(00001)
00799: LoadVar(00000)
00800: ApplyArgToFn
00801: ApplyFnToArg
00802: LoadVar(00022)
00803: ApplyArgToFn
00804: PushString(""zipped"")
00805: LoadFn { code: 00744, fvars: 00000 }
00806: ApplyArgToFn
00807: ApplyArgToFn
00808: LoadFn { code: 00783, fvars: 00024 }
00809: ApplyFnToArg
00810:   Return
00811: LoadVar(00001)
00812: LoadVar(00013)
00813: ApplyArgToFn
00814: PushString(""vargs"")
00815: LoadFn { code: 00736, fvars: 00000 }
00816: ApplyArgToFn
00817: ApplyArgToFn
00818: LoadFn { code: 00793, fvars: 00023 }
00819: ApplyFnToArg
00820:   Return
00821: LoadVar(00000)
00822: LoadVar(00013)
00823: ApplyArgToFn
00824: PushString(""vf"")
00825: LoadFn { code: 00728, fvars: 00000 }
00826: ApplyArgToFn
00827: ApplyArgToFn
00828: LoadFn { code: 00811, fvars: 00022 }
00829: ApplyFnToArg
00830:   Return
00831: LoadVar(00007)
00832: LoadVar(00014)
00833: ApplyArgToFn
00834: PushString(""v"")
00835: LoadFn { code: 00720, fvars: 00000 }
00836: ApplyArgToFn
00837: ApplyArgToFn
00838: LoadFn { code: 00821, fvars: 00021 }
00839: ApplyFnToArg
00840:   Return
00841: LoadVar(00003)
00842: LoadVar(00002)
00843: LoadVar(00001)
00844: LoadVar(00000)
00845: Cmp
00846: ApplyArgToFn
00847:   Return
00848: LoadFn { code: 00841, fvars: 00003 }
00849:   Return
00850: LoadFn { code: 00848, fvars: 00002 }
00851:   Return
00852: LoadFn { code: 00850, fvars: 00001 }
00853:   Return
00854: LoadFn { code: 00706, fvars: 00005 }
00855: LoadFn { code: 00831, fvars: 00020 }
00856: PushString("Compound")
00857: LoadVar(00001)
00858: LoadFn { code: 00852, fvars: 00000 }
00859: ApplyArgToFn
00860: ApplyArgToFn
00861: ApplyArgToFn
00862: ApplyArgToFn
00863:   Return
00864: LoadFn { code: 00854, fvars: 00019 }
00865:   Return
00866: LoadVar(00000)
00867:   Return
00868: LoadFn { code: 00866, fvars: 00000 }
00869:   Return
00870: LoadVar(00002)
00871: LoadVar(00001)
00872: LoadVar(00000)
00873: Unpack
00874: ApplyArgToFn
00875: ApplyArgToFn
00876:   Return
00877: LoadFn { code: 00870, fvars: 00002 }
00878:   Return
00879: LoadFn { code: 00877, fvars: 00001 }
00880:   Return
00881: LoadFn { code: 00692, fvars: 00011 }
00882: LoadFn { code: 00864, fvars: 00018 }
00883: PushString(""type"")
00884: PushString(""f"")
00885: PushString("")
00886: ApplyArgToFn
00887: ApplyArgToFn
00888: LoadFn { code: 00868, fvars: 00000 }
00889: ApplyArgToFn
00890: ApplyArgToFn
00891: LoadVar(00003)
00892: LoadFn { code: 00879, fvars: 00000 }
00893: ApplyArgToFn
00894: ApplyArgToFn
00895: ApplyArgToFn
00896:   Return
00897: LoadVar(00001)
00898: LoadVar(00000)
00899: ApplyArgToFn
00900:   Return
00901: LoadFn { code: 00897, fvars: 00001 }
00902:   Return
00903: LoadFn { code: 00901, fvars: 00000 }
00904:   Return
00905: LoadVar(00008)
00906: LoadVar(00019)
00907: ApplyArgToFn
00908: LoadVar(00017)
00909: ApplyArgToFn
00910: LoadVar(00001)
00911: ApplyFnToArg
00912: LoadVar(00016)
00913: ApplyArgToFn
00914: LoadVar(00009)
00915: ApplyArgToFn
00916:   Return
00917: LoadVar(00004)
00918: LoadVar(00005)
00919: ApplyArgToFn
00920: LoadVar(00006)
00921: PushString("")
00922: ApplyArgToFn
00923: ApplyArgToFn
00924: PushEffect("no-match")
00925: ApplyArgToFn
00926:   Return
00927: LoadVar(00003)
00928: LoadVar(00002)
00929: LoadVar(00001)
00930: LoadVar(00000)
00931: Cmp
00932: ApplyArgToFn
00933:   Return
00934: LoadFn { code: 00927, fvars: 00003 }
00935:   Return
00936: LoadFn { code: 00934, fvars: 00002 }
00937:   Return
00938: LoadFn { code: 00936, fvars: 00001 }
00939:   Return
00940: LoadFn { code: 00905, fvars: 00019 }
00941: LoadFn { code: 00917, fvars: 00006 }
00942: PushString("")
00943: LoadVar(00000)
00944: LoadFn { code: 00938, fvars: 00000 }
00945: ApplyArgToFn
00946: ApplyArgToFn
00947: ApplyArgToFn
00948: ApplyArgToFn
00949:   Return
00950: LoadVar(00002)
00951: LoadVar(00012)
00952: ApplyArgToFn
00953: LoadVar(00004)
00954: ApplyFnToArg
00955: PushString(""zipped"")
00956: LoadFn { code: 00903, fvars: 00000 }
00957: ApplyArgToFn
00958: ApplyArgToFn
00959: LoadFn { code: 00940, fvars: 00018 }
00960: ApplyFnToArg
00961:   Return
00962: LoadVar(00003)
00963: LoadVar(00002)
00964: LoadVar(00001)
00965: LoadVar(00000)
00966: Cmp
00967: ApplyArgToFn
00968:   Return
00969: LoadFn { code: 00962, fvars: 00003 }
00970:   Return
00971: LoadFn { code: 00969, fvars: 00002 }
00972:   Return
00973: LoadFn { code: 00971, fvars: 00001 }
00974:   Return
00975: LoadFn { code: 00881, fvars: 00017 }
00976: LoadFn { code: 00950, fvars: 00017 }
00977: PushString("List")
00978: LoadVar(00002)
00979: LoadFn { code: 00973, fvars: 00000 }
00980: ApplyArgToFn
00981: ApplyArgToFn
00982: ApplyArgToFn
00983: ApplyArgToFn
00984:   Return
00985: LoadVar(00001)
00986: LoadVar(00003)
00987: PushString("")
00988: ApplyArgToFn
00989: ApplyArgToFn
00990: PushString("")
00991: ApplyArgToFn
00992:   Return
00993: LoadVar(00003)
00994: LoadVar(00002)
00995: LoadVar(00001)
00996: LoadVar(00000)
00997: Cmp
00998: ApplyArgToFn
00999:   Return
01000: LoadFn { code: 00993, fvars: 00003 }
01001:   Return
01002: LoadFn { code: 01000, fvars: 00002 }
01003:   Return
01004: LoadFn { code: 01002, fvars: 00001 }
01005:   Return
01006: LoadFn { code: 00975, fvars: 00016 }
01007: LoadFn { code: 00985, fvars: 00003 }
01008: PushString("Binding")
01009: LoadVar(00001)
01010: LoadFn { code: 01004, fvars: 00000 }
01011: ApplyArgToFn
01012: ApplyArgToFn
01013: ApplyArgToFn
01014: ApplyArgToFn
01015:   Return
01016: LoadFn { code: 01006, fvars: 00015 }
01017:   Return
01018: LoadVar(00000)
01019:   Return
01020: LoadFn { code: 01018, fvars: 00000 }
01021:   Return
01022: LoadVar(00002)
01023: LoadVar(00001)
01024: LoadVar(00000)
01025: Unpack
01026: ApplyArgToFn
01027: ApplyArgToFn
01028:   Return
01029: LoadFn { code: 01022, fvars: 00002 }
01030:   Return
01031: LoadFn { code: 01029, fvars: 00001 }
01032:   Return
01033: LoadFn { code: 00665, fvars: 00002 }
01034: LoadFn { code: 01016, fvars: 00014 }
01035: PushString(""type"")
01036: PushString(""pattern"")
01037: PushString("")
01038: ApplyArgToFn
01039: ApplyArgToFn
01040: LoadFn { code: 01020, fvars: 00000 }
01041: ApplyArgToFn
01042: ApplyArgToFn
01043: LoadVar(00001)
01044: LoadFn { code: 01031, fvars: 00000 }
01045: ApplyArgToFn
01046: ApplyArgToFn
01047: ApplyArgToFn
01048:   Return
01049: LoadFn { code: 01033, fvars: 00013 }
01050:   Return
01051: LoadVar(00000)
01052:   Return
01053: LoadFn { code: 01051, fvars: 00000 }
01054:   Return
01055: LoadFn { code: 01049, fvars: 00012 }
01056: PushString(""pattern"")
01057: PushString(""value"")
01058: PushString("")
01059: ApplyArgToFn
01060: ApplyArgToFn
01061: LoadFn { code: 01053, fvars: 00000 }
01062: ApplyArgToFn
01063: ApplyArgToFn
01064:   Return
01065: LoadVar(00000)
01066: LoadFn { code: 00000, fvars: 00000 }
01067: ApplyArgToFn
01068:   Return
01069: LoadFn { code: 01065, fvars: 00000 }
01070:   Return
01071: LoadVar(00001)
01072: LoadVar(00000)
01073: ApplyArgToFn
01074:   Return
01075: LoadFn { code: 01071, fvars: 00001 }
01076:   Return
01077: LoadFn { code: 01075, fvars: 00000 }
01078:   Return
01079: LoadVar(00000)
01080: PushString("NoMatch")
01081: ApplyArgToFn
01082:   Return
01083: LoadFn { code: 01079, fvars: 00000 }
01084:   Return
01085: LoadVar(00000)
01086:   Return
01087: LoadFn { code: 01085, fvars: 00000 }
01088:   Return
01089: LoadVar(00000)
01090:   Return
01091: LoadFn { code: 01089, fvars: 00000 }
01092:   Return
01093: PushString("SecondIsFoo")
01094:   Return
01095: LoadVar(00000)
01096: LoadVar(00000)
01097: PushString("Twice")
01098: ApplyArgToFn
01099: ApplyArgToFn
01100:   Return
01101: LoadFn { code: 01095, fvars: 00000 }
01102:   Return
01103: PushString("Foo")
01104: LoadVar(00001)
01105: ApplyArgToFn
01106: PushString(""x"")
01107: PushString("Binding")
01108: ApplyArgToFn
01109: PushString(""y"")
01110: PushString("Binding")
01111: ApplyArgToFn
01112: PushString("")
01113: ApplyArgToFn
01114: ApplyArgToFn
01115: PushString("Pair")
01116: PushString("Value")
01117: ApplyArgToFn
01118: PushString("Compound")
01119: ApplyArgToFn
01120: ApplyArgToFn
01121: LoadVar(00002)
01122: ApplyArgToFn
01123: LoadFn { code: 01091, fvars: 00000 }
01124: ApplyFnToArg
01125: PushString("")
01126: ApplyArgToFn
01127: PushString(""x"")
01128: PushString("Binding")
01129: ApplyArgToFn
01130: PushString("Foo")
01131: PushString("Value")
01132: ApplyArgToFn
01133: PushString("")
01134: ApplyArgToFn
01135: ApplyArgToFn
01136: PushString("Pair")
01137: PushString("Value")
01138: ApplyArgToFn
01139: PushString("Compound")
01140: ApplyArgToFn
01141: ApplyArgToFn
01142: LoadVar(00002)
01143: ApplyArgToFn
01144: LoadFn { code: 01093, fvars: 00000 }
01145: ApplyFnToArg
01146: ApplyFnToArg
01147: PushString(""x"")
01148: PushString("Binding")
01149: ApplyArgToFn
01150: PushString(""x"")
01151: PushString("Binding")
01152: ApplyArgToFn
01153: PushString("")
01154: ApplyArgToFn
01155: ApplyArgToFn
01156: PushString("Pair")
01157: PushString("Value")
01158: ApplyArgToFn
01159: PushString("Compound")
01160: ApplyArgToFn
01161: ApplyArgToFn
01162: LoadVar(00002)
01163: ApplyArgToFn
01164: LoadFn { code: 01101, fvars: 00000 }
01165: ApplyFnToArg
01166: ApplyFnToArg
01167: ApplyFnToArg
01168:   Return
01169: LoadVar(00002)
01170: LoadVar(00001)
01171: LoadVar(00000)
01172: Try
01173: ApplyArgToFn
01174: Unwind
01175: ApplyArgToFn
01176: ApplyArgToFn
01177:   Return
01178: LoadFn { code: 01169, fvars: 00002 }
01179:   Return
01180: LoadFn { code: 01178, fvars: 00001 }
01181:   Return
01182: PushString("InvalidPair")
01183: PushEffect("throw")
01184: ApplyArgToFn
01185:   Return
01186: LoadVar(00000)
01187:   Return
01188: LoadFn { code: 01186, fvars: 00000 }
01189:   Return
01190: PushString("SecondIsFoo")
01191:   Return
01192: LoadVar(00000)
01193: LoadVar(00000)
01194: PushString("Twice")
01195: ApplyArgToFn
01196: ApplyArgToFn
01197:   Return
01198: LoadFn { code: 01192, fvars: 00000 }
01199:   Return
01200: LoadFn { code: 01083, fvars: 00000 }
01201: PushString(""_"")
01202: PushString(""arg"")
01203: PushString("")
01204: ApplyArgToFn
01205: ApplyArgToFn
01206: LoadFn { code: 01087, fvars: 00000 }
01207: ApplyArgToFn
01208: ApplyArgToFn
01209: PushEffect("no-match")
01210: LoadFn { code: 01103, fvars: 00002 }
01211: LoadFn { code: 01180, fvars: 00000 }
01212: ApplyArgToFn
01213: ApplyArgToFn
01214: ApplyArgToFn
01215: PushString("")
01216: ApplyArgToFn
01217: PushString("Bar")
01218: PushString("Foo")
01219: PushString("Pair")
01220: ApplyArgToFn
01221: ApplyArgToFn
01222: LoadVar(00000)
01223: ApplyArgToFn
01224: PushString(""_"")
01225: PushString("Binding")
01226: ApplyArgToFn
01227: LoadVar(00001)
01228: ApplyArgToFn
01229: LoadFn { code: 01182, fvars: 00000 }
01230: ApplyFnToArg
01231: PushString("")
01232: ApplyArgToFn
01233: PushString(""x"")
01234: PushString("Binding")
01235: ApplyArgToFn
01236: PushString(""y"")
01237: PushString("Binding")
01238: ApplyArgToFn
01239: PushString("")
01240: ApplyArgToFn
01241: ApplyArgToFn
01242: PushString("Pair")
01243: PushString("Value")
01244: ApplyArgToFn
01245: PushString("Compound")
01246: ApplyArgToFn
01247: ApplyArgToFn
01248: LoadVar(00001)
01249: ApplyArgToFn
01250: LoadFn { code: 01188, fvars: 00000 }
01251: ApplyFnToArg
01252: ApplyFnToArg
01253: PushString(""x"")
01254: PushString("Binding")
01255: ApplyArgToFn
01256: PushString("Foo")
01257: PushString("Value")
01258: ApplyArgToFn
01259: PushString("")
01260: ApplyArgToFn
01261: ApplyArgToFn
01262: PushString("Pair")
01263: PushString("Value")
01264: ApplyArgToFn
01265: PushString("Compound")
01266: ApplyArgToFn
01267: ApplyArgToFn
01268: LoadVar(00001)
01269: ApplyArgToFn
01270: LoadFn { code: 01190, fvars: 00000 }
01271: ApplyFnToArg
01272: ApplyFnToArg
01273: PushString(""x"")
01274: PushString("Binding")
01275: ApplyArgToFn
01276: PushString(""x"")
01277: PushString("Binding")
01278: ApplyArgToFn
01279: PushString("")
01280: ApplyArgToFn
01281: ApplyArgToFn
01282: PushString("Pair")
01283: PushString("Value")
01284: ApplyArgToFn
01285: PushString("Compound")
01286: ApplyArgToFn
01287: ApplyArgToFn
01288: LoadVar(00001)
01289: ApplyArgToFn
01290: LoadFn { code: 01198, fvars: 00000 }
01291: ApplyFnToArg
01292: ApplyFnToArg
01293: ApplyFnToArg
01294: ApplyFnToArg
01295:   Return
01296: LoadVar(00002)
01297:   Return
01298: PushString("")
01299:   Return
01300: LoadFn { code: 01298, fvars: 00000 }
01301:   Return
01302: LoadVar(00000)
01303:   Return
01304: LoadFn { code: 01302, fvars: 00000 }
01305:   Return
01306: LoadVar(00005)
01307: LoadVar(00002)
01308: ApplyArgToFn
01309: PushString("Match")
01310: ApplyArgToFn
01311:   Return
01312: LoadVar(00002)
01313: LoadVar(00001)
01314: LoadVar(00000)
01315: Try
01316: ApplyArgToFn
01317: Unwind
01318: ApplyArgToFn
01319: ApplyArgToFn
01320:   Return
01321: LoadFn { code: 01312, fvars: 00002 }
01322:   Return
01323: LoadFn { code: 01321, fvars: 00001 }
01324:   Return
01325: LoadFn { code: 01300, fvars: 00000 }
01326: PushString(""r"")
01327: PushString(""arg"")
01328: PushString("")
01329: ApplyArgToFn
01330: ApplyArgToFn
01331: LoadFn { code: 01304, fvars: 00000 }
01332: ApplyArgToFn
01333: ApplyArgToFn
01334: PushEffect("no-match")
01335: LoadFn { code: 01306, fvars: 00005 }
01336: LoadFn { code: 01323, fvars: 00000 }
01337: ApplyArgToFn
01338: ApplyArgToFn
01339: ApplyArgToFn
01340:   Return
01341: LoadVar(00003)
01342: LoadVar(00002)
01343: LoadVar(00001)
01344: LoadVar(00000)
01345: Cmp
01346: ApplyArgToFn
01347:   Return
01348: LoadFn { code: 01341, fvars: 00003 }
01349:   Return
01350: LoadFn { code: 01348, fvars: 00002 }
01351:   Return
01352: LoadFn { code: 01350, fvars: 00001 }
01353:   Return
01354: LoadFn { code: 01296, fvars: 00002 }
01355: LoadFn { code: 01325, fvars: 00004 }
01356: PushString("")
01357: LoadVar(00001)
01358: LoadFn { code: 01352, fvars: 00000 }
01359: ApplyArgToFn
01360: ApplyArgToFn
01361: ApplyArgToFn
01362: ApplyArgToFn
01363:   Return
01364: LoadFn { code: 01354, fvars: 00003 }
01365:   Return
01366: LoadVar(00000)
01367:   Return
01368: LoadFn { code: 01366, fvars: 00000 }
01369:   Return
01370: LoadVar(00001)
01371: LoadVar(00000)
01372: ApplyArgToFn
01373:   Return
01374: LoadFn { code: 01370, fvars: 00001 }
01375:   Return
01376: LoadFn { code: 01374, fvars: 00000 }
01377:   Return
01378: LoadVar(00003)
01379: PushEffect("no-match")
01380: ApplyArgToFn
01381:   Return
01382: LoadVar(00000)
01383:   Return
01384: LoadFn { code: 01382, fvars: 00000 }
01385:   Return
01386: LoadVar(00000)
01387:   Return
01388: LoadFn { code: 01386, fvars: 00000 }
01389:   Return
01390: LoadVar(00002)
01391: LoadVar(00001)
01392: LoadVar(00000)
01393: Unpack
01394: ApplyArgToFn
01395: ApplyArgToFn
01396:   Return
01397: LoadFn { code: 01390, fvars: 00002 }
01398:   Return
01399: LoadFn { code: 01397, fvars: 00001 }
01400:   Return
01401: LoadFn { code: 01378, fvars: 00003 }
01402: LoadFn { code: 01384, fvars: 00000 }
01403: PushString(""_"")
01404: PushString(""result"")
01405: PushString("")
01406: ApplyArgToFn
01407: ApplyArgToFn
01408: LoadFn { code: 01388, fvars: 00000 }
01409: ApplyArgToFn
01410: ApplyArgToFn
01411: LoadVar(00000)
01412: LoadFn { code: 01399, fvars: 00000 }
01413: ApplyArgToFn
01414: ApplyArgToFn
01415: ApplyArgToFn
01416:   Return
01417: LoadFn { code: 01364, fvars: 00002 }
01418: PushString(""result"")
01419: PushString(""clause"")
01420: PushString("")
01421: ApplyArgToFn
01422: ApplyArgToFn
01423: LoadFn { code: 01368, fvars: 00000 }
01424: ApplyArgToFn
01425: ApplyArgToFn
01426: LoadVar(00015)
01427: ApplyArgToFn
01428: PushString("")
01429: ApplyFnToArg
01430: LoadVar(00000)
01431: ApplyFnToArg
01432: PushString(""result"")
01433: LoadFn { code: 01376, fvars: 00000 }
01434: ApplyArgToFn
01435: ApplyArgToFn
01436: LoadFn { code: 01401, fvars: 00002 }
01437: ApplyFnToArg
01438:   Return
01439: LoadFn { code: 01417, fvars: 00015 }
01440:   Return
01441: LoadVar(00000)
01442:   Return
01443: LoadFn { code: 01441, fvars: 00000 }
01444:   Return
01445: LoadVar(00001)
01446: LoadVar(00000)
01447: ApplyArgToFn
01448:   Return
01449: LoadFn { code: 01445, fvars: 00001 }
01450:   Return
01451: LoadFn { code: 01449, fvars: 00000 }
01452:   Return
01453: LoadFn { code: 01200, fvars: 00001 }
01454: LoadFn { code: 01439, fvars: 00014 }
01455: PushString(""value"")
01456: PushString(""clauses"")
01457: PushString("")
01458: ApplyArgToFn
01459: ApplyArgToFn
01460: LoadFn { code: 01443, fvars: 00000 }
01461: ApplyArgToFn
01462: ApplyArgToFn
01463: PushString(""match"")
01464: LoadFn { code: 01451, fvars: 00000 }
01465: ApplyArgToFn
01466: ApplyArgToFn
01467: ApplyArgToFn
01468:   Return
01469: LoadVar(00000)
01470: PushEffect("no-match")
01471: ApplyArgToFn
01472:   Return
01473: LoadFn { code: 01469, fvars: 00000 }
01474:   Return
01475: LoadVar(00000)
01476:   Return
01477: LoadFn { code: 01475, fvars: 00000 }
01478:   Return
01479: LoadVar(00001)
01480: LoadVar(00000)
01481: ApplyArgToFn
01482:   Return
01483: LoadFn { code: 01479, fvars: 00001 }
01484:   Return
01485: LoadFn { code: 01483, fvars: 00000 }
01486:   Return
01487: LoadVar(00004)
01488: LoadVar(00017)
01489: ApplyArgToFn
01490: LoadVar(00001)
01491: ApplyFnToArg
01492:   Return
01493: PushString("")
01494: LoadVar(00004)
01495: ApplyArgToFn
01496:   Return
01497: LoadVar(00003)
01498: LoadVar(00002)
01499: LoadVar(00001)
01500: LoadVar(00000)
01501: Cmp
01502: ApplyArgToFn
01503:   Return
01504: LoadFn { code: 01497, fvars: 00003 }
01505:   Return
01506: LoadFn { code: 01504, fvars: 00002 }
01507:   Return
01508: LoadFn { code: 01506, fvars: 00001 }
01509:   Return
01510: LoadFn { code: 01487, fvars: 00017 }
01511: LoadFn { code: 01493, fvars: 00004 }
01512: PushString("")
01513: LoadVar(00000)
01514: LoadFn { code: 01508, fvars: 00000 }
01515: ApplyArgToFn
01516: ApplyArgToFn
01517: ApplyArgToFn
01518: ApplyArgToFn
01519:   Return
01520: LoadVar(00006)
01521: LoadVar(00013)
01522: ApplyArgToFn
01523: LoadVar(00003)
01524: LoadVar(00004)
01525: ApplyArgToFn
01526: LoadVar(00001)
01527: ApplyFnToArg
01528: ApplyFnToArg
01529: PushString(""args"")
01530: LoadFn { code: 01485, fvars: 00000 }
01531: ApplyArgToFn
01532: ApplyArgToFn
01533: LoadFn { code: 01510, fvars: 00016 }
01534: ApplyFnToArg
01535:   Return
01536: LoadVar(00002)
01537: LoadVar(00001)
01538: LoadVar(00000)
01539: Try
01540: ApplyArgToFn
01541: Unwind
01542: ApplyArgToFn
01543: ApplyArgToFn
01544:   Return
01545: LoadFn { code: 01536, fvars: 00002 }
01546:   Return
01547: LoadFn { code: 01545, fvars: 00001 }
01548:   Return
01549: LoadFn { code: 01473, fvars: 00000 }
01550: PushString(""_"")
01551: PushString(""arg"")
01552: PushString("")
01553: ApplyArgToFn
01554: ApplyArgToFn
01555: LoadFn { code: 01477, fvars: 00000 }
01556: ApplyArgToFn
01557: ApplyArgToFn
01558: PushEffect("no-match")
01559: LoadFn { code: 01520, fvars: 00015 }
01560: LoadFn { code: 01547, fvars: 00000 }
01561: ApplyArgToFn
01562: ApplyArgToFn
01563: ApplyArgToFn
01564:   Return
01565: LoadFn { code: 01549, fvars: 00014 }
01566:   Return
01567: LoadFn { code: 01565, fvars: 00013 }
01568:   Return
01569: LoadVar(00000)
01570:   Return
01571: LoadFn { code: 01569, fvars: 00000 }
01572:   Return
01573: LoadVar(00001)
01574: LoadVar(00000)
01575: ApplyArgToFn
01576:   Return
01577: LoadFn { code: 01573, fvars: 00001 }
01578:   Return
01579: LoadFn { code: 01577, fvars: 00000 }
01580:   Return
01581: LoadFn { code: 01453, fvars: 00013 }
01582: LoadFn { code: 01567, fvars: 00012 }
01583: PushString(""pattern"")
01584: PushString(""body"")
01585: PushString(""value"")
01586: PushString("")
01587: ApplyArgToFn
01588: ApplyArgToFn
01589: ApplyArgToFn
01590: LoadFn { code: 01571, fvars: 00000 }
01591: ApplyArgToFn
01592: ApplyArgToFn
01593: PushString(""->"")
01594: LoadFn { code: 01579, fvars: 00000 }
01595: ApplyArgToFn
01596: ApplyArgToFn
01597: ApplyArgToFn
01598:   Return
01599: LoadFn { code: 01055, fvars: 00011 }
01600: PushString(""unify"")
01601: LoadFn { code: 01069, fvars: 00000 }
01602: ApplyArgToFn
01603: ApplyArgToFn
01604: PushString(""unify"")
01605: LoadFn { code: 01077, fvars: 00000 }
01606: ApplyArgToFn
01607: ApplyArgToFn
01608: LoadFn { code: 01581, fvars: 00012 }
01609: ApplyFnToArg
01610:   Return
01611: LoadFn { code: 00651, fvars: 00011 }
01612: PushString(""acc"")
01613: PushString(""pair"")
01614: PushString("")
01615: ApplyArgToFn
01616: ApplyArgToFn
01617: LoadFn { code: 00655, fvars: 00000 }
01618: ApplyArgToFn
01619: ApplyArgToFn
01620: LoadVar(00010)
01621: ApplyArgToFn
01622: PushString("")
01623: ApplyFnToArg
01624: PushString(""join"")
01625: LoadFn { code: 00663, fvars: 00000 }
01626: ApplyArgToFn
01627: ApplyArgToFn
01628: LoadFn { code: 01599, fvars: 00011 }
01629: ApplyFnToArg
01630:   Return
01631: LoadVar(00001)
01632:   Return
01633: LoadVar(00001)
01634: LoadVar(00003)
01635: ApplyArgToFn
01636:   Return
01637: LoadFn { code: 01633, fvars: 00003 }
01638:   Return
01639: LoadVar(00000)
01640:   Return
01641: LoadFn { code: 01639, fvars: 00000 }
01642:   Return
01643: LoadVar(00002)
01644: LoadVar(00001)
01645: LoadVar(00000)
01646: Unpack
01647: ApplyArgToFn
01648: ApplyArgToFn
01649:   Return
01650: LoadFn { code: 01643, fvars: 00002 }
01651:   Return
01652: LoadFn { code: 01650, fvars: 00001 }
01653:   Return
01654: LoadFn { code: 01631, fvars: 00001 }
01655: LoadFn { code: 01637, fvars: 00002 }
01656: PushString(""xs"")
01657: PushString(""_"")
01658: PushString("")
01659: ApplyArgToFn
01660: ApplyArgToFn
01661: LoadFn { code: 01641, fvars: 00000 }
01662: ApplyArgToFn
01663: ApplyArgToFn
01664: LoadVar(00000)
01665: LoadFn { code: 01652, fvars: 00000 }
01666: ApplyArgToFn
01667: ApplyArgToFn
01668: ApplyArgToFn
01669:   Return
01670: LoadVar(00000)
01671:   Return
01672: LoadFn { code: 01670, fvars: 00000 }
01673:   Return
01674: LoadVar(00001)
01675: LoadVar(00000)
01676: ApplyArgToFn
01677:   Return
01678: LoadFn { code: 01674, fvars: 00001 }
01679:   Return
01680: LoadFn { code: 01678, fvars: 00000 }
01681:   Return
01682: LoadFn { code: 01611, fvars: 00010 }
01683: LoadFn { code: 01654, fvars: 00001 }
01684: PushString(""xs"")
01685: LoadFn { code: 01672, fvars: 00000 }
01686: ApplyArgToFn
01687: ApplyArgToFn
01688: PushString(""second"")
01689: LoadFn { code: 01680, fvars: 00000 }
01690: ApplyArgToFn
01691: ApplyArgToFn
01692: ApplyArgToFn
01693:   Return
01694: LoadVar(00001)
01695:   Return
01696: LoadVar(00000)
01697:   Return
01698: LoadFn { code: 01696, fvars: 00000 }
01699:   Return
01700: LoadVar(00000)
01701:   Return
01702: LoadFn { code: 01700, fvars: 00000 }
01703:   Return
01704: LoadVar(00002)
01705: LoadVar(00001)
01706: LoadVar(00000)
01707: Unpack
01708: ApplyArgToFn
01709: ApplyArgToFn
01710:   Return
01711: LoadFn { code: 01704, fvars: 00002 }
01712:   Return
01713: LoadFn { code: 01711, fvars: 00001 }
01714:   Return
01715: LoadFn { code: 01694, fvars: 00001 }
01716: LoadFn { code: 01698, fvars: 00000 }
01717: PushString(""_"")
01718: PushString(""x"")
01719: PushString("")
01720: ApplyArgToFn
01721: ApplyArgToFn
01722: LoadFn { code: 01702, fvars: 00000 }
01723: ApplyArgToFn
01724: ApplyArgToFn
01725: LoadVar(00000)
01726: LoadFn { code: 01713, fvars: 00000 }
01727: ApplyArgToFn
01728: ApplyArgToFn
01729: ApplyArgToFn
01730:   Return
01731: LoadVar(00000)
01732:   Return
01733: LoadFn { code: 01731, fvars: 00000 }
01734:   Return
01735: LoadVar(00001)
01736: LoadVar(00000)
01737: ApplyArgToFn
01738:   Return
01739: LoadFn { code: 01735, fvars: 00001 }
01740:   Return
01741: LoadFn { code: 01739, fvars: 00000 }
01742:   Return
01743: LoadFn { code: 01682, fvars: 00009 }
01744: LoadFn { code: 01715, fvars: 00000 }
01745: PushString(""xs"")
01746: LoadFn { code: 01733, fvars: 00000 }
01747: ApplyArgToFn
01748: ApplyArgToFn
01749: PushString(""first"")
01750: LoadFn { code: 01741, fvars: 00000 }
01751: ApplyArgToFn
01752: ApplyArgToFn
01753: ApplyArgToFn
01754:   Return
01755: LoadFn { code: 00457, fvars: 00000 }
01756: PushString(""=="")
01757: LoadFn { code: 00471, fvars: 00000 }
01758: ApplyArgToFn
01759: ApplyArgToFn
01760: PushString(""=="")
01761: LoadFn { code: 00479, fvars: 00000 }
01762: ApplyArgToFn
01763: ApplyArgToFn
01764: LoadFn { code: 01743, fvars: 00008 }
01765: ApplyFnToArg
01766:   Return
01767: LoadFn { code: 00297, fvars: 00000 }
01768: PushString(""destructure"")
01769: LoadFn { code: 00311, fvars: 00000 }
01770: ApplyArgToFn
01771: ApplyArgToFn
01772: PushString("")
01773: ApplyFnToArg
01774: PushString(""destructure"")
01775: LoadFn { code: 00319, fvars: 00000 }
01776: ApplyArgToFn
01777: ApplyArgToFn
01778: LoadFn { code: 01755, fvars: 00007 }
01779: ApplyFnToArg
01780:   Return
01781: PushString("")
01782: LoadVar(00002)
01783: ApplyArgToFn
01784: LoadVar(00001)
01785: ApplyFnToArg
01786: LoadVar(00000)
01787: ApplyFnToArg
01788: LoadVar(00005)
01789: ApplyArgToFn
01790:   Return
01791: LoadFn { code: 01781, fvars: 00005 }
01792:   Return
01793: LoadVar(00000)
01794:   Return
01795: LoadFn { code: 01793, fvars: 00000 }
01796:   Return
01797: LoadVar(00001)
01798: LoadVar(00000)
01799: ApplyArgToFn
01800:   Return
01801: LoadFn { code: 01797, fvars: 00001 }
01802:   Return
01803: LoadFn { code: 01801, fvars: 00000 }
01804:   Return
01805: LoadFn { code: 01767, fvars: 00006 }
01806: LoadFn { code: 01791, fvars: 00004 }
01807: PushString(""xs"")
01808: PushString(""ys"")
01809: PushString("")
01810: ApplyArgToFn
01811: ApplyArgToFn
01812: LoadFn { code: 01795, fvars: 00000 }
01813: ApplyArgToFn
01814: ApplyArgToFn
01815: PushString(""zip"")
01816: LoadFn { code: 01803, fvars: 00000 }
01817: ApplyArgToFn
01818: ApplyArgToFn
01819: ApplyArgToFn
01820:   Return
01821: LoadFn { code: 00218, fvars: 00000 }
01822: PushString(""zip"")
01823: LoadFn { code: 00234, fvars: 00000 }
01824: ApplyArgToFn
01825: ApplyArgToFn
01826: PushString(""zip"")
01827: LoadFn { code: 00242, fvars: 00000 }
01828: ApplyArgToFn
01829: ApplyArgToFn
01830: LoadFn { code: 01805, fvars: 00005 }
01831: ApplyFnToArg
01832:   Return
01833: LoadVar(00000)
01834: LoadVar(00001)
01835: ApplyArgToFn
01836:   Return
01837: LoadFn { code: 01833, fvars: 00001 }
01838:   Return
01839: LoadVar(00000)
01840:   Return
01841: LoadFn { code: 01839, fvars: 00000 }
01842:   Return
01843: LoadFn { code: 01837, fvars: 00000 }
01844: PushString(""acc"")
01845: PushString(""x"")
01846: PushString("")
01847: ApplyArgToFn
01848: ApplyArgToFn
01849: LoadFn { code: 01841, fvars: 00000 }
01850: ApplyArgToFn
01851: ApplyArgToFn
01852: LoadVar(00006)
01853: ApplyArgToFn
01854: LoadVar(00001)
01855: ApplyFnToArg
01856: LoadVar(00000)
01857: ApplyFnToArg
01858:   Return
01859: LoadFn { code: 01843, fvars: 00006 }
01860:   Return
01861: LoadVar(00000)
01862:   Return
01863: LoadFn { code: 01861, fvars: 00000 }
01864:   Return
01865: LoadFn { code: 01859, fvars: 00005 }
01866: PushString(""acc"")
01867: PushString(""x"")
01868: PushString("")
01869: ApplyArgToFn
01870: ApplyArgToFn
01871: LoadFn { code: 01863, fvars: 00000 }
01872: ApplyArgToFn
01873: ApplyArgToFn
01874: LoadVar(00004)
01875: ApplyArgToFn
01876: PushString("")
01877: ApplyFnToArg
01878: LoadVar(00000)
01879: ApplyFnToArg
01880: LoadVar(00002)
01881: ApplyArgToFn
01882:   Return
01883: LoadVar(00000)
01884:   Return
01885: LoadFn { code: 01883, fvars: 00000 }
01886:   Return
01887: LoadVar(00001)
01888: LoadVar(00000)
01889: ApplyArgToFn
01890:   Return
01891: LoadFn { code: 01887, fvars: 00001 }
01892:   Return
01893: LoadFn { code: 01891, fvars: 00000 }
01894:   Return
01895: LoadFn { code: 01821, fvars: 00004 }
01896: LoadFn { code: 01865, fvars: 00004 }
01897: PushString(""xs"")
01898: LoadFn { code: 01885, fvars: 00000 }
01899: ApplyArgToFn
01900: ApplyArgToFn
01901: PushString(""flatten"")
01902: LoadFn { code: 01893, fvars: 00000 }
01903: ApplyArgToFn
01904: ApplyArgToFn
01905: ApplyArgToFn
01906:   Return
01907: LoadVar(00000)
01908: LoadVar(00003)
01909: ApplyArgToFn
01910: LoadVar(00001)
01911: ApplyArgToFn
01912:   Return
01913: LoadFn { code: 01907, fvars: 00003 }
01914:   Return
01915: LoadVar(00000)
01916:   Return
01917: LoadFn { code: 01915, fvars: 00000 }
01918:   Return
01919: LoadFn { code: 01913, fvars: 00002 }
01920: PushString(""xs"")
01921: PushString(""x"")
01922: PushString("")
01923: ApplyArgToFn
01924: ApplyArgToFn
01925: LoadFn { code: 01917, fvars: 00000 }
01926: ApplyArgToFn
01927: ApplyArgToFn
01928: LoadVar(00004)
01929: ApplyArgToFn
01930: PushString("")
01931: ApplyFnToArg
01932: LoadVar(00000)
01933: LoadVar(00002)
01934: ApplyArgToFn
01935: ApplyFnToArg
01936:   Return
01937: LoadFn { code: 01919, fvars: 00004 }
01938:   Return
01939: LoadVar(00000)
01940:   Return
01941: LoadFn { code: 01939, fvars: 00000 }
01942:   Return
01943: LoadVar(00001)
01944: LoadVar(00000)
01945: ApplyArgToFn
01946:   Return
01947: LoadFn { code: 01943, fvars: 00001 }
01948:   Return
01949: LoadFn { code: 01947, fvars: 00000 }
01950:   Return
01951: LoadFn { code: 01895, fvars: 00003 }
01952: LoadFn { code: 01937, fvars: 00003 }
01953: PushString(""f"")
01954: PushString(""xs"")
01955: PushString("")
01956: ApplyArgToFn
01957: ApplyArgToFn
01958: LoadFn { code: 01941, fvars: 00000 }
01959: ApplyArgToFn
01960: ApplyArgToFn
01961: PushString(""map"")
01962: LoadFn { code: 01949, fvars: 00000 }
01963: ApplyArgToFn
01964: ApplyArgToFn
01965: ApplyArgToFn
01966:   Return
01967: LoadVar(00000)
01968: LoadVar(00001)
01969: ApplyArgToFn
01970:   Return
01971: LoadFn { code: 01967, fvars: 00001 }
01972:   Return
01973: LoadVar(00000)
01974:   Return
01975: LoadFn { code: 01973, fvars: 00000 }
01976:   Return
01977: LoadFn { code: 01971, fvars: 00000 }
01978: PushString(""xs"")
01979: PushString(""x"")
01980: PushString("")
01981: ApplyArgToFn
01982: ApplyArgToFn
01983: LoadFn { code: 01975, fvars: 00000 }
01984: ApplyArgToFn
01985: ApplyArgToFn
01986: LoadVar(00002)
01987: ApplyArgToFn
01988: PushString("")
01989: ApplyFnToArg
01990: LoadVar(00000)
01991: ApplyFnToArg
01992:   Return
01993: LoadVar(00000)
01994:   Return
01995: LoadFn { code: 01993, fvars: 00000 }
01996:   Return
01997: LoadVar(00001)
01998: LoadVar(00000)
01999: ApplyArgToFn
02000:   Return
02001: LoadFn { code: 01997, fvars: 00001 }
02002:   Return
02003: LoadFn { code: 02001, fvars: 00000 }
02004:   Return
02005: LoadFn { code: 01951, fvars: 00002 }
02006: LoadFn { code: 01977, fvars: 00002 }
02007: PushString(""xs"")
02008: LoadFn { code: 01995, fvars: 00000 }
02009: ApplyArgToFn
02010: ApplyArgToFn
02011: PushString(""reverse"")
02012: LoadFn { code: 02003, fvars: 00000 }
02013: ApplyArgToFn
02014: ApplyArgToFn
02015: ApplyArgToFn
02016:   Return
02017: LoadVar(00000)
02018: LoadVar(00001)
02019: ApplyArgToFn
02020:   Return
02021: LoadFn { code: 02017, fvars: 00001 }
02022:   Return
02023: LoadVar(00000)
02024:   Return
02025: LoadFn { code: 02023, fvars: 00000 }
02026:   Return
02027: LoadFn { code: 02021, fvars: 00000 }
02028: PushString(""f"")
02029: PushString(""x"")
02030: PushString("")
02031: ApplyArgToFn
02032: ApplyArgToFn
02033: LoadFn { code: 02025, fvars: 00000 }
02034: ApplyArgToFn
02035: ApplyArgToFn
02036: LoadVar(00002)
02037: ApplyArgToFn
02038: LoadVar(00001)
02039: ApplyFnToArg
02040: LoadVar(00000)
02041: ApplyFnToArg
02042:   Return
02043: LoadFn { code: 02027, fvars: 00002 }
02044:   Return
02045: LoadVar(00000)
02046:   Return
02047: LoadFn { code: 02045, fvars: 00000 }
02048:   Return
02049: LoadVar(00001)
02050: LoadVar(00000)
02051: ApplyArgToFn
02052:   Return
02053: LoadFn { code: 02049, fvars: 00001 }
02054:   Return
02055: LoadFn { code: 02053, fvars: 00000 }
02056:   Return
02057: LoadFn { code: 02005, fvars: 00001 }
02058: LoadFn { code: 02043, fvars: 00001 }
02059: PushString(""f"")
02060: PushString(""xs"")
02061: PushString("")
02062: ApplyArgToFn
02063: ApplyArgToFn
02064: LoadFn { code: 02047, fvars: 00000 }
02065: ApplyArgToFn
02066: ApplyArgToFn
02067: PushString(""apply"")
02068: LoadFn { code: 02055, fvars: 00000 }
02069: ApplyArgToFn
02070: ApplyArgToFn
02071: ApplyArgToFn
02072:   Return
02073: LoadFn { code: 00065, fvars: 00000 }
02074: PushString(""fold"")
02075: LoadFn { code: 00081, fvars: 00000 }
02076: ApplyArgToFn
02077: ApplyArgToFn
02078: PushString(""fold"")
02079: LoadFn { code: 00089, fvars: 00000 }
02080: ApplyArgToFn
02081: ApplyArgToFn
02082: LoadFn { code: 02057, fvars: 00000 }
02083: ApplyFnToArg
02084:   Return

[Bar, NoMatch(Foo)]