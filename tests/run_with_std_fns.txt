'map = ('map ~> { ('f, 'xs) => {
    pop(xs, ('xs, 'x) => {
        map(f, xs)(f(x))
    }, {
        xs
    })
}})
map('x => { Foo(x) }, List(A, B, C))

(=
  'map
  (~>
    'map
    { (=>
        (
          'f
          'xs)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { ((map
                  f
                  xs)
                  (f
                    x)) })
            { xs }) }) }))
(map
  (=>
    'x
    { (Foo
        x) })
  (List
    A
    B
    C))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "map" )
    ( ( =>
          =>
            ~>
              0
        "map" )
      =>
        ( ( =>
              =>
                0
            ( ( ()
                "f" )
              "xs" ) )
          =>
            =>
              ( ( ( =>
                      =>
                        =>
                          ( pop
                            2
                            1
                            0 )
                    0 )
                  ( ( =>
                        =>
                          0
                      ( ( ()
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( ( ( 4
                              3 )
                            1 )
                          ( 3
                            0 ) ) ) )
                =>
                  1 ) ) ) )
  =>
    ( ( 0
        ( ( =>
              =>
                0
            "x" )
          =>
            ( Foo
              0 ) ) )
      ( ( ( List
            A )
          B )
        C ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00004)
00035: PushVar(00003)
00036: Swap(00002)
00037: Apply
00038: PushVar(00001)
00039: Swap(00002)
00040: Apply
00041: PushVar(00003)
00042: PushVar(00000)
00043: Swap(00002)
00044: Apply
00045: Swap(00002)
00046: Apply
00047:   Return
00048: PushFn(00034, 00004)
00049:   Return
00050: PushVar(00001)
00051:   Return
00052: PushFn(00028, 00000)
00053: PushVar(00000)
00054: Swap(00002)
00055: Apply
00056: PushFn(00032, 00000)
00057: PushString("")
00058: PushString(""xs"")
00059: Swap(00002)
00060: Apply
00061: PushString(""x"")
00062: Swap(00002)
00063: Apply
00064: Swap(00002)
00065: Apply
00066: PushFn(00048, 00003)
00067: Swap(00002)
00068: Apply
00069: Swap(00002)
00070: Apply
00071: PushFn(00050, 00001)
00072: Swap(00002)
00073: Apply
00074:   Return
00075: PushFn(00052, 00002)
00076:   Return
00077: PushFn(00016, 00000)
00078: PushString("")
00079: PushString(""f"")
00080: Swap(00002)
00081: Apply
00082: PushString(""xs"")
00083: Swap(00002)
00084: Apply
00085: Swap(00002)
00086: Apply
00087: PushFn(00075, 00001)
00088: Swap(00002)
00089: Apply
00090:   Return
00091: PushVar(00000)
00092:   Return
00093: PushFn(00091, 00000)
00094:   Return
00095: PushString("Foo")
00096: PushVar(00000)
00097: Swap(00002)
00098: Apply
00099:   Return
00100: PushVar(00000)
00101: PushFn(00093, 00000)
00102: PushString(""x"")
00103: Swap(00002)
00104: Apply
00105: PushFn(00095, 00000)
00106: Swap(00002)
00107: Apply
00108: Swap(00002)
00109: Apply
00110: PushString("List")
00111: PushString("A")
00112: Swap(00002)
00113: Apply
00114: PushString("B")
00115: Swap(00002)
00116: Apply
00117: PushString("C")
00118: Swap(00002)
00119: Apply
00120: Swap(00002)
00121: Apply
00122:   Return
00123: PushFn(00007, 00000)
00124: PushString(""map"")
00125: Swap(00002)
00126: Apply
00127: PushFn(00012, 00000)
00128: PushString(""map"")
00129: Swap(00002)
00130: Apply
00131: PushFn(00077, 00000)
00132: Swap(00002)
00133: Apply
00134: Swap(00002)
00135: Apply
00136: PushFn(00100, 00000)
00137: Swap(00002)
00138: Apply

List(Foo(A), Foo(B), Foo(C))

---

'fold = ('fold ~> { ('f, 'acc, 'xs) => {
    pop(xs, ('xs, 'x) => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
fold(('acc, 'x) => { acc(x) }, List, List(A, B, C))

(=
  'fold
  (~>
    'fold
    { (=>
        (
          'f
          'acc
          'xs)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(fold
  (=>
    (
      'acc
      'x)
    { (acc
        x) })
  List
  (List
    A
    B
    C))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( ()
                  "f" )
                "acc" )
              "xs" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( ()
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( 0
          ( ( =>
                =>
                  0
              ( ( ()
                  "acc" )
                "x" ) )
            =>
              =>
                ( 1
                  0 ) ) )
        List )
      ( ( ( List
            A )
          B )
        C ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00005)
00035: PushVar(00004)
00036: Swap(00002)
00037: Apply
00038: PushVar(00004)
00039: PushVar(00003)
00040: Swap(00002)
00041: Apply
00042: PushVar(00000)
00043: Swap(00002)
00044: Apply
00045: Swap(00002)
00046: Apply
00047: PushVar(00001)
00048: Swap(00002)
00049: Apply
00050:   Return
00051: PushFn(00034, 00005)
00052:   Return
00053: PushVar(00002)
00054:   Return
00055: PushFn(00028, 00000)
00056: PushVar(00000)
00057: Swap(00002)
00058: Apply
00059: PushFn(00032, 00000)
00060: PushString("")
00061: PushString(""xs"")
00062: Swap(00002)
00063: Apply
00064: PushString(""x"")
00065: Swap(00002)
00066: Apply
00067: Swap(00002)
00068: Apply
00069: PushFn(00051, 00004)
00070: Swap(00002)
00071: Apply
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00055, 00003)
00079:   Return
00080: PushFn(00078, 00002)
00081:   Return
00082: PushFn(00016, 00000)
00083: PushString("")
00084: PushString(""f"")
00085: Swap(00002)
00086: Apply
00087: PushString(""acc"")
00088: Swap(00002)
00089: Apply
00090: PushString(""xs"")
00091: Swap(00002)
00092: Apply
00093: Swap(00002)
00094: Apply
00095: PushFn(00080, 00001)
00096: Swap(00002)
00097: Apply
00098:   Return
00099: PushVar(00000)
00100:   Return
00101: PushFn(00099, 00000)
00102:   Return
00103: PushVar(00001)
00104: PushVar(00000)
00105: Swap(00002)
00106: Apply
00107:   Return
00108: PushFn(00103, 00001)
00109:   Return
00110: PushVar(00000)
00111: PushFn(00101, 00000)
00112: PushString("")
00113: PushString(""acc"")
00114: Swap(00002)
00115: Apply
00116: PushString(""x"")
00117: Swap(00002)
00118: Apply
00119: Swap(00002)
00120: Apply
00121: PushFn(00108, 00000)
00122: Swap(00002)
00123: Apply
00124: Swap(00002)
00125: Apply
00126: PushString("List")
00127: Swap(00002)
00128: Apply
00129: PushString("List")
00130: PushString("A")
00131: Swap(00002)
00132: Apply
00133: PushString("B")
00134: Swap(00002)
00135: Apply
00136: PushString("C")
00137: Swap(00002)
00138: Apply
00139: Swap(00002)
00140: Apply
00141:   Return
00142: PushFn(00007, 00000)
00143: PushString(""fold"")
00144: Swap(00002)
00145: Apply
00146: PushFn(00012, 00000)
00147: PushString(""fold"")
00148: Swap(00002)
00149: Apply
00150: PushFn(00082, 00000)
00151: Swap(00002)
00152: Apply
00153: Swap(00002)
00154: Apply
00155: PushFn(00110, 00000)
00156: Swap(00002)
00157: Apply

List(C, B, A)

---

'zip = ('zip ~> { ('xs, 'ys) => {
    pop(xs, ('xs, 'x) => {
        pop(ys, ('ys, 'y) => {
            'zipped = zip(xs, ys)
            if (zipped, Nil, {
                Nil
            }, {
                zipped((x, y))
            })
        }, {
            Nil
        })
    }, {
        pop(ys, ('ys, 'y) => {
            Nil
        }, {
            if(xs, ys, {
                xs
            }, {
                Nil
            })
        })
    })
}})
List(
    zip(List(X, Y, Z), List(A, B, C))
    zip(List(X, Y), List(A, B, C))
    zip(List(X, Y, Z), List(A, B))
    zip(List(X, Y, Z), Bar)
    zip(Foo, List(A, B, C))
    zip(Foo, Bar)
)

(=
  'zip
  (~>
    'zip
    { (=>
        (
          'xs
          'ys)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { (pop
                  ys
                  (=>
                    (
                      'ys
                      'y)
                    { (=
                        'zipped
                        (zip
                          xs
                          ys))
                      (if
                        zipped
                        Nil
                        { Nil }
                        { (zipped
                            (
                              x
                              y)) }) })
                  { Nil }) })
            { (pop
                ys
                (=>
                  (
                    'ys
                    'y)
                  { Nil })
                { (if
                    xs
                    ys
                    { xs }
                    { Nil }) }) }) }) }))
(List
  (zip
    (List
      X
      Y
      Z)
    (List
      A
      B
      C))
  (zip
    (List
      X
      Y)
    (List
      A
      B
      C))
  (zip
    (List
      X
      Y
      Z)
    (List
      A
      B))
  (zip
    (List
      X
      Y
      Z)
    Bar)
  (zip
    Foo
    (List
      A
      B
      C))
  (zip
    Foo
    Bar))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "zip" )
    ( ( =>
          =>
            ~>
              0
        "zip" )
      =>
        ( ( =>
              =>
                0
            ( ( ()
                "xs" )
              "ys" ) )
          =>
            =>
              ( ( ( =>
                      =>
                        =>
                          ( pop
                            2
                            1
                            0 )
                    1 )
                  ( ( =>
                        =>
                          0
                      ( ( ()
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( pop
                                      2
                                      1
                                      0 )
                              2 )
                            ( ( =>
                                  =>
                                    0
                                ( ( ()
                                    "ys" )
                                  "y" ) )
                              =>
                                =>
                                  ( ( ( =>
                                          =>
                                            =>
                                              ( 0
                                                1 )
                                        "zipped" )
                                      ( ( 6
                                          3 )
                                        1 ) )
                                    =>
                                      ( ( ( ( =>
                                                =>
                                                  =>
                                                    =>
                                                      ( if
                                                        3
                                                        2
                                                        1
                                                        0 )
                                              0 )
                                            Nil )
                                          =>
                                            Nil )
                                        =>
                                          ( 1
                                            ( ( ()
                                                4 )
                                              2 ) ) ) ) ) )
                          =>
                            Nil ) ) )
                =>
                  ( ( ( =>
                          =>
                            =>
                              ( pop
                                2
                                1
                                0 )
                        1 )
                      ( ( =>
                            =>
                              0
                          ( ( ()
                              "ys" )
                            "y" ) )
                        =>
                          =>
                            Nil ) )
                    =>
                      ( ( ( ( =>
                                =>
                                  =>
                                    =>
                                      ( if
                                        3
                                        2
                                        1
                                        0 )
                              3 )
                            2 )
                          =>
                            4 )
                        =>
                          Nil ) ) ) ) ) )
  =>
    ( ( ( ( ( ( List
                ( ( 0
                    ( ( ( List
                          X )
                        Y )
                      Z ) )
                  ( ( ( List
                        A )
                      B )
                    C ) ) )
              ( ( 0
                  ( ( List
                      X )
                    Y ) )
                ( ( ( List
                      A )
                    B )
                  C ) ) )
            ( ( 0
                ( ( ( List
                      X )
                    Y )
                  Z ) )
              ( ( List
                  A )
                B ) ) )
          ( ( 0
              ( ( ( List
                    X )
                  Y )
                Z ) )
            Bar ) )
        ( ( 0
            Foo )
          ( ( ( List
                A )
              B )
            C ) ) )
      ( ( 0
          Foo )
        Bar ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00002)
00035: PushVar(00001)
00036: PushVar(00000)
00037: Swap(00003)
00038: Pop
00039: Apply
00040: Apply
00041:   Return
00042: PushFn(00034, 00002)
00043:   Return
00044: PushFn(00042, 00001)
00045:   Return
00046: PushVar(00000)
00047:   Return
00048: PushFn(00046, 00000)
00049:   Return
00050: PushVar(00000)
00051: PushVar(00001)
00052: Swap(00002)
00053: Apply
00054:   Return
00055: PushFn(00050, 00001)
00056:   Return
00057: PushFn(00055, 00000)
00058:   Return
00059: PushVar(00003)
00060: PushVar(00002)
00061: PushVar(00001)
00062: PushVar(00000)
00063: Swap(00004)
00064: If
00065: Apply
00066:   Return
00067: PushFn(00059, 00003)
00068:   Return
00069: PushFn(00067, 00002)
00070:   Return
00071: PushFn(00069, 00001)
00072:   Return
00073: PushString("Nil")
00074:   Return
00075: PushVar(00001)
00076: PushString("")
00077: PushVar(00004)
00078: Swap(00002)
00079: Apply
00080: PushVar(00002)
00081: Swap(00002)
00082: Apply
00083: Swap(00002)
00084: Apply
00085:   Return
00086: PushFn(00071, 00000)
00087: PushVar(00000)
00088: Swap(00002)
00089: Apply
00090: PushString("Nil")
00091: Swap(00002)
00092: Apply
00093: PushFn(00073, 00000)
00094: Swap(00002)
00095: Apply
00096: PushFn(00075, 00004)
00097: Swap(00002)
00098: Apply
00099:   Return
00100: PushFn(00057, 00000)
00101: PushString(""zipped"")
00102: Swap(00002)
00103: Apply
00104: PushVar(00006)
00105: PushVar(00003)
00106: Swap(00002)
00107: Apply
00108: PushVar(00001)
00109: Swap(00002)
00110: Apply
00111: Swap(00002)
00112: Apply
00113: PushFn(00086, 00003)
00114: Swap(00002)
00115: Apply
00116:   Return
00117: PushFn(00100, 00006)
00118:   Return
00119: PushString("Nil")
00120:   Return
00121: PushFn(00044, 00000)
00122: PushVar(00002)
00123: Swap(00002)
00124: Apply
00125: PushFn(00048, 00000)
00126: PushString("")
00127: PushString(""ys"")
00128: Swap(00002)
00129: Apply
00130: PushString(""y"")
00131: Swap(00002)
00132: Apply
00133: Swap(00002)
00134: Apply
00135: PushFn(00117, 00005)
00136: Swap(00002)
00137: Apply
00138: Swap(00002)
00139: Apply
00140: PushFn(00119, 00000)
00141: Swap(00002)
00142: Apply
00143:   Return
00144: PushFn(00121, 00004)
00145:   Return
00146: PushVar(00002)
00147: PushVar(00001)
00148: PushVar(00000)
00149: Swap(00003)
00150: Pop
00151: Apply
00152: Apply
00153:   Return
00154: PushFn(00146, 00002)
00155:   Return
00156: PushFn(00154, 00001)
00157:   Return
00158: PushVar(00000)
00159:   Return
00160: PushFn(00158, 00000)
00161:   Return
00162: PushString("Nil")
00163:   Return
00164: PushFn(00162, 00000)
00165:   Return
00166: PushVar(00003)
00167: PushVar(00002)
00168: PushVar(00001)
00169: PushVar(00000)
00170: Swap(00004)
00171: If
00172: Apply
00173:   Return
00174: PushFn(00166, 00003)
00175:   Return
00176: PushFn(00174, 00002)
00177:   Return
00178: PushFn(00176, 00001)
00179:   Return
00180: PushVar(00004)
00181:   Return
00182: PushString("Nil")
00183:   Return
00184: PushFn(00178, 00000)
00185: PushVar(00003)
00186: Swap(00002)
00187: Apply
00188: PushVar(00002)
00189: Swap(00002)
00190: Apply
00191: PushFn(00180, 00004)
00192: Swap(00002)
00193: Apply
00194: PushFn(00182, 00000)
00195: Swap(00002)
00196: Apply
00197:   Return
00198: PushFn(00156, 00000)
00199: PushVar(00001)
00200: Swap(00002)
00201: Apply
00202: PushFn(00160, 00000)
00203: PushString("")
00204: PushString(""ys"")
00205: Swap(00002)
00206: Apply
00207: PushString(""y"")
00208: Swap(00002)
00209: Apply
00210: Swap(00002)
00211: Apply
00212: PushFn(00164, 00000)
00213: Swap(00002)
00214: Apply
00215: Swap(00002)
00216: Apply
00217: PushFn(00184, 00003)
00218: Swap(00002)
00219: Apply
00220:   Return
00221: PushFn(00028, 00000)
00222: PushVar(00001)
00223: Swap(00002)
00224: Apply
00225: PushFn(00032, 00000)
00226: PushString("")
00227: PushString(""xs"")
00228: Swap(00002)
00229: Apply
00230: PushString(""x"")
00231: Swap(00002)
00232: Apply
00233: Swap(00002)
00234: Apply
00235: PushFn(00144, 00003)
00236: Swap(00002)
00237: Apply
00238: Swap(00002)
00239: Apply
00240: PushFn(00198, 00002)
00241: Swap(00002)
00242: Apply
00243:   Return
00244: PushFn(00221, 00002)
00245:   Return
00246: PushFn(00016, 00000)
00247: PushString("")
00248: PushString(""xs"")
00249: Swap(00002)
00250: Apply
00251: PushString(""ys"")
00252: Swap(00002)
00253: Apply
00254: Swap(00002)
00255: Apply
00256: PushFn(00244, 00001)
00257: Swap(00002)
00258: Apply
00259:   Return
00260: PushString("List")
00261: PushVar(00000)
00262: PushString("List")
00263: PushString("X")
00264: Swap(00002)
00265: Apply
00266: PushString("Y")
00267: Swap(00002)
00268: Apply
00269: PushString("Z")
00270: Swap(00002)
00271: Apply
00272: Swap(00002)
00273: Apply
00274: PushString("List")
00275: PushString("A")
00276: Swap(00002)
00277: Apply
00278: PushString("B")
00279: Swap(00002)
00280: Apply
00281: PushString("C")
00282: Swap(00002)
00283: Apply
00284: Swap(00002)
00285: Apply
00286: Swap(00002)
00287: Apply
00288: PushVar(00000)
00289: PushString("List")
00290: PushString("X")
00291: Swap(00002)
00292: Apply
00293: PushString("Y")
00294: Swap(00002)
00295: Apply
00296: Swap(00002)
00297: Apply
00298: PushString("List")
00299: PushString("A")
00300: Swap(00002)
00301: Apply
00302: PushString("B")
00303: Swap(00002)
00304: Apply
00305: PushString("C")
00306: Swap(00002)
00307: Apply
00308: Swap(00002)
00309: Apply
00310: Swap(00002)
00311: Apply
00312: PushVar(00000)
00313: PushString("List")
00314: PushString("X")
00315: Swap(00002)
00316: Apply
00317: PushString("Y")
00318: Swap(00002)
00319: Apply
00320: PushString("Z")
00321: Swap(00002)
00322: Apply
00323: Swap(00002)
00324: Apply
00325: PushString("List")
00326: PushString("A")
00327: Swap(00002)
00328: Apply
00329: PushString("B")
00330: Swap(00002)
00331: Apply
00332: Swap(00002)
00333: Apply
00334: Swap(00002)
00335: Apply
00336: PushVar(00000)
00337: PushString("List")
00338: PushString("X")
00339: Swap(00002)
00340: Apply
00341: PushString("Y")
00342: Swap(00002)
00343: Apply
00344: PushString("Z")
00345: Swap(00002)
00346: Apply
00347: Swap(00002)
00348: Apply
00349: PushString("Bar")
00350: Swap(00002)
00351: Apply
00352: Swap(00002)
00353: Apply
00354: PushVar(00000)
00355: PushString("Foo")
00356: Swap(00002)
00357: Apply
00358: PushString("List")
00359: PushString("A")
00360: Swap(00002)
00361: Apply
00362: PushString("B")
00363: Swap(00002)
00364: Apply
00365: PushString("C")
00366: Swap(00002)
00367: Apply
00368: Swap(00002)
00369: Apply
00370: Swap(00002)
00371: Apply
00372: PushVar(00000)
00373: PushString("Foo")
00374: Swap(00002)
00375: Apply
00376: PushString("Bar")
00377: Swap(00002)
00378: Apply
00379: Swap(00002)
00380: Apply
00381:   Return
00382: PushFn(00007, 00000)
00383: PushString(""zip"")
00384: Swap(00002)
00385: Apply
00386: PushFn(00012, 00000)
00387: PushString(""zip"")
00388: Swap(00002)
00389: Apply
00390: PushFn(00246, 00000)
00391: Swap(00002)
00392: Apply
00393: Swap(00002)
00394: Apply
00395: PushFn(00260, 00000)
00396: Swap(00002)
00397: Apply

List(List((X, A), (Y, B), (Z, C)), Nil, Nil, Nil, Nil, Nil)

---

'rev = ('rev ~> { ('acc, 'xs) => {
    pop(xs, ('xs, 'x) => {
        rev(acc(x), xs)
    }, {
        acc
    })
}})
'apply = (('f, 'xs) => { rev(f, rev(List, xs)) })
apply(('x, 'y, 'z) => { List(x, y, z) }, Vec(A, B, C))

(=
  'rev
  (~>
    'rev
    { (=>
        (
          'acc
          'xs)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { (rev
                  (acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'apply
  (=>
    (
      'f
      'xs)
    { (rev
        f
        (rev
          List
          xs)) }))
(apply
  (=>
    (
      'x
      'y
      'z)
    { (List
        x
        y
        z) })
  (Vec
    A
    B
    C))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "rev" )
    ( ( =>
          =>
            ~>
              0
        "rev" )
      =>
        ( ( =>
              =>
                0
            ( ( ()
                "acc" )
              "xs" ) )
          =>
            =>
              ( ( ( =>
                      =>
                        =>
                          ( pop
                            2
                            1
                            0 )
                    0 )
                  ( ( =>
                        =>
                          0
                      ( ( ()
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( ( 4
                            ( 3
                              0 ) )
                          1 ) ) )
                =>
                  2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "apply" )
        ( ( =>
              =>
                0
            ( ( ()
                "f" )
              "xs" ) )
          =>
            =>
              ( ( 2
                  1 )
                ( ( 2
                    List )
                  0 ) ) ) )
      =>
        ( ( 0
            ( ( =>
                  =>
                    0
                ( ( ( ()
                      "x" )
                    "y" )
                  "z" ) )
              =>
                =>
                  =>
                    ( ( ( List
                          2 )
                        1 )
                      0 ) ) )
          ( ( ( Vec
                A )
              B )
            C ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00004)
00035: PushVar(00003)
00036: PushVar(00000)
00037: Swap(00002)
00038: Apply
00039: Swap(00002)
00040: Apply
00041: PushVar(00001)
00042: Swap(00002)
00043: Apply
00044:   Return
00045: PushFn(00034, 00004)
00046:   Return
00047: PushVar(00002)
00048:   Return
00049: PushFn(00028, 00000)
00050: PushVar(00000)
00051: Swap(00002)
00052: Apply
00053: PushFn(00032, 00000)
00054: PushString("")
00055: PushString(""xs"")
00056: Swap(00002)
00057: Apply
00058: PushString(""x"")
00059: Swap(00002)
00060: Apply
00061: Swap(00002)
00062: Apply
00063: PushFn(00045, 00003)
00064: Swap(00002)
00065: Apply
00066: Swap(00002)
00067: Apply
00068: PushFn(00047, 00002)
00069: Swap(00002)
00070: Apply
00071:   Return
00072: PushFn(00049, 00002)
00073:   Return
00074: PushFn(00016, 00000)
00075: PushString("")
00076: PushString(""acc"")
00077: Swap(00002)
00078: Apply
00079: PushString(""xs"")
00080: Swap(00002)
00081: Apply
00082: Swap(00002)
00083: Apply
00084: PushFn(00072, 00001)
00085: Swap(00002)
00086: Apply
00087:   Return
00088: PushVar(00000)
00089: PushVar(00001)
00090: Swap(00002)
00091: Apply
00092:   Return
00093: PushFn(00088, 00001)
00094:   Return
00095: PushFn(00093, 00000)
00096:   Return
00097: PushVar(00000)
00098:   Return
00099: PushFn(00097, 00000)
00100:   Return
00101: PushVar(00002)
00102: PushVar(00001)
00103: Swap(00002)
00104: Apply
00105: PushVar(00002)
00106: PushString("List")
00107: Swap(00002)
00108: Apply
00109: PushVar(00000)
00110: Swap(00002)
00111: Apply
00112: Swap(00002)
00113: Apply
00114:   Return
00115: PushFn(00101, 00002)
00116:   Return
00117: PushVar(00000)
00118:   Return
00119: PushFn(00117, 00000)
00120:   Return
00121: PushString("List")
00122: PushVar(00002)
00123: Swap(00002)
00124: Apply
00125: PushVar(00001)
00126: Swap(00002)
00127: Apply
00128: PushVar(00000)
00129: Swap(00002)
00130: Apply
00131:   Return
00132: PushFn(00121, 00002)
00133:   Return
00134: PushFn(00132, 00001)
00135:   Return
00136: PushVar(00000)
00137: PushFn(00119, 00000)
00138: PushString("")
00139: PushString(""x"")
00140: Swap(00002)
00141: Apply
00142: PushString(""y"")
00143: Swap(00002)
00144: Apply
00145: PushString(""z"")
00146: Swap(00002)
00147: Apply
00148: Swap(00002)
00149: Apply
00150: PushFn(00134, 00000)
00151: Swap(00002)
00152: Apply
00153: Swap(00002)
00154: Apply
00155: PushString("Vec")
00156: PushString("A")
00157: Swap(00002)
00158: Apply
00159: PushString("B")
00160: Swap(00002)
00161: Apply
00162: PushString("C")
00163: Swap(00002)
00164: Apply
00165: Swap(00002)
00166: Apply
00167:   Return
00168: PushFn(00095, 00000)
00169: PushString(""apply"")
00170: Swap(00002)
00171: Apply
00172: PushFn(00099, 00000)
00173: PushString("")
00174: PushString(""f"")
00175: Swap(00002)
00176: Apply
00177: PushString(""xs"")
00178: Swap(00002)
00179: Apply
00180: Swap(00002)
00181: Apply
00182: PushFn(00115, 00001)
00183: Swap(00002)
00184: Apply
00185: Swap(00002)
00186: Apply
00187: PushFn(00136, 00000)
00188: Swap(00002)
00189: Apply
00190:   Return
00191: PushFn(00007, 00000)
00192: PushString(""rev"")
00193: Swap(00002)
00194: Apply
00195: PushFn(00012, 00000)
00196: PushString(""rev"")
00197: Swap(00002)
00198: Apply
00199: PushFn(00074, 00000)
00200: Swap(00002)
00201: Apply
00202: Swap(00002)
00203: Apply
00204: PushFn(00168, 00000)
00205: Swap(00002)
00206: Apply

List(A, B, C)

---

'last = ('xs => {
    pop(xs, ('_, 'x) => { x }, { xs })
})
'beforelast = ('xs => {
    pop(xs, ('xs, '_) => { last(xs) }, { xs })
})
List(beforelast((X, Y, Z)), last((X, Y, Z)))

(=
  'last
  (=>
    'xs
    { (pop
        xs
        (=>
          (
            '_
            'x)
          { x })
        { xs }) }))
(=
  'beforelast
  (=>
    'xs
    { (pop
        xs
        (=>
          (
            'xs
            '_)
          { (last
              xs) })
        { xs }) }))
(List
  (beforelast
    (
      X
      Y
      Z))
  (last
    (
      X
      Y
      Z)))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "last" )
    ( ( =>
          =>
            0
        "xs" )
      =>
        ( ( ( =>
                =>
                  =>
                    ( pop
                      2
                      1
                      0 )
              0 )
            ( ( =>
                  =>
                    0
                ( ( ()
                    "_" )
                  "x" ) )
              =>
                =>
                  0 ) )
          =>
            1 ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "beforelast" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( pop
                          2
                          1
                          0 )
                  0 )
                ( ( =>
                      =>
                        0
                    ( ( ()
                        "xs" )
                      "_" ) )
                  =>
                    =>
                      ( 3
                        1 ) ) )
              =>
                1 ) ) )
      =>
        ( ( List
            ( 0
              ( ( ( ()
                    X )
                  Y )
                Z ) ) )
          ( 1
            ( ( ( ()
                  X )
                Y )
              Z ) ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010:   Return
00011: PushFn(00009, 00000)
00012:   Return
00013: PushVar(00002)
00014: PushVar(00001)
00015: PushVar(00000)
00016: Swap(00003)
00017: Pop
00018: Apply
00019: Apply
00020:   Return
00021: PushFn(00013, 00002)
00022:   Return
00023: PushFn(00021, 00001)
00024:   Return
00025: PushVar(00000)
00026:   Return
00027: PushFn(00025, 00000)
00028:   Return
00029: PushVar(00000)
00030:   Return
00031: PushFn(00029, 00000)
00032:   Return
00033: PushVar(00001)
00034:   Return
00035: PushFn(00023, 00000)
00036: PushVar(00000)
00037: Swap(00002)
00038: Apply
00039: PushFn(00027, 00000)
00040: PushString("")
00041: PushString(""_"")
00042: Swap(00002)
00043: Apply
00044: PushString(""x"")
00045: Swap(00002)
00046: Apply
00047: Swap(00002)
00048: Apply
00049: PushFn(00031, 00000)
00050: Swap(00002)
00051: Apply
00052: Swap(00002)
00053: Apply
00054: PushFn(00033, 00001)
00055: Swap(00002)
00056: Apply
00057:   Return
00058: PushVar(00000)
00059: PushVar(00001)
00060: Swap(00002)
00061: Apply
00062:   Return
00063: PushFn(00058, 00001)
00064:   Return
00065: PushFn(00063, 00000)
00066:   Return
00067: PushVar(00000)
00068:   Return
00069: PushFn(00067, 00000)
00070:   Return
00071: PushVar(00002)
00072: PushVar(00001)
00073: PushVar(00000)
00074: Swap(00003)
00075: Pop
00076: Apply
00077: Apply
00078:   Return
00079: PushFn(00071, 00002)
00080:   Return
00081: PushFn(00079, 00001)
00082:   Return
00083: PushVar(00000)
00084:   Return
00085: PushFn(00083, 00000)
00086:   Return
00087: PushVar(00003)
00088: PushVar(00001)
00089: Swap(00002)
00090: Apply
00091:   Return
00092: PushFn(00087, 00003)
00093:   Return
00094: PushVar(00001)
00095:   Return
00096: PushFn(00081, 00000)
00097: PushVar(00000)
00098: Swap(00002)
00099: Apply
00100: PushFn(00085, 00000)
00101: PushString("")
00102: PushString(""xs"")
00103: Swap(00002)
00104: Apply
00105: PushString(""_"")
00106: Swap(00002)
00107: Apply
00108: Swap(00002)
00109: Apply
00110: PushFn(00092, 00002)
00111: Swap(00002)
00112: Apply
00113: Swap(00002)
00114: Apply
00115: PushFn(00094, 00001)
00116: Swap(00002)
00117: Apply
00118:   Return
00119: PushString("List")
00120: PushVar(00000)
00121: PushString("")
00122: PushString("X")
00123: Swap(00002)
00124: Apply
00125: PushString("Y")
00126: Swap(00002)
00127: Apply
00128: PushString("Z")
00129: Swap(00002)
00130: Apply
00131: Swap(00002)
00132: Apply
00133: Swap(00002)
00134: Apply
00135: PushVar(00001)
00136: PushString("")
00137: PushString("X")
00138: Swap(00002)
00139: Apply
00140: PushString("Y")
00141: Swap(00002)
00142: Apply
00143: PushString("Z")
00144: Swap(00002)
00145: Apply
00146: Swap(00002)
00147: Apply
00148: Swap(00002)
00149: Apply
00150:   Return
00151: PushFn(00065, 00000)
00152: PushString(""beforelast"")
00153: Swap(00002)
00154: Apply
00155: PushFn(00069, 00000)
00156: PushString(""xs"")
00157: Swap(00002)
00158: Apply
00159: PushFn(00096, 00001)
00160: Swap(00002)
00161: Apply
00162: Swap(00002)
00163: Apply
00164: PushFn(00119, 00001)
00165: Swap(00002)
00166: Apply
00167:   Return
00168: PushFn(00007, 00000)
00169: PushString(""last"")
00170: Swap(00002)
00171: Apply
00172: PushFn(00011, 00000)
00173: PushString(""xs"")
00174: Swap(00002)
00175: Apply
00176: PushFn(00035, 00000)
00177: Swap(00002)
00178: Apply
00179: Swap(00002)
00180: Apply
00181: PushFn(00151, 00000)
00182: Swap(00002)
00183: Apply

List(Y, Z)

---

'=> = ('binding => { 'block => {
    pop(binding, 'xs => { 'x => {
        if(xs, Binding, {
            block
        }, {
            throw!(ExpectedBindingButFound(xs(x)))
        })
    }}, {
        throw!(MustBeCalledAsMacroButFound(binding, block))
    })
}})
'f = ('x => { x })
f(Foo)

(=
  '=>
  (=>
    'binding
    { (=>
        'block
        { (pop
            binding
            (=>
              'xs
              { (=>
                  'x
                  { (if
                      xs
                      Binding
                      { block }
                      { (throw!
                          (ExpectedBindingButFound
                            (xs
                              x))) }) }) })
            { (throw!
                (MustBeCalledAsMacroButFound
                  binding
                  block)) }) }) }))
(=
  'f
  (=>
    'x
    { x }))
(f
  Foo)

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "=>" )
    ( ( =>
          =>
            0
        "binding" )
      =>
        ( ( =>
              =>
                0
            "block" )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( pop
                          2
                          1
                          0 )
                  1 )
                ( ( =>
                      =>
                        0
                    "xs" )
                  =>
                    ( ( =>
                          =>
                            0
                        "x" )
                      =>
                        ( ( ( ( =>
                                  =>
                                    =>
                                      =>
                                        ( if
                                          3
                                          2
                                          1
                                          0 )
                                1 )
                              Binding )
                            =>
                              3 )
                          =>
                            ( throw!
                              ( ExpectedBindingButFound
                                ( 2
                                  1 ) ) ) ) ) ) )
              =>
                ( throw!
                  ( ( MustBeCalledAsMacroButFound
                      2 )
                    1 ) ) ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "f" )
        ( ( 0
            ( Binding
              "x" ) )
          =>
            0 ) )
      =>
        ( 0
          Foo ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010:   Return
00011: PushFn(00009, 00000)
00012:   Return
00013: PushVar(00000)
00014:   Return
00015: PushFn(00013, 00000)
00016:   Return
00017: PushVar(00002)
00018: PushVar(00001)
00019: PushVar(00000)
00020: Swap(00003)
00021: Pop
00022: Apply
00023: Apply
00024:   Return
00025: PushFn(00017, 00002)
00026:   Return
00027: PushFn(00025, 00001)
00028:   Return
00029: PushVar(00000)
00030:   Return
00031: PushFn(00029, 00000)
00032:   Return
00033: PushVar(00000)
00034:   Return
00035: PushFn(00033, 00000)
00036:   Return
00037: PushVar(00003)
00038: PushVar(00002)
00039: PushVar(00001)
00040: PushVar(00000)
00041: Swap(00004)
00042: If
00043: Apply
00044:   Return
00045: PushFn(00037, 00003)
00046:   Return
00047: PushFn(00045, 00002)
00048:   Return
00049: PushFn(00047, 00001)
00050:   Return
00051: PushVar(00003)
00052:   Return
00053: PushEffect("throw")
00054: PushString("ExpectedBindingButFound")
00055: PushVar(00002)
00056: PushVar(00001)
00057: Swap(00002)
00058: Apply
00059: Swap(00002)
00060: Apply
00061: Swap(00002)
00062: Apply
00063:   Return
00064: PushFn(00049, 00000)
00065: PushVar(00001)
00066: Swap(00002)
00067: Apply
00068: PushString("Binding")
00069: Swap(00002)
00070: Apply
00071: PushFn(00051, 00003)
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00035, 00000)
00079: PushString(""x"")
00080: Swap(00002)
00081: Apply
00082: PushFn(00064, 00002)
00083: Swap(00002)
00084: Apply
00085:   Return
00086: PushEffect("throw")
00087: PushString("MustBeCalledAsMacroButFound")
00088: PushVar(00002)
00089: Swap(00002)
00090: Apply
00091: PushVar(00001)
00092: Swap(00002)
00093: Apply
00094: Swap(00002)
00095: Apply
00096:   Return
00097: PushFn(00027, 00000)
00098: PushVar(00001)
00099: Swap(00002)
00100: Apply
00101: PushFn(00031, 00000)
00102: PushString(""xs"")
00103: Swap(00002)
00104: Apply
00105: PushFn(00078, 00001)
00106: Swap(00002)
00107: Apply
00108: Swap(00002)
00109: Apply
00110: PushFn(00086, 00002)
00111: Swap(00002)
00112: Apply
00113:   Return
00114: PushFn(00015, 00000)
00115: PushString(""block"")
00116: Swap(00002)
00117: Apply
00118: PushFn(00097, 00001)
00119: Swap(00002)
00120: Apply
00121:   Return
00122: PushVar(00000)
00123: PushVar(00001)
00124: Swap(00002)
00125: Apply
00126:   Return
00127: PushFn(00122, 00001)
00128:   Return
00129: PushFn(00127, 00000)
00130:   Return
00131: PushVar(00000)
00132:   Return
00133: PushVar(00000)
00134: PushString("Foo")
00135: Swap(00002)
00136: Apply
00137:   Return
00138: PushFn(00129, 00000)
00139: PushString(""f"")
00140: Swap(00002)
00141: Apply
00142: PushVar(00000)
00143: PushString("Binding")
00144: PushString(""x"")
00145: Swap(00002)
00146: Apply
00147: Swap(00002)
00148: Apply
00149: PushFn(00131, 00000)
00150: Swap(00002)
00151: Apply
00152: Swap(00002)
00153: Apply
00154: PushFn(00133, 00000)
00155: Swap(00002)
00156: Apply
00157:   Return
00158: PushFn(00007, 00000)
00159: PushString(""=>"")
00160: Swap(00002)
00161: Apply
00162: PushFn(00011, 00000)
00163: PushString(""binding"")
00164: Swap(00002)
00165: Apply
00166: PushFn(00114, 00000)
00167: Swap(00002)
00168: Apply
00169: Swap(00002)
00170: Apply
00171: PushFn(00138, 00000)
00172: Swap(00002)
00173: Apply

Foo

---

'=> = ('binding => { 'block => {
    pop(binding, 'xs => { 'x => {
        if(xs, Binding, {
            block
        }, {
            throw!(ExpectedBindingButFound(xs(x)))
        })
    }}, {
        throw!(MustBeCalledAsMacroButFound(binding, block))
    })
}})
'f = ('x => { x })
'will-throw = (Foo => { f })
f(Foo)

(=
  '=>
  (=>
    'binding
    { (=>
        'block
        { (pop
            binding
            (=>
              'xs
              { (=>
                  'x
                  { (if
                      xs
                      Binding
                      { block }
                      { (throw!
                          (ExpectedBindingButFound
                            (xs
                              x))) }) }) })
            { (throw!
                (MustBeCalledAsMacroButFound
                  binding
                  block)) }) }) }))
(=
  'f
  (=>
    'x
    { x }))
(=
  'will-throw
  (=>
    Foo
    { f }))
(f
  Foo)

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "=>" )
    ( ( =>
          =>
            0
        "binding" )
      =>
        ( ( =>
              =>
                0
            "block" )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( pop
                          2
                          1
                          0 )
                  1 )
                ( ( =>
                      =>
                        0
                    "xs" )
                  =>
                    ( ( =>
                          =>
                            0
                        "x" )
                      =>
                        ( ( ( ( =>
                                  =>
                                    =>
                                      =>
                                        ( if
                                          3
                                          2
                                          1
                                          0 )
                                1 )
                              Binding )
                            =>
                              3 )
                          =>
                            ( throw!
                              ( ExpectedBindingButFound
                                ( 2
                                  1 ) ) ) ) ) ) )
              =>
                ( throw!
                  ( ( MustBeCalledAsMacroButFound
                      2 )
                    1 ) ) ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "f" )
        ( ( 0
            ( Binding
              "x" ) )
          =>
            0 ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "will-throw" )
            ( ( 1
                ( Value
                  Foo ) )
              =>
                1 ) )
          =>
            ( 1
              Foo ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010:   Return
00011: PushFn(00009, 00000)
00012:   Return
00013: PushVar(00000)
00014:   Return
00015: PushFn(00013, 00000)
00016:   Return
00017: PushVar(00002)
00018: PushVar(00001)
00019: PushVar(00000)
00020: Swap(00003)
00021: Pop
00022: Apply
00023: Apply
00024:   Return
00025: PushFn(00017, 00002)
00026:   Return
00027: PushFn(00025, 00001)
00028:   Return
00029: PushVar(00000)
00030:   Return
00031: PushFn(00029, 00000)
00032:   Return
00033: PushVar(00000)
00034:   Return
00035: PushFn(00033, 00000)
00036:   Return
00037: PushVar(00003)
00038: PushVar(00002)
00039: PushVar(00001)
00040: PushVar(00000)
00041: Swap(00004)
00042: If
00043: Apply
00044:   Return
00045: PushFn(00037, 00003)
00046:   Return
00047: PushFn(00045, 00002)
00048:   Return
00049: PushFn(00047, 00001)
00050:   Return
00051: PushVar(00003)
00052:   Return
00053: PushEffect("throw")
00054: PushString("ExpectedBindingButFound")
00055: PushVar(00002)
00056: PushVar(00001)
00057: Swap(00002)
00058: Apply
00059: Swap(00002)
00060: Apply
00061: Swap(00002)
00062: Apply
00063:   Return
00064: PushFn(00049, 00000)
00065: PushVar(00001)
00066: Swap(00002)
00067: Apply
00068: PushString("Binding")
00069: Swap(00002)
00070: Apply
00071: PushFn(00051, 00003)
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00035, 00000)
00079: PushString(""x"")
00080: Swap(00002)
00081: Apply
00082: PushFn(00064, 00002)
00083: Swap(00002)
00084: Apply
00085:   Return
00086: PushEffect("throw")
00087: PushString("MustBeCalledAsMacroButFound")
00088: PushVar(00002)
00089: Swap(00002)
00090: Apply
00091: PushVar(00001)
00092: Swap(00002)
00093: Apply
00094: Swap(00002)
00095: Apply
00096:   Return
00097: PushFn(00027, 00000)
00098: PushVar(00001)
00099: Swap(00002)
00100: Apply
00101: PushFn(00031, 00000)
00102: PushString(""xs"")
00103: Swap(00002)
00104: Apply
00105: PushFn(00078, 00001)
00106: Swap(00002)
00107: Apply
00108: Swap(00002)
00109: Apply
00110: PushFn(00086, 00002)
00111: Swap(00002)
00112: Apply
00113:   Return
00114: PushFn(00015, 00000)
00115: PushString(""block"")
00116: Swap(00002)
00117: Apply
00118: PushFn(00097, 00001)
00119: Swap(00002)
00120: Apply
00121:   Return
00122: PushVar(00000)
00123: PushVar(00001)
00124: Swap(00002)
00125: Apply
00126:   Return
00127: PushFn(00122, 00001)
00128:   Return
00129: PushFn(00127, 00000)
00130:   Return
00131: PushVar(00000)
00132:   Return
00133: PushVar(00000)
00134: PushVar(00001)
00135: Swap(00002)
00136: Apply
00137:   Return
00138: PushFn(00133, 00001)
00139:   Return
00140: PushFn(00138, 00000)
00141:   Return
00142: PushVar(00001)
00143:   Return
00144: PushVar(00001)
00145: PushString("Foo")
00146: Swap(00002)
00147: Apply
00148:   Return
00149: PushFn(00140, 00000)
00150: PushString(""will-throw"")
00151: Swap(00002)
00152: Apply
00153: PushVar(00001)
00154: PushString("Value")
00155: PushString("Foo")
00156: Swap(00002)
00157: Apply
00158: Swap(00002)
00159: Apply
00160: PushFn(00142, 00001)
00161: Swap(00002)
00162: Apply
00163: Swap(00002)
00164: Apply
00165: PushFn(00144, 00001)
00166: Swap(00002)
00167: Apply
00168:   Return
00169: PushFn(00129, 00000)
00170: PushString(""f"")
00171: Swap(00002)
00172: Apply
00173: PushVar(00000)
00174: PushString("Binding")
00175: PushString(""x"")
00176: Swap(00002)
00177: Apply
00178: Swap(00002)
00179: Apply
00180: PushFn(00131, 00000)
00181: Swap(00002)
00182: Apply
00183: Swap(00002)
00184: Apply
00185: PushFn(00149, 00001)
00186: Swap(00002)
00187: Apply
00188:   Return
00189: PushFn(00007, 00000)
00190: PushString(""=>"")
00191: Swap(00002)
00192: Apply
00193: PushFn(00011, 00000)
00194: PushString(""binding"")
00195: Swap(00002)
00196: Apply
00197: PushFn(00114, 00000)
00198: Swap(00002)
00199: Apply
00200: Swap(00002)
00201: Apply
00202: PushFn(00169, 00000)
00203: Swap(00002)
00204: Apply

throw!(ExpectedBindingButFound(Value(Foo)))

---

'== = ('== ~> { ('a, 'b) => {
    pop(a, ('xs, 'x) => {
        pop(b, ('ys, 'y) => {
            if(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        if(a, b, { True }, { False })
    })
}})
List(
    Foo == Foo
    Foo == Bar
    Foo(Bar) == Foo(Bar)
    Foo(Bar) == Foo(Baz)
    'a == 'a
    'a == 'b
    'f('a) == 'f('a)
    'f('a) == 'g('a)
)

(=
  '==
  (~>
    '==
    { (=>
        (
          'a
          'b)
        { (pop
            a
            (=>
              (
                'xs
                'x)
              { (pop
                  b
                  (=>
                    (
                      'ys
                      'y)
                    { (if
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (if
                a
                b
                { True }
                { False }) }) }) }))
(List
  (==
    Foo
    Foo)
  (==
    Foo
    Bar)
  (==
    (Foo
      Bar)
    (Foo
      Bar))
  (==
    (Foo
      Bar)
    (Foo
      Baz))
  (==
    'a
    'a)
  (==
    'a
    'b)
  (==
    ('f
      'a)
    ('f
      'a))
  (==
    ('f
      'a)
    ('g
      'a)))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "==" )
    ( ( =>
          =>
            ~>
              0
        "==" )
      =>
        ( ( =>
              =>
                0
            ( ( ()
                "a" )
              "b" ) )
          =>
            =>
              ( ( ( =>
                      =>
                        =>
                          ( pop
                            2
                            1
                            0 )
                    1 )
                  ( ( =>
                        =>
                          0
                      ( ( ()
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( pop
                                      2
                                      1
                                      0 )
                              2 )
                            ( ( =>
                                  =>
                                    0
                                ( ( ()
                                    "ys" )
                                  "y" ) )
                              =>
                                =>
                                  ( ( ( ( =>
                                            =>
                                              =>
                                                =>
                                                  ( if
                                                    3
                                                    2
                                                    1
                                                    0 )
                                          ( ( 6
                                              2 )
                                            0 ) )
                                        True )
                                      =>
                                        ( ( 7
                                            4 )
                                          2 ) )
                                    =>
                                      False ) ) )
                          =>
                            False ) ) )
                =>
                  ( ( ( ( =>
                            =>
                              =>
                                =>
                                  ( if
                                    3
                                    2
                                    1
                                    0 )
                          2 )
                        1 )
                      =>
                        True )
                    =>
                      False ) ) ) ) )
  =>
    ( ( ( ( ( ( ( ( List
                    ( ( 0
                        Foo )
                      Foo ) )
                  ( ( 0
                      Foo )
                    Bar ) )
                ( ( 0
                    ( Foo
                      Bar ) )
                  ( Foo
                    Bar ) ) )
              ( ( 0
                  ( Foo
                    Bar ) )
                ( Foo
                  Baz ) ) )
            ( ( 0
                "a" )
              "a" ) )
          ( ( 0
              "a" )
            "b" ) )
        ( ( 0
            ( "f"
              "a" ) )
          ( "f"
            "a" ) ) )
      ( ( 0
          ( "f"
            "a" ) )
        ( "g"
          "a" ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00002)
00035: PushVar(00001)
00036: PushVar(00000)
00037: Swap(00003)
00038: Pop
00039: Apply
00040: Apply
00041:   Return
00042: PushFn(00034, 00002)
00043:   Return
00044: PushFn(00042, 00001)
00045:   Return
00046: PushVar(00000)
00047:   Return
00048: PushFn(00046, 00000)
00049:   Return
00050: PushVar(00003)
00051: PushVar(00002)
00052: PushVar(00001)
00053: PushVar(00000)
00054: Swap(00004)
00055: If
00056: Apply
00057:   Return
00058: PushFn(00050, 00003)
00059:   Return
00060: PushFn(00058, 00002)
00061:   Return
00062: PushFn(00060, 00001)
00063:   Return
00064: PushVar(00007)
00065: PushVar(00004)
00066: Swap(00002)
00067: Apply
00068: PushVar(00002)
00069: Swap(00002)
00070: Apply
00071:   Return
00072: PushString("False")
00073:   Return
00074: PushFn(00062, 00000)
00075: PushVar(00006)
00076: PushVar(00002)
00077: Swap(00002)
00078: Apply
00079: PushVar(00000)
00080: Swap(00002)
00081: Apply
00082: Swap(00002)
00083: Apply
00084: PushString("True")
00085: Swap(00002)
00086: Apply
00087: PushFn(00064, 00007)
00088: Swap(00002)
00089: Apply
00090: PushFn(00072, 00000)
00091: Swap(00002)
00092: Apply
00093:   Return
00094: PushFn(00074, 00006)
00095:   Return
00096: PushString("False")
00097:   Return
00098: PushFn(00044, 00000)
00099: PushVar(00002)
00100: Swap(00002)
00101: Apply
00102: PushFn(00048, 00000)
00103: PushString("")
00104: PushString(""ys"")
00105: Swap(00002)
00106: Apply
00107: PushString(""y"")
00108: Swap(00002)
00109: Apply
00110: Swap(00002)
00111: Apply
00112: PushFn(00094, 00005)
00113: Swap(00002)
00114: Apply
00115: Swap(00002)
00116: Apply
00117: PushFn(00096, 00000)
00118: Swap(00002)
00119: Apply
00120:   Return
00121: PushFn(00098, 00004)
00122:   Return
00123: PushVar(00003)
00124: PushVar(00002)
00125: PushVar(00001)
00126: PushVar(00000)
00127: Swap(00004)
00128: If
00129: Apply
00130:   Return
00131: PushFn(00123, 00003)
00132:   Return
00133: PushFn(00131, 00002)
00134:   Return
00135: PushFn(00133, 00001)
00136:   Return
00137: PushString("True")
00138:   Return
00139: PushString("False")
00140:   Return
00141: PushFn(00135, 00000)
00142: PushVar(00002)
00143: Swap(00002)
00144: Apply
00145: PushVar(00001)
00146: Swap(00002)
00147: Apply
00148: PushFn(00137, 00000)
00149: Swap(00002)
00150: Apply
00151: PushFn(00139, 00000)
00152: Swap(00002)
00153: Apply
00154:   Return
00155: PushFn(00028, 00000)
00156: PushVar(00001)
00157: Swap(00002)
00158: Apply
00159: PushFn(00032, 00000)
00160: PushString("")
00161: PushString(""xs"")
00162: Swap(00002)
00163: Apply
00164: PushString(""x"")
00165: Swap(00002)
00166: Apply
00167: Swap(00002)
00168: Apply
00169: PushFn(00121, 00003)
00170: Swap(00002)
00171: Apply
00172: Swap(00002)
00173: Apply
00174: PushFn(00141, 00002)
00175: Swap(00002)
00176: Apply
00177:   Return
00178: PushFn(00155, 00002)
00179:   Return
00180: PushFn(00016, 00000)
00181: PushString("")
00182: PushString(""a"")
00183: Swap(00002)
00184: Apply
00185: PushString(""b"")
00186: Swap(00002)
00187: Apply
00188: Swap(00002)
00189: Apply
00190: PushFn(00178, 00001)
00191: Swap(00002)
00192: Apply
00193:   Return
00194: PushString("List")
00195: PushVar(00000)
00196: PushString("Foo")
00197: Swap(00002)
00198: Apply
00199: PushString("Foo")
00200: Swap(00002)
00201: Apply
00202: Swap(00002)
00203: Apply
00204: PushVar(00000)
00205: PushString("Foo")
00206: Swap(00002)
00207: Apply
00208: PushString("Bar")
00209: Swap(00002)
00210: Apply
00211: Swap(00002)
00212: Apply
00213: PushVar(00000)
00214: PushString("Foo")
00215: PushString("Bar")
00216: Swap(00002)
00217: Apply
00218: Swap(00002)
00219: Apply
00220: PushString("Foo")
00221: PushString("Bar")
00222: Swap(00002)
00223: Apply
00224: Swap(00002)
00225: Apply
00226: Swap(00002)
00227: Apply
00228: PushVar(00000)
00229: PushString("Foo")
00230: PushString("Bar")
00231: Swap(00002)
00232: Apply
00233: Swap(00002)
00234: Apply
00235: PushString("Foo")
00236: PushString("Baz")
00237: Swap(00002)
00238: Apply
00239: Swap(00002)
00240: Apply
00241: Swap(00002)
00242: Apply
00243: PushVar(00000)
00244: PushString(""a"")
00245: Swap(00002)
00246: Apply
00247: PushString(""a"")
00248: Swap(00002)
00249: Apply
00250: Swap(00002)
00251: Apply
00252: PushVar(00000)
00253: PushString(""a"")
00254: Swap(00002)
00255: Apply
00256: PushString(""b"")
00257: Swap(00002)
00258: Apply
00259: Swap(00002)
00260: Apply
00261: PushVar(00000)
00262: PushString(""f"")
00263: PushString(""a"")
00264: Swap(00002)
00265: Apply
00266: Swap(00002)
00267: Apply
00268: PushString(""f"")
00269: PushString(""a"")
00270: Swap(00002)
00271: Apply
00272: Swap(00002)
00273: Apply
00274: Swap(00002)
00275: Apply
00276: PushVar(00000)
00277: PushString(""f"")
00278: PushString(""a"")
00279: Swap(00002)
00280: Apply
00281: Swap(00002)
00282: Apply
00283: PushString(""g"")
00284: PushString(""a"")
00285: Swap(00002)
00286: Apply
00287: Swap(00002)
00288: Apply
00289: Swap(00002)
00290: Apply
00291:   Return
00292: PushFn(00007, 00000)
00293: PushString(""=="")
00294: Swap(00002)
00295: Apply
00296: PushFn(00012, 00000)
00297: PushString(""=="")
00298: Swap(00002)
00299: Apply
00300: PushFn(00180, 00000)
00301: Swap(00002)
00302: Apply
00303: Swap(00002)
00304: Apply
00305: PushFn(00194, 00000)
00306: Swap(00002)
00307: Apply

List(True, False, True, False, True, False, True, False)

---

'fold = ('fold ~> { ('f, 'acc, 'xs) => {
    pop(xs, ('xs, 'x) => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
'flatten = fold(('acc, 'x) => {
    pop(x, ('xs, 'x) => { acc(x) }, { acc })
})
'rev = ('rev ~> { ('acc, 'xs) => {
    pop(xs, ('xs, 'x) => {
        rev(acc(x), xs)
    }, {
        acc
    })
}})
'apply = (('f, 'xs) => {
    rev(f, rev(List, xs))
})
'map = ('map ~> { ('f, 'xs) => {
    pop(xs, ('xs, 'x) => {
        map(f, xs)(f(x))
    }, {
        xs
    })
}})
'zip = ('zip ~> { ('xs, 'ys) => {
    pop(xs, ('xs, 'x) => {
        pop(ys, ('ys, 'y) => {
            'zipped = zip(xs, ys)
            if (zipped, Nil, {
                Nil
            }, {
                zipped((x, y))
            })
        }, {
            Nil
        })
    }, {
        pop(ys, ('ys, 'y) => {
            Nil
        }, {
            if(xs, ys, {
                xs
            }, {
                Nil
            })
        })
    })
}})
'== = ('== ~> { ('a, 'b) => {
    pop(a, ('xs, 'x) => {
        pop(b, ('ys, 'y) => {
            if(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        if(a, b, { True }, { False })
    })
}})
'unify = ('unify ~> { ('pattern, 'value) => {
    pop(pattern, ('type, 'pattern) => {
        if(type, Binding, {
            List(value)
        }, {
            if(type, Compound, {
                'unified = map(apply(unify), zip(pattern, value))
                rev(List, flatten(List, unified))
            }, {
                if(pattern == value, True, {
                    Nil
                }, {
                    no-match!((pattern, value))
                })
            })
        })
    }, {
        invalid!(pattern)
    })
}})
'-> = (('pattern, 'body, 'value) => {
    try( {
        'unified = unify(pattern, value)
        if(unified, Nil, {
            body()
        }, {
            apply(body, unified)
        })
    }, no-match!, ('_, 'arg) => {
        no-match!(arg)
    })
})
try({
    List(
        (Foo -> { Success })(Foo)
        (Foo -> { Success })(Bar)
        ('x -> { x })(Foo)
        ('x -> { Bar })(Foo)
        (Pair(Foo, Bar) -> { Success })(Pair(Foo, Bar))
        (Pair('x, 'y) -> { x })(Pair(Foo, Bar))
        (Pair(Foo, 'y) -> { y })(Pair(Foo, Bar))
    )
}, no-match!, ('r, 'arg) => {
    r(NoMatch(arg))
})

(=
  'fold
  (~>
    'fold
    { (=>
        (
          'f
          'acc
          'xs)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'flatten
  (fold
    (=>
      (
        'acc
        'x)
      { (pop
          x
          (=>
            (
              'xs
              'x)
            { (acc
                x) })
          { acc }) })))
(=
  'rev
  (~>
    'rev
    { (=>
        (
          'acc
          'xs)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { (rev
                  (acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'apply
  (=>
    (
      'f
      'xs)
    { (rev
        f
        (rev
          List
          xs)) }))
(=
  'map
  (~>
    'map
    { (=>
        (
          'f
          'xs)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { ((map
                  f
                  xs)
                  (f
                    x)) })
            { xs }) }) }))
(=
  'zip
  (~>
    'zip
    { (=>
        (
          'xs
          'ys)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { (pop
                  ys
                  (=>
                    (
                      'ys
                      'y)
                    { (=
                        'zipped
                        (zip
                          xs
                          ys))
                      (if
                        zipped
                        Nil
                        { Nil }
                        { (zipped
                            (
                              x
                              y)) }) })
                  { Nil }) })
            { (pop
                ys
                (=>
                  (
                    'ys
                    'y)
                  { Nil })
                { (if
                    xs
                    ys
                    { xs }
                    { Nil }) }) }) }) }))
(=
  '==
  (~>
    '==
    { (=>
        (
          'a
          'b)
        { (pop
            a
            (=>
              (
                'xs
                'x)
              { (pop
                  b
                  (=>
                    (
                      'ys
                      'y)
                    { (if
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (if
                a
                b
                { True }
                { False }) }) }) }))
(=
  'unify
  (~>
    'unify
    { (=>
        (
          'pattern
          'value)
        { (pop
            pattern
            (=>
              (
                'type
                'pattern)
              { (if
                  type
                  Binding
                  { (List
                      value) }
                  { (if
                      type
                      Compound
                      { (=
                          'unified
                          (map
                            (apply
                              unify)
                            (zip
                              pattern
                              value)))
                        (rev
                          List
                          (flatten
                            List
                            unified)) }
                      { (if
                          (==
                            pattern
                            value)
                          True
                          { Nil }
                          { (no-match!
                              (
                                pattern
                                value)) }) }) }) })
            { (invalid!
                pattern) }) }) }))
(=
  '->
  (=>
    (
      'pattern
      'body
      'value)
    { (try
        { (=
            'unified
            (unify
              pattern
              value))
          (if
            unified
            Nil
            { (body) }
            { (apply
                body
                unified) }) }
        no-match!
        (=>
          (
            '_
            'arg)
          { (no-match!
              arg) })) }))
(try
  { (List
      ((->
        Foo
        { Success })
        Foo)
      ((->
        Foo
        { Success })
        Bar)
      ((->
        'x
        { x })
        Foo)
      ((->
        'x
        { Bar })
        Foo)
      ((->
        (Pair
          Foo
          Bar)
        { Success })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          'x
          'y)
        { x })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          Foo
          'y)
        { y })
        (Pair
          Foo
          Bar))) }
  no-match!
  (=>
    (
      'r
      'arg)
    { (r
        (NoMatch
          arg)) }))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( ()
                  "f" )
                "acc" )
              "xs" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( ()
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "flatten" )
        ( 0
          ( ( =>
                =>
                  0
              ( ( ()
                  "acc" )
                "x" ) )
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( ()
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( 3
                            0 ) ) )
                  =>
                    2 ) ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "rev" )
            ( ( =>
                  =>
                    ~>
                      0
                "rev" )
              =>
                ( ( =>
                      =>
                        0
                    ( ( ()
                        "acc" )
                      "xs" ) )
                  =>
                    =>
                      ( ( ( =>
                              =>
                                =>
                                  ( pop
                                    2
                                    1
                                    0 )
                            0 )
                          ( ( =>
                                =>
                                  0
                              ( ( ()
                                  "xs" )
                                "x" ) )
                            =>
                              =>
                                ( ( 4
                                    ( 3
                                      0 ) )
                                  1 ) ) )
                        =>
                          2 ) ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "apply" )
                ( ( =>
                      =>
                        0
                    ( ( ()
                        "f" )
                      "xs" ) )
                  =>
                    =>
                      ( ( 2
                          1 )
                        ( ( 2
                            List )
                          0 ) ) ) )
              =>
                ( ( ( =>
                        =>
                          =>
                            ( 0
                              1 )
                      "map" )
                    ( ( =>
                          =>
                            ~>
                              0
                        "map" )
                      =>
                        ( ( =>
                              =>
                                0
                            ( ( ()
                                "f" )
                              "xs" ) )
                          =>
                            =>
                              ( ( ( =>
                                      =>
                                        =>
                                          ( pop
                                            2
                                            1
                                            0 )
                                    0 )
                                  ( ( =>
                                        =>
                                          0
                                      ( ( ()
                                          "xs" )
                                        "x" ) )
                                    =>
                                      =>
                                        ( ( ( 4
                                              3 )
                                            1 )
                                          ( 3
                                            0 ) ) ) )
                                =>
                                  1 ) ) ) )
                  =>
                    ( ( ( =>
                            =>
                              =>
                                ( 0
                                  1 )
                          "zip" )
                        ( ( =>
                              =>
                                ~>
                                  0
                            "zip" )
                          =>
                            ( ( =>
                                  =>
                                    0
                                ( ( ()
                                    "xs" )
                                  "ys" ) )
                              =>
                                =>
                                  ( ( ( =>
                                          =>
                                            =>
                                              ( pop
                                                2
                                                1
                                                0 )
                                        1 )
                                      ( ( =>
                                            =>
                                              0
                                          ( ( ()
                                              "xs" )
                                            "x" ) )
                                        =>
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  2 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( ()
                                                        "ys" )
                                                      "y" ) )
                                                  =>
                                                    =>
                                                      ( ( ( =>
                                                              =>
                                                                =>
                                                                  ( 0
                                                                    1 )
                                                            "zipped" )
                                                          ( ( 6
                                                              3 )
                                                            1 ) )
                                                        =>
                                                          ( ( ( ( =>
                                                                    =>
                                                                      =>
                                                                        =>
                                                                          ( if
                                                                            3
                                                                            2
                                                                            1
                                                                            0 )
                                                                  0 )
                                                                Nil )
                                                              =>
                                                                Nil )
                                                            =>
                                                              ( 1
                                                                ( ( ()
                                                                    4 )
                                                                  2 ) ) ) ) ) )
                                              =>
                                                Nil ) ) )
                                    =>
                                      ( ( ( =>
                                              =>
                                                =>
                                                  ( pop
                                                    2
                                                    1
                                                    0 )
                                            1 )
                                          ( ( =>
                                                =>
                                                  0
                                              ( ( ()
                                                  "ys" )
                                                "y" ) )
                                            =>
                                              =>
                                                Nil ) )
                                        =>
                                          ( ( ( ( =>
                                                    =>
                                                      =>
                                                        =>
                                                          ( if
                                                            3
                                                            2
                                                            1
                                                            0 )
                                                  3 )
                                                2 )
                                              =>
                                                4 )
                                            =>
                                              Nil ) ) ) ) ) )
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( 0
                                      1 )
                              "==" )
                            ( ( =>
                                  =>
                                    ~>
                                      0
                                "==" )
                              =>
                                ( ( =>
                                      =>
                                        0
                                    ( ( ()
                                        "a" )
                                      "b" ) )
                                  =>
                                    =>
                                      ( ( ( =>
                                              =>
                                                =>
                                                  ( pop
                                                    2
                                                    1
                                                    0 )
                                            1 )
                                          ( ( =>
                                                =>
                                                  0
                                              ( ( ()
                                                  "xs" )
                                                "x" ) )
                                            =>
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( pop
                                                              2
                                                              1
                                                              0 )
                                                      2 )
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( ()
                                                            "ys" )
                                                          "y" ) )
                                                      =>
                                                        =>
                                                          ( ( ( ( =>
                                                                    =>
                                                                      =>
                                                                        =>
                                                                          ( if
                                                                            3
                                                                            2
                                                                            1
                                                                            0 )
                                                                  ( ( 6
                                                                      2 )
                                                                    0 ) )
                                                                True )
                                                              =>
                                                                ( ( 7
                                                                    4 )
                                                                  2 ) )
                                                            =>
                                                              False ) ) )
                                                  =>
                                                    False ) ) )
                                        =>
                                          ( ( ( ( =>
                                                    =>
                                                      =>
                                                        =>
                                                          ( if
                                                            3
                                                            2
                                                            1
                                                            0 )
                                                  2 )
                                                1 )
                                              =>
                                                True )
                                            =>
                                              False ) ) ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( 0
                                          1 )
                                  "unify" )
                                ( ( =>
                                      =>
                                        ~>
                                          0
                                    "unify" )
                                  =>
                                    ( ( =>
                                          =>
                                            0
                                        ( ( ()
                                            "pattern" )
                                          "value" ) )
                                      =>
                                        =>
                                          ( ( ( =>
                                                  =>
                                                    =>
                                                      ( pop
                                                        2
                                                        1
                                                        0 )
                                                1 )
                                              ( ( =>
                                                    =>
                                                      0
                                                  ( ( ()
                                                      "type" )
                                                    "pattern" ) )
                                                =>
                                                  =>
                                                    ( ( ( ( =>
                                                              =>
                                                                =>
                                                                  =>
                                                                    ( if
                                                                      3
                                                                      2
                                                                      1
                                                                      0 )
                                                            1 )
                                                          Binding )
                                                        =>
                                                          ( List
                                                            3 ) )
                                                      =>
                                                        ( ( ( ( =>
                                                                  =>
                                                                    =>
                                                                      =>
                                                                        ( if
                                                                          3
                                                                          2
                                                                          1
                                                                          0 )
                                                                2 )
                                                              Compound )
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( 0
                                                                            1 )
                                                                    "unified" )
                                                                  ( ( 9
                                                                      ( 10
                                                                        6 ) )
                                                                    ( ( 8
                                                                        2 )
                                                                      4 ) ) )
                                                                =>
                                                                  ( ( 12
                                                                      List )
                                                                    ( ( 13
                                                                        List )
                                                                      0 ) ) ) )
                                                          =>
                                                            ( ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          =>
                                                                            ( if
                                                                              3
                                                                              2
                                                                              1
                                                                              0 )
                                                                    ( ( 7
                                                                        2 )
                                                                      4 ) )
                                                                  True )
                                                                =>
                                                                  Nil )
                                                              =>
                                                                ( no-match!
                                                                  ( ( ()
                                                                      3 )
                                                                    5 ) ) ) ) ) ) )
                                            =>
                                              ( invalid!
                                                2 ) ) ) ) )
                              =>
                                ( ( ( =>
                                        =>
                                          =>
                                            ( 0
                                              1 )
                                      "->" )
                                    ( ( =>
                                          =>
                                            0
                                        ( ( ( ()
                                              "pattern" )
                                            "body" )
                                          "value" ) )
                                      =>
                                        =>
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( try
                                                          2
                                                          1
                                                          0 )
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( 0
                                                                  1 )
                                                          "unified" )
                                                        ( ( 4
                                                            3 )
                                                          1 ) )
                                                      =>
                                                        ( ( ( ( =>
                                                                  =>
                                                                    =>
                                                                      =>
                                                                        ( if
                                                                          3
                                                                          2
                                                                          1
                                                                          0 )
                                                                0 )
                                                              Nil )
                                                            =>
                                                              ( 4
                                                                () ) )
                                                          =>
                                                            ( ( 10
                                                                4 )
                                                              1 ) ) ) )
                                                no-match! )
                                              ( ( =>
                                                    =>
                                                      0
                                                  ( ( ()
                                                      "_" )
                                                    "arg" ) )
                                                =>
                                                  =>
                                                    ( no-match!
                                                      0 ) ) ) ) )
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( try
                                                  2
                                                  1
                                                  0 )
                                          =>
                                            ( ( ( ( ( ( ( List
                                                          ( ( ( 1
                                                                ( Value
                                                                  Foo ) )
                                                              =>
                                                                Success )
                                                            Foo ) )
                                                        ( ( ( 1
                                                              ( Value
                                                                Foo ) )
                                                            =>
                                                              Success )
                                                          Bar ) )
                                                      ( ( ( 1
                                                            ( Binding
                                                              "x" ) )
                                                          =>
                                                            0 )
                                                        Foo ) )
                                                    ( ( ( 1
                                                          ( Binding
                                                            "x" ) )
                                                        =>
                                                          Bar )
                                                      Foo ) )
                                                  ( ( ( 1
                                                        ( Value
                                                          ( ( Pair
                                                              Foo )
                                                            Bar ) ) )
                                                      =>
                                                        Success )
                                                    ( ( Pair
                                                        Foo )
                                                      Bar ) ) )
                                                ( ( ( 1
                                                      ( Compound
                                                        ( ( Pair
                                                            ( Binding
                                                              "x" ) )
                                                          ( Binding
                                                            "y" ) ) ) )
                                                    =>
                                                      =>
                                                        1 )
                                                  ( ( Pair
                                                      Foo )
                                                    Bar ) ) )
                                              ( ( ( 1
                                                    ( Compound
                                                      ( ( Pair
                                                          ( Value
                                                            Foo ) )
                                                        ( Binding
                                                          "y" ) ) ) )
                                                  =>
                                                    0 )
                                                ( ( Pair
                                                    Foo )
                                                  Bar ) ) ) )
                                        no-match! )
                                      ( ( =>
                                            =>
                                              0
                                          ( ( ()
                                              "r" )
                                            "arg" ) )
                                        =>
                                          =>
                                            ( 1
                                              ( NoMatch
                                                0 ) ) ) ) ) ) ) ) ) ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00005)
00035: PushVar(00004)
00036: Swap(00002)
00037: Apply
00038: PushVar(00004)
00039: PushVar(00003)
00040: Swap(00002)
00041: Apply
00042: PushVar(00000)
00043: Swap(00002)
00044: Apply
00045: Swap(00002)
00046: Apply
00047: PushVar(00001)
00048: Swap(00002)
00049: Apply
00050:   Return
00051: PushFn(00034, 00005)
00052:   Return
00053: PushVar(00002)
00054:   Return
00055: PushFn(00028, 00000)
00056: PushVar(00000)
00057: Swap(00002)
00058: Apply
00059: PushFn(00032, 00000)
00060: PushString("")
00061: PushString(""xs"")
00062: Swap(00002)
00063: Apply
00064: PushString(""x"")
00065: Swap(00002)
00066: Apply
00067: Swap(00002)
00068: Apply
00069: PushFn(00051, 00004)
00070: Swap(00002)
00071: Apply
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00055, 00003)
00079:   Return
00080: PushFn(00078, 00002)
00081:   Return
00082: PushFn(00016, 00000)
00083: PushString("")
00084: PushString(""f"")
00085: Swap(00002)
00086: Apply
00087: PushString(""acc"")
00088: Swap(00002)
00089: Apply
00090: PushString(""xs"")
00091: Swap(00002)
00092: Apply
00093: Swap(00002)
00094: Apply
00095: PushFn(00080, 00001)
00096: Swap(00002)
00097: Apply
00098:   Return
00099: PushVar(00000)
00100: PushVar(00001)
00101: Swap(00002)
00102: Apply
00103:   Return
00104: PushFn(00099, 00001)
00105:   Return
00106: PushFn(00104, 00000)
00107:   Return
00108: PushVar(00000)
00109:   Return
00110: PushFn(00108, 00000)
00111:   Return
00112: PushVar(00002)
00113: PushVar(00001)
00114: PushVar(00000)
00115: Swap(00003)
00116: Pop
00117: Apply
00118: Apply
00119:   Return
00120: PushFn(00112, 00002)
00121:   Return
00122: PushFn(00120, 00001)
00123:   Return
00124: PushVar(00000)
00125:   Return
00126: PushFn(00124, 00000)
00127:   Return
00128: PushVar(00003)
00129: PushVar(00000)
00130: Swap(00002)
00131: Apply
00132:   Return
00133: PushFn(00128, 00003)
00134:   Return
00135: PushVar(00002)
00136:   Return
00137: PushFn(00122, 00000)
00138: PushVar(00000)
00139: Swap(00002)
00140: Apply
00141: PushFn(00126, 00000)
00142: PushString("")
00143: PushString(""xs"")
00144: Swap(00002)
00145: Apply
00146: PushString(""x"")
00147: Swap(00002)
00148: Apply
00149: Swap(00002)
00150: Apply
00151: PushFn(00133, 00002)
00152: Swap(00002)
00153: Apply
00154: Swap(00002)
00155: Apply
00156: PushFn(00135, 00002)
00157: Swap(00002)
00158: Apply
00159:   Return
00160: PushFn(00137, 00001)
00161:   Return
00162: PushVar(00000)
00163: PushVar(00001)
00164: Swap(00002)
00165: Apply
00166:   Return
00167: PushFn(00162, 00001)
00168:   Return
00169: PushFn(00167, 00000)
00170:   Return
00171: PushVar(00000)
00172: Rec
00173:   Return
00174: PushFn(00171, 00000)
00175:   Return
00176: PushVar(00000)
00177:   Return
00178: PushFn(00176, 00000)
00179:   Return
00180: PushVar(00002)
00181: PushVar(00001)
00182: PushVar(00000)
00183: Swap(00003)
00184: Pop
00185: Apply
00186: Apply
00187:   Return
00188: PushFn(00180, 00002)
00189:   Return
00190: PushFn(00188, 00001)
00191:   Return
00192: PushVar(00000)
00193:   Return
00194: PushFn(00192, 00000)
00195:   Return
00196: PushVar(00004)
00197: PushVar(00003)
00198: PushVar(00000)
00199: Swap(00002)
00200: Apply
00201: Swap(00002)
00202: Apply
00203: PushVar(00001)
00204: Swap(00002)
00205: Apply
00206:   Return
00207: PushFn(00196, 00004)
00208:   Return
00209: PushVar(00002)
00210:   Return
00211: PushFn(00190, 00000)
00212: PushVar(00000)
00213: Swap(00002)
00214: Apply
00215: PushFn(00194, 00000)
00216: PushString("")
00217: PushString(""xs"")
00218: Swap(00002)
00219: Apply
00220: PushString(""x"")
00221: Swap(00002)
00222: Apply
00223: Swap(00002)
00224: Apply
00225: PushFn(00207, 00003)
00226: Swap(00002)
00227: Apply
00228: Swap(00002)
00229: Apply
00230: PushFn(00209, 00002)
00231: Swap(00002)
00232: Apply
00233:   Return
00234: PushFn(00211, 00002)
00235:   Return
00236: PushFn(00178, 00000)
00237: PushString("")
00238: PushString(""acc"")
00239: Swap(00002)
00240: Apply
00241: PushString(""xs"")
00242: Swap(00002)
00243: Apply
00244: Swap(00002)
00245: Apply
00246: PushFn(00234, 00001)
00247: Swap(00002)
00248: Apply
00249:   Return
00250: PushVar(00000)
00251: PushVar(00001)
00252: Swap(00002)
00253: Apply
00254:   Return
00255: PushFn(00250, 00001)
00256:   Return
00257: PushFn(00255, 00000)
00258:   Return
00259: PushVar(00000)
00260:   Return
00261: PushFn(00259, 00000)
00262:   Return
00263: PushVar(00002)
00264: PushVar(00001)
00265: Swap(00002)
00266: Apply
00267: PushVar(00002)
00268: PushString("List")
00269: Swap(00002)
00270: Apply
00271: PushVar(00000)
00272: Swap(00002)
00273: Apply
00274: Swap(00002)
00275: Apply
00276:   Return
00277: PushFn(00263, 00002)
00278:   Return
00279: PushVar(00000)
00280: PushVar(00001)
00281: Swap(00002)
00282: Apply
00283:   Return
00284: PushFn(00279, 00001)
00285:   Return
00286: PushFn(00284, 00000)
00287:   Return
00288: PushVar(00000)
00289: Rec
00290:   Return
00291: PushFn(00288, 00000)
00292:   Return
00293: PushVar(00000)
00294:   Return
00295: PushFn(00293, 00000)
00296:   Return
00297: PushVar(00002)
00298: PushVar(00001)
00299: PushVar(00000)
00300: Swap(00003)
00301: Pop
00302: Apply
00303: Apply
00304:   Return
00305: PushFn(00297, 00002)
00306:   Return
00307: PushFn(00305, 00001)
00308:   Return
00309: PushVar(00000)
00310:   Return
00311: PushFn(00309, 00000)
00312:   Return
00313: PushVar(00004)
00314: PushVar(00003)
00315: Swap(00002)
00316: Apply
00317: PushVar(00001)
00318: Swap(00002)
00319: Apply
00320: PushVar(00003)
00321: PushVar(00000)
00322: Swap(00002)
00323: Apply
00324: Swap(00002)
00325: Apply
00326:   Return
00327: PushFn(00313, 00004)
00328:   Return
00329: PushVar(00001)
00330:   Return
00331: PushFn(00307, 00000)
00332: PushVar(00000)
00333: Swap(00002)
00334: Apply
00335: PushFn(00311, 00000)
00336: PushString("")
00337: PushString(""xs"")
00338: Swap(00002)
00339: Apply
00340: PushString(""x"")
00341: Swap(00002)
00342: Apply
00343: Swap(00002)
00344: Apply
00345: PushFn(00327, 00003)
00346: Swap(00002)
00347: Apply
00348: Swap(00002)
00349: Apply
00350: PushFn(00329, 00001)
00351: Swap(00002)
00352: Apply
00353:   Return
00354: PushFn(00331, 00002)
00355:   Return
00356: PushFn(00295, 00000)
00357: PushString("")
00358: PushString(""f"")
00359: Swap(00002)
00360: Apply
00361: PushString(""xs"")
00362: Swap(00002)
00363: Apply
00364: Swap(00002)
00365: Apply
00366: PushFn(00354, 00001)
00367: Swap(00002)
00368: Apply
00369:   Return
00370: PushVar(00000)
00371: PushVar(00001)
00372: Swap(00002)
00373: Apply
00374:   Return
00375: PushFn(00370, 00001)
00376:   Return
00377: PushFn(00375, 00000)
00378:   Return
00379: PushVar(00000)
00380: Rec
00381:   Return
00382: PushFn(00379, 00000)
00383:   Return
00384: PushVar(00000)
00385:   Return
00386: PushFn(00384, 00000)
00387:   Return
00388: PushVar(00002)
00389: PushVar(00001)
00390: PushVar(00000)
00391: Swap(00003)
00392: Pop
00393: Apply
00394: Apply
00395:   Return
00396: PushFn(00388, 00002)
00397:   Return
00398: PushFn(00396, 00001)
00399:   Return
00400: PushVar(00000)
00401:   Return
00402: PushFn(00400, 00000)
00403:   Return
00404: PushVar(00002)
00405: PushVar(00001)
00406: PushVar(00000)
00407: Swap(00003)
00408: Pop
00409: Apply
00410: Apply
00411:   Return
00412: PushFn(00404, 00002)
00413:   Return
00414: PushFn(00412, 00001)
00415:   Return
00416: PushVar(00000)
00417:   Return
00418: PushFn(00416, 00000)
00419:   Return
00420: PushVar(00000)
00421: PushVar(00001)
00422: Swap(00002)
00423: Apply
00424:   Return
00425: PushFn(00420, 00001)
00426:   Return
00427: PushFn(00425, 00000)
00428:   Return
00429: PushVar(00003)
00430: PushVar(00002)
00431: PushVar(00001)
00432: PushVar(00000)
00433: Swap(00004)
00434: If
00435: Apply
00436:   Return
00437: PushFn(00429, 00003)
00438:   Return
00439: PushFn(00437, 00002)
00440:   Return
00441: PushFn(00439, 00001)
00442:   Return
00443: PushString("Nil")
00444:   Return
00445: PushVar(00001)
00446: PushString("")
00447: PushVar(00004)
00448: Swap(00002)
00449: Apply
00450: PushVar(00002)
00451: Swap(00002)
00452: Apply
00453: Swap(00002)
00454: Apply
00455:   Return
00456: PushFn(00441, 00000)
00457: PushVar(00000)
00458: Swap(00002)
00459: Apply
00460: PushString("Nil")
00461: Swap(00002)
00462: Apply
00463: PushFn(00443, 00000)
00464: Swap(00002)
00465: Apply
00466: PushFn(00445, 00004)
00467: Swap(00002)
00468: Apply
00469:   Return
00470: PushFn(00427, 00000)
00471: PushString(""zipped"")
00472: Swap(00002)
00473: Apply
00474: PushVar(00006)
00475: PushVar(00003)
00476: Swap(00002)
00477: Apply
00478: PushVar(00001)
00479: Swap(00002)
00480: Apply
00481: Swap(00002)
00482: Apply
00483: PushFn(00456, 00003)
00484: Swap(00002)
00485: Apply
00486:   Return
00487: PushFn(00470, 00006)
00488:   Return
00489: PushString("Nil")
00490:   Return
00491: PushFn(00414, 00000)
00492: PushVar(00002)
00493: Swap(00002)
00494: Apply
00495: PushFn(00418, 00000)
00496: PushString("")
00497: PushString(""ys"")
00498: Swap(00002)
00499: Apply
00500: PushString(""y"")
00501: Swap(00002)
00502: Apply
00503: Swap(00002)
00504: Apply
00505: PushFn(00487, 00005)
00506: Swap(00002)
00507: Apply
00508: Swap(00002)
00509: Apply
00510: PushFn(00489, 00000)
00511: Swap(00002)
00512: Apply
00513:   Return
00514: PushFn(00491, 00004)
00515:   Return
00516: PushVar(00002)
00517: PushVar(00001)
00518: PushVar(00000)
00519: Swap(00003)
00520: Pop
00521: Apply
00522: Apply
00523:   Return
00524: PushFn(00516, 00002)
00525:   Return
00526: PushFn(00524, 00001)
00527:   Return
00528: PushVar(00000)
00529:   Return
00530: PushFn(00528, 00000)
00531:   Return
00532: PushString("Nil")
00533:   Return
00534: PushFn(00532, 00000)
00535:   Return
00536: PushVar(00003)
00537: PushVar(00002)
00538: PushVar(00001)
00539: PushVar(00000)
00540: Swap(00004)
00541: If
00542: Apply
00543:   Return
00544: PushFn(00536, 00003)
00545:   Return
00546: PushFn(00544, 00002)
00547:   Return
00548: PushFn(00546, 00001)
00549:   Return
00550: PushVar(00004)
00551:   Return
00552: PushString("Nil")
00553:   Return
00554: PushFn(00548, 00000)
00555: PushVar(00003)
00556: Swap(00002)
00557: Apply
00558: PushVar(00002)
00559: Swap(00002)
00560: Apply
00561: PushFn(00550, 00004)
00562: Swap(00002)
00563: Apply
00564: PushFn(00552, 00000)
00565: Swap(00002)
00566: Apply
00567:   Return
00568: PushFn(00526, 00000)
00569: PushVar(00001)
00570: Swap(00002)
00571: Apply
00572: PushFn(00530, 00000)
00573: PushString("")
00574: PushString(""ys"")
00575: Swap(00002)
00576: Apply
00577: PushString(""y"")
00578: Swap(00002)
00579: Apply
00580: Swap(00002)
00581: Apply
00582: PushFn(00534, 00000)
00583: Swap(00002)
00584: Apply
00585: Swap(00002)
00586: Apply
00587: PushFn(00554, 00003)
00588: Swap(00002)
00589: Apply
00590:   Return
00591: PushFn(00398, 00000)
00592: PushVar(00001)
00593: Swap(00002)
00594: Apply
00595: PushFn(00402, 00000)
00596: PushString("")
00597: PushString(""xs"")
00598: Swap(00002)
00599: Apply
00600: PushString(""x"")
00601: Swap(00002)
00602: Apply
00603: Swap(00002)
00604: Apply
00605: PushFn(00514, 00003)
00606: Swap(00002)
00607: Apply
00608: Swap(00002)
00609: Apply
00610: PushFn(00568, 00002)
00611: Swap(00002)
00612: Apply
00613:   Return
00614: PushFn(00591, 00002)
00615:   Return
00616: PushFn(00386, 00000)
00617: PushString("")
00618: PushString(""xs"")
00619: Swap(00002)
00620: Apply
00621: PushString(""ys"")
00622: Swap(00002)
00623: Apply
00624: Swap(00002)
00625: Apply
00626: PushFn(00614, 00001)
00627: Swap(00002)
00628: Apply
00629:   Return
00630: PushVar(00000)
00631: PushVar(00001)
00632: Swap(00002)
00633: Apply
00634:   Return
00635: PushFn(00630, 00001)
00636:   Return
00637: PushFn(00635, 00000)
00638:   Return
00639: PushVar(00000)
00640: Rec
00641:   Return
00642: PushFn(00639, 00000)
00643:   Return
00644: PushVar(00000)
00645:   Return
00646: PushFn(00644, 00000)
00647:   Return
00648: PushVar(00002)
00649: PushVar(00001)
00650: PushVar(00000)
00651: Swap(00003)
00652: Pop
00653: Apply
00654: Apply
00655:   Return
00656: PushFn(00648, 00002)
00657:   Return
00658: PushFn(00656, 00001)
00659:   Return
00660: PushVar(00000)
00661:   Return
00662: PushFn(00660, 00000)
00663:   Return
00664: PushVar(00002)
00665: PushVar(00001)
00666: PushVar(00000)
00667: Swap(00003)
00668: Pop
00669: Apply
00670: Apply
00671:   Return
00672: PushFn(00664, 00002)
00673:   Return
00674: PushFn(00672, 00001)
00675:   Return
00676: PushVar(00000)
00677:   Return
00678: PushFn(00676, 00000)
00679:   Return
00680: PushVar(00003)
00681: PushVar(00002)
00682: PushVar(00001)
00683: PushVar(00000)
00684: Swap(00004)
00685: If
00686: Apply
00687:   Return
00688: PushFn(00680, 00003)
00689:   Return
00690: PushFn(00688, 00002)
00691:   Return
00692: PushFn(00690, 00001)
00693:   Return
00694: PushVar(00007)
00695: PushVar(00004)
00696: Swap(00002)
00697: Apply
00698: PushVar(00002)
00699: Swap(00002)
00700: Apply
00701:   Return
00702: PushString("False")
00703:   Return
00704: PushFn(00692, 00000)
00705: PushVar(00006)
00706: PushVar(00002)
00707: Swap(00002)
00708: Apply
00709: PushVar(00000)
00710: Swap(00002)
00711: Apply
00712: Swap(00002)
00713: Apply
00714: PushString("True")
00715: Swap(00002)
00716: Apply
00717: PushFn(00694, 00007)
00718: Swap(00002)
00719: Apply
00720: PushFn(00702, 00000)
00721: Swap(00002)
00722: Apply
00723:   Return
00724: PushFn(00704, 00006)
00725:   Return
00726: PushString("False")
00727:   Return
00728: PushFn(00674, 00000)
00729: PushVar(00002)
00730: Swap(00002)
00731: Apply
00732: PushFn(00678, 00000)
00733: PushString("")
00734: PushString(""ys"")
00735: Swap(00002)
00736: Apply
00737: PushString(""y"")
00738: Swap(00002)
00739: Apply
00740: Swap(00002)
00741: Apply
00742: PushFn(00724, 00005)
00743: Swap(00002)
00744: Apply
00745: Swap(00002)
00746: Apply
00747: PushFn(00726, 00000)
00748: Swap(00002)
00749: Apply
00750:   Return
00751: PushFn(00728, 00004)
00752:   Return
00753: PushVar(00003)
00754: PushVar(00002)
00755: PushVar(00001)
00756: PushVar(00000)
00757: Swap(00004)
00758: If
00759: Apply
00760:   Return
00761: PushFn(00753, 00003)
00762:   Return
00763: PushFn(00761, 00002)
00764:   Return
00765: PushFn(00763, 00001)
00766:   Return
00767: PushString("True")
00768:   Return
00769: PushString("False")
00770:   Return
00771: PushFn(00765, 00000)
00772: PushVar(00002)
00773: Swap(00002)
00774: Apply
00775: PushVar(00001)
00776: Swap(00002)
00777: Apply
00778: PushFn(00767, 00000)
00779: Swap(00002)
00780: Apply
00781: PushFn(00769, 00000)
00782: Swap(00002)
00783: Apply
00784:   Return
00785: PushFn(00658, 00000)
00786: PushVar(00001)
00787: Swap(00002)
00788: Apply
00789: PushFn(00662, 00000)
00790: PushString("")
00791: PushString(""xs"")
00792: Swap(00002)
00793: Apply
00794: PushString(""x"")
00795: Swap(00002)
00796: Apply
00797: Swap(00002)
00798: Apply
00799: PushFn(00751, 00003)
00800: Swap(00002)
00801: Apply
00802: Swap(00002)
00803: Apply
00804: PushFn(00771, 00002)
00805: Swap(00002)
00806: Apply
00807:   Return
00808: PushFn(00785, 00002)
00809:   Return
00810: PushFn(00646, 00000)
00811: PushString("")
00812: PushString(""a"")
00813: Swap(00002)
00814: Apply
00815: PushString(""b"")
00816: Swap(00002)
00817: Apply
00818: Swap(00002)
00819: Apply
00820: PushFn(00808, 00001)
00821: Swap(00002)
00822: Apply
00823:   Return
00824: PushVar(00000)
00825: PushVar(00001)
00826: Swap(00002)
00827: Apply
00828:   Return
00829: PushFn(00824, 00001)
00830:   Return
00831: PushFn(00829, 00000)
00832:   Return
00833: PushVar(00000)
00834: Rec
00835:   Return
00836: PushFn(00833, 00000)
00837:   Return
00838: PushVar(00000)
00839:   Return
00840: PushFn(00838, 00000)
00841:   Return
00842: PushVar(00002)
00843: PushVar(00001)
00844: PushVar(00000)
00845: Swap(00003)
00846: Pop
00847: Apply
00848: Apply
00849:   Return
00850: PushFn(00842, 00002)
00851:   Return
00852: PushFn(00850, 00001)
00853:   Return
00854: PushVar(00000)
00855:   Return
00856: PushFn(00854, 00000)
00857:   Return
00858: PushVar(00003)
00859: PushVar(00002)
00860: PushVar(00001)
00861: PushVar(00000)
00862: Swap(00004)
00863: If
00864: Apply
00865:   Return
00866: PushFn(00858, 00003)
00867:   Return
00868: PushFn(00866, 00002)
00869:   Return
00870: PushFn(00868, 00001)
00871:   Return
00872: PushString("List")
00873: PushVar(00003)
00874: Swap(00002)
00875: Apply
00876:   Return
00877: PushVar(00003)
00878: PushVar(00002)
00879: PushVar(00001)
00880: PushVar(00000)
00881: Swap(00004)
00882: If
00883: Apply
00884:   Return
00885: PushFn(00877, 00003)
00886:   Return
00887: PushFn(00885, 00002)
00888:   Return
00889: PushFn(00887, 00001)
00890:   Return
00891: PushVar(00000)
00892: PushVar(00001)
00893: Swap(00002)
00894: Apply
00895:   Return
00896: PushFn(00891, 00001)
00897:   Return
00898: PushFn(00896, 00000)
00899:   Return
00900: PushVar(00012)
00901: PushString("List")
00902: Swap(00002)
00903: Apply
00904: PushVar(00013)
00905: PushString("List")
00906: Swap(00002)
00907: Apply
00908: PushVar(00000)
00909: Swap(00002)
00910: Apply
00911: Swap(00002)
00912: Apply
00913:   Return
00914: PushFn(00898, 00000)
00915: PushString(""unified"")
00916: Swap(00002)
00917: Apply
00918: PushVar(00009)
00919: PushVar(00010)
00920: PushVar(00006)
00921: Swap(00002)
00922: Apply
00923: Swap(00002)
00924: Apply
00925: PushVar(00008)
00926: PushVar(00002)
00927: Swap(00002)
00928: Apply
00929: PushVar(00004)
00930: Swap(00002)
00931: Apply
00932: Swap(00002)
00933: Apply
00934: Swap(00002)
00935: Apply
00936: PushFn(00900, 00013)
00937: Swap(00002)
00938: Apply
00939:   Return
00940: PushVar(00003)
00941: PushVar(00002)
00942: PushVar(00001)
00943: PushVar(00000)
00944: Swap(00004)
00945: If
00946: Apply
00947:   Return
00948: PushFn(00940, 00003)
00949:   Return
00950: PushFn(00948, 00002)
00951:   Return
00952: PushFn(00950, 00001)
00953:   Return
00954: PushString("Nil")
00955:   Return
00956: PushEffect("no-match")
00957: PushString("")
00958: PushVar(00003)
00959: Swap(00002)
00960: Apply
00961: PushVar(00005)
00962: Swap(00002)
00963: Apply
00964: Swap(00002)
00965: Apply
00966:   Return
00967: PushFn(00952, 00000)
00968: PushVar(00007)
00969: PushVar(00002)
00970: Swap(00002)
00971: Apply
00972: PushVar(00004)
00973: Swap(00002)
00974: Apply
00975: Swap(00002)
00976: Apply
00977: PushString("True")
00978: Swap(00002)
00979: Apply
00980: PushFn(00954, 00000)
00981: Swap(00002)
00982: Apply
00983: PushFn(00956, 00005)
00984: Swap(00002)
00985: Apply
00986:   Return
00987: PushFn(00889, 00000)
00988: PushVar(00002)
00989: Swap(00002)
00990: Apply
00991: PushString("Compound")
00992: Swap(00002)
00993: Apply
00994: PushFn(00914, 00012)
00995: Swap(00002)
00996: Apply
00997: PushFn(00967, 00007)
00998: Swap(00002)
00999: Apply
01000:   Return
01001: PushFn(00870, 00000)
01002: PushVar(00001)
01003: Swap(00002)
01004: Apply
01005: PushString("Binding")
01006: Swap(00002)
01007: Apply
01008: PushFn(00872, 00003)
01009: Swap(00002)
01010: Apply
01011: PushFn(00987, 00011)
01012: Swap(00002)
01013: Apply
01014:   Return
01015: PushFn(01001, 00010)
01016:   Return
01017: PushEffect("invalid")
01018: PushVar(00002)
01019: Swap(00002)
01020: Apply
01021:   Return
01022: PushFn(00852, 00000)
01023: PushVar(00001)
01024: Swap(00002)
01025: Apply
01026: PushFn(00856, 00000)
01027: PushString("")
01028: PushString(""type"")
01029: Swap(00002)
01030: Apply
01031: PushString(""pattern"")
01032: Swap(00002)
01033: Apply
01034: Swap(00002)
01035: Apply
01036: PushFn(01015, 00009)
01037: Swap(00002)
01038: Apply
01039: Swap(00002)
01040: Apply
01041: PushFn(01017, 00002)
01042: Swap(00002)
01043: Apply
01044:   Return
01045: PushFn(01022, 00008)
01046:   Return
01047: PushFn(00840, 00000)
01048: PushString("")
01049: PushString(""pattern"")
01050: Swap(00002)
01051: Apply
01052: PushString(""value"")
01053: Swap(00002)
01054: Apply
01055: Swap(00002)
01056: Apply
01057: PushFn(01045, 00007)
01058: Swap(00002)
01059: Apply
01060:   Return
01061: PushVar(00000)
01062: PushVar(00001)
01063: Swap(00002)
01064: Apply
01065:   Return
01066: PushFn(01061, 00001)
01067:   Return
01068: PushFn(01066, 00000)
01069:   Return
01070: PushVar(00000)
01071:   Return
01072: PushFn(01070, 00000)
01073:   Return
01074: PushVar(00000)
01075: Apply
01076: Apply
01077:   Return
01078: PushVar(00002)
01079: PushVar(00001)
01080: PushFn(01074, 00000)
01081: Swap(00003)
01082: Try
01083: Apply
01084: Unwind
01085:   Return
01086: PushFn(01078, 00002)
01087:   Return
01088: PushFn(01086, 00001)
01089:   Return
01090: PushVar(00000)
01091: PushVar(00001)
01092: Swap(00002)
01093: Apply
01094:   Return
01095: PushFn(01090, 00001)
01096:   Return
01097: PushFn(01095, 00000)
01098:   Return
01099: PushVar(00003)
01100: PushVar(00002)
01101: PushVar(00001)
01102: PushVar(00000)
01103: Swap(00004)
01104: If
01105: Apply
01106:   Return
01107: PushFn(01099, 00003)
01108:   Return
01109: PushFn(01107, 00002)
01110:   Return
01111: PushFn(01109, 00001)
01112:   Return
01113: PushVar(00004)
01114: PushString("")
01115: Swap(00002)
01116: Apply
01117:   Return
01118: PushVar(00010)
01119: PushVar(00004)
01120: Swap(00002)
01121: Apply
01122: PushVar(00001)
01123: Swap(00002)
01124: Apply
01125:   Return
01126: PushFn(01111, 00000)
01127: PushVar(00000)
01128: Swap(00002)
01129: Apply
01130: PushString("Nil")
01131: Swap(00002)
01132: Apply
01133: PushFn(01113, 00004)
01134: Swap(00002)
01135: Apply
01136: PushFn(01118, 00010)
01137: Swap(00002)
01138: Apply
01139:   Return
01140: PushFn(01097, 00000)
01141: PushString(""unified"")
01142: Swap(00002)
01143: Apply
01144: PushVar(00004)
01145: PushVar(00003)
01146: Swap(00002)
01147: Apply
01148: PushVar(00001)
01149: Swap(00002)
01150: Apply
01151: Swap(00002)
01152: Apply
01153: PushFn(01126, 00009)
01154: Swap(00002)
01155: Apply
01156:   Return
01157: PushVar(00000)
01158:   Return
01159: PushFn(01157, 00000)
01160:   Return
01161: PushEffect("no-match")
01162: PushVar(00000)
01163: Swap(00002)
01164: Apply
01165:   Return
01166: PushFn(01161, 00000)
01167:   Return
01168: PushFn(01088, 00000)
01169: PushFn(01140, 00008)
01170: Swap(00002)
01171: Apply
01172: PushEffect("no-match")
01173: Swap(00002)
01174: Apply
01175: PushFn(01159, 00000)
01176: PushString("")
01177: PushString(""_"")
01178: Swap(00002)
01179: Apply
01180: PushString(""arg"")
01181: Swap(00002)
01182: Apply
01183: Swap(00002)
01184: Apply
01185: PushFn(01166, 00000)
01186: Swap(00002)
01187: Apply
01188: Swap(00002)
01189: Apply
01190:   Return
01191: PushFn(01168, 00007)
01192:   Return
01193: PushFn(01191, 00006)
01194:   Return
01195: PushVar(00000)
01196: Apply
01197: Apply
01198:   Return
01199: PushVar(00002)
01200: PushVar(00001)
01201: PushFn(01195, 00000)
01202: Swap(00003)
01203: Try
01204: Apply
01205: Unwind
01206:   Return
01207: PushFn(01199, 00002)
01208:   Return
01209: PushFn(01207, 00001)
01210:   Return
01211: PushString("Success")
01212:   Return
01213: PushString("Success")
01214:   Return
01215: PushVar(00000)
01216:   Return
01217: PushString("Bar")
01218:   Return
01219: PushString("Success")
01220:   Return
01221: PushVar(00001)
01222:   Return
01223: PushFn(01221, 00001)
01224:   Return
01225: PushVar(00000)
01226:   Return
01227: PushString("List")
01228: PushVar(00001)
01229: PushString("Value")
01230: PushString("Foo")
01231: Swap(00002)
01232: Apply
01233: Swap(00002)
01234: Apply
01235: PushFn(01211, 00000)
01236: Swap(00002)
01237: Apply
01238: PushString("Foo")
01239: Swap(00002)
01240: Apply
01241: Swap(00002)
01242: Apply
01243: PushVar(00001)
01244: PushString("Value")
01245: PushString("Foo")
01246: Swap(00002)
01247: Apply
01248: Swap(00002)
01249: Apply
01250: PushFn(01213, 00000)
01251: Swap(00002)
01252: Apply
01253: PushString("Bar")
01254: Swap(00002)
01255: Apply
01256: Swap(00002)
01257: Apply
01258: PushVar(00001)
01259: PushString("Binding")
01260: PushString(""x"")
01261: Swap(00002)
01262: Apply
01263: Swap(00002)
01264: Apply
01265: PushFn(01215, 00000)
01266: Swap(00002)
01267: Apply
01268: PushString("Foo")
01269: Swap(00002)
01270: Apply
01271: Swap(00002)
01272: Apply
01273: PushVar(00001)
01274: PushString("Binding")
01275: PushString(""x"")
01276: Swap(00002)
01277: Apply
01278: Swap(00002)
01279: Apply
01280: PushFn(01217, 00000)
01281: Swap(00002)
01282: Apply
01283: PushString("Foo")
01284: Swap(00002)
01285: Apply
01286: Swap(00002)
01287: Apply
01288: PushVar(00001)
01289: PushString("Value")
01290: PushString("Pair")
01291: PushString("Foo")
01292: Swap(00002)
01293: Apply
01294: PushString("Bar")
01295: Swap(00002)
01296: Apply
01297: Swap(00002)
01298: Apply
01299: Swap(00002)
01300: Apply
01301: PushFn(01219, 00000)
01302: Swap(00002)
01303: Apply
01304: PushString("Pair")
01305: PushString("Foo")
01306: Swap(00002)
01307: Apply
01308: PushString("Bar")
01309: Swap(00002)
01310: Apply
01311: Swap(00002)
01312: Apply
01313: Swap(00002)
01314: Apply
01315: PushVar(00001)
01316: PushString("Compound")
01317: PushString("Pair")
01318: PushString("Binding")
01319: PushString(""x"")
01320: Swap(00002)
01321: Apply
01322: Swap(00002)
01323: Apply
01324: PushString("Binding")
01325: PushString(""y"")
01326: Swap(00002)
01327: Apply
01328: Swap(00002)
01329: Apply
01330: Swap(00002)
01331: Apply
01332: Swap(00002)
01333: Apply
01334: PushFn(01223, 00000)
01335: Swap(00002)
01336: Apply
01337: PushString("Pair")
01338: PushString("Foo")
01339: Swap(00002)
01340: Apply
01341: PushString("Bar")
01342: Swap(00002)
01343: Apply
01344: Swap(00002)
01345: Apply
01346: Swap(00002)
01347: Apply
01348: PushVar(00001)
01349: PushString("Compound")
01350: PushString("Pair")
01351: PushString("Value")
01352: PushString("Foo")
01353: Swap(00002)
01354: Apply
01355: Swap(00002)
01356: Apply
01357: PushString("Binding")
01358: PushString(""y"")
01359: Swap(00002)
01360: Apply
01361: Swap(00002)
01362: Apply
01363: Swap(00002)
01364: Apply
01365: Swap(00002)
01366: Apply
01367: PushFn(01225, 00000)
01368: Swap(00002)
01369: Apply
01370: PushString("Pair")
01371: PushString("Foo")
01372: Swap(00002)
01373: Apply
01374: PushString("Bar")
01375: Swap(00002)
01376: Apply
01377: Swap(00002)
01378: Apply
01379: Swap(00002)
01380: Apply
01381:   Return
01382: PushVar(00000)
01383:   Return
01384: PushFn(01382, 00000)
01385:   Return
01386: PushVar(00001)
01387: PushString("NoMatch")
01388: PushVar(00000)
01389: Swap(00002)
01390: Apply
01391: Swap(00002)
01392: Apply
01393:   Return
01394: PushFn(01386, 00001)
01395:   Return
01396: PushFn(01209, 00000)
01397: PushFn(01227, 00001)
01398: Swap(00002)
01399: Apply
01400: PushEffect("no-match")
01401: Swap(00002)
01402: Apply
01403: PushFn(01384, 00000)
01404: PushString("")
01405: PushString(""r"")
01406: Swap(00002)
01407: Apply
01408: PushString(""arg"")
01409: Swap(00002)
01410: Apply
01411: Swap(00002)
01412: Apply
01413: PushFn(01394, 00000)
01414: Swap(00002)
01415: Apply
01416: Swap(00002)
01417: Apply
01418:   Return
01419: PushFn(01068, 00000)
01420: PushString(""->"")
01421: Swap(00002)
01422: Apply
01423: PushFn(01072, 00000)
01424: PushString("")
01425: PushString(""pattern"")
01426: Swap(00002)
01427: Apply
01428: PushString(""body"")
01429: Swap(00002)
01430: Apply
01431: PushString(""value"")
01432: Swap(00002)
01433: Apply
01434: Swap(00002)
01435: Apply
01436: PushFn(01193, 00005)
01437: Swap(00002)
01438: Apply
01439: Swap(00002)
01440: Apply
01441: PushFn(01396, 00000)
01442: Swap(00002)
01443: Apply
01444:   Return
01445: PushFn(00831, 00000)
01446: PushString(""unify"")
01447: Swap(00002)
01448: Apply
01449: PushFn(00836, 00000)
01450: PushString(""unify"")
01451: Swap(00002)
01452: Apply
01453: PushFn(01047, 00006)
01454: Swap(00002)
01455: Apply
01456: Swap(00002)
01457: Apply
01458: PushFn(01419, 00004)
01459: Swap(00002)
01460: Apply
01461:   Return
01462: PushFn(00637, 00000)
01463: PushString(""=="")
01464: Swap(00002)
01465: Apply
01466: PushFn(00642, 00000)
01467: PushString(""=="")
01468: Swap(00002)
01469: Apply
01470: PushFn(00810, 00000)
01471: Swap(00002)
01472: Apply
01473: Swap(00002)
01474: Apply
01475: PushFn(01445, 00005)
01476: Swap(00002)
01477: Apply
01478:   Return
01479: PushFn(00377, 00000)
01480: PushString(""zip"")
01481: Swap(00002)
01482: Apply
01483: PushFn(00382, 00000)
01484: PushString(""zip"")
01485: Swap(00002)
01486: Apply
01487: PushFn(00616, 00000)
01488: Swap(00002)
01489: Apply
01490: Swap(00002)
01491: Apply
01492: PushFn(01462, 00004)
01493: Swap(00002)
01494: Apply
01495:   Return
01496: PushFn(00286, 00000)
01497: PushString(""map"")
01498: Swap(00002)
01499: Apply
01500: PushFn(00291, 00000)
01501: PushString(""map"")
01502: Swap(00002)
01503: Apply
01504: PushFn(00356, 00000)
01505: Swap(00002)
01506: Apply
01507: Swap(00002)
01508: Apply
01509: PushFn(01479, 00003)
01510: Swap(00002)
01511: Apply
01512:   Return
01513: PushFn(00257, 00000)
01514: PushString(""apply"")
01515: Swap(00002)
01516: Apply
01517: PushFn(00261, 00000)
01518: PushString("")
01519: PushString(""f"")
01520: Swap(00002)
01521: Apply
01522: PushString(""xs"")
01523: Swap(00002)
01524: Apply
01525: Swap(00002)
01526: Apply
01527: PushFn(00277, 00001)
01528: Swap(00002)
01529: Apply
01530: Swap(00002)
01531: Apply
01532: PushFn(01496, 00002)
01533: Swap(00002)
01534: Apply
01535:   Return
01536: PushFn(00169, 00000)
01537: PushString(""rev"")
01538: Swap(00002)
01539: Apply
01540: PushFn(00174, 00000)
01541: PushString(""rev"")
01542: Swap(00002)
01543: Apply
01544: PushFn(00236, 00000)
01545: Swap(00002)
01546: Apply
01547: Swap(00002)
01548: Apply
01549: PushFn(01513, 00001)
01550: Swap(00002)
01551: Apply
01552:   Return
01553: PushFn(00106, 00000)
01554: PushString(""flatten"")
01555: Swap(00002)
01556: Apply
01557: PushVar(00000)
01558: PushFn(00110, 00000)
01559: PushString("")
01560: PushString(""acc"")
01561: Swap(00002)
01562: Apply
01563: PushString(""x"")
01564: Swap(00002)
01565: Apply
01566: Swap(00002)
01567: Apply
01568: PushFn(00160, 00000)
01569: Swap(00002)
01570: Apply
01571: Swap(00002)
01572: Apply
01573: Swap(00002)
01574: Apply
01575: PushFn(01536, 00000)
01576: Swap(00002)
01577: Apply
01578:   Return
01579: PushFn(00007, 00000)
01580: PushString(""fold"")
01581: Swap(00002)
01582: Apply
01583: PushFn(00012, 00000)
01584: PushString(""fold"")
01585: Swap(00002)
01586: Apply
01587: PushFn(00082, 00000)
01588: Swap(00002)
01589: Apply
01590: Swap(00002)
01591: Apply
01592: PushFn(01553, 00000)
01593: Swap(00002)
01594: Apply

List(Success, NoMatch((Foo, Bar)), Foo, Bar, Success, Foo, Bar)

---

'fold = ('fold ~> { ('f, 'acc, 'xs) => {
    pop(xs, ('xs, 'x) => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
'rev = ('rev ~> { ('acc, 'xs) => {
    pop(xs, ('xs, 'x) => {
        rev(acc(x), xs)
    }, {
        acc
    })
}})
'apply = (('f, 'xs) => {
    rev(f, rev(List, xs))
})
'map = ('map ~> { ('f, 'xs) => {
    pop(xs, ('xs, 'x) => {
        map(f, xs)(f(x))
    }, {
        xs
    })
}})
'zip = ('zip ~> { ('xs, 'ys) => {
    pop(xs, ('xs, 'x) => {
        pop(ys, ('ys, 'y) => {
            'zipped = zip(xs, ys)
            if (zipped, Nil, {
                Nil
            }, {
                zipped((x, y))
            })
        }, {
            Nil
        })
    }, {
        pop(ys, ('ys, 'y) => {
            Nil
        }, {
            if(xs, ys, {
                xs
            }, {
                Nil
            })
        })
    })
}})
'== = ('== ~> { ('a, 'b) => {
    pop(a, ('xs, 'x) => {
        pop(b, ('ys, 'y) => {
            if(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        if(a, b, { True }, { False })
    })
}})
'flatten = fold(('acc, 'x) => {
    pop(x, ('xs, 'x) => { acc(x) }, { acc })
})
'last = ('xs => {
    pop(xs, ('_, 'x) => { x }, { xs })
})
'first = ('xs => {
    pop(xs, ('xs, '_) => { last(xs) }, { xs })
})
'join = fold(('acc, 'binding) => {
    'var1 = first(binding)
    'val1 = last(binding)
    fold(('_, 'b) => {
        'var2 = first(b)
        'val2 = last(b)
        if(var1, var2, {
            if(val1 == val2, False, {
                no-match!(((var2, val2), (var1, val1)))
            }, {
                Nil
            })
        }, {
            Nil
        })
    }, Nil, acc)
    acc(binding)
}, Bindings)
'unify = ('unify ~> { ('pattern, 'value) => {
    pop(pattern, ('type, 'pattern) => {
        if(type, Binding, {
            Bindings((pattern, value))
        }, {
            if(type, Compound, {
                'unified = flatten(Bindings, map(apply(unify), zip(pattern, value)))
                join(unified)
            }, {
                if(pattern == value, True, {
                    Nil
                }, {
                    no-match!((pattern, value))
                })
            })
        })
    }, {
        invalid!(pattern)
    })
}})
'-> = (('pattern, 'body, 'value) => {
    try( {
        'unified = unify(pattern, value)
        'args = map(last, unified)
        if(unified, Nil, {
            body()
        }, {
            apply(body, args)
        })
    }, no-match!, ('_, 'arg) => {
        no-match!(arg)
    })
})
try({
    List(
        (Foo -> { Bar })(Foo)
        ('x -> { x })(Foo)
        ('x -> { Bar })(Foo)
        (Pair(Foo, Bar) -> { Foo })(Pair(Foo, Bar))
        (Pair('x, 'y) -> { y })(Pair(Foo, Bar))
        (Pair('x, Bar) -> { x })(Pair(Foo, Bar))
        (Pair('x, 'x) -> { x })(Pair(Bar, Bar))
        (Pair('x, 'x) -> { x })(Pair(Foo, Bar))
    )
}, no-match!, ('r, 'arg) => {
    r(NoMatch(arg))
})

(=
  'fold
  (~>
    'fold
    { (=>
        (
          'f
          'acc
          'xs)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'rev
  (~>
    'rev
    { (=>
        (
          'acc
          'xs)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { (rev
                  (acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'apply
  (=>
    (
      'f
      'xs)
    { (rev
        f
        (rev
          List
          xs)) }))
(=
  'map
  (~>
    'map
    { (=>
        (
          'f
          'xs)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { ((map
                  f
                  xs)
                  (f
                    x)) })
            { xs }) }) }))
(=
  'zip
  (~>
    'zip
    { (=>
        (
          'xs
          'ys)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { (pop
                  ys
                  (=>
                    (
                      'ys
                      'y)
                    { (=
                        'zipped
                        (zip
                          xs
                          ys))
                      (if
                        zipped
                        Nil
                        { Nil }
                        { (zipped
                            (
                              x
                              y)) }) })
                  { Nil }) })
            { (pop
                ys
                (=>
                  (
                    'ys
                    'y)
                  { Nil })
                { (if
                    xs
                    ys
                    { xs }
                    { Nil }) }) }) }) }))
(=
  '==
  (~>
    '==
    { (=>
        (
          'a
          'b)
        { (pop
            a
            (=>
              (
                'xs
                'x)
              { (pop
                  b
                  (=>
                    (
                      'ys
                      'y)
                    { (if
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (if
                a
                b
                { True }
                { False }) }) }) }))
(=
  'flatten
  (fold
    (=>
      (
        'acc
        'x)
      { (pop
          x
          (=>
            (
              'xs
              'x)
            { (acc
                x) })
          { acc }) })))
(=
  'last
  (=>
    'xs
    { (pop
        xs
        (=>
          (
            '_
            'x)
          { x })
        { xs }) }))
(=
  'first
  (=>
    'xs
    { (pop
        xs
        (=>
          (
            'xs
            '_)
          { (last
              xs) })
        { xs }) }))
(=
  'join
  (fold
    (=>
      (
        'acc
        'binding)
      { (=
          'var1
          (first
            binding))
        (=
          'val1
          (last
            binding))
        (fold
          (=>
            (
              '_
              'b)
            { (=
                'var2
                (first
                  b))
              (=
                'val2
                (last
                  b))
              (if
                var1
                var2
                { (if
                    (==
                      val1
                      val2)
                    False
                    { (no-match!
                        (
                          (
                            var2
                            val2)
                          (
                            var1
                            val1))) }
                    { Nil }) }
                { Nil }) })
          Nil
          acc)
        (acc
          binding) })
    Bindings))
(=
  'unify
  (~>
    'unify
    { (=>
        (
          'pattern
          'value)
        { (pop
            pattern
            (=>
              (
                'type
                'pattern)
              { (if
                  type
                  Binding
                  { (Bindings
                      (
                        pattern
                        value)) }
                  { (if
                      type
                      Compound
                      { (=
                          'unified
                          (flatten
                            Bindings
                            (map
                              (apply
                                unify)
                              (zip
                                pattern
                                value))))
                        (join
                          unified) }
                      { (if
                          (==
                            pattern
                            value)
                          True
                          { Nil }
                          { (no-match!
                              (
                                pattern
                                value)) }) }) }) })
            { (invalid!
                pattern) }) }) }))
(=
  '->
  (=>
    (
      'pattern
      'body
      'value)
    { (try
        { (=
            'unified
            (unify
              pattern
              value))
          (=
            'args
            (map
              last
              unified))
          (if
            unified
            Nil
            { (body) }
            { (apply
                body
                args) }) }
        no-match!
        (=>
          (
            '_
            'arg)
          { (no-match!
              arg) })) }))
(try
  { (List
      ((->
        Foo
        { Bar })
        Foo)
      ((->
        'x
        { x })
        Foo)
      ((->
        'x
        { Bar })
        Foo)
      ((->
        (Pair
          Foo
          Bar)
        { Foo })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          'x
          'y)
        { y })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          'x
          Bar)
        { x })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          'x
          'x)
        { x })
        (Pair
          Bar
          Bar))
      ((->
        (Pair
          'x
          'x)
        { x })
        (Pair
          Foo
          Bar))) }
  no-match!
  (=>
    (
      'r
      'arg)
    { (r
        (NoMatch
          arg)) }))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( ()
                  "f" )
                "acc" )
              "xs" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( ()
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                ~>
                  0
            "rev" )
          =>
            ( ( =>
                  =>
                    0
                ( ( ()
                    "acc" )
                  "xs" ) )
              =>
                =>
                  ( ( ( =>
                          =>
                            =>
                              ( pop
                                2
                                1
                                0 )
                        0 )
                      ( ( =>
                            =>
                              0
                          ( ( ()
                              "xs" )
                            "x" ) )
                        =>
                          =>
                            ( ( 4
                                ( 3
                                  0 ) )
                              1 ) ) )
                    =>
                      2 ) ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "apply" )
            ( ( =>
                  =>
                    0
                ( ( ()
                    "f" )
                  "xs" ) )
              =>
                =>
                  ( ( 2
                      1 )
                    ( ( 2
                        List )
                      0 ) ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "map" )
                ( ( =>
                      =>
                        ~>
                          0
                    "map" )
                  =>
                    ( ( =>
                          =>
                            0
                        ( ( ()
                            "f" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( =>
                                  =>
                                    =>
                                      ( pop
                                        2
                                        1
                                        0 )
                                0 )
                              ( ( =>
                                    =>
                                      0
                                  ( ( ()
                                      "xs" )
                                    "x" ) )
                                =>
                                  =>
                                    ( ( ( 4
                                          3 )
                                        1 )
                                      ( 3
                                        0 ) ) ) )
                            =>
                              1 ) ) ) )
              =>
                ( ( ( =>
                        =>
                          =>
                            ( 0
                              1 )
                      "zip" )
                    ( ( =>
                          =>
                            ~>
                              0
                        "zip" )
                      =>
                        ( ( =>
                              =>
                                0
                            ( ( ()
                                "xs" )
                              "ys" ) )
                          =>
                            =>
                              ( ( ( =>
                                      =>
                                        =>
                                          ( pop
                                            2
                                            1
                                            0 )
                                    1 )
                                  ( ( =>
                                        =>
                                          0
                                      ( ( ()
                                          "xs" )
                                        "x" ) )
                                    =>
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              2 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( ()
                                                    "ys" )
                                                  "y" ) )
                                              =>
                                                =>
                                                  ( ( ( =>
                                                          =>
                                                            =>
                                                              ( 0
                                                                1 )
                                                        "zipped" )
                                                      ( ( 6
                                                          3 )
                                                        1 ) )
                                                    =>
                                                      ( ( ( ( =>
                                                                =>
                                                                  =>
                                                                    =>
                                                                      ( if
                                                                        3
                                                                        2
                                                                        1
                                                                        0 )
                                                              0 )
                                                            Nil )
                                                          =>
                                                            Nil )
                                                        =>
                                                          ( 1
                                                            ( ( ()
                                                                4 )
                                                              2 ) ) ) ) ) )
                                          =>
                                            Nil ) ) )
                                =>
                                  ( ( ( =>
                                          =>
                                            =>
                                              ( pop
                                                2
                                                1
                                                0 )
                                        1 )
                                      ( ( =>
                                            =>
                                              0
                                          ( ( ()
                                              "ys" )
                                            "y" ) )
                                        =>
                                          =>
                                            Nil ) )
                                    =>
                                      ( ( ( ( =>
                                                =>
                                                  =>
                                                    =>
                                                      ( if
                                                        3
                                                        2
                                                        1
                                                        0 )
                                              3 )
                                            2 )
                                          =>
                                            4 )
                                        =>
                                          Nil ) ) ) ) ) )
                  =>
                    ( ( ( =>
                            =>
                              =>
                                ( 0
                                  1 )
                          "==" )
                        ( ( =>
                              =>
                                ~>
                                  0
                            "==" )
                          =>
                            ( ( =>
                                  =>
                                    0
                                ( ( ()
                                    "a" )
                                  "b" ) )
                              =>
                                =>
                                  ( ( ( =>
                                          =>
                                            =>
                                              ( pop
                                                2
                                                1
                                                0 )
                                        1 )
                                      ( ( =>
                                            =>
                                              0
                                          ( ( ()
                                              "xs" )
                                            "x" ) )
                                        =>
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  2 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( ()
                                                        "ys" )
                                                      "y" ) )
                                                  =>
                                                    =>
                                                      ( ( ( ( =>
                                                                =>
                                                                  =>
                                                                    =>
                                                                      ( if
                                                                        3
                                                                        2
                                                                        1
                                                                        0 )
                                                              ( ( 6
                                                                  2 )
                                                                0 ) )
                                                            True )
                                                          =>
                                                            ( ( 7
                                                                4 )
                                                              2 ) )
                                                        =>
                                                          False ) ) )
                                              =>
                                                False ) ) )
                                    =>
                                      ( ( ( ( =>
                                                =>
                                                  =>
                                                    =>
                                                      ( if
                                                        3
                                                        2
                                                        1
                                                        0 )
                                              2 )
                                            1 )
                                          =>
                                            True )
                                        =>
                                          False ) ) ) ) )
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( 0
                                      1 )
                              "flatten" )
                            ( 5
                              ( ( =>
                                    =>
                                      0
                                  ( ( ()
                                      "acc" )
                                    "x" ) )
                                =>
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( pop
                                                  2
                                                  1
                                                  0 )
                                          0 )
                                        ( ( =>
                                              =>
                                                0
                                            ( ( ()
                                                "xs" )
                                              "x" ) )
                                          =>
                                            =>
                                              ( 3
                                                0 ) ) )
                                      =>
                                        2 ) ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( 0
                                          1 )
                                  "last" )
                                ( ( =>
                                      =>
                                        0
                                    "xs" )
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( pop
                                                  2
                                                  1
                                                  0 )
                                          0 )
                                        ( ( =>
                                              =>
                                                0
                                            ( ( ()
                                                "_" )
                                              "x" ) )
                                          =>
                                            =>
                                              0 ) )
                                      =>
                                        1 ) ) )
                              =>
                                ( ( ( =>
                                        =>
                                          =>
                                            ( 0
                                              1 )
                                      "first" )
                                    ( ( =>
                                          =>
                                            0
                                        "xs" )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              0 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( ()
                                                    "xs" )
                                                  "_" ) )
                                              =>
                                                =>
                                                  ( 3
                                                    1 ) ) )
                                          =>
                                            1 ) ) )
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( 0
                                                  1 )
                                          "join" )
                                        ( ( 8
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( ()
                                                    "acc" )
                                                  "binding" ) )
                                              =>
                                                =>
                                                  ( ( ( =>
                                                          =>
                                                            =>
                                                              ( 0
                                                                1 )
                                                        "var1" )
                                                      ( 2
                                                        0 ) )
                                                    =>
                                                      ( ( ( =>
                                                              =>
                                                                =>
                                                                  ( 0
                                                                    1 )
                                                            "val1" )
                                                          ( 4
                                                            1 ) )
                                                        =>
                                                          ( =>
                                                              ( 4
                                                                3 )
                                                            ( ( ( 12
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( ()
                                                                          "_" )
                                                                        "b" ) )
                                                                    =>
                                                                      =>
                                                                        ( ( ( =>
                                                                                =>
                                                                                  =>
                                                                                    ( 0
                                                                                      1 )
                                                                              "var2" )
                                                                            ( 6
                                                                              0 ) )
                                                                          =>
                                                                            ( ( ( =>
                                                                                    =>
                                                                                      =>
                                                                                        ( 0
                                                                                          1 )
                                                                                  "val2" )
                                                                                ( 8
                                                                                  1 ) )
                                                                              =>
                                                                                ( ( ( ( =>
                                                                                          =>
                                                                                            =>
                                                                                              =>
                                                                                                ( if
                                                                                                  3
                                                                                                  2
                                                                                                  1
                                                                                                  0 )
                                                                                        5 )
                                                                                      1 )
                                                                                    =>
                                                                                      ( ( ( ( =>
                                                                                                =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      ( if
                                                                                                        3
                                                                                                        2
                                                                                                        1
                                                                                                        0 )
                                                                                              ( ( 12
                                                                                                  5 )
                                                                                                1 ) )
                                                                                            False )
                                                                                          =>
                                                                                            ( no-match!
                                                                                              ( ( ()
                                                                                                  ( ( ()
                                                                                                      3 )
                                                                                                    2 ) )
                                                                                                ( ( ()
                                                                                                    7 )
                                                                                                  6 ) ) ) )
                                                                                        =>
                                                                                          Nil ) )
                                                                                  =>
                                                                                    Nil ) ) ) ) )
                                                                Nil )
                                                              3 ) ) ) ) ) )
                                          Bindings ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( 0
                                                      1 )
                                              "unify" )
                                            ( ( =>
                                                  =>
                                                    ~>
                                                      0
                                                "unify" )
                                              =>
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( ()
                                                        "pattern" )
                                                      "value" ) )
                                                  =>
                                                    =>
                                                      ( ( ( =>
                                                              =>
                                                                =>
                                                                  ( pop
                                                                    2
                                                                    1
                                                                    0 )
                                                            1 )
                                                          ( ( =>
                                                                =>
                                                                  0
                                                              ( ( ()
                                                                  "type" )
                                                                "pattern" ) )
                                                            =>
                                                              =>
                                                                ( ( ( ( =>
                                                                          =>
                                                                            =>
                                                                              =>
                                                                                ( if
                                                                                  3
                                                                                  2
                                                                                  1
                                                                                  0 )
                                                                        1 )
                                                                      Binding )
                                                                    =>
                                                                      ( Bindings
                                                                        ( ( ()
                                                                            1 )
                                                                          3 ) ) )
                                                                  =>
                                                                    ( ( ( ( =>
                                                                              =>
                                                                                =>
                                                                                  =>
                                                                                    ( if
                                                                                      3
                                                                                      2
                                                                                      1
                                                                                      0 )
                                                                            2 )
                                                                          Compound )
                                                                        =>
                                                                          ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      ( 0
                                                                                        1 )
                                                                                "unified" )
                                                                              ( ( 10
                                                                                  Bindings )
                                                                                ( ( 13
                                                                                    ( 14
                                                                                      6 ) )
                                                                                  ( ( 12
                                                                                      2 )
                                                                                    4 ) ) ) )
                                                                            =>
                                                                              ( 8
                                                                                0 ) ) )
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                ( ( 11
                                                                                    2 )
                                                                                  4 ) )
                                                                              True )
                                                                            =>
                                                                              Nil )
                                                                          =>
                                                                            ( no-match!
                                                                              ( ( ()
                                                                                  3 )
                                                                                5 ) ) ) ) ) ) )
                                                        =>
                                                          ( invalid!
                                                            2 ) ) ) ) )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( 0
                                                          1 )
                                                  "->" )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( ( ()
                                                          "pattern" )
                                                        "body" )
                                                      "value" ) )
                                                  =>
                                                    =>
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( try
                                                                      2
                                                                      1
                                                                      0 )
                                                              =>
                                                                ( ( ( =>
                                                                        =>
                                                                          =>
                                                                            ( 0
                                                                              1 )
                                                                      "unified" )
                                                                    ( ( 4
                                                                        3 )
                                                                      1 ) )
                                                                  =>
                                                                    ( ( ( =>
                                                                            =>
                                                                              =>
                                                                                ( 0
                                                                                  1 )
                                                                          "args" )
                                                                        ( ( 12
                                                                            8 )
                                                                          0 ) )
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                1 )
                                                                              Nil )
                                                                            =>
                                                                              ( 5
                                                                                () ) )
                                                                          =>
                                                                            ( ( 15
                                                                                5 )
                                                                              1 ) ) ) ) )
                                                            no-match! )
                                                          ( ( =>
                                                                =>
                                                                  0
                                                              ( ( ()
                                                                  "_" )
                                                                "arg" ) )
                                                            =>
                                                              =>
                                                                ( no-match!
                                                                  0 ) ) ) ) )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( try
                                                              2
                                                              1
                                                              0 )
                                                      =>
                                                        ( ( ( ( ( ( ( ( List
                                                                        ( ( ( 1
                                                                              ( Value
                                                                                Foo ) )
                                                                            =>
                                                                              Bar )
                                                                          Foo ) )
                                                                      ( ( ( 1
                                                                            ( Binding
                                                                              "x" ) )
                                                                          =>
                                                                            0 )
                                                                        Foo ) )
                                                                    ( ( ( 1
                                                                          ( Binding
                                                                            "x" ) )
                                                                        =>
                                                                          Bar )
                                                                      Foo ) )
                                                                  ( ( ( 1
                                                                        ( Value
                                                                          ( ( Pair
                                                                              Foo )
                                                                            Bar ) ) )
                                                                      =>
                                                                        Foo )
                                                                    ( ( Pair
                                                                        Foo )
                                                                      Bar ) ) )
                                                                ( ( ( 1
                                                                      ( Compound
                                                                        ( ( Pair
                                                                            ( Binding
                                                                              "x" ) )
                                                                          ( Binding
                                                                            "y" ) ) ) )
                                                                    =>
                                                                      =>
                                                                        0 )
                                                                  ( ( Pair
                                                                      Foo )
                                                                    Bar ) ) )
                                                              ( ( ( 1
                                                                    ( Compound
                                                                      ( ( Pair
                                                                          ( Binding
                                                                            "x" ) )
                                                                        ( Value
                                                                          Bar ) ) ) )
                                                                  =>
                                                                    0 )
                                                                ( ( Pair
                                                                    Foo )
                                                                  Bar ) ) )
                                                            ( ( ( 1
                                                                  ( Compound
                                                                    ( ( Pair
                                                                        ( Binding
                                                                          "x" ) )
                                                                      ( Binding
                                                                        "x" ) ) ) )
                                                                =>
                                                                  =>
                                                                    0 )
                                                              ( ( Pair
                                                                  Bar )
                                                                Bar ) ) )
                                                          ( ( ( 1
                                                                ( Compound
                                                                  ( ( Pair
                                                                      ( Binding
                                                                        "x" ) )
                                                                    ( Binding
                                                                      "x" ) ) ) )
                                                              =>
                                                                =>
                                                                  0 )
                                                            ( ( Pair
                                                                Foo )
                                                              Bar ) ) ) )
                                                    no-match! )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( ()
                                                          "r" )
                                                        "arg" ) )
                                                    =>
                                                      =>
                                                        ( 1
                                                          ( NoMatch
                                                            0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00005)
00035: PushVar(00004)
00036: Swap(00002)
00037: Apply
00038: PushVar(00004)
00039: PushVar(00003)
00040: Swap(00002)
00041: Apply
00042: PushVar(00000)
00043: Swap(00002)
00044: Apply
00045: Swap(00002)
00046: Apply
00047: PushVar(00001)
00048: Swap(00002)
00049: Apply
00050:   Return
00051: PushFn(00034, 00005)
00052:   Return
00053: PushVar(00002)
00054:   Return
00055: PushFn(00028, 00000)
00056: PushVar(00000)
00057: Swap(00002)
00058: Apply
00059: PushFn(00032, 00000)
00060: PushString("")
00061: PushString(""xs"")
00062: Swap(00002)
00063: Apply
00064: PushString(""x"")
00065: Swap(00002)
00066: Apply
00067: Swap(00002)
00068: Apply
00069: PushFn(00051, 00004)
00070: Swap(00002)
00071: Apply
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00055, 00003)
00079:   Return
00080: PushFn(00078, 00002)
00081:   Return
00082: PushFn(00016, 00000)
00083: PushString("")
00084: PushString(""f"")
00085: Swap(00002)
00086: Apply
00087: PushString(""acc"")
00088: Swap(00002)
00089: Apply
00090: PushString(""xs"")
00091: Swap(00002)
00092: Apply
00093: Swap(00002)
00094: Apply
00095: PushFn(00080, 00001)
00096: Swap(00002)
00097: Apply
00098:   Return
00099: PushVar(00000)
00100: PushVar(00001)
00101: Swap(00002)
00102: Apply
00103:   Return
00104: PushFn(00099, 00001)
00105:   Return
00106: PushFn(00104, 00000)
00107:   Return
00108: PushVar(00000)
00109: Rec
00110:   Return
00111: PushFn(00108, 00000)
00112:   Return
00113: PushVar(00000)
00114:   Return
00115: PushFn(00113, 00000)
00116:   Return
00117: PushVar(00002)
00118: PushVar(00001)
00119: PushVar(00000)
00120: Swap(00003)
00121: Pop
00122: Apply
00123: Apply
00124:   Return
00125: PushFn(00117, 00002)
00126:   Return
00127: PushFn(00125, 00001)
00128:   Return
00129: PushVar(00000)
00130:   Return
00131: PushFn(00129, 00000)
00132:   Return
00133: PushVar(00004)
00134: PushVar(00003)
00135: PushVar(00000)
00136: Swap(00002)
00137: Apply
00138: Swap(00002)
00139: Apply
00140: PushVar(00001)
00141: Swap(00002)
00142: Apply
00143:   Return
00144: PushFn(00133, 00004)
00145:   Return
00146: PushVar(00002)
00147:   Return
00148: PushFn(00127, 00000)
00149: PushVar(00000)
00150: Swap(00002)
00151: Apply
00152: PushFn(00131, 00000)
00153: PushString("")
00154: PushString(""xs"")
00155: Swap(00002)
00156: Apply
00157: PushString(""x"")
00158: Swap(00002)
00159: Apply
00160: Swap(00002)
00161: Apply
00162: PushFn(00144, 00003)
00163: Swap(00002)
00164: Apply
00165: Swap(00002)
00166: Apply
00167: PushFn(00146, 00002)
00168: Swap(00002)
00169: Apply
00170:   Return
00171: PushFn(00148, 00002)
00172:   Return
00173: PushFn(00115, 00000)
00174: PushString("")
00175: PushString(""acc"")
00176: Swap(00002)
00177: Apply
00178: PushString(""xs"")
00179: Swap(00002)
00180: Apply
00181: Swap(00002)
00182: Apply
00183: PushFn(00171, 00001)
00184: Swap(00002)
00185: Apply
00186:   Return
00187: PushVar(00000)
00188: PushVar(00001)
00189: Swap(00002)
00190: Apply
00191:   Return
00192: PushFn(00187, 00001)
00193:   Return
00194: PushFn(00192, 00000)
00195:   Return
00196: PushVar(00000)
00197:   Return
00198: PushFn(00196, 00000)
00199:   Return
00200: PushVar(00002)
00201: PushVar(00001)
00202: Swap(00002)
00203: Apply
00204: PushVar(00002)
00205: PushString("List")
00206: Swap(00002)
00207: Apply
00208: PushVar(00000)
00209: Swap(00002)
00210: Apply
00211: Swap(00002)
00212: Apply
00213:   Return
00214: PushFn(00200, 00002)
00215:   Return
00216: PushVar(00000)
00217: PushVar(00001)
00218: Swap(00002)
00219: Apply
00220:   Return
00221: PushFn(00216, 00001)
00222:   Return
00223: PushFn(00221, 00000)
00224:   Return
00225: PushVar(00000)
00226: Rec
00227:   Return
00228: PushFn(00225, 00000)
00229:   Return
00230: PushVar(00000)
00231:   Return
00232: PushFn(00230, 00000)
00233:   Return
00234: PushVar(00002)
00235: PushVar(00001)
00236: PushVar(00000)
00237: Swap(00003)
00238: Pop
00239: Apply
00240: Apply
00241:   Return
00242: PushFn(00234, 00002)
00243:   Return
00244: PushFn(00242, 00001)
00245:   Return
00246: PushVar(00000)
00247:   Return
00248: PushFn(00246, 00000)
00249:   Return
00250: PushVar(00004)
00251: PushVar(00003)
00252: Swap(00002)
00253: Apply
00254: PushVar(00001)
00255: Swap(00002)
00256: Apply
00257: PushVar(00003)
00258: PushVar(00000)
00259: Swap(00002)
00260: Apply
00261: Swap(00002)
00262: Apply
00263:   Return
00264: PushFn(00250, 00004)
00265:   Return
00266: PushVar(00001)
00267:   Return
00268: PushFn(00244, 00000)
00269: PushVar(00000)
00270: Swap(00002)
00271: Apply
00272: PushFn(00248, 00000)
00273: PushString("")
00274: PushString(""xs"")
00275: Swap(00002)
00276: Apply
00277: PushString(""x"")
00278: Swap(00002)
00279: Apply
00280: Swap(00002)
00281: Apply
00282: PushFn(00264, 00003)
00283: Swap(00002)
00284: Apply
00285: Swap(00002)
00286: Apply
00287: PushFn(00266, 00001)
00288: Swap(00002)
00289: Apply
00290:   Return
00291: PushFn(00268, 00002)
00292:   Return
00293: PushFn(00232, 00000)
00294: PushString("")
00295: PushString(""f"")
00296: Swap(00002)
00297: Apply
00298: PushString(""xs"")
00299: Swap(00002)
00300: Apply
00301: Swap(00002)
00302: Apply
00303: PushFn(00291, 00001)
00304: Swap(00002)
00305: Apply
00306:   Return
00307: PushVar(00000)
00308: PushVar(00001)
00309: Swap(00002)
00310: Apply
00311:   Return
00312: PushFn(00307, 00001)
00313:   Return
00314: PushFn(00312, 00000)
00315:   Return
00316: PushVar(00000)
00317: Rec
00318:   Return
00319: PushFn(00316, 00000)
00320:   Return
00321: PushVar(00000)
00322:   Return
00323: PushFn(00321, 00000)
00324:   Return
00325: PushVar(00002)
00326: PushVar(00001)
00327: PushVar(00000)
00328: Swap(00003)
00329: Pop
00330: Apply
00331: Apply
00332:   Return
00333: PushFn(00325, 00002)
00334:   Return
00335: PushFn(00333, 00001)
00336:   Return
00337: PushVar(00000)
00338:   Return
00339: PushFn(00337, 00000)
00340:   Return
00341: PushVar(00002)
00342: PushVar(00001)
00343: PushVar(00000)
00344: Swap(00003)
00345: Pop
00346: Apply
00347: Apply
00348:   Return
00349: PushFn(00341, 00002)
00350:   Return
00351: PushFn(00349, 00001)
00352:   Return
00353: PushVar(00000)
00354:   Return
00355: PushFn(00353, 00000)
00356:   Return
00357: PushVar(00000)
00358: PushVar(00001)
00359: Swap(00002)
00360: Apply
00361:   Return
00362: PushFn(00357, 00001)
00363:   Return
00364: PushFn(00362, 00000)
00365:   Return
00366: PushVar(00003)
00367: PushVar(00002)
00368: PushVar(00001)
00369: PushVar(00000)
00370: Swap(00004)
00371: If
00372: Apply
00373:   Return
00374: PushFn(00366, 00003)
00375:   Return
00376: PushFn(00374, 00002)
00377:   Return
00378: PushFn(00376, 00001)
00379:   Return
00380: PushString("Nil")
00381:   Return
00382: PushVar(00001)
00383: PushString("")
00384: PushVar(00004)
00385: Swap(00002)
00386: Apply
00387: PushVar(00002)
00388: Swap(00002)
00389: Apply
00390: Swap(00002)
00391: Apply
00392:   Return
00393: PushFn(00378, 00000)
00394: PushVar(00000)
00395: Swap(00002)
00396: Apply
00397: PushString("Nil")
00398: Swap(00002)
00399: Apply
00400: PushFn(00380, 00000)
00401: Swap(00002)
00402: Apply
00403: PushFn(00382, 00004)
00404: Swap(00002)
00405: Apply
00406:   Return
00407: PushFn(00364, 00000)
00408: PushString(""zipped"")
00409: Swap(00002)
00410: Apply
00411: PushVar(00006)
00412: PushVar(00003)
00413: Swap(00002)
00414: Apply
00415: PushVar(00001)
00416: Swap(00002)
00417: Apply
00418: Swap(00002)
00419: Apply
00420: PushFn(00393, 00003)
00421: Swap(00002)
00422: Apply
00423:   Return
00424: PushFn(00407, 00006)
00425:   Return
00426: PushString("Nil")
00427:   Return
00428: PushFn(00351, 00000)
00429: PushVar(00002)
00430: Swap(00002)
00431: Apply
00432: PushFn(00355, 00000)
00433: PushString("")
00434: PushString(""ys"")
00435: Swap(00002)
00436: Apply
00437: PushString(""y"")
00438: Swap(00002)
00439: Apply
00440: Swap(00002)
00441: Apply
00442: PushFn(00424, 00005)
00443: Swap(00002)
00444: Apply
00445: Swap(00002)
00446: Apply
00447: PushFn(00426, 00000)
00448: Swap(00002)
00449: Apply
00450:   Return
00451: PushFn(00428, 00004)
00452:   Return
00453: PushVar(00002)
00454: PushVar(00001)
00455: PushVar(00000)
00456: Swap(00003)
00457: Pop
00458: Apply
00459: Apply
00460:   Return
00461: PushFn(00453, 00002)
00462:   Return
00463: PushFn(00461, 00001)
00464:   Return
00465: PushVar(00000)
00466:   Return
00467: PushFn(00465, 00000)
00468:   Return
00469: PushString("Nil")
00470:   Return
00471: PushFn(00469, 00000)
00472:   Return
00473: PushVar(00003)
00474: PushVar(00002)
00475: PushVar(00001)
00476: PushVar(00000)
00477: Swap(00004)
00478: If
00479: Apply
00480:   Return
00481: PushFn(00473, 00003)
00482:   Return
00483: PushFn(00481, 00002)
00484:   Return
00485: PushFn(00483, 00001)
00486:   Return
00487: PushVar(00004)
00488:   Return
00489: PushString("Nil")
00490:   Return
00491: PushFn(00485, 00000)
00492: PushVar(00003)
00493: Swap(00002)
00494: Apply
00495: PushVar(00002)
00496: Swap(00002)
00497: Apply
00498: PushFn(00487, 00004)
00499: Swap(00002)
00500: Apply
00501: PushFn(00489, 00000)
00502: Swap(00002)
00503: Apply
00504:   Return
00505: PushFn(00463, 00000)
00506: PushVar(00001)
00507: Swap(00002)
00508: Apply
00509: PushFn(00467, 00000)
00510: PushString("")
00511: PushString(""ys"")
00512: Swap(00002)
00513: Apply
00514: PushString(""y"")
00515: Swap(00002)
00516: Apply
00517: Swap(00002)
00518: Apply
00519: PushFn(00471, 00000)
00520: Swap(00002)
00521: Apply
00522: Swap(00002)
00523: Apply
00524: PushFn(00491, 00003)
00525: Swap(00002)
00526: Apply
00527:   Return
00528: PushFn(00335, 00000)
00529: PushVar(00001)
00530: Swap(00002)
00531: Apply
00532: PushFn(00339, 00000)
00533: PushString("")
00534: PushString(""xs"")
00535: Swap(00002)
00536: Apply
00537: PushString(""x"")
00538: Swap(00002)
00539: Apply
00540: Swap(00002)
00541: Apply
00542: PushFn(00451, 00003)
00543: Swap(00002)
00544: Apply
00545: Swap(00002)
00546: Apply
00547: PushFn(00505, 00002)
00548: Swap(00002)
00549: Apply
00550:   Return
00551: PushFn(00528, 00002)
00552:   Return
00553: PushFn(00323, 00000)
00554: PushString("")
00555: PushString(""xs"")
00556: Swap(00002)
00557: Apply
00558: PushString(""ys"")
00559: Swap(00002)
00560: Apply
00561: Swap(00002)
00562: Apply
00563: PushFn(00551, 00001)
00564: Swap(00002)
00565: Apply
00566:   Return
00567: PushVar(00000)
00568: PushVar(00001)
00569: Swap(00002)
00570: Apply
00571:   Return
00572: PushFn(00567, 00001)
00573:   Return
00574: PushFn(00572, 00000)
00575:   Return
00576: PushVar(00000)
00577: Rec
00578:   Return
00579: PushFn(00576, 00000)
00580:   Return
00581: PushVar(00000)
00582:   Return
00583: PushFn(00581, 00000)
00584:   Return
00585: PushVar(00002)
00586: PushVar(00001)
00587: PushVar(00000)
00588: Swap(00003)
00589: Pop
00590: Apply
00591: Apply
00592:   Return
00593: PushFn(00585, 00002)
00594:   Return
00595: PushFn(00593, 00001)
00596:   Return
00597: PushVar(00000)
00598:   Return
00599: PushFn(00597, 00000)
00600:   Return
00601: PushVar(00002)
00602: PushVar(00001)
00603: PushVar(00000)
00604: Swap(00003)
00605: Pop
00606: Apply
00607: Apply
00608:   Return
00609: PushFn(00601, 00002)
00610:   Return
00611: PushFn(00609, 00001)
00612:   Return
00613: PushVar(00000)
00614:   Return
00615: PushFn(00613, 00000)
00616:   Return
00617: PushVar(00003)
00618: PushVar(00002)
00619: PushVar(00001)
00620: PushVar(00000)
00621: Swap(00004)
00622: If
00623: Apply
00624:   Return
00625: PushFn(00617, 00003)
00626:   Return
00627: PushFn(00625, 00002)
00628:   Return
00629: PushFn(00627, 00001)
00630:   Return
00631: PushVar(00007)
00632: PushVar(00004)
00633: Swap(00002)
00634: Apply
00635: PushVar(00002)
00636: Swap(00002)
00637: Apply
00638:   Return
00639: PushString("False")
00640:   Return
00641: PushFn(00629, 00000)
00642: PushVar(00006)
00643: PushVar(00002)
00644: Swap(00002)
00645: Apply
00646: PushVar(00000)
00647: Swap(00002)
00648: Apply
00649: Swap(00002)
00650: Apply
00651: PushString("True")
00652: Swap(00002)
00653: Apply
00654: PushFn(00631, 00007)
00655: Swap(00002)
00656: Apply
00657: PushFn(00639, 00000)
00658: Swap(00002)
00659: Apply
00660:   Return
00661: PushFn(00641, 00006)
00662:   Return
00663: PushString("False")
00664:   Return
00665: PushFn(00611, 00000)
00666: PushVar(00002)
00667: Swap(00002)
00668: Apply
00669: PushFn(00615, 00000)
00670: PushString("")
00671: PushString(""ys"")
00672: Swap(00002)
00673: Apply
00674: PushString(""y"")
00675: Swap(00002)
00676: Apply
00677: Swap(00002)
00678: Apply
00679: PushFn(00661, 00005)
00680: Swap(00002)
00681: Apply
00682: Swap(00002)
00683: Apply
00684: PushFn(00663, 00000)
00685: Swap(00002)
00686: Apply
00687:   Return
00688: PushFn(00665, 00004)
00689:   Return
00690: PushVar(00003)
00691: PushVar(00002)
00692: PushVar(00001)
00693: PushVar(00000)
00694: Swap(00004)
00695: If
00696: Apply
00697:   Return
00698: PushFn(00690, 00003)
00699:   Return
00700: PushFn(00698, 00002)
00701:   Return
00702: PushFn(00700, 00001)
00703:   Return
00704: PushString("True")
00705:   Return
00706: PushString("False")
00707:   Return
00708: PushFn(00702, 00000)
00709: PushVar(00002)
00710: Swap(00002)
00711: Apply
00712: PushVar(00001)
00713: Swap(00002)
00714: Apply
00715: PushFn(00704, 00000)
00716: Swap(00002)
00717: Apply
00718: PushFn(00706, 00000)
00719: Swap(00002)
00720: Apply
00721:   Return
00722: PushFn(00595, 00000)
00723: PushVar(00001)
00724: Swap(00002)
00725: Apply
00726: PushFn(00599, 00000)
00727: PushString("")
00728: PushString(""xs"")
00729: Swap(00002)
00730: Apply
00731: PushString(""x"")
00732: Swap(00002)
00733: Apply
00734: Swap(00002)
00735: Apply
00736: PushFn(00688, 00003)
00737: Swap(00002)
00738: Apply
00739: Swap(00002)
00740: Apply
00741: PushFn(00708, 00002)
00742: Swap(00002)
00743: Apply
00744:   Return
00745: PushFn(00722, 00002)
00746:   Return
00747: PushFn(00583, 00000)
00748: PushString("")
00749: PushString(""a"")
00750: Swap(00002)
00751: Apply
00752: PushString(""b"")
00753: Swap(00002)
00754: Apply
00755: Swap(00002)
00756: Apply
00757: PushFn(00745, 00001)
00758: Swap(00002)
00759: Apply
00760:   Return
00761: PushVar(00000)
00762: PushVar(00001)
00763: Swap(00002)
00764: Apply
00765:   Return
00766: PushFn(00761, 00001)
00767:   Return
00768: PushFn(00766, 00000)
00769:   Return
00770: PushVar(00000)
00771:   Return
00772: PushFn(00770, 00000)
00773:   Return
00774: PushVar(00002)
00775: PushVar(00001)
00776: PushVar(00000)
00777: Swap(00003)
00778: Pop
00779: Apply
00780: Apply
00781:   Return
00782: PushFn(00774, 00002)
00783:   Return
00784: PushFn(00782, 00001)
00785:   Return
00786: PushVar(00000)
00787:   Return
00788: PushFn(00786, 00000)
00789:   Return
00790: PushVar(00003)
00791: PushVar(00000)
00792: Swap(00002)
00793: Apply
00794:   Return
00795: PushFn(00790, 00003)
00796:   Return
00797: PushVar(00002)
00798:   Return
00799: PushFn(00784, 00000)
00800: PushVar(00000)
00801: Swap(00002)
00802: Apply
00803: PushFn(00788, 00000)
00804: PushString("")
00805: PushString(""xs"")
00806: Swap(00002)
00807: Apply
00808: PushString(""x"")
00809: Swap(00002)
00810: Apply
00811: Swap(00002)
00812: Apply
00813: PushFn(00795, 00002)
00814: Swap(00002)
00815: Apply
00816: Swap(00002)
00817: Apply
00818: PushFn(00797, 00002)
00819: Swap(00002)
00820: Apply
00821:   Return
00822: PushFn(00799, 00001)
00823:   Return
00824: PushVar(00000)
00825: PushVar(00001)
00826: Swap(00002)
00827: Apply
00828:   Return
00829: PushFn(00824, 00001)
00830:   Return
00831: PushFn(00829, 00000)
00832:   Return
00833: PushVar(00000)
00834:   Return
00835: PushFn(00833, 00000)
00836:   Return
00837: PushVar(00002)
00838: PushVar(00001)
00839: PushVar(00000)
00840: Swap(00003)
00841: Pop
00842: Apply
00843: Apply
00844:   Return
00845: PushFn(00837, 00002)
00846:   Return
00847: PushFn(00845, 00001)
00848:   Return
00849: PushVar(00000)
00850:   Return
00851: PushFn(00849, 00000)
00852:   Return
00853: PushVar(00000)
00854:   Return
00855: PushFn(00853, 00000)
00856:   Return
00857: PushVar(00001)
00858:   Return
00859: PushFn(00847, 00000)
00860: PushVar(00000)
00861: Swap(00002)
00862: Apply
00863: PushFn(00851, 00000)
00864: PushString("")
00865: PushString(""_"")
00866: Swap(00002)
00867: Apply
00868: PushString(""x"")
00869: Swap(00002)
00870: Apply
00871: Swap(00002)
00872: Apply
00873: PushFn(00855, 00000)
00874: Swap(00002)
00875: Apply
00876: Swap(00002)
00877: Apply
00878: PushFn(00857, 00001)
00879: Swap(00002)
00880: Apply
00881:   Return
00882: PushVar(00000)
00883: PushVar(00001)
00884: Swap(00002)
00885: Apply
00886:   Return
00887: PushFn(00882, 00001)
00888:   Return
00889: PushFn(00887, 00000)
00890:   Return
00891: PushVar(00000)
00892:   Return
00893: PushFn(00891, 00000)
00894:   Return
00895: PushVar(00002)
00896: PushVar(00001)
00897: PushVar(00000)
00898: Swap(00003)
00899: Pop
00900: Apply
00901: Apply
00902:   Return
00903: PushFn(00895, 00002)
00904:   Return
00905: PushFn(00903, 00001)
00906:   Return
00907: PushVar(00000)
00908:   Return
00909: PushFn(00907, 00000)
00910:   Return
00911: PushVar(00003)
00912: PushVar(00001)
00913: Swap(00002)
00914: Apply
00915:   Return
00916: PushFn(00911, 00003)
00917:   Return
00918: PushVar(00001)
00919:   Return
00920: PushFn(00905, 00000)
00921: PushVar(00000)
00922: Swap(00002)
00923: Apply
00924: PushFn(00909, 00000)
00925: PushString("")
00926: PushString(""xs"")
00927: Swap(00002)
00928: Apply
00929: PushString(""_"")
00930: Swap(00002)
00931: Apply
00932: Swap(00002)
00933: Apply
00934: PushFn(00916, 00002)
00935: Swap(00002)
00936: Apply
00937: Swap(00002)
00938: Apply
00939: PushFn(00918, 00001)
00940: Swap(00002)
00941: Apply
00942:   Return
00943: PushVar(00000)
00944: PushVar(00001)
00945: Swap(00002)
00946: Apply
00947:   Return
00948: PushFn(00943, 00001)
00949:   Return
00950: PushFn(00948, 00000)
00951:   Return
00952: PushVar(00000)
00953:   Return
00954: PushFn(00952, 00000)
00955:   Return
00956: PushVar(00000)
00957: PushVar(00001)
00958: Swap(00002)
00959: Apply
00960:   Return
00961: PushFn(00956, 00001)
00962:   Return
00963: PushFn(00961, 00000)
00964:   Return
00965: PushVar(00000)
00966: PushVar(00001)
00967: Swap(00002)
00968: Apply
00969:   Return
00970: PushFn(00965, 00001)
00971:   Return
00972: PushFn(00970, 00000)
00973:   Return
00974: PushVar(00004)
00975: PushVar(00003)
00976: Swap(00002)
00977: Apply
00978:   Return
00979: PushVar(00000)
00980:   Return
00981: PushFn(00979, 00000)
00982:   Return
00983: PushVar(00000)
00984: PushVar(00001)
00985: Swap(00002)
00986: Apply
00987:   Return
00988: PushFn(00983, 00001)
00989:   Return
00990: PushFn(00988, 00000)
00991:   Return
00992: PushVar(00000)
00993: PushVar(00001)
00994: Swap(00002)
00995: Apply
00996:   Return
00997: PushFn(00992, 00001)
00998:   Return
00999: PushFn(00997, 00000)
01000:   Return
01001: PushVar(00003)
01002: PushVar(00002)
01003: PushVar(00001)
01004: PushVar(00000)
01005: Swap(00004)
01006: If
01007: Apply
01008:   Return
01009: PushFn(01001, 00003)
01010:   Return
01011: PushFn(01009, 00002)
01012:   Return
01013: PushFn(01011, 00001)
01014:   Return
01015: PushVar(00003)
01016: PushVar(00002)
01017: PushVar(00001)
01018: PushVar(00000)
01019: Swap(00004)
01020: If
01021: Apply
01022:   Return
01023: PushFn(01015, 00003)
01024:   Return
01025: PushFn(01023, 00002)
01026:   Return
01027: PushFn(01025, 00001)
01028:   Return
01029: PushEffect("no-match")
01030: PushString("")
01031: PushString("")
01032: PushVar(00003)
01033: Swap(00002)
01034: Apply
01035: PushVar(00002)
01036: Swap(00002)
01037: Apply
01038: Swap(00002)
01039: Apply
01040: PushString("")
01041: PushVar(00007)
01042: Swap(00002)
01043: Apply
01044: PushVar(00006)
01045: Swap(00002)
01046: Apply
01047: Swap(00002)
01048: Apply
01049: Swap(00002)
01050: Apply
01051:   Return
01052: PushString("Nil")
01053:   Return
01054: PushFn(01027, 00000)
01055: PushVar(00012)
01056: PushVar(00005)
01057: Swap(00002)
01058: Apply
01059: PushVar(00001)
01060: Swap(00002)
01061: Apply
01062: Swap(00002)
01063: Apply
01064: PushString("False")
01065: Swap(00002)
01066: Apply
01067: PushFn(01029, 00007)
01068: Swap(00002)
01069: Apply
01070: PushFn(01052, 00000)
01071: Swap(00002)
01072: Apply
01073:   Return
01074: PushString("Nil")
01075:   Return
01076: PushFn(01013, 00000)
01077: PushVar(00005)
01078: Swap(00002)
01079: Apply
01080: PushVar(00001)
01081: Swap(00002)
01082: Apply
01083: PushFn(01054, 00012)
01084: Swap(00002)
01085: Apply
01086: PushFn(01074, 00000)
01087: Swap(00002)
01088: Apply
01089:   Return
01090: PushFn(00999, 00000)
01091: PushString(""val2"")
01092: Swap(00002)
01093: Apply
01094: PushVar(00008)
01095: PushVar(00001)
01096: Swap(00002)
01097: Apply
01098: Swap(00002)
01099: Apply
01100: PushFn(01076, 00011)
01101: Swap(00002)
01102: Apply
01103:   Return
01104: PushFn(00990, 00000)
01105: PushString(""var2"")
01106: Swap(00002)
01107: Apply
01108: PushVar(00006)
01109: PushVar(00000)
01110: Swap(00002)
01111: Apply
01112: Swap(00002)
01113: Apply
01114: PushFn(01090, 00010)
01115: Swap(00002)
01116: Apply
01117:   Return
01118: PushFn(01104, 00009)
01119:   Return
01120: PushFn(00974, 00004)
01121: PushVar(00012)
01122: PushFn(00981, 00000)
01123: PushString("")
01124: PushString(""_"")
01125: Swap(00002)
01126: Apply
01127: PushString(""b"")
01128: Swap(00002)
01129: Apply
01130: Swap(00002)
01131: Apply
01132: PushFn(01118, 00008)
01133: Swap(00002)
01134: Apply
01135: Swap(00002)
01136: Apply
01137: PushString("Nil")
01138: Swap(00002)
01139: Apply
01140: PushVar(00003)
01141: Swap(00002)
01142: Apply
01143: Swap(00002)
01144: Apply
01145:   Return
01146: PushFn(00972, 00000)
01147: PushString(""val1"")
01148: Swap(00002)
01149: Apply
01150: PushVar(00004)
01151: PushVar(00001)
01152: Swap(00002)
01153: Apply
01154: Swap(00002)
01155: Apply
01156: PushFn(01120, 00012)
01157: Swap(00002)
01158: Apply
01159:   Return
01160: PushFn(00963, 00000)
01161: PushString(""var1"")
01162: Swap(00002)
01163: Apply
01164: PushVar(00002)
01165: PushVar(00000)
01166: Swap(00002)
01167: Apply
01168: Swap(00002)
01169: Apply
01170: PushFn(01146, 00011)
01171: Swap(00002)
01172: Apply
01173:   Return
01174: PushFn(01160, 00010)
01175:   Return
01176: PushVar(00000)
01177: PushVar(00001)
01178: Swap(00002)
01179: Apply
01180:   Return
01181: PushFn(01176, 00001)
01182:   Return
01183: PushFn(01181, 00000)
01184:   Return
01185: PushVar(00000)
01186: Rec
01187:   Return
01188: PushFn(01185, 00000)
01189:   Return
01190: PushVar(00000)
01191:   Return
01192: PushFn(01190, 00000)
01193:   Return
01194: PushVar(00002)
01195: PushVar(00001)
01196: PushVar(00000)
01197: Swap(00003)
01198: Pop
01199: Apply
01200: Apply
01201:   Return
01202: PushFn(01194, 00002)
01203:   Return
01204: PushFn(01202, 00001)
01205:   Return
01206: PushVar(00000)
01207:   Return
01208: PushFn(01206, 00000)
01209:   Return
01210: PushVar(00003)
01211: PushVar(00002)
01212: PushVar(00001)
01213: PushVar(00000)
01214: Swap(00004)
01215: If
01216: Apply
01217:   Return
01218: PushFn(01210, 00003)
01219:   Return
01220: PushFn(01218, 00002)
01221:   Return
01222: PushFn(01220, 00001)
01223:   Return
01224: PushString("Bindings")
01225: PushString("")
01226: PushVar(00001)
01227: Swap(00002)
01228: Apply
01229: PushVar(00003)
01230: Swap(00002)
01231: Apply
01232: Swap(00002)
01233: Apply
01234:   Return
01235: PushVar(00003)
01236: PushVar(00002)
01237: PushVar(00001)
01238: PushVar(00000)
01239: Swap(00004)
01240: If
01241: Apply
01242:   Return
01243: PushFn(01235, 00003)
01244:   Return
01245: PushFn(01243, 00002)
01246:   Return
01247: PushFn(01245, 00001)
01248:   Return
01249: PushVar(00000)
01250: PushVar(00001)
01251: Swap(00002)
01252: Apply
01253:   Return
01254: PushFn(01249, 00001)
01255:   Return
01256: PushFn(01254, 00000)
01257:   Return
01258: PushVar(00008)
01259: PushVar(00000)
01260: Swap(00002)
01261: Apply
01262:   Return
01263: PushFn(01256, 00000)
01264: PushString(""unified"")
01265: Swap(00002)
01266: Apply
01267: PushVar(00010)
01268: PushString("Bindings")
01269: Swap(00002)
01270: Apply
01271: PushVar(00013)
01272: PushVar(00014)
01273: PushVar(00006)
01274: Swap(00002)
01275: Apply
01276: Swap(00002)
01277: Apply
01278: PushVar(00012)
01279: PushVar(00002)
01280: Swap(00002)
01281: Apply
01282: PushVar(00004)
01283: Swap(00002)
01284: Apply
01285: Swap(00002)
01286: Apply
01287: Swap(00002)
01288: Apply
01289: Swap(00002)
01290: Apply
01291: PushFn(01258, 00008)
01292: Swap(00002)
01293: Apply
01294:   Return
01295: PushVar(00003)
01296: PushVar(00002)
01297: PushVar(00001)
01298: PushVar(00000)
01299: Swap(00004)
01300: If
01301: Apply
01302:   Return
01303: PushFn(01295, 00003)
01304:   Return
01305: PushFn(01303, 00002)
01306:   Return
01307: PushFn(01305, 00001)
01308:   Return
01309: PushString("Nil")
01310:   Return
01311: PushEffect("no-match")
01312: PushString("")
01313: PushVar(00003)
01314: Swap(00002)
01315: Apply
01316: PushVar(00005)
01317: Swap(00002)
01318: Apply
01319: Swap(00002)
01320: Apply
01321:   Return
01322: PushFn(01307, 00000)
01323: PushVar(00011)
01324: PushVar(00002)
01325: Swap(00002)
01326: Apply
01327: PushVar(00004)
01328: Swap(00002)
01329: Apply
01330: Swap(00002)
01331: Apply
01332: PushString("True")
01333: Swap(00002)
01334: Apply
01335: PushFn(01309, 00000)
01336: Swap(00002)
01337: Apply
01338: PushFn(01311, 00005)
01339: Swap(00002)
01340: Apply
01341:   Return
01342: PushFn(01247, 00000)
01343: PushVar(00002)
01344: Swap(00002)
01345: Apply
01346: PushString("Compound")
01347: Swap(00002)
01348: Apply
01349: PushFn(01263, 00014)
01350: Swap(00002)
01351: Apply
01352: PushFn(01322, 00011)
01353: Swap(00002)
01354: Apply
01355:   Return
01356: PushFn(01222, 00000)
01357: PushVar(00001)
01358: Swap(00002)
01359: Apply
01360: PushString("Binding")
01361: Swap(00002)
01362: Apply
01363: PushFn(01224, 00003)
01364: Swap(00002)
01365: Apply
01366: PushFn(01342, 00013)
01367: Swap(00002)
01368: Apply
01369:   Return
01370: PushFn(01356, 00012)
01371:   Return
01372: PushEffect("invalid")
01373: PushVar(00002)
01374: Swap(00002)
01375: Apply
01376:   Return
01377: PushFn(01204, 00000)
01378: PushVar(00001)
01379: Swap(00002)
01380: Apply
01381: PushFn(01208, 00000)
01382: PushString("")
01383: PushString(""type"")
01384: Swap(00002)
01385: Apply
01386: PushString(""pattern"")
01387: Swap(00002)
01388: Apply
01389: Swap(00002)
01390: Apply
01391: PushFn(01370, 00011)
01392: Swap(00002)
01393: Apply
01394: Swap(00002)
01395: Apply
01396: PushFn(01372, 00002)
01397: Swap(00002)
01398: Apply
01399:   Return
01400: PushFn(01377, 00010)
01401:   Return
01402: PushFn(01192, 00000)
01403: PushString("")
01404: PushString(""pattern"")
01405: Swap(00002)
01406: Apply
01407: PushString(""value"")
01408: Swap(00002)
01409: Apply
01410: Swap(00002)
01411: Apply
01412: PushFn(01400, 00009)
01413: Swap(00002)
01414: Apply
01415:   Return
01416: PushVar(00000)
01417: PushVar(00001)
01418: Swap(00002)
01419: Apply
01420:   Return
01421: PushFn(01416, 00001)
01422:   Return
01423: PushFn(01421, 00000)
01424:   Return
01425: PushVar(00000)
01426:   Return
01427: PushFn(01425, 00000)
01428:   Return
01429: PushVar(00000)
01430: Apply
01431: Apply
01432:   Return
01433: PushVar(00002)
01434: PushVar(00001)
01435: PushFn(01429, 00000)
01436: Swap(00003)
01437: Try
01438: Apply
01439: Unwind
01440:   Return
01441: PushFn(01433, 00002)
01442:   Return
01443: PushFn(01441, 00001)
01444:   Return
01445: PushVar(00000)
01446: PushVar(00001)
01447: Swap(00002)
01448: Apply
01449:   Return
01450: PushFn(01445, 00001)
01451:   Return
01452: PushFn(01450, 00000)
01453:   Return
01454: PushVar(00000)
01455: PushVar(00001)
01456: Swap(00002)
01457: Apply
01458:   Return
01459: PushFn(01454, 00001)
01460:   Return
01461: PushFn(01459, 00000)
01462:   Return
01463: PushVar(00003)
01464: PushVar(00002)
01465: PushVar(00001)
01466: PushVar(00000)
01467: Swap(00004)
01468: If
01469: Apply
01470:   Return
01471: PushFn(01463, 00003)
01472:   Return
01473: PushFn(01471, 00002)
01474:   Return
01475: PushFn(01473, 00001)
01476:   Return
01477: PushVar(00005)
01478: PushString("")
01479: Swap(00002)
01480: Apply
01481:   Return
01482: PushVar(00015)
01483: PushVar(00005)
01484: Swap(00002)
01485: Apply
01486: PushVar(00001)
01487: Swap(00002)
01488: Apply
01489:   Return
01490: PushFn(01475, 00000)
01491: PushVar(00001)
01492: Swap(00002)
01493: Apply
01494: PushString("Nil")
01495: Swap(00002)
01496: Apply
01497: PushFn(01477, 00005)
01498: Swap(00002)
01499: Apply
01500: PushFn(01482, 00015)
01501: Swap(00002)
01502: Apply
01503:   Return
01504: PushFn(01461, 00000)
01505: PushString(""args"")
01506: Swap(00002)
01507: Apply
01508: PushVar(00012)
01509: PushVar(00008)
01510: Swap(00002)
01511: Apply
01512: PushVar(00000)
01513: Swap(00002)
01514: Apply
01515: Swap(00002)
01516: Apply
01517: PushFn(01490, 00014)
01518: Swap(00002)
01519: Apply
01520:   Return
01521: PushFn(01452, 00000)
01522: PushString(""unified"")
01523: Swap(00002)
01524: Apply
01525: PushVar(00004)
01526: PushVar(00003)
01527: Swap(00002)
01528: Apply
01529: PushVar(00001)
01530: Swap(00002)
01531: Apply
01532: Swap(00002)
01533: Apply
01534: PushFn(01504, 00013)
01535: Swap(00002)
01536: Apply
01537:   Return
01538: PushVar(00000)
01539:   Return
01540: PushFn(01538, 00000)
01541:   Return
01542: PushEffect("no-match")
01543: PushVar(00000)
01544: Swap(00002)
01545: Apply
01546:   Return
01547: PushFn(01542, 00000)
01548:   Return
01549: PushFn(01443, 00000)
01550: PushFn(01521, 00012)
01551: Swap(00002)
01552: Apply
01553: PushEffect("no-match")
01554: Swap(00002)
01555: Apply
01556: PushFn(01540, 00000)
01557: PushString("")
01558: PushString(""_"")
01559: Swap(00002)
01560: Apply
01561: PushString(""arg"")
01562: Swap(00002)
01563: Apply
01564: Swap(00002)
01565: Apply
01566: PushFn(01547, 00000)
01567: Swap(00002)
01568: Apply
01569: Swap(00002)
01570: Apply
01571:   Return
01572: PushFn(01549, 00011)
01573:   Return
01574: PushFn(01572, 00010)
01575:   Return
01576: PushVar(00000)
01577: Apply
01578: Apply
01579:   Return
01580: PushVar(00002)
01581: PushVar(00001)
01582: PushFn(01576, 00000)
01583: Swap(00003)
01584: Try
01585: Apply
01586: Unwind
01587:   Return
01588: PushFn(01580, 00002)
01589:   Return
01590: PushFn(01588, 00001)
01591:   Return
01592: PushString("Bar")
01593:   Return
01594: PushVar(00000)
01595:   Return
01596: PushString("Bar")
01597:   Return
01598: PushString("Foo")
01599:   Return
01600: PushVar(00000)
01601:   Return
01602: PushFn(01600, 00000)
01603:   Return
01604: PushVar(00000)
01605:   Return
01606: PushVar(00000)
01607:   Return
01608: PushFn(01606, 00000)
01609:   Return
01610: PushVar(00000)
01611:   Return
01612: PushFn(01610, 00000)
01613:   Return
01614: PushString("List")
01615: PushVar(00001)
01616: PushString("Value")
01617: PushString("Foo")
01618: Swap(00002)
01619: Apply
01620: Swap(00002)
01621: Apply
01622: PushFn(01592, 00000)
01623: Swap(00002)
01624: Apply
01625: PushString("Foo")
01626: Swap(00002)
01627: Apply
01628: Swap(00002)
01629: Apply
01630: PushVar(00001)
01631: PushString("Binding")
01632: PushString(""x"")
01633: Swap(00002)
01634: Apply
01635: Swap(00002)
01636: Apply
01637: PushFn(01594, 00000)
01638: Swap(00002)
01639: Apply
01640: PushString("Foo")
01641: Swap(00002)
01642: Apply
01643: Swap(00002)
01644: Apply
01645: PushVar(00001)
01646: PushString("Binding")
01647: PushString(""x"")
01648: Swap(00002)
01649: Apply
01650: Swap(00002)
01651: Apply
01652: PushFn(01596, 00000)
01653: Swap(00002)
01654: Apply
01655: PushString("Foo")
01656: Swap(00002)
01657: Apply
01658: Swap(00002)
01659: Apply
01660: PushVar(00001)
01661: PushString("Value")
01662: PushString("Pair")
01663: PushString("Foo")
01664: Swap(00002)
01665: Apply
01666: PushString("Bar")
01667: Swap(00002)
01668: Apply
01669: Swap(00002)
01670: Apply
01671: Swap(00002)
01672: Apply
01673: PushFn(01598, 00000)
01674: Swap(00002)
01675: Apply
01676: PushString("Pair")
01677: PushString("Foo")
01678: Swap(00002)
01679: Apply
01680: PushString("Bar")
01681: Swap(00002)
01682: Apply
01683: Swap(00002)
01684: Apply
01685: Swap(00002)
01686: Apply
01687: PushVar(00001)
01688: PushString("Compound")
01689: PushString("Pair")
01690: PushString("Binding")
01691: PushString(""x"")
01692: Swap(00002)
01693: Apply
01694: Swap(00002)
01695: Apply
01696: PushString("Binding")
01697: PushString(""y"")
01698: Swap(00002)
01699: Apply
01700: Swap(00002)
01701: Apply
01702: Swap(00002)
01703: Apply
01704: Swap(00002)
01705: Apply
01706: PushFn(01602, 00000)
01707: Swap(00002)
01708: Apply
01709: PushString("Pair")
01710: PushString("Foo")
01711: Swap(00002)
01712: Apply
01713: PushString("Bar")
01714: Swap(00002)
01715: Apply
01716: Swap(00002)
01717: Apply
01718: Swap(00002)
01719: Apply
01720: PushVar(00001)
01721: PushString("Compound")
01722: PushString("Pair")
01723: PushString("Binding")
01724: PushString(""x"")
01725: Swap(00002)
01726: Apply
01727: Swap(00002)
01728: Apply
01729: PushString("Value")
01730: PushString("Bar")
01731: Swap(00002)
01732: Apply
01733: Swap(00002)
01734: Apply
01735: Swap(00002)
01736: Apply
01737: Swap(00002)
01738: Apply
01739: PushFn(01604, 00000)
01740: Swap(00002)
01741: Apply
01742: PushString("Pair")
01743: PushString("Foo")
01744: Swap(00002)
01745: Apply
01746: PushString("Bar")
01747: Swap(00002)
01748: Apply
01749: Swap(00002)
01750: Apply
01751: Swap(00002)
01752: Apply
01753: PushVar(00001)
01754: PushString("Compound")
01755: PushString("Pair")
01756: PushString("Binding")
01757: PushString(""x"")
01758: Swap(00002)
01759: Apply
01760: Swap(00002)
01761: Apply
01762: PushString("Binding")
01763: PushString(""x"")
01764: Swap(00002)
01765: Apply
01766: Swap(00002)
01767: Apply
01768: Swap(00002)
01769: Apply
01770: Swap(00002)
01771: Apply
01772: PushFn(01608, 00000)
01773: Swap(00002)
01774: Apply
01775: PushString("Pair")
01776: PushString("Bar")
01777: Swap(00002)
01778: Apply
01779: PushString("Bar")
01780: Swap(00002)
01781: Apply
01782: Swap(00002)
01783: Apply
01784: Swap(00002)
01785: Apply
01786: PushVar(00001)
01787: PushString("Compound")
01788: PushString("Pair")
01789: PushString("Binding")
01790: PushString(""x"")
01791: Swap(00002)
01792: Apply
01793: Swap(00002)
01794: Apply
01795: PushString("Binding")
01796: PushString(""x"")
01797: Swap(00002)
01798: Apply
01799: Swap(00002)
01800: Apply
01801: Swap(00002)
01802: Apply
01803: Swap(00002)
01804: Apply
01805: PushFn(01612, 00000)
01806: Swap(00002)
01807: Apply
01808: PushString("Pair")
01809: PushString("Foo")
01810: Swap(00002)
01811: Apply
01812: PushString("Bar")
01813: Swap(00002)
01814: Apply
01815: Swap(00002)
01816: Apply
01817: Swap(00002)
01818: Apply
01819:   Return
01820: PushVar(00000)
01821:   Return
01822: PushFn(01820, 00000)
01823:   Return
01824: PushVar(00001)
01825: PushString("NoMatch")
01826: PushVar(00000)
01827: Swap(00002)
01828: Apply
01829: Swap(00002)
01830: Apply
01831:   Return
01832: PushFn(01824, 00001)
01833:   Return
01834: PushFn(01590, 00000)
01835: PushFn(01614, 00001)
01836: Swap(00002)
01837: Apply
01838: PushEffect("no-match")
01839: Swap(00002)
01840: Apply
01841: PushFn(01822, 00000)
01842: PushString("")
01843: PushString(""r"")
01844: Swap(00002)
01845: Apply
01846: PushString(""arg"")
01847: Swap(00002)
01848: Apply
01849: Swap(00002)
01850: Apply
01851: PushFn(01832, 00000)
01852: Swap(00002)
01853: Apply
01854: Swap(00002)
01855: Apply
01856:   Return
01857: PushFn(01423, 00000)
01858: PushString(""->"")
01859: Swap(00002)
01860: Apply
01861: PushFn(01427, 00000)
01862: PushString("")
01863: PushString(""pattern"")
01864: Swap(00002)
01865: Apply
01866: PushString(""body"")
01867: Swap(00002)
01868: Apply
01869: PushString(""value"")
01870: Swap(00002)
01871: Apply
01872: Swap(00002)
01873: Apply
01874: PushFn(01574, 00009)
01875: Swap(00002)
01876: Apply
01877: Swap(00002)
01878: Apply
01879: PushFn(01834, 00000)
01880: Swap(00002)
01881: Apply
01882:   Return
01883: PushFn(01183, 00000)
01884: PushString(""unify"")
01885: Swap(00002)
01886: Apply
01887: PushFn(01188, 00000)
01888: PushString(""unify"")
01889: Swap(00002)
01890: Apply
01891: PushFn(01402, 00008)
01892: Swap(00002)
01893: Apply
01894: Swap(00002)
01895: Apply
01896: PushFn(01857, 00008)
01897: Swap(00002)
01898: Apply
01899:   Return
01900: PushFn(00950, 00000)
01901: PushString(""join"")
01902: Swap(00002)
01903: Apply
01904: PushVar(00008)
01905: PushFn(00954, 00000)
01906: PushString("")
01907: PushString(""acc"")
01908: Swap(00002)
01909: Apply
01910: PushString(""binding"")
01911: Swap(00002)
01912: Apply
01913: Swap(00002)
01914: Apply
01915: PushFn(01174, 00009)
01916: Swap(00002)
01917: Apply
01918: Swap(00002)
01919: Apply
01920: PushString("Bindings")
01921: Swap(00002)
01922: Apply
01923: Swap(00002)
01924: Apply
01925: PushFn(01883, 00007)
01926: Swap(00002)
01927: Apply
01928:   Return
01929: PushFn(00889, 00000)
01930: PushString(""first"")
01931: Swap(00002)
01932: Apply
01933: PushFn(00893, 00000)
01934: PushString(""xs"")
01935: Swap(00002)
01936: Apply
01937: PushFn(00920, 00001)
01938: Swap(00002)
01939: Apply
01940: Swap(00002)
01941: Apply
01942: PushFn(01900, 00008)
01943: Swap(00002)
01944: Apply
01945:   Return
01946: PushFn(00831, 00000)
01947: PushString(""last"")
01948: Swap(00002)
01949: Apply
01950: PushFn(00835, 00000)
01951: PushString(""xs"")
01952: Swap(00002)
01953: Apply
01954: PushFn(00859, 00000)
01955: Swap(00002)
01956: Apply
01957: Swap(00002)
01958: Apply
01959: PushFn(01929, 00007)
01960: Swap(00002)
01961: Apply
01962:   Return
01963: PushFn(00768, 00000)
01964: PushString(""flatten"")
01965: Swap(00002)
01966: Apply
01967: PushVar(00005)
01968: PushFn(00772, 00000)
01969: PushString("")
01970: PushString(""acc"")
01971: Swap(00002)
01972: Apply
01973: PushString(""x"")
01974: Swap(00002)
01975: Apply
01976: Swap(00002)
01977: Apply
01978: PushFn(00822, 00000)
01979: Swap(00002)
01980: Apply
01981: Swap(00002)
01982: Apply
01983: Swap(00002)
01984: Apply
01985: PushFn(01946, 00006)
01986: Swap(00002)
01987: Apply
01988:   Return
01989: PushFn(00574, 00000)
01990: PushString(""=="")
01991: Swap(00002)
01992: Apply
01993: PushFn(00579, 00000)
01994: PushString(""=="")
01995: Swap(00002)
01996: Apply
01997: PushFn(00747, 00000)
01998: Swap(00002)
01999: Apply
02000: Swap(00002)
02001: Apply
02002: PushFn(01963, 00005)
02003: Swap(00002)
02004: Apply
02005:   Return
02006: PushFn(00314, 00000)
02007: PushString(""zip"")
02008: Swap(00002)
02009: Apply
02010: PushFn(00319, 00000)
02011: PushString(""zip"")
02012: Swap(00002)
02013: Apply
02014: PushFn(00553, 00000)
02015: Swap(00002)
02016: Apply
02017: Swap(00002)
02018: Apply
02019: PushFn(01989, 00004)
02020: Swap(00002)
02021: Apply
02022:   Return
02023: PushFn(00223, 00000)
02024: PushString(""map"")
02025: Swap(00002)
02026: Apply
02027: PushFn(00228, 00000)
02028: PushString(""map"")
02029: Swap(00002)
02030: Apply
02031: PushFn(00293, 00000)
02032: Swap(00002)
02033: Apply
02034: Swap(00002)
02035: Apply
02036: PushFn(02006, 00003)
02037: Swap(00002)
02038: Apply
02039:   Return
02040: PushFn(00194, 00000)
02041: PushString(""apply"")
02042: Swap(00002)
02043: Apply
02044: PushFn(00198, 00000)
02045: PushString("")
02046: PushString(""f"")
02047: Swap(00002)
02048: Apply
02049: PushString(""xs"")
02050: Swap(00002)
02051: Apply
02052: Swap(00002)
02053: Apply
02054: PushFn(00214, 00001)
02055: Swap(00002)
02056: Apply
02057: Swap(00002)
02058: Apply
02059: PushFn(02023, 00002)
02060: Swap(00002)
02061: Apply
02062:   Return
02063: PushFn(00106, 00000)
02064: PushString(""rev"")
02065: Swap(00002)
02066: Apply
02067: PushFn(00111, 00000)
02068: PushString(""rev"")
02069: Swap(00002)
02070: Apply
02071: PushFn(00173, 00000)
02072: Swap(00002)
02073: Apply
02074: Swap(00002)
02075: Apply
02076: PushFn(02040, 00001)
02077: Swap(00002)
02078: Apply
02079:   Return
02080: PushFn(00007, 00000)
02081: PushString(""fold"")
02082: Swap(00002)
02083: Apply
02084: PushFn(00012, 00000)
02085: PushString(""fold"")
02086: Swap(00002)
02087: Apply
02088: PushFn(00082, 00000)
02089: Swap(00002)
02090: Apply
02091: Swap(00002)
02092: Apply
02093: PushFn(02063, 00000)
02094: Swap(00002)
02095: Apply

List(Bar, Foo, Bar, Foo, Bar, Foo, Bar, NoMatch((("x", Foo), ("x", Bar))))

---

'fold = ('fold ~> { ('f, 'acc, 'xs) => {
    pop(xs, ('xs, 'x) => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
'rev = ('rev ~> { ('acc, 'xs) => {
    pop(xs, ('xs, 'x) => {
        rev(acc(x), xs)
    }, {
        acc
    })
}})
'apply = (('f, 'xs) => {
    rev(f, rev(List, xs))
})
'map = ('map ~> { ('f, 'xs) => {
    pop(xs, ('xs, 'x) => {
        map(f, xs)(f(x))
    }, {
        xs
    })
}})
'zip = ('zip ~> { ('xs, 'ys) => {
    pop(xs, ('xs, 'x) => {
        pop(ys, ('ys, 'y) => {
            'zipped = zip(xs, ys)
            if (zipped, Nil, {
                Nil
            }, {
                zipped((x, y))
            })
        }, {
            Nil
        })
    }, {
        pop(ys, ('ys, 'y) => {
            Nil
        }, {
            if(xs, ys, {
                xs
            }, {
                Nil
            })
        })
    })
}})
'== = ('== ~> { ('a, 'b) => {
    pop(a, ('xs, 'x) => {
        pop(b, ('ys, 'y) => {
            if(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        if(a, b, { True }, { False })
    })
}})
'flatten = fold(('acc, 'x) => {
    pop(x, ('xs, 'x) => { acc(x) }, { acc })
})
'last = ('xs => {
    pop(xs, ('_, 'x) => { x }, { xs })
})
'first = ('xs => {
    pop(xs, ('xs, '_) => { last(xs) }, { xs })
})
'join = fold(('acc, 'binding) => {
    'var1 = first(binding)
    'val1 = last(binding)
    fold(('_, 'b) => {
        'var2 = first(b)
        'val2 = last(b)
        if(var1, var2, {
            if(val1 == val2, False, {
                no-match!(((var2, val2), (var1, val1)))
            }, {
                Nil
            })
        }, {
            Nil
        })
    }, Nil, acc)
    acc(binding)
}, Bindings)
'unify = ('unify ~> { ('pattern, 'value) => {
    pop(pattern, ('type, 'pattern) => {
        if(type, Binding, {
            Bindings((pattern, value))
        }, {
            if(type, Compound, {
                'zipped = zip(pattern, value)
                if(zipped, Nil, {
                    no-match!((pattern, value))
                }, {
                    'unified = flatten(Bindings, map(apply(unify), zipped))
                    join(unified)
                })
            }, {
                if(pattern == value, True, {
                    Nil
                }, {
                    no-match!((pattern, value))
                })
            })
        })
    }, {
        invalid!(pattern)
    })
}})
'-> = (('pattern, 'body, 'value) => {
    try( {
        'unified = unify(pattern, value)
        'args = map(last, unified)
        if(unified, Nil, {
            body()
        }, {
            apply(body, args)
        })
    }, no-match!, ('_, 'arg) => {
        no-match!(arg)
    })
})
'match-with = (('value, 'clauses) => {
    'result = fold(('result, 'clause) => {
        if(result, Nil, {
            try({
                Match(clause(value))
            }, no-match!, ('r, 'arg) => {
                Nil
            })
        }, {
            result
        })
    }, Nil, rev(List, clauses))
    pop(result, ('_, 'result) => {
        result
    }, {
        no-match!(value)
    })
})
(
    match: Pair(Foo, Bar) with: (
        Pair('x, 'x) -> { Twice(x, x) }
        Pair('x, Foo) -> { SecondIsFoo }
        Pair('x, 'y) -> { y }
        '_ -> { throw!(InvalidPair) }
    )
    try({
        match: Foo with: (
            Pair('x, 'x) -> { Twice(x, x) }
            Pair('x, Foo) -> { SecondIsFoo }
            Pair('x, 'y) -> { y }
        )
    }, no-match!, ('_, 'arg) => {
        NoMatch(arg)
    })
)

(=
  'fold
  (~>
    'fold
    { (=>
        (
          'f
          'acc
          'xs)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'rev
  (~>
    'rev
    { (=>
        (
          'acc
          'xs)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { (rev
                  (acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  'apply
  (=>
    (
      'f
      'xs)
    { (rev
        f
        (rev
          List
          xs)) }))
(=
  'map
  (~>
    'map
    { (=>
        (
          'f
          'xs)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { ((map
                  f
                  xs)
                  (f
                    x)) })
            { xs }) }) }))
(=
  'zip
  (~>
    'zip
    { (=>
        (
          'xs
          'ys)
        { (pop
            xs
            (=>
              (
                'xs
                'x)
              { (pop
                  ys
                  (=>
                    (
                      'ys
                      'y)
                    { (=
                        'zipped
                        (zip
                          xs
                          ys))
                      (if
                        zipped
                        Nil
                        { Nil }
                        { (zipped
                            (
                              x
                              y)) }) })
                  { Nil }) })
            { (pop
                ys
                (=>
                  (
                    'ys
                    'y)
                  { Nil })
                { (if
                    xs
                    ys
                    { xs }
                    { Nil }) }) }) }) }))
(=
  '==
  (~>
    '==
    { (=>
        (
          'a
          'b)
        { (pop
            a
            (=>
              (
                'xs
                'x)
              { (pop
                  b
                  (=>
                    (
                      'ys
                      'y)
                    { (if
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (if
                a
                b
                { True }
                { False }) }) }) }))
(=
  'flatten
  (fold
    (=>
      (
        'acc
        'x)
      { (pop
          x
          (=>
            (
              'xs
              'x)
            { (acc
                x) })
          { acc }) })))
(=
  'last
  (=>
    'xs
    { (pop
        xs
        (=>
          (
            '_
            'x)
          { x })
        { xs }) }))
(=
  'first
  (=>
    'xs
    { (pop
        xs
        (=>
          (
            'xs
            '_)
          { (last
              xs) })
        { xs }) }))
(=
  'join
  (fold
    (=>
      (
        'acc
        'binding)
      { (=
          'var1
          (first
            binding))
        (=
          'val1
          (last
            binding))
        (fold
          (=>
            (
              '_
              'b)
            { (=
                'var2
                (first
                  b))
              (=
                'val2
                (last
                  b))
              (if
                var1
                var2
                { (if
                    (==
                      val1
                      val2)
                    False
                    { (no-match!
                        (
                          (
                            var2
                            val2)
                          (
                            var1
                            val1))) }
                    { Nil }) }
                { Nil }) })
          Nil
          acc)
        (acc
          binding) })
    Bindings))
(=
  'unify
  (~>
    'unify
    { (=>
        (
          'pattern
          'value)
        { (pop
            pattern
            (=>
              (
                'type
                'pattern)
              { (if
                  type
                  Binding
                  { (Bindings
                      (
                        pattern
                        value)) }
                  { (if
                      type
                      Compound
                      { (=
                          'zipped
                          (zip
                            pattern
                            value))
                        (if
                          zipped
                          Nil
                          { (no-match!
                              (
                                pattern
                                value)) }
                          { (=
                              'unified
                              (flatten
                                Bindings
                                (map
                                  (apply
                                    unify)
                                  zipped)))
                            (join
                              unified) }) }
                      { (if
                          (==
                            pattern
                            value)
                          True
                          { Nil }
                          { (no-match!
                              (
                                pattern
                                value)) }) }) }) })
            { (invalid!
                pattern) }) }) }))
(=
  '->
  (=>
    (
      'pattern
      'body
      'value)
    { (try
        { (=
            'unified
            (unify
              pattern
              value))
          (=
            'args
            (map
              last
              unified))
          (if
            unified
            Nil
            { (body) }
            { (apply
                body
                args) }) }
        no-match!
        (=>
          (
            '_
            'arg)
          { (no-match!
              arg) })) }))
(=
  'match-with
  (=>
    (
      'value
      'clauses)
    { (=
        'result
        (fold
          (=>
            (
              'result
              'clause)
            { (if
                result
                Nil
                { (try
                    { (Match
                        (clause
                          value)) }
                    no-match!
                    (=>
                      (
                        'r
                        'arg)
                      { Nil })) }
                { result }) })
          Nil
          (rev
            List
            clauses)))
      (pop
        result
        (=>
          (
            '_
            'result)
          { result })
        { (no-match!
            value) }) }))
(
  (match-with
    (Pair
      Foo
      Bar)
    (
      (->
        (Pair
          'x
          'x)
        { (Twice
            x
            x) })
      (->
        (Pair
          'x
          Foo)
        { SecondIsFoo })
      (->
        (Pair
          'x
          'y)
        { y })
      (->
        '_
        { (throw!
            InvalidPair) })))
  (try
    { (match-with
        Foo
        (
          (->
            (Pair
              'x
              'x)
            { (Twice
                x
                x) })
          (->
            (Pair
              'x
              Foo)
            { SecondIsFoo })
          (->
            (Pair
              'x
              'y)
            { y }))) }
    no-match!
    (=>
      (
        '_
        'arg)
      { (NoMatch
          arg) })))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( ()
                  "f" )
                "acc" )
              "xs" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( ()
                            "xs" )
                          "x" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                ~>
                  0
            "rev" )
          =>
            ( ( =>
                  =>
                    0
                ( ( ()
                    "acc" )
                  "xs" ) )
              =>
                =>
                  ( ( ( =>
                          =>
                            =>
                              ( pop
                                2
                                1
                                0 )
                        0 )
                      ( ( =>
                            =>
                              0
                          ( ( ()
                              "xs" )
                            "x" ) )
                        =>
                          =>
                            ( ( 4
                                ( 3
                                  0 ) )
                              1 ) ) )
                    =>
                      2 ) ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "apply" )
            ( ( =>
                  =>
                    0
                ( ( ()
                    "f" )
                  "xs" ) )
              =>
                =>
                  ( ( 2
                      1 )
                    ( ( 2
                        List )
                      0 ) ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "map" )
                ( ( =>
                      =>
                        ~>
                          0
                    "map" )
                  =>
                    ( ( =>
                          =>
                            0
                        ( ( ()
                            "f" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( =>
                                  =>
                                    =>
                                      ( pop
                                        2
                                        1
                                        0 )
                                0 )
                              ( ( =>
                                    =>
                                      0
                                  ( ( ()
                                      "xs" )
                                    "x" ) )
                                =>
                                  =>
                                    ( ( ( 4
                                          3 )
                                        1 )
                                      ( 3
                                        0 ) ) ) )
                            =>
                              1 ) ) ) )
              =>
                ( ( ( =>
                        =>
                          =>
                            ( 0
                              1 )
                      "zip" )
                    ( ( =>
                          =>
                            ~>
                              0
                        "zip" )
                      =>
                        ( ( =>
                              =>
                                0
                            ( ( ()
                                "xs" )
                              "ys" ) )
                          =>
                            =>
                              ( ( ( =>
                                      =>
                                        =>
                                          ( pop
                                            2
                                            1
                                            0 )
                                    1 )
                                  ( ( =>
                                        =>
                                          0
                                      ( ( ()
                                          "xs" )
                                        "x" ) )
                                    =>
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              2 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( ()
                                                    "ys" )
                                                  "y" ) )
                                              =>
                                                =>
                                                  ( ( ( =>
                                                          =>
                                                            =>
                                                              ( 0
                                                                1 )
                                                        "zipped" )
                                                      ( ( 6
                                                          3 )
                                                        1 ) )
                                                    =>
                                                      ( ( ( ( =>
                                                                =>
                                                                  =>
                                                                    =>
                                                                      ( if
                                                                        3
                                                                        2
                                                                        1
                                                                        0 )
                                                              0 )
                                                            Nil )
                                                          =>
                                                            Nil )
                                                        =>
                                                          ( 1
                                                            ( ( ()
                                                                4 )
                                                              2 ) ) ) ) ) )
                                          =>
                                            Nil ) ) )
                                =>
                                  ( ( ( =>
                                          =>
                                            =>
                                              ( pop
                                                2
                                                1
                                                0 )
                                        1 )
                                      ( ( =>
                                            =>
                                              0
                                          ( ( ()
                                              "ys" )
                                            "y" ) )
                                        =>
                                          =>
                                            Nil ) )
                                    =>
                                      ( ( ( ( =>
                                                =>
                                                  =>
                                                    =>
                                                      ( if
                                                        3
                                                        2
                                                        1
                                                        0 )
                                              3 )
                                            2 )
                                          =>
                                            4 )
                                        =>
                                          Nil ) ) ) ) ) )
                  =>
                    ( ( ( =>
                            =>
                              =>
                                ( 0
                                  1 )
                          "==" )
                        ( ( =>
                              =>
                                ~>
                                  0
                            "==" )
                          =>
                            ( ( =>
                                  =>
                                    0
                                ( ( ()
                                    "a" )
                                  "b" ) )
                              =>
                                =>
                                  ( ( ( =>
                                          =>
                                            =>
                                              ( pop
                                                2
                                                1
                                                0 )
                                        1 )
                                      ( ( =>
                                            =>
                                              0
                                          ( ( ()
                                              "xs" )
                                            "x" ) )
                                        =>
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  2 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( ()
                                                        "ys" )
                                                      "y" ) )
                                                  =>
                                                    =>
                                                      ( ( ( ( =>
                                                                =>
                                                                  =>
                                                                    =>
                                                                      ( if
                                                                        3
                                                                        2
                                                                        1
                                                                        0 )
                                                              ( ( 6
                                                                  2 )
                                                                0 ) )
                                                            True )
                                                          =>
                                                            ( ( 7
                                                                4 )
                                                              2 ) )
                                                        =>
                                                          False ) ) )
                                              =>
                                                False ) ) )
                                    =>
                                      ( ( ( ( =>
                                                =>
                                                  =>
                                                    =>
                                                      ( if
                                                        3
                                                        2
                                                        1
                                                        0 )
                                              2 )
                                            1 )
                                          =>
                                            True )
                                        =>
                                          False ) ) ) ) )
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( 0
                                      1 )
                              "flatten" )
                            ( 5
                              ( ( =>
                                    =>
                                      0
                                  ( ( ()
                                      "acc" )
                                    "x" ) )
                                =>
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( pop
                                                  2
                                                  1
                                                  0 )
                                          0 )
                                        ( ( =>
                                              =>
                                                0
                                            ( ( ()
                                                "xs" )
                                              "x" ) )
                                          =>
                                            =>
                                              ( 3
                                                0 ) ) )
                                      =>
                                        2 ) ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( 0
                                          1 )
                                  "last" )
                                ( ( =>
                                      =>
                                        0
                                    "xs" )
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( pop
                                                  2
                                                  1
                                                  0 )
                                          0 )
                                        ( ( =>
                                              =>
                                                0
                                            ( ( ()
                                                "_" )
                                              "x" ) )
                                          =>
                                            =>
                                              0 ) )
                                      =>
                                        1 ) ) )
                              =>
                                ( ( ( =>
                                        =>
                                          =>
                                            ( 0
                                              1 )
                                      "first" )
                                    ( ( =>
                                          =>
                                            0
                                        "xs" )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              0 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( ()
                                                    "xs" )
                                                  "_" ) )
                                              =>
                                                =>
                                                  ( 3
                                                    1 ) ) )
                                          =>
                                            1 ) ) )
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( 0
                                                  1 )
                                          "join" )
                                        ( ( 8
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( ()
                                                    "acc" )
                                                  "binding" ) )
                                              =>
                                                =>
                                                  ( ( ( =>
                                                          =>
                                                            =>
                                                              ( 0
                                                                1 )
                                                        "var1" )
                                                      ( 2
                                                        0 ) )
                                                    =>
                                                      ( ( ( =>
                                                              =>
                                                                =>
                                                                  ( 0
                                                                    1 )
                                                            "val1" )
                                                          ( 4
                                                            1 ) )
                                                        =>
                                                          ( =>
                                                              ( 4
                                                                3 )
                                                            ( ( ( 12
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( ()
                                                                          "_" )
                                                                        "b" ) )
                                                                    =>
                                                                      =>
                                                                        ( ( ( =>
                                                                                =>
                                                                                  =>
                                                                                    ( 0
                                                                                      1 )
                                                                              "var2" )
                                                                            ( 6
                                                                              0 ) )
                                                                          =>
                                                                            ( ( ( =>
                                                                                    =>
                                                                                      =>
                                                                                        ( 0
                                                                                          1 )
                                                                                  "val2" )
                                                                                ( 8
                                                                                  1 ) )
                                                                              =>
                                                                                ( ( ( ( =>
                                                                                          =>
                                                                                            =>
                                                                                              =>
                                                                                                ( if
                                                                                                  3
                                                                                                  2
                                                                                                  1
                                                                                                  0 )
                                                                                        5 )
                                                                                      1 )
                                                                                    =>
                                                                                      ( ( ( ( =>
                                                                                                =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      ( if
                                                                                                        3
                                                                                                        2
                                                                                                        1
                                                                                                        0 )
                                                                                              ( ( 12
                                                                                                  5 )
                                                                                                1 ) )
                                                                                            False )
                                                                                          =>
                                                                                            ( no-match!
                                                                                              ( ( ()
                                                                                                  ( ( ()
                                                                                                      3 )
                                                                                                    2 ) )
                                                                                                ( ( ()
                                                                                                    7 )
                                                                                                  6 ) ) ) )
                                                                                        =>
                                                                                          Nil ) )
                                                                                  =>
                                                                                    Nil ) ) ) ) )
                                                                Nil )
                                                              3 ) ) ) ) ) )
                                          Bindings ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( 0
                                                      1 )
                                              "unify" )
                                            ( ( =>
                                                  =>
                                                    ~>
                                                      0
                                                "unify" )
                                              =>
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( ()
                                                        "pattern" )
                                                      "value" ) )
                                                  =>
                                                    =>
                                                      ( ( ( =>
                                                              =>
                                                                =>
                                                                  ( pop
                                                                    2
                                                                    1
                                                                    0 )
                                                            1 )
                                                          ( ( =>
                                                                =>
                                                                  0
                                                              ( ( ()
                                                                  "type" )
                                                                "pattern" ) )
                                                            =>
                                                              =>
                                                                ( ( ( ( =>
                                                                          =>
                                                                            =>
                                                                              =>
                                                                                ( if
                                                                                  3
                                                                                  2
                                                                                  1
                                                                                  0 )
                                                                        1 )
                                                                      Binding )
                                                                    =>
                                                                      ( Bindings
                                                                        ( ( ()
                                                                            1 )
                                                                          3 ) ) )
                                                                  =>
                                                                    ( ( ( ( =>
                                                                              =>
                                                                                =>
                                                                                  =>
                                                                                    ( if
                                                                                      3
                                                                                      2
                                                                                      1
                                                                                      0 )
                                                                            2 )
                                                                          Compound )
                                                                        =>
                                                                          ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      ( 0
                                                                                        1 )
                                                                                "zipped" )
                                                                              ( ( 12
                                                                                  2 )
                                                                                4 ) )
                                                                            =>
                                                                              ( ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            =>
                                                                                              ( if
                                                                                                3
                                                                                                2
                                                                                                1
                                                                                                0 )
                                                                                      0 )
                                                                                    Nil )
                                                                                  =>
                                                                                    ( no-match!
                                                                                      ( ( ()
                                                                                          4 )
                                                                                        6 ) ) )
                                                                                =>
                                                                                  ( ( ( =>
                                                                                          =>
                                                                                            =>
                                                                                              ( 0
                                                                                                1 )
                                                                                        "unified" )
                                                                                      ( ( 12
                                                                                          Bindings )
                                                                                        ( ( 15
                                                                                            ( 16
                                                                                              8 ) )
                                                                                          1 ) ) )
                                                                                    =>
                                                                                      ( 10
                                                                                        0 ) ) ) ) )
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                ( ( 11
                                                                                    2 )
                                                                                  4 ) )
                                                                              True )
                                                                            =>
                                                                              Nil )
                                                                          =>
                                                                            ( no-match!
                                                                              ( ( ()
                                                                                  3 )
                                                                                5 ) ) ) ) ) ) )
                                                        =>
                                                          ( invalid!
                                                            2 ) ) ) ) )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( 0
                                                          1 )
                                                  "->" )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( ( ()
                                                          "pattern" )
                                                        "body" )
                                                      "value" ) )
                                                  =>
                                                    =>
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( try
                                                                      2
                                                                      1
                                                                      0 )
                                                              =>
                                                                ( ( ( =>
                                                                        =>
                                                                          =>
                                                                            ( 0
                                                                              1 )
                                                                      "unified" )
                                                                    ( ( 4
                                                                        3 )
                                                                      1 ) )
                                                                  =>
                                                                    ( ( ( =>
                                                                            =>
                                                                              =>
                                                                                ( 0
                                                                                  1 )
                                                                          "args" )
                                                                        ( ( 12
                                                                            8 )
                                                                          0 ) )
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                1 )
                                                                              Nil )
                                                                            =>
                                                                              ( 5
                                                                                () ) )
                                                                          =>
                                                                            ( ( 15
                                                                                5 )
                                                                              1 ) ) ) ) )
                                                            no-match! )
                                                          ( ( =>
                                                                =>
                                                                  0
                                                              ( ( ()
                                                                  "_" )
                                                                "arg" ) )
                                                            =>
                                                              =>
                                                                ( no-match!
                                                                  0 ) ) ) ) )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( 0
                                                              1 )
                                                      "match-with" )
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( ()
                                                            "value" )
                                                          "clauses" ) )
                                                      =>
                                                        =>
                                                          ( ( ( =>
                                                                  =>
                                                                    =>
                                                                      ( 0
                                                                        1 )
                                                                "result" )
                                                              ( ( ( 13
                                                                    ( ( =>
                                                                          =>
                                                                            0
                                                                        ( ( ()
                                                                            "result" )
                                                                          "clause" ) )
                                                                      =>
                                                                        =>
                                                                          ( ( ( ( =>
                                                                                    =>
                                                                                      =>
                                                                                        =>
                                                                                          ( if
                                                                                            3
                                                                                            2
                                                                                            1
                                                                                            0 )
                                                                                  1 )
                                                                                Nil )
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( try
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                      =>
                                                                                        ( Match
                                                                                          ( 2
                                                                                            5 ) ) )
                                                                                    no-match! )
                                                                                  ( ( =>
                                                                                        =>
                                                                                          0
                                                                                      ( ( ()
                                                                                          "r" )
                                                                                        "arg" ) )
                                                                                    =>
                                                                                      =>
                                                                                        Nil ) ) )
                                                                            =>
                                                                              2 ) ) )
                                                                  Nil )
                                                                ( ( 12
                                                                    List )
                                                                  0 ) ) )
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( pop
                                                                            2
                                                                            1
                                                                            0 )
                                                                    0 )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( ()
                                                                          "_" )
                                                                        "result" ) )
                                                                    =>
                                                                      =>
                                                                        0 ) )
                                                                =>
                                                                  ( no-match!
                                                                    3 ) ) ) ) )
                                                  =>
                                                    ( ( ()
                                                        ( ( 0
                                                            ( ( Pair
                                                                Foo )
                                                              Bar ) )
                                                          ( ( ( ( ()
                                                                  ( ( 1
                                                                      ( Compound
                                                                        ( ( Pair
                                                                            ( Binding
                                                                              "x" ) )
                                                                          ( Binding
                                                                            "x" ) ) ) )
                                                                    =>
                                                                      =>
                                                                        ( ( Twice
                                                                            0 )
                                                                          0 ) ) )
                                                                ( ( 1
                                                                    ( Compound
                                                                      ( ( Pair
                                                                          ( Binding
                                                                            "x" ) )
                                                                        ( Value
                                                                          Foo ) ) ) )
                                                                  =>
                                                                    SecondIsFoo ) )
                                                              ( ( 1
                                                                  ( Compound
                                                                    ( ( Pair
                                                                        ( Binding
                                                                          "x" ) )
                                                                      ( Binding
                                                                        "y" ) ) ) )
                                                                =>
                                                                  =>
                                                                    0 ) )
                                                            ( ( 1
                                                                ( Binding
                                                                  "_" ) )
                                                              =>
                                                                ( throw!
                                                                  InvalidPair ) ) ) ) )
                                                      ( ( ( =>
                                                              =>
                                                                =>
                                                                  ( try
                                                                    2
                                                                    1
                                                                    0 )
                                                            =>
                                                              ( ( 1
                                                                  Foo )
                                                                ( ( ( ()
                                                                      ( ( 2
                                                                          ( Compound
                                                                            ( ( Pair
                                                                                ( Binding
                                                                                  "x" ) )
                                                                              ( Binding
                                                                                "x" ) ) ) )
                                                                        =>
                                                                          =>
                                                                            ( ( Twice
                                                                                0 )
                                                                              0 ) ) )
                                                                    ( ( 2
                                                                        ( Compound
                                                                          ( ( Pair
                                                                              ( Binding
                                                                                "x" ) )
                                                                            ( Value
                                                                              Foo ) ) ) )
                                                                      =>
                                                                        SecondIsFoo ) )
                                                                  ( ( 2
                                                                      ( Compound
                                                                        ( ( Pair
                                                                            ( Binding
                                                                              "x" ) )
                                                                          ( Binding
                                                                            "y" ) ) ) )
                                                                    =>
                                                                      =>
                                                                        0 ) ) ) )
                                                          no-match! )
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( ()
                                                                "_" )
                                                              "arg" ) )
                                                          =>
                                                            =>
                                                              ( NoMatch
                                                                0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00005)
00035: PushVar(00004)
00036: Swap(00002)
00037: Apply
00038: PushVar(00004)
00039: PushVar(00003)
00040: Swap(00002)
00041: Apply
00042: PushVar(00000)
00043: Swap(00002)
00044: Apply
00045: Swap(00002)
00046: Apply
00047: PushVar(00001)
00048: Swap(00002)
00049: Apply
00050:   Return
00051: PushFn(00034, 00005)
00052:   Return
00053: PushVar(00002)
00054:   Return
00055: PushFn(00028, 00000)
00056: PushVar(00000)
00057: Swap(00002)
00058: Apply
00059: PushFn(00032, 00000)
00060: PushString("")
00061: PushString(""xs"")
00062: Swap(00002)
00063: Apply
00064: PushString(""x"")
00065: Swap(00002)
00066: Apply
00067: Swap(00002)
00068: Apply
00069: PushFn(00051, 00004)
00070: Swap(00002)
00071: Apply
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00055, 00003)
00079:   Return
00080: PushFn(00078, 00002)
00081:   Return
00082: PushFn(00016, 00000)
00083: PushString("")
00084: PushString(""f"")
00085: Swap(00002)
00086: Apply
00087: PushString(""acc"")
00088: Swap(00002)
00089: Apply
00090: PushString(""xs"")
00091: Swap(00002)
00092: Apply
00093: Swap(00002)
00094: Apply
00095: PushFn(00080, 00001)
00096: Swap(00002)
00097: Apply
00098:   Return
00099: PushVar(00000)
00100: PushVar(00001)
00101: Swap(00002)
00102: Apply
00103:   Return
00104: PushFn(00099, 00001)
00105:   Return
00106: PushFn(00104, 00000)
00107:   Return
00108: PushVar(00000)
00109: Rec
00110:   Return
00111: PushFn(00108, 00000)
00112:   Return
00113: PushVar(00000)
00114:   Return
00115: PushFn(00113, 00000)
00116:   Return
00117: PushVar(00002)
00118: PushVar(00001)
00119: PushVar(00000)
00120: Swap(00003)
00121: Pop
00122: Apply
00123: Apply
00124:   Return
00125: PushFn(00117, 00002)
00126:   Return
00127: PushFn(00125, 00001)
00128:   Return
00129: PushVar(00000)
00130:   Return
00131: PushFn(00129, 00000)
00132:   Return
00133: PushVar(00004)
00134: PushVar(00003)
00135: PushVar(00000)
00136: Swap(00002)
00137: Apply
00138: Swap(00002)
00139: Apply
00140: PushVar(00001)
00141: Swap(00002)
00142: Apply
00143:   Return
00144: PushFn(00133, 00004)
00145:   Return
00146: PushVar(00002)
00147:   Return
00148: PushFn(00127, 00000)
00149: PushVar(00000)
00150: Swap(00002)
00151: Apply
00152: PushFn(00131, 00000)
00153: PushString("")
00154: PushString(""xs"")
00155: Swap(00002)
00156: Apply
00157: PushString(""x"")
00158: Swap(00002)
00159: Apply
00160: Swap(00002)
00161: Apply
00162: PushFn(00144, 00003)
00163: Swap(00002)
00164: Apply
00165: Swap(00002)
00166: Apply
00167: PushFn(00146, 00002)
00168: Swap(00002)
00169: Apply
00170:   Return
00171: PushFn(00148, 00002)
00172:   Return
00173: PushFn(00115, 00000)
00174: PushString("")
00175: PushString(""acc"")
00176: Swap(00002)
00177: Apply
00178: PushString(""xs"")
00179: Swap(00002)
00180: Apply
00181: Swap(00002)
00182: Apply
00183: PushFn(00171, 00001)
00184: Swap(00002)
00185: Apply
00186:   Return
00187: PushVar(00000)
00188: PushVar(00001)
00189: Swap(00002)
00190: Apply
00191:   Return
00192: PushFn(00187, 00001)
00193:   Return
00194: PushFn(00192, 00000)
00195:   Return
00196: PushVar(00000)
00197:   Return
00198: PushFn(00196, 00000)
00199:   Return
00200: PushVar(00002)
00201: PushVar(00001)
00202: Swap(00002)
00203: Apply
00204: PushVar(00002)
00205: PushString("List")
00206: Swap(00002)
00207: Apply
00208: PushVar(00000)
00209: Swap(00002)
00210: Apply
00211: Swap(00002)
00212: Apply
00213:   Return
00214: PushFn(00200, 00002)
00215:   Return
00216: PushVar(00000)
00217: PushVar(00001)
00218: Swap(00002)
00219: Apply
00220:   Return
00221: PushFn(00216, 00001)
00222:   Return
00223: PushFn(00221, 00000)
00224:   Return
00225: PushVar(00000)
00226: Rec
00227:   Return
00228: PushFn(00225, 00000)
00229:   Return
00230: PushVar(00000)
00231:   Return
00232: PushFn(00230, 00000)
00233:   Return
00234: PushVar(00002)
00235: PushVar(00001)
00236: PushVar(00000)
00237: Swap(00003)
00238: Pop
00239: Apply
00240: Apply
00241:   Return
00242: PushFn(00234, 00002)
00243:   Return
00244: PushFn(00242, 00001)
00245:   Return
00246: PushVar(00000)
00247:   Return
00248: PushFn(00246, 00000)
00249:   Return
00250: PushVar(00004)
00251: PushVar(00003)
00252: Swap(00002)
00253: Apply
00254: PushVar(00001)
00255: Swap(00002)
00256: Apply
00257: PushVar(00003)
00258: PushVar(00000)
00259: Swap(00002)
00260: Apply
00261: Swap(00002)
00262: Apply
00263:   Return
00264: PushFn(00250, 00004)
00265:   Return
00266: PushVar(00001)
00267:   Return
00268: PushFn(00244, 00000)
00269: PushVar(00000)
00270: Swap(00002)
00271: Apply
00272: PushFn(00248, 00000)
00273: PushString("")
00274: PushString(""xs"")
00275: Swap(00002)
00276: Apply
00277: PushString(""x"")
00278: Swap(00002)
00279: Apply
00280: Swap(00002)
00281: Apply
00282: PushFn(00264, 00003)
00283: Swap(00002)
00284: Apply
00285: Swap(00002)
00286: Apply
00287: PushFn(00266, 00001)
00288: Swap(00002)
00289: Apply
00290:   Return
00291: PushFn(00268, 00002)
00292:   Return
00293: PushFn(00232, 00000)
00294: PushString("")
00295: PushString(""f"")
00296: Swap(00002)
00297: Apply
00298: PushString(""xs"")
00299: Swap(00002)
00300: Apply
00301: Swap(00002)
00302: Apply
00303: PushFn(00291, 00001)
00304: Swap(00002)
00305: Apply
00306:   Return
00307: PushVar(00000)
00308: PushVar(00001)
00309: Swap(00002)
00310: Apply
00311:   Return
00312: PushFn(00307, 00001)
00313:   Return
00314: PushFn(00312, 00000)
00315:   Return
00316: PushVar(00000)
00317: Rec
00318:   Return
00319: PushFn(00316, 00000)
00320:   Return
00321: PushVar(00000)
00322:   Return
00323: PushFn(00321, 00000)
00324:   Return
00325: PushVar(00002)
00326: PushVar(00001)
00327: PushVar(00000)
00328: Swap(00003)
00329: Pop
00330: Apply
00331: Apply
00332:   Return
00333: PushFn(00325, 00002)
00334:   Return
00335: PushFn(00333, 00001)
00336:   Return
00337: PushVar(00000)
00338:   Return
00339: PushFn(00337, 00000)
00340:   Return
00341: PushVar(00002)
00342: PushVar(00001)
00343: PushVar(00000)
00344: Swap(00003)
00345: Pop
00346: Apply
00347: Apply
00348:   Return
00349: PushFn(00341, 00002)
00350:   Return
00351: PushFn(00349, 00001)
00352:   Return
00353: PushVar(00000)
00354:   Return
00355: PushFn(00353, 00000)
00356:   Return
00357: PushVar(00000)
00358: PushVar(00001)
00359: Swap(00002)
00360: Apply
00361:   Return
00362: PushFn(00357, 00001)
00363:   Return
00364: PushFn(00362, 00000)
00365:   Return
00366: PushVar(00003)
00367: PushVar(00002)
00368: PushVar(00001)
00369: PushVar(00000)
00370: Swap(00004)
00371: If
00372: Apply
00373:   Return
00374: PushFn(00366, 00003)
00375:   Return
00376: PushFn(00374, 00002)
00377:   Return
00378: PushFn(00376, 00001)
00379:   Return
00380: PushString("Nil")
00381:   Return
00382: PushVar(00001)
00383: PushString("")
00384: PushVar(00004)
00385: Swap(00002)
00386: Apply
00387: PushVar(00002)
00388: Swap(00002)
00389: Apply
00390: Swap(00002)
00391: Apply
00392:   Return
00393: PushFn(00378, 00000)
00394: PushVar(00000)
00395: Swap(00002)
00396: Apply
00397: PushString("Nil")
00398: Swap(00002)
00399: Apply
00400: PushFn(00380, 00000)
00401: Swap(00002)
00402: Apply
00403: PushFn(00382, 00004)
00404: Swap(00002)
00405: Apply
00406:   Return
00407: PushFn(00364, 00000)
00408: PushString(""zipped"")
00409: Swap(00002)
00410: Apply
00411: PushVar(00006)
00412: PushVar(00003)
00413: Swap(00002)
00414: Apply
00415: PushVar(00001)
00416: Swap(00002)
00417: Apply
00418: Swap(00002)
00419: Apply
00420: PushFn(00393, 00003)
00421: Swap(00002)
00422: Apply
00423:   Return
00424: PushFn(00407, 00006)
00425:   Return
00426: PushString("Nil")
00427:   Return
00428: PushFn(00351, 00000)
00429: PushVar(00002)
00430: Swap(00002)
00431: Apply
00432: PushFn(00355, 00000)
00433: PushString("")
00434: PushString(""ys"")
00435: Swap(00002)
00436: Apply
00437: PushString(""y"")
00438: Swap(00002)
00439: Apply
00440: Swap(00002)
00441: Apply
00442: PushFn(00424, 00005)
00443: Swap(00002)
00444: Apply
00445: Swap(00002)
00446: Apply
00447: PushFn(00426, 00000)
00448: Swap(00002)
00449: Apply
00450:   Return
00451: PushFn(00428, 00004)
00452:   Return
00453: PushVar(00002)
00454: PushVar(00001)
00455: PushVar(00000)
00456: Swap(00003)
00457: Pop
00458: Apply
00459: Apply
00460:   Return
00461: PushFn(00453, 00002)
00462:   Return
00463: PushFn(00461, 00001)
00464:   Return
00465: PushVar(00000)
00466:   Return
00467: PushFn(00465, 00000)
00468:   Return
00469: PushString("Nil")
00470:   Return
00471: PushFn(00469, 00000)
00472:   Return
00473: PushVar(00003)
00474: PushVar(00002)
00475: PushVar(00001)
00476: PushVar(00000)
00477: Swap(00004)
00478: If
00479: Apply
00480:   Return
00481: PushFn(00473, 00003)
00482:   Return
00483: PushFn(00481, 00002)
00484:   Return
00485: PushFn(00483, 00001)
00486:   Return
00487: PushVar(00004)
00488:   Return
00489: PushString("Nil")
00490:   Return
00491: PushFn(00485, 00000)
00492: PushVar(00003)
00493: Swap(00002)
00494: Apply
00495: PushVar(00002)
00496: Swap(00002)
00497: Apply
00498: PushFn(00487, 00004)
00499: Swap(00002)
00500: Apply
00501: PushFn(00489, 00000)
00502: Swap(00002)
00503: Apply
00504:   Return
00505: PushFn(00463, 00000)
00506: PushVar(00001)
00507: Swap(00002)
00508: Apply
00509: PushFn(00467, 00000)
00510: PushString("")
00511: PushString(""ys"")
00512: Swap(00002)
00513: Apply
00514: PushString(""y"")
00515: Swap(00002)
00516: Apply
00517: Swap(00002)
00518: Apply
00519: PushFn(00471, 00000)
00520: Swap(00002)
00521: Apply
00522: Swap(00002)
00523: Apply
00524: PushFn(00491, 00003)
00525: Swap(00002)
00526: Apply
00527:   Return
00528: PushFn(00335, 00000)
00529: PushVar(00001)
00530: Swap(00002)
00531: Apply
00532: PushFn(00339, 00000)
00533: PushString("")
00534: PushString(""xs"")
00535: Swap(00002)
00536: Apply
00537: PushString(""x"")
00538: Swap(00002)
00539: Apply
00540: Swap(00002)
00541: Apply
00542: PushFn(00451, 00003)
00543: Swap(00002)
00544: Apply
00545: Swap(00002)
00546: Apply
00547: PushFn(00505, 00002)
00548: Swap(00002)
00549: Apply
00550:   Return
00551: PushFn(00528, 00002)
00552:   Return
00553: PushFn(00323, 00000)
00554: PushString("")
00555: PushString(""xs"")
00556: Swap(00002)
00557: Apply
00558: PushString(""ys"")
00559: Swap(00002)
00560: Apply
00561: Swap(00002)
00562: Apply
00563: PushFn(00551, 00001)
00564: Swap(00002)
00565: Apply
00566:   Return
00567: PushVar(00000)
00568: PushVar(00001)
00569: Swap(00002)
00570: Apply
00571:   Return
00572: PushFn(00567, 00001)
00573:   Return
00574: PushFn(00572, 00000)
00575:   Return
00576: PushVar(00000)
00577: Rec
00578:   Return
00579: PushFn(00576, 00000)
00580:   Return
00581: PushVar(00000)
00582:   Return
00583: PushFn(00581, 00000)
00584:   Return
00585: PushVar(00002)
00586: PushVar(00001)
00587: PushVar(00000)
00588: Swap(00003)
00589: Pop
00590: Apply
00591: Apply
00592:   Return
00593: PushFn(00585, 00002)
00594:   Return
00595: PushFn(00593, 00001)
00596:   Return
00597: PushVar(00000)
00598:   Return
00599: PushFn(00597, 00000)
00600:   Return
00601: PushVar(00002)
00602: PushVar(00001)
00603: PushVar(00000)
00604: Swap(00003)
00605: Pop
00606: Apply
00607: Apply
00608:   Return
00609: PushFn(00601, 00002)
00610:   Return
00611: PushFn(00609, 00001)
00612:   Return
00613: PushVar(00000)
00614:   Return
00615: PushFn(00613, 00000)
00616:   Return
00617: PushVar(00003)
00618: PushVar(00002)
00619: PushVar(00001)
00620: PushVar(00000)
00621: Swap(00004)
00622: If
00623: Apply
00624:   Return
00625: PushFn(00617, 00003)
00626:   Return
00627: PushFn(00625, 00002)
00628:   Return
00629: PushFn(00627, 00001)
00630:   Return
00631: PushVar(00007)
00632: PushVar(00004)
00633: Swap(00002)
00634: Apply
00635: PushVar(00002)
00636: Swap(00002)
00637: Apply
00638:   Return
00639: PushString("False")
00640:   Return
00641: PushFn(00629, 00000)
00642: PushVar(00006)
00643: PushVar(00002)
00644: Swap(00002)
00645: Apply
00646: PushVar(00000)
00647: Swap(00002)
00648: Apply
00649: Swap(00002)
00650: Apply
00651: PushString("True")
00652: Swap(00002)
00653: Apply
00654: PushFn(00631, 00007)
00655: Swap(00002)
00656: Apply
00657: PushFn(00639, 00000)
00658: Swap(00002)
00659: Apply
00660:   Return
00661: PushFn(00641, 00006)
00662:   Return
00663: PushString("False")
00664:   Return
00665: PushFn(00611, 00000)
00666: PushVar(00002)
00667: Swap(00002)
00668: Apply
00669: PushFn(00615, 00000)
00670: PushString("")
00671: PushString(""ys"")
00672: Swap(00002)
00673: Apply
00674: PushString(""y"")
00675: Swap(00002)
00676: Apply
00677: Swap(00002)
00678: Apply
00679: PushFn(00661, 00005)
00680: Swap(00002)
00681: Apply
00682: Swap(00002)
00683: Apply
00684: PushFn(00663, 00000)
00685: Swap(00002)
00686: Apply
00687:   Return
00688: PushFn(00665, 00004)
00689:   Return
00690: PushVar(00003)
00691: PushVar(00002)
00692: PushVar(00001)
00693: PushVar(00000)
00694: Swap(00004)
00695: If
00696: Apply
00697:   Return
00698: PushFn(00690, 00003)
00699:   Return
00700: PushFn(00698, 00002)
00701:   Return
00702: PushFn(00700, 00001)
00703:   Return
00704: PushString("True")
00705:   Return
00706: PushString("False")
00707:   Return
00708: PushFn(00702, 00000)
00709: PushVar(00002)
00710: Swap(00002)
00711: Apply
00712: PushVar(00001)
00713: Swap(00002)
00714: Apply
00715: PushFn(00704, 00000)
00716: Swap(00002)
00717: Apply
00718: PushFn(00706, 00000)
00719: Swap(00002)
00720: Apply
00721:   Return
00722: PushFn(00595, 00000)
00723: PushVar(00001)
00724: Swap(00002)
00725: Apply
00726: PushFn(00599, 00000)
00727: PushString("")
00728: PushString(""xs"")
00729: Swap(00002)
00730: Apply
00731: PushString(""x"")
00732: Swap(00002)
00733: Apply
00734: Swap(00002)
00735: Apply
00736: PushFn(00688, 00003)
00737: Swap(00002)
00738: Apply
00739: Swap(00002)
00740: Apply
00741: PushFn(00708, 00002)
00742: Swap(00002)
00743: Apply
00744:   Return
00745: PushFn(00722, 00002)
00746:   Return
00747: PushFn(00583, 00000)
00748: PushString("")
00749: PushString(""a"")
00750: Swap(00002)
00751: Apply
00752: PushString(""b"")
00753: Swap(00002)
00754: Apply
00755: Swap(00002)
00756: Apply
00757: PushFn(00745, 00001)
00758: Swap(00002)
00759: Apply
00760:   Return
00761: PushVar(00000)
00762: PushVar(00001)
00763: Swap(00002)
00764: Apply
00765:   Return
00766: PushFn(00761, 00001)
00767:   Return
00768: PushFn(00766, 00000)
00769:   Return
00770: PushVar(00000)
00771:   Return
00772: PushFn(00770, 00000)
00773:   Return
00774: PushVar(00002)
00775: PushVar(00001)
00776: PushVar(00000)
00777: Swap(00003)
00778: Pop
00779: Apply
00780: Apply
00781:   Return
00782: PushFn(00774, 00002)
00783:   Return
00784: PushFn(00782, 00001)
00785:   Return
00786: PushVar(00000)
00787:   Return
00788: PushFn(00786, 00000)
00789:   Return
00790: PushVar(00003)
00791: PushVar(00000)
00792: Swap(00002)
00793: Apply
00794:   Return
00795: PushFn(00790, 00003)
00796:   Return
00797: PushVar(00002)
00798:   Return
00799: PushFn(00784, 00000)
00800: PushVar(00000)
00801: Swap(00002)
00802: Apply
00803: PushFn(00788, 00000)
00804: PushString("")
00805: PushString(""xs"")
00806: Swap(00002)
00807: Apply
00808: PushString(""x"")
00809: Swap(00002)
00810: Apply
00811: Swap(00002)
00812: Apply
00813: PushFn(00795, 00002)
00814: Swap(00002)
00815: Apply
00816: Swap(00002)
00817: Apply
00818: PushFn(00797, 00002)
00819: Swap(00002)
00820: Apply
00821:   Return
00822: PushFn(00799, 00001)
00823:   Return
00824: PushVar(00000)
00825: PushVar(00001)
00826: Swap(00002)
00827: Apply
00828:   Return
00829: PushFn(00824, 00001)
00830:   Return
00831: PushFn(00829, 00000)
00832:   Return
00833: PushVar(00000)
00834:   Return
00835: PushFn(00833, 00000)
00836:   Return
00837: PushVar(00002)
00838: PushVar(00001)
00839: PushVar(00000)
00840: Swap(00003)
00841: Pop
00842: Apply
00843: Apply
00844:   Return
00845: PushFn(00837, 00002)
00846:   Return
00847: PushFn(00845, 00001)
00848:   Return
00849: PushVar(00000)
00850:   Return
00851: PushFn(00849, 00000)
00852:   Return
00853: PushVar(00000)
00854:   Return
00855: PushFn(00853, 00000)
00856:   Return
00857: PushVar(00001)
00858:   Return
00859: PushFn(00847, 00000)
00860: PushVar(00000)
00861: Swap(00002)
00862: Apply
00863: PushFn(00851, 00000)
00864: PushString("")
00865: PushString(""_"")
00866: Swap(00002)
00867: Apply
00868: PushString(""x"")
00869: Swap(00002)
00870: Apply
00871: Swap(00002)
00872: Apply
00873: PushFn(00855, 00000)
00874: Swap(00002)
00875: Apply
00876: Swap(00002)
00877: Apply
00878: PushFn(00857, 00001)
00879: Swap(00002)
00880: Apply
00881:   Return
00882: PushVar(00000)
00883: PushVar(00001)
00884: Swap(00002)
00885: Apply
00886:   Return
00887: PushFn(00882, 00001)
00888:   Return
00889: PushFn(00887, 00000)
00890:   Return
00891: PushVar(00000)
00892:   Return
00893: PushFn(00891, 00000)
00894:   Return
00895: PushVar(00002)
00896: PushVar(00001)
00897: PushVar(00000)
00898: Swap(00003)
00899: Pop
00900: Apply
00901: Apply
00902:   Return
00903: PushFn(00895, 00002)
00904:   Return
00905: PushFn(00903, 00001)
00906:   Return
00907: PushVar(00000)
00908:   Return
00909: PushFn(00907, 00000)
00910:   Return
00911: PushVar(00003)
00912: PushVar(00001)
00913: Swap(00002)
00914: Apply
00915:   Return
00916: PushFn(00911, 00003)
00917:   Return
00918: PushVar(00001)
00919:   Return
00920: PushFn(00905, 00000)
00921: PushVar(00000)
00922: Swap(00002)
00923: Apply
00924: PushFn(00909, 00000)
00925: PushString("")
00926: PushString(""xs"")
00927: Swap(00002)
00928: Apply
00929: PushString(""_"")
00930: Swap(00002)
00931: Apply
00932: Swap(00002)
00933: Apply
00934: PushFn(00916, 00002)
00935: Swap(00002)
00936: Apply
00937: Swap(00002)
00938: Apply
00939: PushFn(00918, 00001)
00940: Swap(00002)
00941: Apply
00942:   Return
00943: PushVar(00000)
00944: PushVar(00001)
00945: Swap(00002)
00946: Apply
00947:   Return
00948: PushFn(00943, 00001)
00949:   Return
00950: PushFn(00948, 00000)
00951:   Return
00952: PushVar(00000)
00953:   Return
00954: PushFn(00952, 00000)
00955:   Return
00956: PushVar(00000)
00957: PushVar(00001)
00958: Swap(00002)
00959: Apply
00960:   Return
00961: PushFn(00956, 00001)
00962:   Return
00963: PushFn(00961, 00000)
00964:   Return
00965: PushVar(00000)
00966: PushVar(00001)
00967: Swap(00002)
00968: Apply
00969:   Return
00970: PushFn(00965, 00001)
00971:   Return
00972: PushFn(00970, 00000)
00973:   Return
00974: PushVar(00004)
00975: PushVar(00003)
00976: Swap(00002)
00977: Apply
00978:   Return
00979: PushVar(00000)
00980:   Return
00981: PushFn(00979, 00000)
00982:   Return
00983: PushVar(00000)
00984: PushVar(00001)
00985: Swap(00002)
00986: Apply
00987:   Return
00988: PushFn(00983, 00001)
00989:   Return
00990: PushFn(00988, 00000)
00991:   Return
00992: PushVar(00000)
00993: PushVar(00001)
00994: Swap(00002)
00995: Apply
00996:   Return
00997: PushFn(00992, 00001)
00998:   Return
00999: PushFn(00997, 00000)
01000:   Return
01001: PushVar(00003)
01002: PushVar(00002)
01003: PushVar(00001)
01004: PushVar(00000)
01005: Swap(00004)
01006: If
01007: Apply
01008:   Return
01009: PushFn(01001, 00003)
01010:   Return
01011: PushFn(01009, 00002)
01012:   Return
01013: PushFn(01011, 00001)
01014:   Return
01015: PushVar(00003)
01016: PushVar(00002)
01017: PushVar(00001)
01018: PushVar(00000)
01019: Swap(00004)
01020: If
01021: Apply
01022:   Return
01023: PushFn(01015, 00003)
01024:   Return
01025: PushFn(01023, 00002)
01026:   Return
01027: PushFn(01025, 00001)
01028:   Return
01029: PushEffect("no-match")
01030: PushString("")
01031: PushString("")
01032: PushVar(00003)
01033: Swap(00002)
01034: Apply
01035: PushVar(00002)
01036: Swap(00002)
01037: Apply
01038: Swap(00002)
01039: Apply
01040: PushString("")
01041: PushVar(00007)
01042: Swap(00002)
01043: Apply
01044: PushVar(00006)
01045: Swap(00002)
01046: Apply
01047: Swap(00002)
01048: Apply
01049: Swap(00002)
01050: Apply
01051:   Return
01052: PushString("Nil")
01053:   Return
01054: PushFn(01027, 00000)
01055: PushVar(00012)
01056: PushVar(00005)
01057: Swap(00002)
01058: Apply
01059: PushVar(00001)
01060: Swap(00002)
01061: Apply
01062: Swap(00002)
01063: Apply
01064: PushString("False")
01065: Swap(00002)
01066: Apply
01067: PushFn(01029, 00007)
01068: Swap(00002)
01069: Apply
01070: PushFn(01052, 00000)
01071: Swap(00002)
01072: Apply
01073:   Return
01074: PushString("Nil")
01075:   Return
01076: PushFn(01013, 00000)
01077: PushVar(00005)
01078: Swap(00002)
01079: Apply
01080: PushVar(00001)
01081: Swap(00002)
01082: Apply
01083: PushFn(01054, 00012)
01084: Swap(00002)
01085: Apply
01086: PushFn(01074, 00000)
01087: Swap(00002)
01088: Apply
01089:   Return
01090: PushFn(00999, 00000)
01091: PushString(""val2"")
01092: Swap(00002)
01093: Apply
01094: PushVar(00008)
01095: PushVar(00001)
01096: Swap(00002)
01097: Apply
01098: Swap(00002)
01099: Apply
01100: PushFn(01076, 00011)
01101: Swap(00002)
01102: Apply
01103:   Return
01104: PushFn(00990, 00000)
01105: PushString(""var2"")
01106: Swap(00002)
01107: Apply
01108: PushVar(00006)
01109: PushVar(00000)
01110: Swap(00002)
01111: Apply
01112: Swap(00002)
01113: Apply
01114: PushFn(01090, 00010)
01115: Swap(00002)
01116: Apply
01117:   Return
01118: PushFn(01104, 00009)
01119:   Return
01120: PushFn(00974, 00004)
01121: PushVar(00012)
01122: PushFn(00981, 00000)
01123: PushString("")
01124: PushString(""_"")
01125: Swap(00002)
01126: Apply
01127: PushString(""b"")
01128: Swap(00002)
01129: Apply
01130: Swap(00002)
01131: Apply
01132: PushFn(01118, 00008)
01133: Swap(00002)
01134: Apply
01135: Swap(00002)
01136: Apply
01137: PushString("Nil")
01138: Swap(00002)
01139: Apply
01140: PushVar(00003)
01141: Swap(00002)
01142: Apply
01143: Swap(00002)
01144: Apply
01145:   Return
01146: PushFn(00972, 00000)
01147: PushString(""val1"")
01148: Swap(00002)
01149: Apply
01150: PushVar(00004)
01151: PushVar(00001)
01152: Swap(00002)
01153: Apply
01154: Swap(00002)
01155: Apply
01156: PushFn(01120, 00012)
01157: Swap(00002)
01158: Apply
01159:   Return
01160: PushFn(00963, 00000)
01161: PushString(""var1"")
01162: Swap(00002)
01163: Apply
01164: PushVar(00002)
01165: PushVar(00000)
01166: Swap(00002)
01167: Apply
01168: Swap(00002)
01169: Apply
01170: PushFn(01146, 00011)
01171: Swap(00002)
01172: Apply
01173:   Return
01174: PushFn(01160, 00010)
01175:   Return
01176: PushVar(00000)
01177: PushVar(00001)
01178: Swap(00002)
01179: Apply
01180:   Return
01181: PushFn(01176, 00001)
01182:   Return
01183: PushFn(01181, 00000)
01184:   Return
01185: PushVar(00000)
01186: Rec
01187:   Return
01188: PushFn(01185, 00000)
01189:   Return
01190: PushVar(00000)
01191:   Return
01192: PushFn(01190, 00000)
01193:   Return
01194: PushVar(00002)
01195: PushVar(00001)
01196: PushVar(00000)
01197: Swap(00003)
01198: Pop
01199: Apply
01200: Apply
01201:   Return
01202: PushFn(01194, 00002)
01203:   Return
01204: PushFn(01202, 00001)
01205:   Return
01206: PushVar(00000)
01207:   Return
01208: PushFn(01206, 00000)
01209:   Return
01210: PushVar(00003)
01211: PushVar(00002)
01212: PushVar(00001)
01213: PushVar(00000)
01214: Swap(00004)
01215: If
01216: Apply
01217:   Return
01218: PushFn(01210, 00003)
01219:   Return
01220: PushFn(01218, 00002)
01221:   Return
01222: PushFn(01220, 00001)
01223:   Return
01224: PushString("Bindings")
01225: PushString("")
01226: PushVar(00001)
01227: Swap(00002)
01228: Apply
01229: PushVar(00003)
01230: Swap(00002)
01231: Apply
01232: Swap(00002)
01233: Apply
01234:   Return
01235: PushVar(00003)
01236: PushVar(00002)
01237: PushVar(00001)
01238: PushVar(00000)
01239: Swap(00004)
01240: If
01241: Apply
01242:   Return
01243: PushFn(01235, 00003)
01244:   Return
01245: PushFn(01243, 00002)
01246:   Return
01247: PushFn(01245, 00001)
01248:   Return
01249: PushVar(00000)
01250: PushVar(00001)
01251: Swap(00002)
01252: Apply
01253:   Return
01254: PushFn(01249, 00001)
01255:   Return
01256: PushFn(01254, 00000)
01257:   Return
01258: PushVar(00003)
01259: PushVar(00002)
01260: PushVar(00001)
01261: PushVar(00000)
01262: Swap(00004)
01263: If
01264: Apply
01265:   Return
01266: PushFn(01258, 00003)
01267:   Return
01268: PushFn(01266, 00002)
01269:   Return
01270: PushFn(01268, 00001)
01271:   Return
01272: PushEffect("no-match")
01273: PushString("")
01274: PushVar(00004)
01275: Swap(00002)
01276: Apply
01277: PushVar(00006)
01278: Swap(00002)
01279: Apply
01280: Swap(00002)
01281: Apply
01282:   Return
01283: PushVar(00000)
01284: PushVar(00001)
01285: Swap(00002)
01286: Apply
01287:   Return
01288: PushFn(01283, 00001)
01289:   Return
01290: PushFn(01288, 00000)
01291:   Return
01292: PushVar(00010)
01293: PushVar(00000)
01294: Swap(00002)
01295: Apply
01296:   Return
01297: PushFn(01290, 00000)
01298: PushString(""unified"")
01299: Swap(00002)
01300: Apply
01301: PushVar(00012)
01302: PushString("Bindings")
01303: Swap(00002)
01304: Apply
01305: PushVar(00015)
01306: PushVar(00016)
01307: PushVar(00008)
01308: Swap(00002)
01309: Apply
01310: Swap(00002)
01311: Apply
01312: PushVar(00001)
01313: Swap(00002)
01314: Apply
01315: Swap(00002)
01316: Apply
01317: Swap(00002)
01318: Apply
01319: PushFn(01292, 00010)
01320: Swap(00002)
01321: Apply
01322:   Return
01323: PushFn(01270, 00000)
01324: PushVar(00000)
01325: Swap(00002)
01326: Apply
01327: PushString("Nil")
01328: Swap(00002)
01329: Apply
01330: PushFn(01272, 00006)
01331: Swap(00002)
01332: Apply
01333: PushFn(01297, 00016)
01334: Swap(00002)
01335: Apply
01336:   Return
01337: PushFn(01256, 00000)
01338: PushString(""zipped"")
01339: Swap(00002)
01340: Apply
01341: PushVar(00012)
01342: PushVar(00002)
01343: Swap(00002)
01344: Apply
01345: PushVar(00004)
01346: Swap(00002)
01347: Apply
01348: Swap(00002)
01349: Apply
01350: PushFn(01323, 00015)
01351: Swap(00002)
01352: Apply
01353:   Return
01354: PushVar(00003)
01355: PushVar(00002)
01356: PushVar(00001)
01357: PushVar(00000)
01358: Swap(00004)
01359: If
01360: Apply
01361:   Return
01362: PushFn(01354, 00003)
01363:   Return
01364: PushFn(01362, 00002)
01365:   Return
01366: PushFn(01364, 00001)
01367:   Return
01368: PushString("Nil")
01369:   Return
01370: PushEffect("no-match")
01371: PushString("")
01372: PushVar(00003)
01373: Swap(00002)
01374: Apply
01375: PushVar(00005)
01376: Swap(00002)
01377: Apply
01378: Swap(00002)
01379: Apply
01380:   Return
01381: PushFn(01366, 00000)
01382: PushVar(00011)
01383: PushVar(00002)
01384: Swap(00002)
01385: Apply
01386: PushVar(00004)
01387: Swap(00002)
01388: Apply
01389: Swap(00002)
01390: Apply
01391: PushString("True")
01392: Swap(00002)
01393: Apply
01394: PushFn(01368, 00000)
01395: Swap(00002)
01396: Apply
01397: PushFn(01370, 00005)
01398: Swap(00002)
01399: Apply
01400:   Return
01401: PushFn(01247, 00000)
01402: PushVar(00002)
01403: Swap(00002)
01404: Apply
01405: PushString("Compound")
01406: Swap(00002)
01407: Apply
01408: PushFn(01337, 00014)
01409: Swap(00002)
01410: Apply
01411: PushFn(01381, 00011)
01412: Swap(00002)
01413: Apply
01414:   Return
01415: PushFn(01222, 00000)
01416: PushVar(00001)
01417: Swap(00002)
01418: Apply
01419: PushString("Binding")
01420: Swap(00002)
01421: Apply
01422: PushFn(01224, 00003)
01423: Swap(00002)
01424: Apply
01425: PushFn(01401, 00013)
01426: Swap(00002)
01427: Apply
01428:   Return
01429: PushFn(01415, 00012)
01430:   Return
01431: PushEffect("invalid")
01432: PushVar(00002)
01433: Swap(00002)
01434: Apply
01435:   Return
01436: PushFn(01204, 00000)
01437: PushVar(00001)
01438: Swap(00002)
01439: Apply
01440: PushFn(01208, 00000)
01441: PushString("")
01442: PushString(""type"")
01443: Swap(00002)
01444: Apply
01445: PushString(""pattern"")
01446: Swap(00002)
01447: Apply
01448: Swap(00002)
01449: Apply
01450: PushFn(01429, 00011)
01451: Swap(00002)
01452: Apply
01453: Swap(00002)
01454: Apply
01455: PushFn(01431, 00002)
01456: Swap(00002)
01457: Apply
01458:   Return
01459: PushFn(01436, 00010)
01460:   Return
01461: PushFn(01192, 00000)
01462: PushString("")
01463: PushString(""pattern"")
01464: Swap(00002)
01465: Apply
01466: PushString(""value"")
01467: Swap(00002)
01468: Apply
01469: Swap(00002)
01470: Apply
01471: PushFn(01459, 00009)
01472: Swap(00002)
01473: Apply
01474:   Return
01475: PushVar(00000)
01476: PushVar(00001)
01477: Swap(00002)
01478: Apply
01479:   Return
01480: PushFn(01475, 00001)
01481:   Return
01482: PushFn(01480, 00000)
01483:   Return
01484: PushVar(00000)
01485:   Return
01486: PushFn(01484, 00000)
01487:   Return
01488: PushVar(00000)
01489: Apply
01490: Apply
01491:   Return
01492: PushVar(00002)
01493: PushVar(00001)
01494: PushFn(01488, 00000)
01495: Swap(00003)
01496: Try
01497: Apply
01498: Unwind
01499:   Return
01500: PushFn(01492, 00002)
01501:   Return
01502: PushFn(01500, 00001)
01503:   Return
01504: PushVar(00000)
01505: PushVar(00001)
01506: Swap(00002)
01507: Apply
01508:   Return
01509: PushFn(01504, 00001)
01510:   Return
01511: PushFn(01509, 00000)
01512:   Return
01513: PushVar(00000)
01514: PushVar(00001)
01515: Swap(00002)
01516: Apply
01517:   Return
01518: PushFn(01513, 00001)
01519:   Return
01520: PushFn(01518, 00000)
01521:   Return
01522: PushVar(00003)
01523: PushVar(00002)
01524: PushVar(00001)
01525: PushVar(00000)
01526: Swap(00004)
01527: If
01528: Apply
01529:   Return
01530: PushFn(01522, 00003)
01531:   Return
01532: PushFn(01530, 00002)
01533:   Return
01534: PushFn(01532, 00001)
01535:   Return
01536: PushVar(00005)
01537: PushString("")
01538: Swap(00002)
01539: Apply
01540:   Return
01541: PushVar(00015)
01542: PushVar(00005)
01543: Swap(00002)
01544: Apply
01545: PushVar(00001)
01546: Swap(00002)
01547: Apply
01548:   Return
01549: PushFn(01534, 00000)
01550: PushVar(00001)
01551: Swap(00002)
01552: Apply
01553: PushString("Nil")
01554: Swap(00002)
01555: Apply
01556: PushFn(01536, 00005)
01557: Swap(00002)
01558: Apply
01559: PushFn(01541, 00015)
01560: Swap(00002)
01561: Apply
01562:   Return
01563: PushFn(01520, 00000)
01564: PushString(""args"")
01565: Swap(00002)
01566: Apply
01567: PushVar(00012)
01568: PushVar(00008)
01569: Swap(00002)
01570: Apply
01571: PushVar(00000)
01572: Swap(00002)
01573: Apply
01574: Swap(00002)
01575: Apply
01576: PushFn(01549, 00014)
01577: Swap(00002)
01578: Apply
01579:   Return
01580: PushFn(01511, 00000)
01581: PushString(""unified"")
01582: Swap(00002)
01583: Apply
01584: PushVar(00004)
01585: PushVar(00003)
01586: Swap(00002)
01587: Apply
01588: PushVar(00001)
01589: Swap(00002)
01590: Apply
01591: Swap(00002)
01592: Apply
01593: PushFn(01563, 00013)
01594: Swap(00002)
01595: Apply
01596:   Return
01597: PushVar(00000)
01598:   Return
01599: PushFn(01597, 00000)
01600:   Return
01601: PushEffect("no-match")
01602: PushVar(00000)
01603: Swap(00002)
01604: Apply
01605:   Return
01606: PushFn(01601, 00000)
01607:   Return
01608: PushFn(01502, 00000)
01609: PushFn(01580, 00012)
01610: Swap(00002)
01611: Apply
01612: PushEffect("no-match")
01613: Swap(00002)
01614: Apply
01615: PushFn(01599, 00000)
01616: PushString("")
01617: PushString(""_"")
01618: Swap(00002)
01619: Apply
01620: PushString(""arg"")
01621: Swap(00002)
01622: Apply
01623: Swap(00002)
01624: Apply
01625: PushFn(01606, 00000)
01626: Swap(00002)
01627: Apply
01628: Swap(00002)
01629: Apply
01630:   Return
01631: PushFn(01608, 00011)
01632:   Return
01633: PushFn(01631, 00010)
01634:   Return
01635: PushVar(00000)
01636: PushVar(00001)
01637: Swap(00002)
01638: Apply
01639:   Return
01640: PushFn(01635, 00001)
01641:   Return
01642: PushFn(01640, 00000)
01643:   Return
01644: PushVar(00000)
01645:   Return
01646: PushFn(01644, 00000)
01647:   Return
01648: PushVar(00000)
01649: PushVar(00001)
01650: Swap(00002)
01651: Apply
01652:   Return
01653: PushFn(01648, 00001)
01654:   Return
01655: PushFn(01653, 00000)
01656:   Return
01657: PushVar(00000)
01658:   Return
01659: PushFn(01657, 00000)
01660:   Return
01661: PushVar(00003)
01662: PushVar(00002)
01663: PushVar(00001)
01664: PushVar(00000)
01665: Swap(00004)
01666: If
01667: Apply
01668:   Return
01669: PushFn(01661, 00003)
01670:   Return
01671: PushFn(01669, 00002)
01672:   Return
01673: PushFn(01671, 00001)
01674:   Return
01675: PushVar(00000)
01676: Apply
01677: Apply
01678:   Return
01679: PushVar(00002)
01680: PushVar(00001)
01681: PushFn(01675, 00000)
01682: Swap(00003)
01683: Try
01684: Apply
01685: Unwind
01686:   Return
01687: PushFn(01679, 00002)
01688:   Return
01689: PushFn(01687, 00001)
01690:   Return
01691: PushString("Match")
01692: PushVar(00002)
01693: PushVar(00005)
01694: Swap(00002)
01695: Apply
01696: Swap(00002)
01697: Apply
01698:   Return
01699: PushVar(00000)
01700:   Return
01701: PushFn(01699, 00000)
01702:   Return
01703: PushString("Nil")
01704:   Return
01705: PushFn(01703, 00000)
01706:   Return
01707: PushFn(01689, 00000)
01708: PushFn(01691, 00005)
01709: Swap(00002)
01710: Apply
01711: PushEffect("no-match")
01712: Swap(00002)
01713: Apply
01714: PushFn(01701, 00000)
01715: PushString("")
01716: PushString(""r"")
01717: Swap(00002)
01718: Apply
01719: PushString(""arg"")
01720: Swap(00002)
01721: Apply
01722: Swap(00002)
01723: Apply
01724: PushFn(01705, 00000)
01725: Swap(00002)
01726: Apply
01727: Swap(00002)
01728: Apply
01729:   Return
01730: PushVar(00002)
01731:   Return
01732: PushFn(01673, 00000)
01733: PushVar(00001)
01734: Swap(00002)
01735: Apply
01736: PushString("Nil")
01737: Swap(00002)
01738: Apply
01739: PushFn(01707, 00004)
01740: Swap(00002)
01741: Apply
01742: PushFn(01730, 00002)
01743: Swap(00002)
01744: Apply
01745:   Return
01746: PushFn(01732, 00003)
01747:   Return
01748: PushVar(00002)
01749: PushVar(00001)
01750: PushVar(00000)
01751: Swap(00003)
01752: Pop
01753: Apply
01754: Apply
01755:   Return
01756: PushFn(01748, 00002)
01757:   Return
01758: PushFn(01756, 00001)
01759:   Return
01760: PushVar(00000)
01761:   Return
01762: PushFn(01760, 00000)
01763:   Return
01764: PushVar(00000)
01765:   Return
01766: PushFn(01764, 00000)
01767:   Return
01768: PushEffect("no-match")
01769: PushVar(00003)
01770: Swap(00002)
01771: Apply
01772:   Return
01773: PushFn(01758, 00000)
01774: PushVar(00000)
01775: Swap(00002)
01776: Apply
01777: PushFn(01762, 00000)
01778: PushString("")
01779: PushString(""_"")
01780: Swap(00002)
01781: Apply
01782: PushString(""result"")
01783: Swap(00002)
01784: Apply
01785: Swap(00002)
01786: Apply
01787: PushFn(01766, 00000)
01788: Swap(00002)
01789: Apply
01790: Swap(00002)
01791: Apply
01792: PushFn(01768, 00003)
01793: Swap(00002)
01794: Apply
01795:   Return
01796: PushFn(01655, 00000)
01797: PushString(""result"")
01798: Swap(00002)
01799: Apply
01800: PushVar(00013)
01801: PushFn(01659, 00000)
01802: PushString("")
01803: PushString(""result"")
01804: Swap(00002)
01805: Apply
01806: PushString(""clause"")
01807: Swap(00002)
01808: Apply
01809: Swap(00002)
01810: Apply
01811: PushFn(01746, 00002)
01812: Swap(00002)
01813: Apply
01814: Swap(00002)
01815: Apply
01816: PushString("Nil")
01817: Swap(00002)
01818: Apply
01819: PushVar(00012)
01820: PushString("List")
01821: Swap(00002)
01822: Apply
01823: PushVar(00000)
01824: Swap(00002)
01825: Apply
01826: Swap(00002)
01827: Apply
01828: Swap(00002)
01829: Apply
01830: PushFn(01773, 00002)
01831: Swap(00002)
01832: Apply
01833:   Return
01834: PushFn(01796, 00013)
01835:   Return
01836: PushString("Twice")
01837: PushVar(00000)
01838: Swap(00002)
01839: Apply
01840: PushVar(00000)
01841: Swap(00002)
01842: Apply
01843:   Return
01844: PushFn(01836, 00000)
01845:   Return
01846: PushString("SecondIsFoo")
01847:   Return
01848: PushVar(00000)
01849:   Return
01850: PushFn(01848, 00000)
01851:   Return
01852: PushEffect("throw")
01853: PushString("InvalidPair")
01854: Swap(00002)
01855: Apply
01856:   Return
01857: PushVar(00000)
01858: Apply
01859: Apply
01860:   Return
01861: PushVar(00002)
01862: PushVar(00001)
01863: PushFn(01857, 00000)
01864: Swap(00003)
01865: Try
01866: Apply
01867: Unwind
01868:   Return
01869: PushFn(01861, 00002)
01870:   Return
01871: PushFn(01869, 00001)
01872:   Return
01873: PushString("Twice")
01874: PushVar(00000)
01875: Swap(00002)
01876: Apply
01877: PushVar(00000)
01878: Swap(00002)
01879: Apply
01880:   Return
01881: PushFn(01873, 00000)
01882:   Return
01883: PushString("SecondIsFoo")
01884:   Return
01885: PushVar(00000)
01886:   Return
01887: PushFn(01885, 00000)
01888:   Return
01889: PushVar(00001)
01890: PushString("Foo")
01891: Swap(00002)
01892: Apply
01893: PushString("")
01894: PushVar(00002)
01895: PushString("Compound")
01896: PushString("Pair")
01897: PushString("Binding")
01898: PushString(""x"")
01899: Swap(00002)
01900: Apply
01901: Swap(00002)
01902: Apply
01903: PushString("Binding")
01904: PushString(""x"")
01905: Swap(00002)
01906: Apply
01907: Swap(00002)
01908: Apply
01909: Swap(00002)
01910: Apply
01911: Swap(00002)
01912: Apply
01913: PushFn(01881, 00000)
01914: Swap(00002)
01915: Apply
01916: Swap(00002)
01917: Apply
01918: PushVar(00002)
01919: PushString("Compound")
01920: PushString("Pair")
01921: PushString("Binding")
01922: PushString(""x"")
01923: Swap(00002)
01924: Apply
01925: Swap(00002)
01926: Apply
01927: PushString("Value")
01928: PushString("Foo")
01929: Swap(00002)
01930: Apply
01931: Swap(00002)
01932: Apply
01933: Swap(00002)
01934: Apply
01935: Swap(00002)
01936: Apply
01937: PushFn(01883, 00000)
01938: Swap(00002)
01939: Apply
01940: Swap(00002)
01941: Apply
01942: PushVar(00002)
01943: PushString("Compound")
01944: PushString("Pair")
01945: PushString("Binding")
01946: PushString(""x"")
01947: Swap(00002)
01948: Apply
01949: Swap(00002)
01950: Apply
01951: PushString("Binding")
01952: PushString(""y"")
01953: Swap(00002)
01954: Apply
01955: Swap(00002)
01956: Apply
01957: Swap(00002)
01958: Apply
01959: Swap(00002)
01960: Apply
01961: PushFn(01887, 00000)
01962: Swap(00002)
01963: Apply
01964: Swap(00002)
01965: Apply
01966: Swap(00002)
01967: Apply
01968:   Return
01969: PushVar(00000)
01970:   Return
01971: PushFn(01969, 00000)
01972:   Return
01973: PushString("NoMatch")
01974: PushVar(00000)
01975: Swap(00002)
01976: Apply
01977:   Return
01978: PushFn(01973, 00000)
01979:   Return
01980: PushString("")
01981: PushVar(00000)
01982: PushString("Pair")
01983: PushString("Foo")
01984: Swap(00002)
01985: Apply
01986: PushString("Bar")
01987: Swap(00002)
01988: Apply
01989: Swap(00002)
01990: Apply
01991: PushString("")
01992: PushVar(00001)
01993: PushString("Compound")
01994: PushString("Pair")
01995: PushString("Binding")
01996: PushString(""x"")
01997: Swap(00002)
01998: Apply
01999: Swap(00002)
02000: Apply
02001: PushString("Binding")
02002: PushString(""x"")
02003: Swap(00002)
02004: Apply
02005: Swap(00002)
02006: Apply
02007: Swap(00002)
02008: Apply
02009: Swap(00002)
02010: Apply
02011: PushFn(01844, 00000)
02012: Swap(00002)
02013: Apply
02014: Swap(00002)
02015: Apply
02016: PushVar(00001)
02017: PushString("Compound")
02018: PushString("Pair")
02019: PushString("Binding")
02020: PushString(""x"")
02021: Swap(00002)
02022: Apply
02023: Swap(00002)
02024: Apply
02025: PushString("Value")
02026: PushString("Foo")
02027: Swap(00002)
02028: Apply
02029: Swap(00002)
02030: Apply
02031: Swap(00002)
02032: Apply
02033: Swap(00002)
02034: Apply
02035: PushFn(01846, 00000)
02036: Swap(00002)
02037: Apply
02038: Swap(00002)
02039: Apply
02040: PushVar(00001)
02041: PushString("Compound")
02042: PushString("Pair")
02043: PushString("Binding")
02044: PushString(""x"")
02045: Swap(00002)
02046: Apply
02047: Swap(00002)
02048: Apply
02049: PushString("Binding")
02050: PushString(""y"")
02051: Swap(00002)
02052: Apply
02053: Swap(00002)
02054: Apply
02055: Swap(00002)
02056: Apply
02057: Swap(00002)
02058: Apply
02059: PushFn(01850, 00000)
02060: Swap(00002)
02061: Apply
02062: Swap(00002)
02063: Apply
02064: PushVar(00001)
02065: PushString("Binding")
02066: PushString(""_"")
02067: Swap(00002)
02068: Apply
02069: Swap(00002)
02070: Apply
02071: PushFn(01852, 00000)
02072: Swap(00002)
02073: Apply
02074: Swap(00002)
02075: Apply
02076: Swap(00002)
02077: Apply
02078: Swap(00002)
02079: Apply
02080: PushFn(01871, 00000)
02081: PushFn(01889, 00002)
02082: Swap(00002)
02083: Apply
02084: PushEffect("no-match")
02085: Swap(00002)
02086: Apply
02087: PushFn(01971, 00000)
02088: PushString("")
02089: PushString(""_"")
02090: Swap(00002)
02091: Apply
02092: PushString(""arg"")
02093: Swap(00002)
02094: Apply
02095: Swap(00002)
02096: Apply
02097: PushFn(01978, 00000)
02098: Swap(00002)
02099: Apply
02100: Swap(00002)
02101: Apply
02102: Swap(00002)
02103: Apply
02104:   Return
02105: PushFn(01642, 00000)
02106: PushString(""match-with"")
02107: Swap(00002)
02108: Apply
02109: PushFn(01646, 00000)
02110: PushString("")
02111: PushString(""value"")
02112: Swap(00002)
02113: Apply
02114: PushString(""clauses"")
02115: Swap(00002)
02116: Apply
02117: Swap(00002)
02118: Apply
02119: PushFn(01834, 00012)
02120: Swap(00002)
02121: Apply
02122: Swap(00002)
02123: Apply
02124: PushFn(01980, 00001)
02125: Swap(00002)
02126: Apply
02127:   Return
02128: PushFn(01482, 00000)
02129: PushString(""->"")
02130: Swap(00002)
02131: Apply
02132: PushFn(01486, 00000)
02133: PushString("")
02134: PushString(""pattern"")
02135: Swap(00002)
02136: Apply
02137: PushString(""body"")
02138: Swap(00002)
02139: Apply
02140: PushString(""value"")
02141: Swap(00002)
02142: Apply
02143: Swap(00002)
02144: Apply
02145: PushFn(01633, 00009)
02146: Swap(00002)
02147: Apply
02148: Swap(00002)
02149: Apply
02150: PushFn(02105, 00011)
02151: Swap(00002)
02152: Apply
02153:   Return
02154: PushFn(01183, 00000)
02155: PushString(""unify"")
02156: Swap(00002)
02157: Apply
02158: PushFn(01188, 00000)
02159: PushString(""unify"")
02160: Swap(00002)
02161: Apply
02162: PushFn(01461, 00008)
02163: Swap(00002)
02164: Apply
02165: Swap(00002)
02166: Apply
02167: PushFn(02128, 00010)
02168: Swap(00002)
02169: Apply
02170:   Return
02171: PushFn(00950, 00000)
02172: PushString(""join"")
02173: Swap(00002)
02174: Apply
02175: PushVar(00008)
02176: PushFn(00954, 00000)
02177: PushString("")
02178: PushString(""acc"")
02179: Swap(00002)
02180: Apply
02181: PushString(""binding"")
02182: Swap(00002)
02183: Apply
02184: Swap(00002)
02185: Apply
02186: PushFn(01174, 00009)
02187: Swap(00002)
02188: Apply
02189: Swap(00002)
02190: Apply
02191: PushString("Bindings")
02192: Swap(00002)
02193: Apply
02194: Swap(00002)
02195: Apply
02196: PushFn(02154, 00009)
02197: Swap(00002)
02198: Apply
02199:   Return
02200: PushFn(00889, 00000)
02201: PushString(""first"")
02202: Swap(00002)
02203: Apply
02204: PushFn(00893, 00000)
02205: PushString(""xs"")
02206: Swap(00002)
02207: Apply
02208: PushFn(00920, 00001)
02209: Swap(00002)
02210: Apply
02211: Swap(00002)
02212: Apply
02213: PushFn(02171, 00008)
02214: Swap(00002)
02215: Apply
02216:   Return
02217: PushFn(00831, 00000)
02218: PushString(""last"")
02219: Swap(00002)
02220: Apply
02221: PushFn(00835, 00000)
02222: PushString(""xs"")
02223: Swap(00002)
02224: Apply
02225: PushFn(00859, 00000)
02226: Swap(00002)
02227: Apply
02228: Swap(00002)
02229: Apply
02230: PushFn(02200, 00007)
02231: Swap(00002)
02232: Apply
02233:   Return
02234: PushFn(00768, 00000)
02235: PushString(""flatten"")
02236: Swap(00002)
02237: Apply
02238: PushVar(00005)
02239: PushFn(00772, 00000)
02240: PushString("")
02241: PushString(""acc"")
02242: Swap(00002)
02243: Apply
02244: PushString(""x"")
02245: Swap(00002)
02246: Apply
02247: Swap(00002)
02248: Apply
02249: PushFn(00822, 00000)
02250: Swap(00002)
02251: Apply
02252: Swap(00002)
02253: Apply
02254: Swap(00002)
02255: Apply
02256: PushFn(02217, 00006)
02257: Swap(00002)
02258: Apply
02259:   Return
02260: PushFn(00574, 00000)
02261: PushString(""=="")
02262: Swap(00002)
02263: Apply
02264: PushFn(00579, 00000)
02265: PushString(""=="")
02266: Swap(00002)
02267: Apply
02268: PushFn(00747, 00000)
02269: Swap(00002)
02270: Apply
02271: Swap(00002)
02272: Apply
02273: PushFn(02234, 00005)
02274: Swap(00002)
02275: Apply
02276:   Return
02277: PushFn(00314, 00000)
02278: PushString(""zip"")
02279: Swap(00002)
02280: Apply
02281: PushFn(00319, 00000)
02282: PushString(""zip"")
02283: Swap(00002)
02284: Apply
02285: PushFn(00553, 00000)
02286: Swap(00002)
02287: Apply
02288: Swap(00002)
02289: Apply
02290: PushFn(02260, 00004)
02291: Swap(00002)
02292: Apply
02293:   Return
02294: PushFn(00223, 00000)
02295: PushString(""map"")
02296: Swap(00002)
02297: Apply
02298: PushFn(00228, 00000)
02299: PushString(""map"")
02300: Swap(00002)
02301: Apply
02302: PushFn(00293, 00000)
02303: Swap(00002)
02304: Apply
02305: Swap(00002)
02306: Apply
02307: PushFn(02277, 00003)
02308: Swap(00002)
02309: Apply
02310:   Return
02311: PushFn(00194, 00000)
02312: PushString(""apply"")
02313: Swap(00002)
02314: Apply
02315: PushFn(00198, 00000)
02316: PushString("")
02317: PushString(""f"")
02318: Swap(00002)
02319: Apply
02320: PushString(""xs"")
02321: Swap(00002)
02322: Apply
02323: Swap(00002)
02324: Apply
02325: PushFn(00214, 00001)
02326: Swap(00002)
02327: Apply
02328: Swap(00002)
02329: Apply
02330: PushFn(02294, 00002)
02331: Swap(00002)
02332: Apply
02333:   Return
02334: PushFn(00106, 00000)
02335: PushString(""rev"")
02336: Swap(00002)
02337: Apply
02338: PushFn(00111, 00000)
02339: PushString(""rev"")
02340: Swap(00002)
02341: Apply
02342: PushFn(00173, 00000)
02343: Swap(00002)
02344: Apply
02345: Swap(00002)
02346: Apply
02347: PushFn(02311, 00001)
02348: Swap(00002)
02349: Apply
02350:   Return
02351: PushFn(00007, 00000)
02352: PushString(""fold"")
02353: Swap(00002)
02354: Apply
02355: PushFn(00012, 00000)
02356: PushString(""fold"")
02357: Swap(00002)
02358: Apply
02359: PushFn(00082, 00000)
02360: Swap(00002)
02361: Apply
02362: Swap(00002)
02363: Apply
02364: PushFn(02334, 00000)
02365: Swap(00002)
02366: Apply

(Bar, NoMatch(Foo))