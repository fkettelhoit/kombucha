:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
fold([:acc, :x] => { acc(x) }, [], [A, B, C])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(fold
  (=>
    [ :acc
      :x ]
    { (acc
        x) })
  [  ]
  [ A
    B
    C ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( 0
          ( ( =>
                =>
                  0
              ( ( []
                  "x" )
                "acc" ) )
            =>
              =>
                ( 1
                  0 ) ) )
        [] )
      ( ( ( []
            C )
          B )
        A ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""x"")
00065: AppFnToArg
00066: PushString(""xs"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""xs"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""f"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092:   Return
00093: LoadFn { code: 00091, fvars: 00000 }
00094:   Return
00095: LoadVar(00001)
00096: LoadVar(00000)
00097: AppFnToArg
00098:   Return
00099: LoadFn { code: 00095, fvars: 00001 }
00100:   Return
00101: LoadVar(00000)
00102: LoadFn { code: 00093, fvars: 00000 }
00103: PushString("")
00104: PushString(""x"")
00105: AppFnToArg
00106: PushString(""acc"")
00107: AppFnToArg
00108: AppFnToArg
00109: LoadFn { code: 00099, fvars: 00000 }
00110: AppFnToArg
00111: AppFnToArg
00112: PushString("")
00113: AppFnToArg
00114: PushString("")
00115: PushString("C")
00116: AppFnToArg
00117: PushString("B")
00118: AppFnToArg
00119: PushString("A")
00120: AppFnToArg
00121: AppFnToArg
00122:   Return
00123: LoadFn { code: 00016, fvars: 00000 }
00124: PushString(""fold"")
00125: AppFnToArg
00126: LoadFn { code: 00022, fvars: 00000 }
00127: PushString(""fold"")
00128: AppFnToArg
00129: LoadFn { code: 00079, fvars: 00000 }
00130: AppFnToArg
00131: AppFnToArg
00132: LoadFn { code: 00101, fvars: 00000 }
00133: AppFnToArg
00134:   Return

[C, B, A]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:rev = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
rev([A, B, C])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :rev
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(rev
  [ A
    B
    C ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( 0
          ( ( ( []
                C )
              B )
            A ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""x"")
00065: AppFnToArg
00066: PushString(""xs"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""xs"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""f"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00001)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""x"")
00117: AppFnToArg
00118: PushString(""xs"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: PushString("")
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadVar(00000)
00130: PushString("")
00131: PushString("C")
00132: AppFnToArg
00133: PushString("B")
00134: AppFnToArg
00135: PushString("A")
00136: AppFnToArg
00137: AppFnToArg
00138:   Return
00139: LoadFn { code: 00097, fvars: 00000 }
00140: PushString(""rev"")
00141: AppFnToArg
00142: LoadFn { code: 00101, fvars: 00000 }
00143: PushString(""xs"")
00144: AppFnToArg
00145: LoadFn { code: 00113, fvars: 00001 }
00146: AppFnToArg
00147: AppFnToArg
00148: LoadFn { code: 00129, fvars: 00000 }
00149: AppFnToArg
00150:   Return
00151: LoadFn { code: 00016, fvars: 00000 }
00152: PushString(""fold"")
00153: AppFnToArg
00154: LoadFn { code: 00022, fvars: 00000 }
00155: PushString(""fold"")
00156: AppFnToArg
00157: LoadFn { code: 00079, fvars: 00000 }
00158: AppFnToArg
00159: AppFnToArg
00160: LoadFn { code: 00139, fvars: 00000 }
00161: AppFnToArg
00162:   Return

[C, B, A]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:apply = ([:f, :xs] => {
    fold([:f, :x] => { f(x) }, f, xs)
})
apply([:x, :y, :z] => { Triple(x, y, z) }, [A, B, C])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :apply
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :f
            :x ]
          { (f
              x) })
        f
        xs) }))
(apply
  (=>
    [ :x
      :y
      :z ]
    { (Triple
        x
        y
        z) })
  [ A
    B
    C ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "apply" )
        ( ( =>
              =>
                0
            ( ( []
                "xs" )
              "f" ) )
          =>
            =>
              ( ( ( 2
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "f" ) )
                      =>
                        =>
                          ( 1
                            0 ) ) )
                  1 )
                0 ) ) )
      =>
        ( ( 0
            ( ( =>
                  =>
                    0
                ( ( ( []
                      "z" )
                    "y" )
                  "x" ) )
              =>
                =>
                  =>
                    ( ( ( Triple
                          2 )
                        1 )
                      0 ) ) )
          ( ( ( []
                C )
              B )
            A ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""x"")
00065: AppFnToArg
00066: PushString(""xs"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""xs"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""f"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00002)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""x"")
00117: AppFnToArg
00118: PushString(""f"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: LoadVar(00001)
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadFn { code: 00113, fvars: 00002 }
00130:   Return
00131: LoadVar(00000)
00132:   Return
00133: LoadFn { code: 00131, fvars: 00000 }
00134:   Return
00135: PushString("Triple")
00136: LoadVar(00002)
00137: AppFnToArg
00138: LoadVar(00001)
00139: AppFnToArg
00140: LoadVar(00000)
00141: AppFnToArg
00142:   Return
00143: LoadFn { code: 00135, fvars: 00002 }
00144:   Return
00145: LoadFn { code: 00143, fvars: 00001 }
00146:   Return
00147: LoadVar(00000)
00148: LoadFn { code: 00133, fvars: 00000 }
00149: PushString("")
00150: PushString(""z"")
00151: AppFnToArg
00152: PushString(""y"")
00153: AppFnToArg
00154: PushString(""x"")
00155: AppFnToArg
00156: AppFnToArg
00157: LoadFn { code: 00145, fvars: 00000 }
00158: AppFnToArg
00159: AppFnToArg
00160: PushString("")
00161: PushString("C")
00162: AppFnToArg
00163: PushString("B")
00164: AppFnToArg
00165: PushString("A")
00166: AppFnToArg
00167: AppFnToArg
00168:   Return
00169: LoadFn { code: 00097, fvars: 00000 }
00170: PushString(""apply"")
00171: AppFnToArg
00172: LoadFn { code: 00101, fvars: 00000 }
00173: PushString("")
00174: PushString(""xs"")
00175: AppFnToArg
00176: PushString(""f"")
00177: AppFnToArg
00178: AppFnToArg
00179: LoadFn { code: 00129, fvars: 00001 }
00180: AppFnToArg
00181: AppFnToArg
00182: LoadFn { code: 00147, fvars: 00000 }
00183: AppFnToArg
00184:   Return
00185: LoadFn { code: 00016, fvars: 00000 }
00186: PushString(""fold"")
00187: AppFnToArg
00188: LoadFn { code: 00022, fvars: 00000 }
00189: PushString(""fold"")
00190: AppFnToArg
00191: LoadFn { code: 00079, fvars: 00000 }
00192: AppFnToArg
00193: AppFnToArg
00194: LoadFn { code: 00169, fvars: 00000 }
00195: AppFnToArg
00196:   Return

Triple(A, B, C)

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:rev = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:map = ([:f, :xs] => {
    fold([:xs, :x] => { xs(f(x)) }, [], rev(xs))
})
map(:x => { Foo(x) }, [A, B, C])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :rev
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :map
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              (f
                x)) })
        [  ]
        (rev
          xs)) }))
(map
  (=>
    :x
    { (Foo
        x) })
  [ A
    B
    C ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "map" )
            ( ( =>
                  =>
                    0
                ( ( []
                    "xs" )
                  "f" ) )
              =>
                =>
                  ( ( ( 3
                        ( ( =>
                              =>
                                0
                            ( ( []
                                "x" )
                              "xs" ) )
                          =>
                            =>
                              ( 1
                                ( 3
                                  0 ) ) ) )
                      [] )
                    ( 2
                      0 ) ) ) )
          =>
            ( ( 0
                ( ( =>
                      =>
                        0
                    "x" )
                  =>
                    ( Foo
                      0 ) ) )
              ( ( ( []
                    C )
                  B )
                A ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""x"")
00065: AppFnToArg
00066: PushString(""xs"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""xs"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""f"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00001)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""x"")
00117: AppFnToArg
00118: PushString(""xs"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: PushString("")
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadVar(00000)
00130: LoadVar(00001)
00131: AppFnToArg
00132:   Return
00133: LoadFn { code: 00129, fvars: 00001 }
00134:   Return
00135: LoadFn { code: 00133, fvars: 00000 }
00136:   Return
00137: LoadVar(00000)
00138:   Return
00139: LoadFn { code: 00137, fvars: 00000 }
00140:   Return
00141: LoadVar(00000)
00142:   Return
00143: LoadFn { code: 00141, fvars: 00000 }
00144:   Return
00145: LoadVar(00001)
00146: LoadVar(00003)
00147: LoadVar(00000)
00148: AppFnToArg
00149: AppFnToArg
00150:   Return
00151: LoadFn { code: 00145, fvars: 00003 }
00152:   Return
00153: LoadVar(00003)
00154: LoadFn { code: 00143, fvars: 00000 }
00155: PushString("")
00156: PushString(""x"")
00157: AppFnToArg
00158: PushString(""xs"")
00159: AppFnToArg
00160: AppFnToArg
00161: LoadFn { code: 00151, fvars: 00002 }
00162: AppFnToArg
00163: AppFnToArg
00164: PushString("")
00165: AppFnToArg
00166: LoadVar(00002)
00167: LoadVar(00000)
00168: AppFnToArg
00169: AppFnToArg
00170:   Return
00171: LoadFn { code: 00153, fvars: 00003 }
00172:   Return
00173: LoadVar(00000)
00174:   Return
00175: LoadFn { code: 00173, fvars: 00000 }
00176:   Return
00177: PushString("Foo")
00178: LoadVar(00000)
00179: AppFnToArg
00180:   Return
00181: LoadVar(00000)
00182: LoadFn { code: 00175, fvars: 00000 }
00183: PushString(""x"")
00184: AppFnToArg
00185: LoadFn { code: 00177, fvars: 00000 }
00186: AppFnToArg
00187: AppFnToArg
00188: PushString("")
00189: PushString("C")
00190: AppFnToArg
00191: PushString("B")
00192: AppFnToArg
00193: PushString("A")
00194: AppFnToArg
00195: AppFnToArg
00196:   Return
00197: LoadFn { code: 00135, fvars: 00000 }
00198: PushString(""map"")
00199: AppFnToArg
00200: LoadFn { code: 00139, fvars: 00000 }
00201: PushString("")
00202: PushString(""xs"")
00203: AppFnToArg
00204: PushString(""f"")
00205: AppFnToArg
00206: AppFnToArg
00207: LoadFn { code: 00171, fvars: 00002 }
00208: AppFnToArg
00209: AppFnToArg
00210: LoadFn { code: 00181, fvars: 00000 }
00211: AppFnToArg
00212:   Return
00213: LoadFn { code: 00097, fvars: 00000 }
00214: PushString(""rev"")
00215: AppFnToArg
00216: LoadFn { code: 00101, fvars: 00000 }
00217: PushString(""xs"")
00218: AppFnToArg
00219: LoadFn { code: 00113, fvars: 00001 }
00220: AppFnToArg
00221: AppFnToArg
00222: LoadFn { code: 00197, fvars: 00001 }
00223: AppFnToArg
00224:   Return
00225: LoadFn { code: 00016, fvars: 00000 }
00226: PushString(""fold"")
00227: AppFnToArg
00228: LoadFn { code: 00022, fvars: 00000 }
00229: PushString(""fold"")
00230: AppFnToArg
00231: LoadFn { code: 00079, fvars: 00000 }
00232: AppFnToArg
00233: AppFnToArg
00234: LoadFn { code: 00213, fvars: 00000 }
00235: AppFnToArg
00236:   Return

[Foo(A), Foo(B), Foo(C)]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:rev = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:zip = (:zip ~> { [:acc, :xs, :ys] => {
    __unpack(xs, [:xs, :x] => {
        __unpack(ys, [:ys, :y] => { zip(acc([x, y]), xs, ys) }, {})
    }, {
        __unpack(ys, [:ys, :y] => {}, { acc })
    })
}})
:zip = ([:xs, :ys] => { rev(zip([], xs, ys)) })
[
    zip([A, B, C], [X, Y, Z])
    zip([A, B, C], [X, Y])
    zip([A, B], [X, Y, Z])
    zip(Foo, [X, Y, Z])
    zip(Foo, Bar)
]

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :rev
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :zip
  (~>
    :zip
    { (=>
        [ :acc
          :xs
          :ys ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (__unpack
                  ys
                  (=>
                    [ :ys
                      :y ]
                    { (zip
                        (acc
                          [ x
                            y ])
                        xs
                        ys) })
                  {  }) })
            { (__unpack
                ys
                (=>
                  [ :ys
                    :y ]
                  {  })
                { acc }) }) }) }))
(=
  :zip
  (=>
    [ :xs
      :ys ]
    { (rev
        (zip
          [  ]
          xs
          ys)) }))
[ (zip
    [ A
      B
      C ]
    [ X
      Y
      Z ])
  (zip
    [ A
      B
      C ]
    [ X
      Y ])
  (zip
    [ A
      B ]
    [ X
      Y
      Z ])
  (zip
    Foo
    [ X
      Y
      Z ])
  (zip
    Foo
    Bar) ]

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "zip" )
            ( ( =>
                  =>
                    ~>
                      0
                "zip" )
              =>
                ( ( =>
                      =>
                        0
                    ( ( ( []
                          "ys" )
                        "xs" )
                      "acc" ) )
                  =>
                    =>
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( pop
                                      2
                                      1
                                      0 )
                              1 )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "x" )
                                  "xs" ) )
                              =>
                                =>
                                  ( ( ( =>
                                          =>
                                            =>
                                              ( pop
                                                2
                                                1
                                                0 )
                                        2 )
                                      ( ( =>
                                            =>
                                              0
                                          ( ( []
                                              "y" )
                                            "ys" ) )
                                        =>
                                          =>
                                            ( ( ( 7
                                                  ( 6
                                                    ( ( []
                                                        0 )
                                                      2 ) ) )
                                                3 )
                                              1 ) ) )
                                    =>
                                      [] ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( pop
                                          2
                                          1
                                          0 )
                                  1 )
                                ( ( =>
                                      =>
                                        0
                                    ( ( []
                                        "y" )
                                      "ys" ) )
                                  =>
                                    =>
                                      [] ) )
                              =>
                                4 ) ) ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "zip" )
                ( ( =>
                      =>
                        0
                    ( ( []
                        "ys" )
                      "xs" ) )
                  =>
                    =>
                      ( 3
                        ( ( ( 2
                              [] )
                            1 )
                          0 ) ) ) )
              =>
                ( ( ( ( ( []
                          ( ( 0
                              Foo )
                            Bar ) )
                        ( ( 0
                            Foo )
                          ( ( ( []
                                Z )
                              Y )
                            X ) ) )
                      ( ( 0
                          ( ( []
                              B )
                            A ) )
                        ( ( ( []
                              Z )
                            Y )
                          X ) ) )
                    ( ( 0
                        ( ( ( []
                              C )
                            B )
                          A ) )
                      ( ( []
                          Y )
                        X ) ) )
                  ( ( 0
                      ( ( ( []
                            C )
                          B )
                        A ) )
                    ( ( ( []
                          Z )
                        Y )
                      X ) ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""x"")
00065: AppFnToArg
00066: PushString(""xs"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""xs"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""f"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00001)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""x"")
00117: AppFnToArg
00118: PushString(""xs"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: PushString("")
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadVar(00000)
00130: LoadVar(00001)
00131: AppFnToArg
00132:   Return
00133: LoadFn { code: 00129, fvars: 00001 }
00134:   Return
00135: LoadFn { code: 00133, fvars: 00000 }
00136:   Return
00137: LoadVar(00000)
00138: LoadFn { code: 00000, fvars: 00000 }
00139: AppArgToFn
00140:   Return
00141: LoadFn { code: 00137, fvars: 00000 }
00142:   Return
00143: LoadVar(00000)
00144:   Return
00145: LoadFn { code: 00143, fvars: 00000 }
00146:   Return
00147: LoadVar(00002)
00148: LoadVar(00001)
00149: LoadVar(00000)
00150: Unpack
00151: AppArgToFn
00152: AppArgToFn
00153:   Return
00154: LoadFn { code: 00147, fvars: 00002 }
00155:   Return
00156: LoadFn { code: 00154, fvars: 00001 }
00157:   Return
00158: LoadVar(00000)
00159:   Return
00160: LoadFn { code: 00158, fvars: 00000 }
00161:   Return
00162: LoadVar(00002)
00163: LoadVar(00001)
00164: LoadVar(00000)
00165: Unpack
00166: AppArgToFn
00167: AppArgToFn
00168:   Return
00169: LoadFn { code: 00162, fvars: 00002 }
00170:   Return
00171: LoadFn { code: 00169, fvars: 00001 }
00172:   Return
00173: LoadVar(00000)
00174:   Return
00175: LoadFn { code: 00173, fvars: 00000 }
00176:   Return
00177: LoadVar(00007)
00178: LoadVar(00006)
00179: PushString("")
00180: LoadVar(00000)
00181: AppFnToArg
00182: LoadVar(00002)
00183: AppFnToArg
00184: AppFnToArg
00185: AppFnToArg
00186: LoadVar(00003)
00187: AppFnToArg
00188: LoadVar(00001)
00189: AppFnToArg
00190:   Return
00191: LoadFn { code: 00177, fvars: 00007 }
00192:   Return
00193: PushString("")
00194:   Return
00195: LoadFn { code: 00171, fvars: 00000 }
00196: LoadVar(00002)
00197: AppFnToArg
00198: LoadFn { code: 00175, fvars: 00000 }
00199: PushString("")
00200: PushString(""y"")
00201: AppFnToArg
00202: PushString(""ys"")
00203: AppFnToArg
00204: AppFnToArg
00205: LoadFn { code: 00191, fvars: 00006 }
00206: AppFnToArg
00207: AppFnToArg
00208: LoadFn { code: 00193, fvars: 00000 }
00209: AppFnToArg
00210:   Return
00211: LoadFn { code: 00195, fvars: 00005 }
00212:   Return
00213: LoadVar(00002)
00214: LoadVar(00001)
00215: LoadVar(00000)
00216: Unpack
00217: AppArgToFn
00218: AppArgToFn
00219:   Return
00220: LoadFn { code: 00213, fvars: 00002 }
00221:   Return
00222: LoadFn { code: 00220, fvars: 00001 }
00223:   Return
00224: LoadVar(00000)
00225:   Return
00226: LoadFn { code: 00224, fvars: 00000 }
00227:   Return
00228: PushString("")
00229:   Return
00230: LoadFn { code: 00228, fvars: 00000 }
00231:   Return
00232: LoadVar(00004)
00233:   Return
00234: LoadFn { code: 00222, fvars: 00000 }
00235: LoadVar(00001)
00236: AppFnToArg
00237: LoadFn { code: 00226, fvars: 00000 }
00238: PushString("")
00239: PushString(""y"")
00240: AppFnToArg
00241: PushString(""ys"")
00242: AppFnToArg
00243: AppFnToArg
00244: LoadFn { code: 00230, fvars: 00000 }
00245: AppFnToArg
00246: AppFnToArg
00247: LoadFn { code: 00232, fvars: 00004 }
00248: AppFnToArg
00249:   Return
00250: LoadFn { code: 00156, fvars: 00000 }
00251: LoadVar(00001)
00252: AppFnToArg
00253: LoadFn { code: 00160, fvars: 00000 }
00254: PushString("")
00255: PushString(""x"")
00256: AppFnToArg
00257: PushString(""xs"")
00258: AppFnToArg
00259: AppFnToArg
00260: LoadFn { code: 00211, fvars: 00004 }
00261: AppFnToArg
00262: AppFnToArg
00263: LoadFn { code: 00234, fvars: 00003 }
00264: AppFnToArg
00265:   Return
00266: LoadFn { code: 00250, fvars: 00003 }
00267:   Return
00268: LoadFn { code: 00266, fvars: 00002 }
00269:   Return
00270: LoadFn { code: 00145, fvars: 00000 }
00271: PushString("")
00272: PushString(""ys"")
00273: AppFnToArg
00274: PushString(""xs"")
00275: AppFnToArg
00276: PushString(""acc"")
00277: AppFnToArg
00278: AppFnToArg
00279: LoadFn { code: 00268, fvars: 00001 }
00280: AppFnToArg
00281:   Return
00282: LoadVar(00000)
00283: LoadVar(00001)
00284: AppFnToArg
00285:   Return
00286: LoadFn { code: 00282, fvars: 00001 }
00287:   Return
00288: LoadFn { code: 00286, fvars: 00000 }
00289:   Return
00290: LoadVar(00000)
00291:   Return
00292: LoadFn { code: 00290, fvars: 00000 }
00293:   Return
00294: LoadVar(00003)
00295: LoadVar(00002)
00296: PushString("")
00297: AppFnToArg
00298: LoadVar(00001)
00299: AppFnToArg
00300: LoadVar(00000)
00301: AppFnToArg
00302: AppFnToArg
00303:   Return
00304: LoadFn { code: 00294, fvars: 00003 }
00305:   Return
00306: PushString("")
00307: LoadVar(00000)
00308: PushString("Foo")
00309: AppFnToArg
00310: PushString("Bar")
00311: AppFnToArg
00312: AppFnToArg
00313: LoadVar(00000)
00314: PushString("Foo")
00315: AppFnToArg
00316: PushString("")
00317: PushString("Z")
00318: AppFnToArg
00319: PushString("Y")
00320: AppFnToArg
00321: PushString("X")
00322: AppFnToArg
00323: AppFnToArg
00324: AppFnToArg
00325: LoadVar(00000)
00326: PushString("")
00327: PushString("B")
00328: AppFnToArg
00329: PushString("A")
00330: AppFnToArg
00331: AppFnToArg
00332: PushString("")
00333: PushString("Z")
00334: AppFnToArg
00335: PushString("Y")
00336: AppFnToArg
00337: PushString("X")
00338: AppFnToArg
00339: AppFnToArg
00340: AppFnToArg
00341: LoadVar(00000)
00342: PushString("")
00343: PushString("C")
00344: AppFnToArg
00345: PushString("B")
00346: AppFnToArg
00347: PushString("A")
00348: AppFnToArg
00349: AppFnToArg
00350: PushString("")
00351: PushString("Y")
00352: AppFnToArg
00353: PushString("X")
00354: AppFnToArg
00355: AppFnToArg
00356: AppFnToArg
00357: LoadVar(00000)
00358: PushString("")
00359: PushString("C")
00360: AppFnToArg
00361: PushString("B")
00362: AppFnToArg
00363: PushString("A")
00364: AppFnToArg
00365: AppFnToArg
00366: PushString("")
00367: PushString("Z")
00368: AppFnToArg
00369: PushString("Y")
00370: AppFnToArg
00371: PushString("X")
00372: AppFnToArg
00373: AppFnToArg
00374: AppFnToArg
00375:   Return
00376: LoadFn { code: 00288, fvars: 00000 }
00377: PushString(""zip"")
00378: AppFnToArg
00379: LoadFn { code: 00292, fvars: 00000 }
00380: PushString("")
00381: PushString(""ys"")
00382: AppFnToArg
00383: PushString(""xs"")
00384: AppFnToArg
00385: AppFnToArg
00386: LoadFn { code: 00304, fvars: 00002 }
00387: AppFnToArg
00388: AppFnToArg
00389: LoadFn { code: 00306, fvars: 00000 }
00390: AppFnToArg
00391:   Return
00392: LoadFn { code: 00135, fvars: 00000 }
00393: PushString(""zip"")
00394: AppFnToArg
00395: LoadFn { code: 00141, fvars: 00000 }
00396: PushString(""zip"")
00397: AppFnToArg
00398: LoadFn { code: 00270, fvars: 00000 }
00399: AppFnToArg
00400: AppFnToArg
00401: LoadFn { code: 00376, fvars: 00001 }
00402: AppFnToArg
00403:   Return
00404: LoadFn { code: 00097, fvars: 00000 }
00405: PushString(""rev"")
00406: AppFnToArg
00407: LoadFn { code: 00101, fvars: 00000 }
00408: PushString(""xs"")
00409: AppFnToArg
00410: LoadFn { code: 00113, fvars: 00001 }
00411: AppFnToArg
00412: AppFnToArg
00413: LoadFn { code: 00392, fvars: 00000 }
00414: AppFnToArg
00415:   Return
00416: LoadFn { code: 00016, fvars: 00000 }
00417: PushString(""fold"")
00418: AppFnToArg
00419: LoadFn { code: 00022, fvars: 00000 }
00420: PushString(""fold"")
00421: AppFnToArg
00422: LoadFn { code: 00079, fvars: 00000 }
00423: AppFnToArg
00424: AppFnToArg
00425: LoadFn { code: 00404, fvars: 00000 }
00426: AppFnToArg
00427:   Return

[[[A, X], [B, Y], [C, Z]], [], [], [], []]

---

:== = (:== ~> { [:a, :b] => {
    __unpack(a, [:xs, :x] => {
        __unpack(b, [:ys, :y] => {
            __compare(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        __compare(a, b, { True }, { False })
    })
}})
[
    Foo == Foo
    Foo == Bar
    Foo(Bar) == Foo(Bar)
    Foo(Bar) == Foo(Baz)
    :a == :a
    :a == :b
    :f(:a) == :f(:a)
    :f(:a) == :g(:a)
]

(=
  :==
  (~>
    :==
    { (=>
        [ :a
          :b ]
        { (__unpack
            a
            (=>
              [ :xs
                :x ]
              { (__unpack
                  b
                  (=>
                    [ :ys
                      :y ]
                    { (__compare
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (__compare
                a
                b
                { True }
                { False }) }) }) }))
[ (==
    Foo
    Foo)
  (==
    Foo
    Bar)
  (==
    (Foo
      Bar)
    (Foo
      Bar))
  (==
    (Foo
      Bar)
    (Foo
      Baz))
  (==
    :a
    :a)
  (==
    :a
    :b)
  (==
    (:f
      :a)
    (:f
      :a))
  (==
    (:f
      :a)
    (:g
      :a)) ]

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "==" )
    ( ( =>
          =>
            ~>
              0
        "==" )
      =>
        ( ( =>
              =>
                0
            ( ( []
                "b" )
              "a" ) )
          =>
            =>
              ( ( ( =>
                      =>
                        =>
                          ( pop
                            2
                            1
                            0 )
                    1 )
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( pop
                                      2
                                      1
                                      0 )
                              2 )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "y" )
                                  "ys" ) )
                              =>
                                =>
                                  ( ( ( ( =>
                                            =>
                                              =>
                                                =>
                                                  ( if
                                                    3
                                                    2
                                                    1
                                                    0 )
                                          ( ( 6
                                              2 )
                                            0 ) )
                                        True )
                                      =>
                                        ( ( 7
                                            4 )
                                          2 ) )
                                    =>
                                      False ) ) )
                          =>
                            False ) ) )
                =>
                  ( ( ( ( =>
                            =>
                              =>
                                =>
                                  ( if
                                    3
                                    2
                                    1
                                    0 )
                          2 )
                        1 )
                      =>
                        True )
                    =>
                      False ) ) ) ) )
  =>
    ( ( ( ( ( ( ( ( []
                    ( ( 0
                        ( ( Compound
                            ( Binding
                              "f" ) )
                          ( []
                            ( Binding
                              "a" ) ) ) )
                      ( ( Compound
                          ( Binding
                            "g" ) )
                        ( []
                          ( Binding
                            "a" ) ) ) ) )
                  ( ( 0
                      ( ( Compound
                          ( Binding
                            "f" ) )
                        ( []
                          ( Binding
                            "a" ) ) ) )
                    ( ( Compound
                        ( Binding
                          "f" ) )
                      ( []
                        ( Binding
                          "a" ) ) ) ) )
                ( ( 0
                    ( Binding
                      "a" ) )
                  ( Binding
                    "b" ) ) )
              ( ( 0
                  ( Binding
                    "a" ) )
                ( Binding
                  "a" ) ) )
            ( ( 0
                ( Foo
                  Bar ) )
              ( Foo
                Baz ) ) )
          ( ( 0
              ( Foo
                Bar ) )
            ( Foo
              Bar ) ) )
        ( ( 0
            Foo )
          Bar ) )
      ( ( 0
          Foo )
        Foo ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00002)
00044: LoadVar(00001)
00045: LoadVar(00000)
00046: Unpack
00047: AppArgToFn
00048: AppArgToFn
00049:   Return
00050: LoadFn { code: 00043, fvars: 00002 }
00051:   Return
00052: LoadFn { code: 00050, fvars: 00001 }
00053:   Return
00054: LoadVar(00000)
00055:   Return
00056: LoadFn { code: 00054, fvars: 00000 }
00057:   Return
00058: LoadVar(00003)
00059: LoadVar(00002)
00060: LoadVar(00001)
00061: LoadVar(00000)
00062: Cmp
00063: AppArgToFn
00064:   Return
00065: LoadFn { code: 00058, fvars: 00003 }
00066:   Return
00067: LoadFn { code: 00065, fvars: 00002 }
00068:   Return
00069: LoadFn { code: 00067, fvars: 00001 }
00070:   Return
00071: LoadVar(00007)
00072: LoadVar(00004)
00073: AppFnToArg
00074: LoadVar(00002)
00075: AppFnToArg
00076:   Return
00077: PushString("False")
00078:   Return
00079: LoadFn { code: 00069, fvars: 00000 }
00080: LoadVar(00006)
00081: LoadVar(00002)
00082: AppFnToArg
00083: LoadVar(00000)
00084: AppFnToArg
00085: AppFnToArg
00086: PushString("True")
00087: AppFnToArg
00088: LoadFn { code: 00071, fvars: 00007 }
00089: AppFnToArg
00090: LoadFn { code: 00077, fvars: 00000 }
00091: AppFnToArg
00092:   Return
00093: LoadFn { code: 00079, fvars: 00006 }
00094:   Return
00095: PushString("False")
00096:   Return
00097: LoadFn { code: 00052, fvars: 00000 }
00098: LoadVar(00002)
00099: AppFnToArg
00100: LoadFn { code: 00056, fvars: 00000 }
00101: PushString("")
00102: PushString(""y"")
00103: AppFnToArg
00104: PushString(""ys"")
00105: AppFnToArg
00106: AppFnToArg
00107: LoadFn { code: 00093, fvars: 00005 }
00108: AppFnToArg
00109: AppFnToArg
00110: LoadFn { code: 00095, fvars: 00000 }
00111: AppFnToArg
00112:   Return
00113: LoadFn { code: 00097, fvars: 00004 }
00114:   Return
00115: LoadVar(00003)
00116: LoadVar(00002)
00117: LoadVar(00001)
00118: LoadVar(00000)
00119: Cmp
00120: AppArgToFn
00121:   Return
00122: LoadFn { code: 00115, fvars: 00003 }
00123:   Return
00124: LoadFn { code: 00122, fvars: 00002 }
00125:   Return
00126: LoadFn { code: 00124, fvars: 00001 }
00127:   Return
00128: PushString("True")
00129:   Return
00130: PushString("False")
00131:   Return
00132: LoadFn { code: 00126, fvars: 00000 }
00133: LoadVar(00002)
00134: AppFnToArg
00135: LoadVar(00001)
00136: AppFnToArg
00137: LoadFn { code: 00128, fvars: 00000 }
00138: AppFnToArg
00139: LoadFn { code: 00130, fvars: 00000 }
00140: AppFnToArg
00141:   Return
00142: LoadFn { code: 00037, fvars: 00000 }
00143: LoadVar(00001)
00144: AppFnToArg
00145: LoadFn { code: 00041, fvars: 00000 }
00146: PushString("")
00147: PushString(""x"")
00148: AppFnToArg
00149: PushString(""xs"")
00150: AppFnToArg
00151: AppFnToArg
00152: LoadFn { code: 00113, fvars: 00003 }
00153: AppFnToArg
00154: AppFnToArg
00155: LoadFn { code: 00132, fvars: 00002 }
00156: AppFnToArg
00157:   Return
00158: LoadFn { code: 00142, fvars: 00002 }
00159:   Return
00160: LoadFn { code: 00026, fvars: 00000 }
00161: PushString("")
00162: PushString(""b"")
00163: AppFnToArg
00164: PushString(""a"")
00165: AppFnToArg
00166: AppFnToArg
00167: LoadFn { code: 00158, fvars: 00001 }
00168: AppFnToArg
00169:   Return
00170: PushString("")
00171: LoadVar(00000)
00172: PushString("Compound")
00173: PushString("Binding")
00174: PushString(""f"")
00175: AppFnToArg
00176: AppFnToArg
00177: PushString("")
00178: PushString("Binding")
00179: PushString(""a"")
00180: AppFnToArg
00181: AppFnToArg
00182: AppFnToArg
00183: AppFnToArg
00184: PushString("Compound")
00185: PushString("Binding")
00186: PushString(""g"")
00187: AppFnToArg
00188: AppFnToArg
00189: PushString("")
00190: PushString("Binding")
00191: PushString(""a"")
00192: AppFnToArg
00193: AppFnToArg
00194: AppFnToArg
00195: AppFnToArg
00196: AppFnToArg
00197: LoadVar(00000)
00198: PushString("Compound")
00199: PushString("Binding")
00200: PushString(""f"")
00201: AppFnToArg
00202: AppFnToArg
00203: PushString("")
00204: PushString("Binding")
00205: PushString(""a"")
00206: AppFnToArg
00207: AppFnToArg
00208: AppFnToArg
00209: AppFnToArg
00210: PushString("Compound")
00211: PushString("Binding")
00212: PushString(""f"")
00213: AppFnToArg
00214: AppFnToArg
00215: PushString("")
00216: PushString("Binding")
00217: PushString(""a"")
00218: AppFnToArg
00219: AppFnToArg
00220: AppFnToArg
00221: AppFnToArg
00222: AppFnToArg
00223: LoadVar(00000)
00224: PushString("Binding")
00225: PushString(""a"")
00226: AppFnToArg
00227: AppFnToArg
00228: PushString("Binding")
00229: PushString(""b"")
00230: AppFnToArg
00231: AppFnToArg
00232: AppFnToArg
00233: LoadVar(00000)
00234: PushString("Binding")
00235: PushString(""a"")
00236: AppFnToArg
00237: AppFnToArg
00238: PushString("Binding")
00239: PushString(""a"")
00240: AppFnToArg
00241: AppFnToArg
00242: AppFnToArg
00243: LoadVar(00000)
00244: PushString("Foo")
00245: PushString("Bar")
00246: AppFnToArg
00247: AppFnToArg
00248: PushString("Foo")
00249: PushString("Baz")
00250: AppFnToArg
00251: AppFnToArg
00252: AppFnToArg
00253: LoadVar(00000)
00254: PushString("Foo")
00255: PushString("Bar")
00256: AppFnToArg
00257: AppFnToArg
00258: PushString("Foo")
00259: PushString("Bar")
00260: AppFnToArg
00261: AppFnToArg
00262: AppFnToArg
00263: LoadVar(00000)
00264: PushString("Foo")
00265: AppFnToArg
00266: PushString("Bar")
00267: AppFnToArg
00268: AppFnToArg
00269: LoadVar(00000)
00270: PushString("Foo")
00271: AppFnToArg
00272: PushString("Foo")
00273: AppFnToArg
00274: AppFnToArg
00275:   Return
00276: LoadFn { code: 00016, fvars: 00000 }
00277: PushString(""=="")
00278: AppFnToArg
00279: LoadFn { code: 00022, fvars: 00000 }
00280: PushString(""=="")
00281: AppFnToArg
00282: LoadFn { code: 00160, fvars: 00000 }
00283: AppFnToArg
00284: AppFnToArg
00285: LoadFn { code: 00170, fvars: 00000 }
00286: AppFnToArg
00287:   Return

[True, False, True, False, True, False, True, False]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:rev = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:flatten = (:xs => {
    rev(fold([:acc, :x] => {
        fold([:acc, :x] => { acc(x) }, acc, x)
    }, [], xs))
})
flatten([[A, B], [C, D]])

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :rev
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :flatten
  (=>
    :xs
    { (rev
        (fold
          (=>
            [ :acc
              :x ]
            { (fold
                (=>
                  [ :acc
                    :x ]
                  { (acc
                      x) })
                acc
                x) })
          [  ]
          xs)) }))
(flatten
  [ [ A
      B ]
    [ C
      D ] ])

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "rev" )
        ( ( =>
              =>
                0
            "xs" )
          =>
            ( ( ( 1
                  ( ( =>
                        =>
                          0
                      ( ( []
                          "x" )
                        "xs" ) )
                    =>
                      =>
                        ( 1
                          0 ) ) )
                [] )
              0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "flatten" )
            ( ( =>
                  =>
                    0
                "xs" )
              =>
                ( 1
                  ( ( ( 2
                        ( ( =>
                              =>
                                0
                            ( ( []
                                "x" )
                              "acc" ) )
                          =>
                            =>
                              ( ( ( 4
                                    ( ( =>
                                          =>
                                            0
                                        ( ( []
                                            "x" )
                                          "acc" ) )
                                      =>
                                        =>
                                          ( 1
                                            0 ) ) )
                                  1 )
                                0 ) ) )
                      [] )
                    0 ) ) ) )
          =>
            ( 0
              ( ( []
                  ( ( []
                      D )
                    C ) )
                ( ( []
                    B )
                  A ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""x"")
00065: AppFnToArg
00066: PushString(""xs"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""xs"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""f"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00001)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""x"")
00117: AppFnToArg
00118: PushString(""xs"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: PushString("")
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadVar(00000)
00130: LoadVar(00001)
00131: AppFnToArg
00132:   Return
00133: LoadFn { code: 00129, fvars: 00001 }
00134:   Return
00135: LoadFn { code: 00133, fvars: 00000 }
00136:   Return
00137: LoadVar(00000)
00138:   Return
00139: LoadFn { code: 00137, fvars: 00000 }
00140:   Return
00141: LoadVar(00000)
00142:   Return
00143: LoadFn { code: 00141, fvars: 00000 }
00144:   Return
00145: LoadVar(00000)
00146:   Return
00147: LoadFn { code: 00145, fvars: 00000 }
00148:   Return
00149: LoadVar(00001)
00150: LoadVar(00000)
00151: AppFnToArg
00152:   Return
00153: LoadFn { code: 00149, fvars: 00001 }
00154:   Return
00155: LoadVar(00004)
00156: LoadFn { code: 00147, fvars: 00000 }
00157: PushString("")
00158: PushString(""x"")
00159: AppFnToArg
00160: PushString(""acc"")
00161: AppFnToArg
00162: AppFnToArg
00163: LoadFn { code: 00153, fvars: 00000 }
00164: AppFnToArg
00165: AppFnToArg
00166: LoadVar(00001)
00167: AppFnToArg
00168: LoadVar(00000)
00169: AppFnToArg
00170:   Return
00171: LoadFn { code: 00155, fvars: 00004 }
00172:   Return
00173: LoadVar(00001)
00174: LoadVar(00002)
00175: LoadFn { code: 00143, fvars: 00000 }
00176: PushString("")
00177: PushString(""x"")
00178: AppFnToArg
00179: PushString(""acc"")
00180: AppFnToArg
00181: AppFnToArg
00182: LoadFn { code: 00171, fvars: 00003 }
00183: AppFnToArg
00184: AppFnToArg
00185: PushString("")
00186: AppFnToArg
00187: LoadVar(00000)
00188: AppFnToArg
00189: AppFnToArg
00190:   Return
00191: LoadVar(00000)
00192: PushString("")
00193: PushString("")
00194: PushString("D")
00195: AppFnToArg
00196: PushString("C")
00197: AppFnToArg
00198: AppFnToArg
00199: PushString("")
00200: PushString("B")
00201: AppFnToArg
00202: PushString("A")
00203: AppFnToArg
00204: AppFnToArg
00205: AppFnToArg
00206:   Return
00207: LoadFn { code: 00135, fvars: 00000 }
00208: PushString(""flatten"")
00209: AppFnToArg
00210: LoadFn { code: 00139, fvars: 00000 }
00211: PushString(""xs"")
00212: AppFnToArg
00213: LoadFn { code: 00173, fvars: 00002 }
00214: AppFnToArg
00215: AppFnToArg
00216: LoadFn { code: 00191, fvars: 00000 }
00217: AppFnToArg
00218:   Return
00219: LoadFn { code: 00097, fvars: 00000 }
00220: PushString(""rev"")
00221: AppFnToArg
00222: LoadFn { code: 00101, fvars: 00000 }
00223: PushString(""xs"")
00224: AppFnToArg
00225: LoadFn { code: 00113, fvars: 00001 }
00226: AppFnToArg
00227: AppFnToArg
00228: LoadFn { code: 00207, fvars: 00001 }
00229: AppFnToArg
00230:   Return
00231: LoadFn { code: 00016, fvars: 00000 }
00232: PushString(""fold"")
00233: AppFnToArg
00234: LoadFn { code: 00022, fvars: 00000 }
00235: PushString(""fold"")
00236: AppFnToArg
00237: LoadFn { code: 00079, fvars: 00000 }
00238: AppFnToArg
00239: AppFnToArg
00240: LoadFn { code: 00219, fvars: 00000 }
00241: AppFnToArg
00242:   Return

[A, B, C, D]

---

:destructure = (:destructure ~> { [:acc, :compound] => {
    __unpack(compound, [:xs, :x] => {
        destructure(acc(x), xs)
    }, {
        [compound, acc]
    })
} })([])
destructure(Foo(Bar, Baz, Qux))

(=
  :destructure
  ((~>
    :destructure
    { (=>
        [ :acc
          :compound ]
        { (__unpack
            compound
            (=>
              [ :xs
                :x ]
              { (destructure
                  (acc
                    x)
                  xs) })
            { [ compound
                acc ] }) }) })
    [  ]))
(destructure
  (Foo
    Bar
    Baz
    Qux))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "destructure" )
    ( ( ( =>
            =>
              ~>
                0
          "destructure" )
        =>
          ( ( =>
                =>
                  0
              ( ( []
                  "compound" )
                "acc" ) )
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( 4
                              ( 3
                                0 ) )
                            1 ) ) )
                  =>
                    ( ( []
                        2 )
                      1 ) ) ) )
      [] ) )
  =>
    ( 0
      ( ( ( Foo
            Bar )
          Baz )
        Qux ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00004)
00044: LoadVar(00003)
00045: LoadVar(00000)
00046: AppFnToArg
00047: AppFnToArg
00048: LoadVar(00001)
00049: AppFnToArg
00050:   Return
00051: LoadFn { code: 00043, fvars: 00004 }
00052:   Return
00053: PushString("")
00054: LoadVar(00002)
00055: AppFnToArg
00056: LoadVar(00001)
00057: AppFnToArg
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""x"")
00065: AppFnToArg
00066: PushString(""xs"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00051, fvars: 00003 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00053, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00002 }
00076:   Return
00077: LoadFn { code: 00026, fvars: 00000 }
00078: PushString("")
00079: PushString(""compound"")
00080: AppFnToArg
00081: PushString(""acc"")
00082: AppFnToArg
00083: AppFnToArg
00084: LoadFn { code: 00075, fvars: 00001 }
00085: AppFnToArg
00086:   Return
00087: LoadVar(00000)
00088: PushString("Foo")
00089: PushString("Bar")
00090: AppFnToArg
00091: PushString("Baz")
00092: AppFnToArg
00093: PushString("Qux")
00094: AppFnToArg
00095: AppFnToArg
00096:   Return
00097: LoadFn { code: 00016, fvars: 00000 }
00098: PushString(""destructure"")
00099: AppFnToArg
00100: LoadFn { code: 00022, fvars: 00000 }
00101: PushString(""destructure"")
00102: AppFnToArg
00103: LoadFn { code: 00077, fvars: 00000 }
00104: AppFnToArg
00105: PushString("")
00106: AppFnToArg
00107: AppFnToArg
00108: LoadFn { code: 00087, fvars: 00000 }
00109: AppFnToArg
00110:   Return

[Foo, [Bar, Baz, Qux]]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:apply = ([:f, :xs] => {
    fold([:f, :x] => { f(x) }, f, xs)
})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:map = ([:f, :xs] => {
    fold([:xs, :x] => { xs(f(x)) }, [], reverse(xs))
})
:flatten = (:xs => {
    reverse(fold([:acc, :x] => {
        fold([:acc, :x] => { acc(x) }, acc, x)
    }, [], xs))
})
:zip = (:zip ~> { [:acc, :xs, :ys] => {
    __unpack(xs, [:xs, :x] => {
        __unpack(ys, [:ys, :y] => { zip(acc([x, y]), xs, ys) }, {})
    }, {
        __unpack(ys, [:ys, :y] => {}, { acc })
    })
}})
:zip = ([:xs, :ys] => {
    reverse(zip([], xs, ys))
})
:destructure = (:destructure ~> { [:acc, :compound] => {
    __unpack(compound, [:xs, :x] => {
        destructure(acc(x), xs)
    }, {
        [compound, acc]
    })
} })([])
:== = (:== ~> { [:a, :b] => {
    __unpack(a, [:xs, :x] => {
        __unpack(b, [:ys, :y] => {
            __compare(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        __compare(a, b, { True }, { False })
    })
}})
:first = (:xs => {
    __unpack(xs, [:_, :x] => { x }, { xs })
})
:second = (:xs => {
    __unpack(xs, [:xs, :_] => { first(xs) }, { xs })
})
:join = fold([:acc, :pair] => {
    :xvar = first(pair)
    :xval = second(pair)
    fold([:_, :pair] => {
        :yvar = first(pair)
        :yval = second(pair)
        __compare(xvar, yvar, {
            __compare(xval == yval, False, {
                no-match!([[xvar, xval], [yvar, yval]])
            }, {})
        }, {})
    }, [], acc)
    acc(pair)
}, [])
:unify = (:unify ~> { [:pattern, :value] => {
    __unpack(pattern, [:type, :pattern] => {
        __compare(type, Binding, {
            [[pattern, value]]
        }, {
            __compare(type, List, {
                :zipped = zip(pattern, value)
                __compare(zipped, [], {
                    no-match!([type(pattern), value])
                }, {
                    join(flatten(map(apply(unify), zipped)))
                })
            }, {
                __unpack(type, [:type, :f] => {
                    __compare(type, Compound, {
                        :v = destructure(value)
                        :vf = first(v)
                        :vargs = second(v)
                        :zipped = reverse(zip(pattern(f), vargs(vf)))
                        __compare(zipped, [], {
                            no-match!([type(f, pattern), value])
                        }, {
                            join(flatten(map(apply(unify), zipped)))
                        })
                    }, {
                        invalid!(type(f, pattern))
                    })
                }, {
                    __compare(pattern == value, True, {}, {
                        no-match!([pattern, value])
                    })
                })
            })
        })
    }, {
        invalid!(pattern)
    })
}})
:-> = ([:pattern, :body, :value] => {
    __handle( {
        :args = map(second, unify(pattern, value))
        __compare(args, [], {
            body()
        }, {
            apply(body, args)
        })
    }, no-match!, [:_, :arg] => {
        no-match!(arg)
    })
})
__handle({
    [
        (Foo -> { Bar })(Foo)
        (:x -> { x })(Foo)
        (:x -> { Bar })(Foo)
        (Pair(Foo, Bar) -> { Foo })(Pair(Foo, Bar))
        (Pair(:x, :y) -> { y })(Pair(Foo, Bar))
        (Pair(:x, Bar) -> { x })(Pair(Foo, Bar))
        (Pair(:x, :x) -> { x })(Pair(Bar, Bar))
        (:foo(:x, :y) -> { x })(Pair(Foo, Bar))
        ([:x, :y] -> { y })([Foo, Bar])
        (Pair(:x, :x) -> { x })(Pair(Foo, Bar))
    ]
}, no-match!, [:r, :arg] => {
    r(NoMatch(arg))
})

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :apply
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :f
            :x ]
          { (f
              x) })
        f
        xs) }))
(=
  :reverse
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :map
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              (f
                x)) })
        [  ]
        (reverse
          xs)) }))
(=
  :flatten
  (=>
    :xs
    { (reverse
        (fold
          (=>
            [ :acc
              :x ]
            { (fold
                (=>
                  [ :acc
                    :x ]
                  { (acc
                      x) })
                acc
                x) })
          [  ]
          xs)) }))
(=
  :zip
  (~>
    :zip
    { (=>
        [ :acc
          :xs
          :ys ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (__unpack
                  ys
                  (=>
                    [ :ys
                      :y ]
                    { (zip
                        (acc
                          [ x
                            y ])
                        xs
                        ys) })
                  {  }) })
            { (__unpack
                ys
                (=>
                  [ :ys
                    :y ]
                  {  })
                { acc }) }) }) }))
(=
  :zip
  (=>
    [ :xs
      :ys ]
    { (reverse
        (zip
          [  ]
          xs
          ys)) }))
(=
  :destructure
  ((~>
    :destructure
    { (=>
        [ :acc
          :compound ]
        { (__unpack
            compound
            (=>
              [ :xs
                :x ]
              { (destructure
                  (acc
                    x)
                  xs) })
            { [ compound
                acc ] }) }) })
    [  ]))
(=
  :==
  (~>
    :==
    { (=>
        [ :a
          :b ]
        { (__unpack
            a
            (=>
              [ :xs
                :x ]
              { (__unpack
                  b
                  (=>
                    [ :ys
                      :y ]
                    { (__compare
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (__compare
                a
                b
                { True }
                { False }) }) }) }))
(=
  :first
  (=>
    :xs
    { (__unpack
        xs
        (=>
          [ :_
            :x ]
          { x })
        { xs }) }))
(=
  :second
  (=>
    :xs
    { (__unpack
        xs
        (=>
          [ :xs
            :_ ]
          { (first
              xs) })
        { xs }) }))
(=
  :join
  (fold
    (=>
      [ :acc
        :pair ]
      { (=
          :xvar
          (first
            pair))
        (=
          :xval
          (second
            pair))
        (fold
          (=>
            [ :_
              :pair ]
            { (=
                :yvar
                (first
                  pair))
              (=
                :yval
                (second
                  pair))
              (__compare
                xvar
                yvar
                { (__compare
                    (==
                      xval
                      yval)
                    False
                    { (no-match!
                        [ [ xvar
                            xval ]
                          [ yvar
                            yval ] ]) }
                    {  }) }
                {  }) })
          [  ]
          acc)
        (acc
          pair) })
    [  ]))
(=
  :unify
  (~>
    :unify
    { (=>
        [ :pattern
          :value ]
        { (__unpack
            pattern
            (=>
              [ :type
                :pattern ]
              { (__compare
                  type
                  Binding
                  { [ [ pattern
                        value ] ] }
                  { (__compare
                      type
                      List
                      { (=
                          :zipped
                          (zip
                            pattern
                            value))
                        (__compare
                          zipped
                          [  ]
                          { (no-match!
                              [ (type
                                  pattern)
                                value ]) }
                          { (join
                              (flatten
                                (map
                                  (apply
                                    unify)
                                  zipped))) }) }
                      { (__unpack
                          type
                          (=>
                            [ :type
                              :f ]
                            { (__compare
                                type
                                Compound
                                { (=
                                    :v
                                    (destructure
                                      value))
                                  (=
                                    :vf
                                    (first
                                      v))
                                  (=
                                    :vargs
                                    (second
                                      v))
                                  (=
                                    :zipped
                                    (reverse
                                      (zip
                                        (pattern
                                          f)
                                        (vargs
                                          vf))))
                                  (__compare
                                    zipped
                                    [  ]
                                    { (no-match!
                                        [ (type
                                            f
                                            pattern)
                                          value ]) }
                                    { (join
                                        (flatten
                                          (map
                                            (apply
                                              unify)
                                            zipped))) }) }
                                { (invalid!
                                    (type
                                      f
                                      pattern)) }) })
                          { (__compare
                              (==
                                pattern
                                value)
                              True
                              {  }
                              { (no-match!
                                  [ pattern
                                    value ]) }) }) }) }) })
            { (invalid!
                pattern) }) }) }))
(=
  :->
  (=>
    [ :pattern
      :body
      :value ]
    { (__handle
        { (=
            :args
            (map
              second
              (unify
                pattern
                value)))
          (__compare
            args
            [  ]
            { (body) }
            { (apply
                body
                args) }) }
        no-match!
        (=>
          [ :_
            :arg ]
          { (no-match!
              arg) })) }))
(__handle
  { [ ((->
        Foo
        { Bar })
        Foo)
      ((->
        :x
        { x })
        Foo)
      ((->
        :x
        { Bar })
        Foo)
      ((->
        (Pair
          Foo
          Bar)
        { Foo })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          :x
          :y)
        { y })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          :x
          Bar)
        { x })
        (Pair
          Foo
          Bar))
      ((->
        (Pair
          :x
          :x)
        { x })
        (Pair
          Bar
          Bar))
      ((->
        (:foo
          :x
          :y)
        { x })
        (Pair
          Foo
          Bar))
      ((->
        [ :x
          :y ]
        { y })
        [ Foo
          Bar ])
      ((->
        (Pair
          :x
          :x)
        { x })
        (Pair
          Foo
          Bar)) ] }
  no-match!
  (=>
    [ :r
      :arg ]
    { (r
        (NoMatch
          arg)) }))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "apply" )
        ( ( =>
              =>
                0
            ( ( []
                "xs" )
              "f" ) )
          =>
            =>
              ( ( ( 2
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "f" ) )
                      =>
                        =>
                          ( 1
                            0 ) ) )
                  1 )
                0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "reverse" )
            ( ( =>
                  =>
                    0
                "xs" )
              =>
                ( ( ( 2
                      ( ( =>
                            =>
                              0
                          ( ( []
                              "x" )
                            "xs" ) )
                        =>
                          =>
                            ( 1
                              0 ) ) )
                    [] )
                  0 ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "map" )
                ( ( =>
                      =>
                        0
                    ( ( []
                        "xs" )
                      "f" ) )
                  =>
                    =>
                      ( ( ( 4
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "x" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 1
                                    ( 3
                                      0 ) ) ) )
                          [] )
                        ( 2
                          0 ) ) ) )
              =>
                ( ( ( =>
                        =>
                          =>
                            ( 0
                              1 )
                      "flatten" )
                    ( ( =>
                          =>
                            0
                        "xs" )
                      =>
                        ( 2
                          ( ( ( 4
                                ( ( =>
                                      =>
                                        0
                                    ( ( []
                                        "x" )
                                      "acc" ) )
                                  =>
                                    =>
                                      ( ( ( 6
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "x" )
                                                  "acc" ) )
                                              =>
                                                =>
                                                  ( 1
                                                    0 ) ) )
                                          1 )
                                        0 ) ) )
                              [] )
                            0 ) ) ) )
                  =>
                    ( ( ( =>
                            =>
                              =>
                                ( 0
                                  1 )
                          "zip" )
                        ( ( =>
                              =>
                                ~>
                                  0
                            "zip" )
                          =>
                            ( ( =>
                                  =>
                                    0
                                ( ( ( []
                                      "ys" )
                                    "xs" )
                                  "acc" ) )
                              =>
                                =>
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( pop
                                                  2
                                                  1
                                                  0 )
                                          1 )
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "x" )
                                              "xs" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    2 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "y" )
                                                        "ys" ) )
                                                    =>
                                                      =>
                                                        ( ( ( 7
                                                              ( 6
                                                                ( ( []
                                                                    0 )
                                                                  2 ) ) )
                                                            3 )
                                                          1 ) ) )
                                                =>
                                                  [] ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              1 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "y" )
                                                  "ys" ) )
                                              =>
                                                =>
                                                  [] ) )
                                          =>
                                            4 ) ) ) ) )
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( 0
                                      1 )
                              "zip" )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "ys" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 5
                                    ( ( ( 2
                                          [] )
                                        1 )
                                      0 ) ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( 0
                                          1 )
                                  "destructure" )
                                ( ( ( =>
                                        =>
                                          ~>
                                            0
                                      "destructure" )
                                    =>
                                      ( ( =>
                                            =>
                                              0
                                          ( ( []
                                              "compound" )
                                            "acc" ) )
                                        =>
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "x" )
                                                      "xs" ) )
                                                  =>
                                                    =>
                                                      ( ( 4
                                                          ( 3
                                                            0 ) )
                                                        1 ) ) )
                                              =>
                                                ( ( []
                                                    2 )
                                                  1 ) ) ) )
                                  [] ) )
                              =>
                                ( ( ( =>
                                        =>
                                          =>
                                            ( 0
                                              1 )
                                      "==" )
                                    ( ( =>
                                          =>
                                            ~>
                                              0
                                        "==" )
                                      =>
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "b" )
                                              "a" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    1 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "x" )
                                                        "xs" ) )
                                                    =>
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( pop
                                                                      2
                                                                      1
                                                                      0 )
                                                              2 )
                                                            ( ( =>
                                                                  =>
                                                                    0
                                                                ( ( []
                                                                    "y" )
                                                                  "ys" ) )
                                                              =>
                                                                =>
                                                                  ( ( ( ( =>
                                                                            =>
                                                                              =>
                                                                                =>
                                                                                  ( if
                                                                                    3
                                                                                    2
                                                                                    1
                                                                                    0 )
                                                                          ( ( 6
                                                                              2 )
                                                                            0 ) )
                                                                        True )
                                                                      =>
                                                                        ( ( 7
                                                                            4 )
                                                                          2 ) )
                                                                    =>
                                                                      False ) ) )
                                                          =>
                                                            False ) ) )
                                                =>
                                                  ( ( ( ( =>
                                                            =>
                                                              =>
                                                                =>
                                                                  ( if
                                                                    3
                                                                    2
                                                                    1
                                                                    0 )
                                                          2 )
                                                        1 )
                                                      =>
                                                        True )
                                                    =>
                                                      False ) ) ) ) )
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( 0
                                                  1 )
                                          "first" )
                                        ( ( =>
                                              =>
                                                0
                                            "xs" )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "x" )
                                                      "_" ) )
                                                  =>
                                                    =>
                                                      0 ) )
                                              =>
                                                1 ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( 0
                                                      1 )
                                              "second" )
                                            ( ( =>
                                                  =>
                                                    0
                                                "xs" )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( pop
                                                              2
                                                              1
                                                              0 )
                                                      0 )
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "_" )
                                                          "xs" ) )
                                                      =>
                                                        =>
                                                          ( 3
                                                            1 ) ) )
                                                  =>
                                                    1 ) ) )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( 0
                                                          1 )
                                                  "join" )
                                                ( ( 10
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "pair" )
                                                          "acc" ) )
                                                      =>
                                                        =>
                                                          ( ( ( =>
                                                                  =>
                                                                    =>
                                                                      ( 0
                                                                        1 )
                                                                "xvar" )
                                                              ( 3
                                                                0 ) )
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( 0
                                                                            1 )
                                                                    "xval" )
                                                                  ( 3
                                                                    1 ) )
                                                                =>
                                                                  ( =>
                                                                      ( 4
                                                                        3 )
                                                                    ( ( ( 14
                                                                          ( ( =>
                                                                                =>
                                                                                  0
                                                                              ( ( []
                                                                                  "pair" )
                                                                                "_" ) )
                                                                            =>
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( 0
                                                                                              1 )
                                                                                      "yvar" )
                                                                                    ( 7
                                                                                      0 ) )
                                                                                  =>
                                                                                    ( ( ( =>
                                                                                            =>
                                                                                              =>
                                                                                                ( 0
                                                                                                  1 )
                                                                                          "yval" )
                                                                                        ( 7
                                                                                          1 ) )
                                                                                      =>
                                                                                        ( ( ( ( =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        ( if
                                                                                                          3
                                                                                                          2
                                                                                                          1
                                                                                                          0 )
                                                                                                5 )
                                                                                              1 )
                                                                                            =>
                                                                                              ( ( ( ( =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            =>
                                                                                                              ( if
                                                                                                                3
                                                                                                                2
                                                                                                                1
                                                                                                                0 )
                                                                                                      ( ( 11
                                                                                                          5 )
                                                                                                        1 ) )
                                                                                                    False )
                                                                                                  =>
                                                                                                    ( no-match!
                                                                                                      ( ( []
                                                                                                          ( ( []
                                                                                                              2 )
                                                                                                            3 ) )
                                                                                                        ( ( []
                                                                                                            6 )
                                                                                                          7 ) ) ) )
                                                                                                =>
                                                                                                  [] ) )
                                                                                          =>
                                                                                            [] ) ) ) ) )
                                                                        [] )
                                                                      3 ) ) ) ) ) )
                                                  [] ) )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( 0
                                                              1 )
                                                      "unify" )
                                                    ( ( =>
                                                          =>
                                                            ~>
                                                              0
                                                        "unify" )
                                                      =>
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( []
                                                                "value" )
                                                              "pattern" ) )
                                                          =>
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( pop
                                                                            2
                                                                            1
                                                                            0 )
                                                                    1 )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "pattern" )
                                                                        "type" ) )
                                                                    =>
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                1 )
                                                                              Binding )
                                                                            =>
                                                                              ( []
                                                                                ( ( []
                                                                                    3 )
                                                                                  1 ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    2 )
                                                                                  List )
                                                                                =>
                                                                                  ( ( ( =>
                                                                                          =>
                                                                                            =>
                                                                                              ( 0
                                                                                                1 )
                                                                                        "zipped" )
                                                                                      ( ( 12
                                                                                          2 )
                                                                                        4 ) )
                                                                                    =>
                                                                                      ( ( ( ( =>
                                                                                                =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      ( if
                                                                                                        3
                                                                                                        2
                                                                                                        1
                                                                                                        0 )
                                                                                              0 )
                                                                                            [] )
                                                                                          =>
                                                                                            ( no-match!
                                                                                              ( ( []
                                                                                                  6 )
                                                                                                ( 5
                                                                                                  4 ) ) ) )
                                                                                        =>
                                                                                          ( 9
                                                                                            ( 16
                                                                                              ( ( 17
                                                                                                  ( 19
                                                                                                    8 ) )
                                                                                                1 ) ) ) ) ) )
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( pop
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                      3 )
                                                                                    ( ( =>
                                                                                          =>
                                                                                            0
                                                                                        ( ( []
                                                                                            "f" )
                                                                                          "type" ) )
                                                                                      =>
                                                                                        =>
                                                                                          ( ( ( ( =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        =>
                                                                                                          ( if
                                                                                                            3
                                                                                                            2
                                                                                                            1
                                                                                                            0 )
                                                                                                  1 )
                                                                                                Compound )
                                                                                              =>
                                                                                                ( ( ( =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            ( 0
                                                                                                              1 )
                                                                                                      "v" )
                                                                                                    ( 14
                                                                                                      7 ) )
                                                                                                  =>
                                                                                                    ( ( ( =>
                                                                                                            =>
                                                                                                              =>
                                                                                                                ( 0
                                                                                                                  1 )
                                                                                                          "vf" )
                                                                                                        ( 13
                                                                                                          0 ) )
                                                                                                      =>
                                                                                                        ( ( ( =>
                                                                                                                =>
                                                                                                                  =>
                                                                                                                    ( 0
                                                                                                                      1 )
                                                                                                              "vargs" )
                                                                                                            ( 13
                                                                                                              1 ) )
                                                                                                          =>
                                                                                                            ( ( ( =>
                                                                                                                    =>
                                                                                                                      =>
                                                                                                                        ( 0
                                                                                                                          1 )
                                                                                                                  "zipped" )
                                                                                                                ( 22
                                                                                                                  ( ( 18
                                                                                                                      ( 8
                                                                                                                        4 ) )
                                                                                                                    ( 0
                                                                                                                      1 ) ) ) )
                                                                                                              =>
                                                                                                                ( ( ( ( =>
                                                                                                                          =>
                                                                                                                            =>
                                                                                                                              =>
                                                                                                                                ( if
                                                                                                                                  3
                                                                                                                                  2
                                                                                                                                  1
                                                                                                                                  0 )
                                                                                                                        0 )
                                                                                                                      [] )
                                                                                                                    =>
                                                                                                                      ( no-match!
                                                                                                                        ( ( []
                                                                                                                            12 )
                                                                                                                          ( ( 7
                                                                                                                              6 )
                                                                                                                            10 ) ) ) )
                                                                                                                  =>
                                                                                                                    ( 15
                                                                                                                      ( 22
                                                                                                                        ( ( 23
                                                                                                                            ( 25
                                                                                                                              14 ) )
                                                                                                                          1 ) ) ) ) ) ) ) ) )
                                                                                            =>
                                                                                              ( invalid!
                                                                                                ( ( 2
                                                                                                    1 )
                                                                                                  5 ) ) ) ) )
                                                                                  =>
                                                                                    ( ( ( ( =>
                                                                                              =>
                                                                                                =>
                                                                                                  =>
                                                                                                    ( if
                                                                                                      3
                                                                                                      2
                                                                                                      1
                                                                                                      0 )
                                                                                            ( ( 11
                                                                                                3 )
                                                                                              5 ) )
                                                                                          True )
                                                                                        =>
                                                                                          [] )
                                                                                      =>
                                                                                        ( no-match!
                                                                                          ( ( []
                                                                                              6 )
                                                                                            4 ) ) ) ) ) ) ) )
                                                                =>
                                                                  ( invalid!
                                                                    2 ) ) ) ) )
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( 0
                                                                  1 )
                                                          "->" )
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( ( []
                                                                  "value" )
                                                                "body" )
                                                              "pattern" ) )
                                                          =>
                                                            =>
                                                              =>
                                                                ( ( ( =>
                                                                        =>
                                                                          =>
                                                                            ( try
                                                                              2
                                                                              1
                                                                              0 )
                                                                      =>
                                                                        ( ( ( =>
                                                                                =>
                                                                                  =>
                                                                                    ( 0
                                                                                      1 )
                                                                              "args" )
                                                                            ( ( 13
                                                                                6 )
                                                                              ( ( 4
                                                                                  3 )
                                                                                1 ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    0 )
                                                                                  [] )
                                                                                =>
                                                                                  ( 4
                                                                                    [] ) )
                                                                              =>
                                                                                ( ( 17
                                                                                    4 )
                                                                                  1 ) ) ) )
                                                                    no-match! )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "arg" )
                                                                        "_" ) )
                                                                    =>
                                                                      =>
                                                                        ( no-match!
                                                                          0 ) ) ) ) )
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( try
                                                                      2
                                                                      1
                                                                      0 )
                                                              =>
                                                                ( ( ( ( ( ( ( ( ( ( []
                                                                                    ( ( ( 1
                                                                                          ( ( Compound
                                                                                              ( Value
                                                                                                Pair ) )
                                                                                            ( ( []
                                                                                                ( Binding
                                                                                                  "x" ) )
                                                                                              ( Binding
                                                                                                "x" ) ) ) )
                                                                                        =>
                                                                                          =>
                                                                                            0 )
                                                                                      ( ( Pair
                                                                                          Foo )
                                                                                        Bar ) ) )
                                                                                  ( ( ( 1
                                                                                        ( List
                                                                                          ( ( []
                                                                                              ( Binding
                                                                                                "y" ) )
                                                                                            ( Binding
                                                                                              "x" ) ) ) )
                                                                                      =>
                                                                                        =>
                                                                                          1 )
                                                                                    ( ( []
                                                                                        Bar )
                                                                                      Foo ) ) )
                                                                                ( ( ( 1
                                                                                      ( ( Compound
                                                                                          ( Binding
                                                                                            "foo" ) )
                                                                                        ( ( []
                                                                                            ( Binding
                                                                                              "y" ) )
                                                                                          ( Binding
                                                                                            "x" ) ) ) )
                                                                                    =>
                                                                                      =>
                                                                                        =>
                                                                                          1 )
                                                                                  ( ( Pair
                                                                                      Foo )
                                                                                    Bar ) ) )
                                                                              ( ( ( 1
                                                                                    ( ( Compound
                                                                                        ( Value
                                                                                          Pair ) )
                                                                                      ( ( []
                                                                                          ( Binding
                                                                                            "x" ) )
                                                                                        ( Binding
                                                                                          "x" ) ) ) )
                                                                                  =>
                                                                                    =>
                                                                                      0 )
                                                                                ( ( Pair
                                                                                    Bar )
                                                                                  Bar ) ) )
                                                                            ( ( ( 1
                                                                                  ( ( Compound
                                                                                      ( Value
                                                                                        Pair ) )
                                                                                    ( ( []
                                                                                        ( Value
                                                                                          Bar ) )
                                                                                      ( Binding
                                                                                        "x" ) ) ) )
                                                                                =>
                                                                                  0 )
                                                                              ( ( Pair
                                                                                  Foo )
                                                                                Bar ) ) )
                                                                          ( ( ( 1
                                                                                ( ( Compound
                                                                                    ( Value
                                                                                      Pair ) )
                                                                                  ( ( []
                                                                                      ( Binding
                                                                                        "y" ) )
                                                                                    ( Binding
                                                                                      "x" ) ) ) )
                                                                              =>
                                                                                =>
                                                                                  0 )
                                                                            ( ( Pair
                                                                                Foo )
                                                                              Bar ) ) )
                                                                        ( ( ( 1
                                                                              ( Value
                                                                                ( ( Pair
                                                                                    Foo )
                                                                                  Bar ) ) )
                                                                            =>
                                                                              Foo )
                                                                          ( ( Pair
                                                                              Foo )
                                                                            Bar ) ) )
                                                                      ( ( ( 1
                                                                            ( Binding
                                                                              "x" ) )
                                                                          =>
                                                                            Bar )
                                                                        Foo ) )
                                                                    ( ( ( 1
                                                                          ( Binding
                                                                            "x" ) )
                                                                        =>
                                                                          0 )
                                                                      Foo ) )
                                                                  ( ( ( 1
                                                                        ( Value
                                                                          Foo ) )
                                                                      =>
                                                                        Bar )
                                                                    Foo ) ) )
                                                            no-match! )
                                                          ( ( =>
                                                                =>
                                                                  0
                                                              ( ( []
                                                                  "arg" )
                                                                "r" ) )
                                                            =>
                                                              =>
                                                                ( 1
                                                                  ( NoMatch
                                                                    0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""x"")
00065: AppFnToArg
00066: PushString(""xs"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""xs"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""f"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00002)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""x"")
00117: AppFnToArg
00118: PushString(""f"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: LoadVar(00001)
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadFn { code: 00113, fvars: 00002 }
00130:   Return
00131: LoadVar(00000)
00132: LoadVar(00001)
00133: AppFnToArg
00134:   Return
00135: LoadFn { code: 00131, fvars: 00001 }
00136:   Return
00137: LoadFn { code: 00135, fvars: 00000 }
00138:   Return
00139: LoadVar(00000)
00140:   Return
00141: LoadFn { code: 00139, fvars: 00000 }
00142:   Return
00143: LoadVar(00000)
00144:   Return
00145: LoadFn { code: 00143, fvars: 00000 }
00146:   Return
00147: LoadVar(00001)
00148: LoadVar(00000)
00149: AppFnToArg
00150:   Return
00151: LoadFn { code: 00147, fvars: 00001 }
00152:   Return
00153: LoadVar(00002)
00154: LoadFn { code: 00145, fvars: 00000 }
00155: PushString("")
00156: PushString(""x"")
00157: AppFnToArg
00158: PushString(""xs"")
00159: AppFnToArg
00160: AppFnToArg
00161: LoadFn { code: 00151, fvars: 00000 }
00162: AppFnToArg
00163: AppFnToArg
00164: PushString("")
00165: AppFnToArg
00166: LoadVar(00000)
00167: AppFnToArg
00168:   Return
00169: LoadVar(00000)
00170: LoadVar(00001)
00171: AppFnToArg
00172:   Return
00173: LoadFn { code: 00169, fvars: 00001 }
00174:   Return
00175: LoadFn { code: 00173, fvars: 00000 }
00176:   Return
00177: LoadVar(00000)
00178:   Return
00179: LoadFn { code: 00177, fvars: 00000 }
00180:   Return
00181: LoadVar(00000)
00182:   Return
00183: LoadFn { code: 00181, fvars: 00000 }
00184:   Return
00185: LoadVar(00001)
00186: LoadVar(00003)
00187: LoadVar(00000)
00188: AppFnToArg
00189: AppFnToArg
00190:   Return
00191: LoadFn { code: 00185, fvars: 00003 }
00192:   Return
00193: LoadVar(00004)
00194: LoadFn { code: 00183, fvars: 00000 }
00195: PushString("")
00196: PushString(""x"")
00197: AppFnToArg
00198: PushString(""xs"")
00199: AppFnToArg
00200: AppFnToArg
00201: LoadFn { code: 00191, fvars: 00002 }
00202: AppFnToArg
00203: AppFnToArg
00204: PushString("")
00205: AppFnToArg
00206: LoadVar(00002)
00207: LoadVar(00000)
00208: AppFnToArg
00209: AppFnToArg
00210:   Return
00211: LoadFn { code: 00193, fvars: 00004 }
00212:   Return
00213: LoadVar(00000)
00214: LoadVar(00001)
00215: AppFnToArg
00216:   Return
00217: LoadFn { code: 00213, fvars: 00001 }
00218:   Return
00219: LoadFn { code: 00217, fvars: 00000 }
00220:   Return
00221: LoadVar(00000)
00222:   Return
00223: LoadFn { code: 00221, fvars: 00000 }
00224:   Return
00225: LoadVar(00000)
00226:   Return
00227: LoadFn { code: 00225, fvars: 00000 }
00228:   Return
00229: LoadVar(00000)
00230:   Return
00231: LoadFn { code: 00229, fvars: 00000 }
00232:   Return
00233: LoadVar(00001)
00234: LoadVar(00000)
00235: AppFnToArg
00236:   Return
00237: LoadFn { code: 00233, fvars: 00001 }
00238:   Return
00239: LoadVar(00006)
00240: LoadFn { code: 00231, fvars: 00000 }
00241: PushString("")
00242: PushString(""x"")
00243: AppFnToArg
00244: PushString(""acc"")
00245: AppFnToArg
00246: AppFnToArg
00247: LoadFn { code: 00237, fvars: 00000 }
00248: AppFnToArg
00249: AppFnToArg
00250: LoadVar(00001)
00251: AppFnToArg
00252: LoadVar(00000)
00253: AppFnToArg
00254:   Return
00255: LoadFn { code: 00239, fvars: 00006 }
00256:   Return
00257: LoadVar(00002)
00258: LoadVar(00004)
00259: LoadFn { code: 00227, fvars: 00000 }
00260: PushString("")
00261: PushString(""x"")
00262: AppFnToArg
00263: PushString(""acc"")
00264: AppFnToArg
00265: AppFnToArg
00266: LoadFn { code: 00255, fvars: 00005 }
00267: AppFnToArg
00268: AppFnToArg
00269: PushString("")
00270: AppFnToArg
00271: LoadVar(00000)
00272: AppFnToArg
00273: AppFnToArg
00274:   Return
00275: LoadVar(00000)
00276: LoadVar(00001)
00277: AppFnToArg
00278:   Return
00279: LoadFn { code: 00275, fvars: 00001 }
00280:   Return
00281: LoadFn { code: 00279, fvars: 00000 }
00282:   Return
00283: LoadVar(00000)
00284: LoadFn { code: 00000, fvars: 00000 }
00285: AppArgToFn
00286:   Return
00287: LoadFn { code: 00283, fvars: 00000 }
00288:   Return
00289: LoadVar(00000)
00290:   Return
00291: LoadFn { code: 00289, fvars: 00000 }
00292:   Return
00293: LoadVar(00002)
00294: LoadVar(00001)
00295: LoadVar(00000)
00296: Unpack
00297: AppArgToFn
00298: AppArgToFn
00299:   Return
00300: LoadFn { code: 00293, fvars: 00002 }
00301:   Return
00302: LoadFn { code: 00300, fvars: 00001 }
00303:   Return
00304: LoadVar(00000)
00305:   Return
00306: LoadFn { code: 00304, fvars: 00000 }
00307:   Return
00308: LoadVar(00002)
00309: LoadVar(00001)
00310: LoadVar(00000)
00311: Unpack
00312: AppArgToFn
00313: AppArgToFn
00314:   Return
00315: LoadFn { code: 00308, fvars: 00002 }
00316:   Return
00317: LoadFn { code: 00315, fvars: 00001 }
00318:   Return
00319: LoadVar(00000)
00320:   Return
00321: LoadFn { code: 00319, fvars: 00000 }
00322:   Return
00323: LoadVar(00007)
00324: LoadVar(00006)
00325: PushString("")
00326: LoadVar(00000)
00327: AppFnToArg
00328: LoadVar(00002)
00329: AppFnToArg
00330: AppFnToArg
00331: AppFnToArg
00332: LoadVar(00003)
00333: AppFnToArg
00334: LoadVar(00001)
00335: AppFnToArg
00336:   Return
00337: LoadFn { code: 00323, fvars: 00007 }
00338:   Return
00339: PushString("")
00340:   Return
00341: LoadFn { code: 00317, fvars: 00000 }
00342: LoadVar(00002)
00343: AppFnToArg
00344: LoadFn { code: 00321, fvars: 00000 }
00345: PushString("")
00346: PushString(""y"")
00347: AppFnToArg
00348: PushString(""ys"")
00349: AppFnToArg
00350: AppFnToArg
00351: LoadFn { code: 00337, fvars: 00006 }
00352: AppFnToArg
00353: AppFnToArg
00354: LoadFn { code: 00339, fvars: 00000 }
00355: AppFnToArg
00356:   Return
00357: LoadFn { code: 00341, fvars: 00005 }
00358:   Return
00359: LoadVar(00002)
00360: LoadVar(00001)
00361: LoadVar(00000)
00362: Unpack
00363: AppArgToFn
00364: AppArgToFn
00365:   Return
00366: LoadFn { code: 00359, fvars: 00002 }
00367:   Return
00368: LoadFn { code: 00366, fvars: 00001 }
00369:   Return
00370: LoadVar(00000)
00371:   Return
00372: LoadFn { code: 00370, fvars: 00000 }
00373:   Return
00374: PushString("")
00375:   Return
00376: LoadFn { code: 00374, fvars: 00000 }
00377:   Return
00378: LoadVar(00004)
00379:   Return
00380: LoadFn { code: 00368, fvars: 00000 }
00381: LoadVar(00001)
00382: AppFnToArg
00383: LoadFn { code: 00372, fvars: 00000 }
00384: PushString("")
00385: PushString(""y"")
00386: AppFnToArg
00387: PushString(""ys"")
00388: AppFnToArg
00389: AppFnToArg
00390: LoadFn { code: 00376, fvars: 00000 }
00391: AppFnToArg
00392: AppFnToArg
00393: LoadFn { code: 00378, fvars: 00004 }
00394: AppFnToArg
00395:   Return
00396: LoadFn { code: 00302, fvars: 00000 }
00397: LoadVar(00001)
00398: AppFnToArg
00399: LoadFn { code: 00306, fvars: 00000 }
00400: PushString("")
00401: PushString(""x"")
00402: AppFnToArg
00403: PushString(""xs"")
00404: AppFnToArg
00405: AppFnToArg
00406: LoadFn { code: 00357, fvars: 00004 }
00407: AppFnToArg
00408: AppFnToArg
00409: LoadFn { code: 00380, fvars: 00003 }
00410: AppFnToArg
00411:   Return
00412: LoadFn { code: 00396, fvars: 00003 }
00413:   Return
00414: LoadFn { code: 00412, fvars: 00002 }
00415:   Return
00416: LoadFn { code: 00291, fvars: 00000 }
00417: PushString("")
00418: PushString(""ys"")
00419: AppFnToArg
00420: PushString(""xs"")
00421: AppFnToArg
00422: PushString(""acc"")
00423: AppFnToArg
00424: AppFnToArg
00425: LoadFn { code: 00414, fvars: 00001 }
00426: AppFnToArg
00427:   Return
00428: LoadVar(00000)
00429: LoadVar(00001)
00430: AppFnToArg
00431:   Return
00432: LoadFn { code: 00428, fvars: 00001 }
00433:   Return
00434: LoadFn { code: 00432, fvars: 00000 }
00435:   Return
00436: LoadVar(00000)
00437:   Return
00438: LoadFn { code: 00436, fvars: 00000 }
00439:   Return
00440: LoadVar(00005)
00441: LoadVar(00002)
00442: PushString("")
00443: AppFnToArg
00444: LoadVar(00001)
00445: AppFnToArg
00446: LoadVar(00000)
00447: AppFnToArg
00448: AppFnToArg
00449:   Return
00450: LoadFn { code: 00440, fvars: 00005 }
00451:   Return
00452: LoadVar(00000)
00453: LoadVar(00001)
00454: AppFnToArg
00455:   Return
00456: LoadFn { code: 00452, fvars: 00001 }
00457:   Return
00458: LoadFn { code: 00456, fvars: 00000 }
00459:   Return
00460: LoadVar(00000)
00461: LoadFn { code: 00000, fvars: 00000 }
00462: AppArgToFn
00463:   Return
00464: LoadFn { code: 00460, fvars: 00000 }
00465:   Return
00466: LoadVar(00000)
00467:   Return
00468: LoadFn { code: 00466, fvars: 00000 }
00469:   Return
00470: LoadVar(00002)
00471: LoadVar(00001)
00472: LoadVar(00000)
00473: Unpack
00474: AppArgToFn
00475: AppArgToFn
00476:   Return
00477: LoadFn { code: 00470, fvars: 00002 }
00478:   Return
00479: LoadFn { code: 00477, fvars: 00001 }
00480:   Return
00481: LoadVar(00000)
00482:   Return
00483: LoadFn { code: 00481, fvars: 00000 }
00484:   Return
00485: LoadVar(00004)
00486: LoadVar(00003)
00487: LoadVar(00000)
00488: AppFnToArg
00489: AppFnToArg
00490: LoadVar(00001)
00491: AppFnToArg
00492:   Return
00493: LoadFn { code: 00485, fvars: 00004 }
00494:   Return
00495: PushString("")
00496: LoadVar(00002)
00497: AppFnToArg
00498: LoadVar(00001)
00499: AppFnToArg
00500:   Return
00501: LoadFn { code: 00479, fvars: 00000 }
00502: LoadVar(00000)
00503: AppFnToArg
00504: LoadFn { code: 00483, fvars: 00000 }
00505: PushString("")
00506: PushString(""x"")
00507: AppFnToArg
00508: PushString(""xs"")
00509: AppFnToArg
00510: AppFnToArg
00511: LoadFn { code: 00493, fvars: 00003 }
00512: AppFnToArg
00513: AppFnToArg
00514: LoadFn { code: 00495, fvars: 00002 }
00515: AppFnToArg
00516:   Return
00517: LoadFn { code: 00501, fvars: 00002 }
00518:   Return
00519: LoadFn { code: 00468, fvars: 00000 }
00520: PushString("")
00521: PushString(""compound"")
00522: AppFnToArg
00523: PushString(""acc"")
00524: AppFnToArg
00525: AppFnToArg
00526: LoadFn { code: 00517, fvars: 00001 }
00527: AppFnToArg
00528:   Return
00529: LoadVar(00000)
00530: LoadVar(00001)
00531: AppFnToArg
00532:   Return
00533: LoadFn { code: 00529, fvars: 00001 }
00534:   Return
00535: LoadFn { code: 00533, fvars: 00000 }
00536:   Return
00537: LoadVar(00000)
00538: LoadFn { code: 00000, fvars: 00000 }
00539: AppArgToFn
00540:   Return
00541: LoadFn { code: 00537, fvars: 00000 }
00542:   Return
00543: LoadVar(00000)
00544:   Return
00545: LoadFn { code: 00543, fvars: 00000 }
00546:   Return
00547: LoadVar(00002)
00548: LoadVar(00001)
00549: LoadVar(00000)
00550: Unpack
00551: AppArgToFn
00552: AppArgToFn
00553:   Return
00554: LoadFn { code: 00547, fvars: 00002 }
00555:   Return
00556: LoadFn { code: 00554, fvars: 00001 }
00557:   Return
00558: LoadVar(00000)
00559:   Return
00560: LoadFn { code: 00558, fvars: 00000 }
00561:   Return
00562: LoadVar(00002)
00563: LoadVar(00001)
00564: LoadVar(00000)
00565: Unpack
00566: AppArgToFn
00567: AppArgToFn
00568:   Return
00569: LoadFn { code: 00562, fvars: 00002 }
00570:   Return
00571: LoadFn { code: 00569, fvars: 00001 }
00572:   Return
00573: LoadVar(00000)
00574:   Return
00575: LoadFn { code: 00573, fvars: 00000 }
00576:   Return
00577: LoadVar(00003)
00578: LoadVar(00002)
00579: LoadVar(00001)
00580: LoadVar(00000)
00581: Cmp
00582: AppArgToFn
00583:   Return
00584: LoadFn { code: 00577, fvars: 00003 }
00585:   Return
00586: LoadFn { code: 00584, fvars: 00002 }
00587:   Return
00588: LoadFn { code: 00586, fvars: 00001 }
00589:   Return
00590: LoadVar(00007)
00591: LoadVar(00004)
00592: AppFnToArg
00593: LoadVar(00002)
00594: AppFnToArg
00595:   Return
00596: PushString("False")
00597:   Return
00598: LoadFn { code: 00588, fvars: 00000 }
00599: LoadVar(00006)
00600: LoadVar(00002)
00601: AppFnToArg
00602: LoadVar(00000)
00603: AppFnToArg
00604: AppFnToArg
00605: PushString("True")
00606: AppFnToArg
00607: LoadFn { code: 00590, fvars: 00007 }
00608: AppFnToArg
00609: LoadFn { code: 00596, fvars: 00000 }
00610: AppFnToArg
00611:   Return
00612: LoadFn { code: 00598, fvars: 00006 }
00613:   Return
00614: PushString("False")
00615:   Return
00616: LoadFn { code: 00571, fvars: 00000 }
00617: LoadVar(00002)
00618: AppFnToArg
00619: LoadFn { code: 00575, fvars: 00000 }
00620: PushString("")
00621: PushString(""y"")
00622: AppFnToArg
00623: PushString(""ys"")
00624: AppFnToArg
00625: AppFnToArg
00626: LoadFn { code: 00612, fvars: 00005 }
00627: AppFnToArg
00628: AppFnToArg
00629: LoadFn { code: 00614, fvars: 00000 }
00630: AppFnToArg
00631:   Return
00632: LoadFn { code: 00616, fvars: 00004 }
00633:   Return
00634: LoadVar(00003)
00635: LoadVar(00002)
00636: LoadVar(00001)
00637: LoadVar(00000)
00638: Cmp
00639: AppArgToFn
00640:   Return
00641: LoadFn { code: 00634, fvars: 00003 }
00642:   Return
00643: LoadFn { code: 00641, fvars: 00002 }
00644:   Return
00645: LoadFn { code: 00643, fvars: 00001 }
00646:   Return
00647: PushString("True")
00648:   Return
00649: PushString("False")
00650:   Return
00651: LoadFn { code: 00645, fvars: 00000 }
00652: LoadVar(00002)
00653: AppFnToArg
00654: LoadVar(00001)
00655: AppFnToArg
00656: LoadFn { code: 00647, fvars: 00000 }
00657: AppFnToArg
00658: LoadFn { code: 00649, fvars: 00000 }
00659: AppFnToArg
00660:   Return
00661: LoadFn { code: 00556, fvars: 00000 }
00662: LoadVar(00001)
00663: AppFnToArg
00664: LoadFn { code: 00560, fvars: 00000 }
00665: PushString("")
00666: PushString(""x"")
00667: AppFnToArg
00668: PushString(""xs"")
00669: AppFnToArg
00670: AppFnToArg
00671: LoadFn { code: 00632, fvars: 00003 }
00672: AppFnToArg
00673: AppFnToArg
00674: LoadFn { code: 00651, fvars: 00002 }
00675: AppFnToArg
00676:   Return
00677: LoadFn { code: 00661, fvars: 00002 }
00678:   Return
00679: LoadFn { code: 00545, fvars: 00000 }
00680: PushString("")
00681: PushString(""b"")
00682: AppFnToArg
00683: PushString(""a"")
00684: AppFnToArg
00685: AppFnToArg
00686: LoadFn { code: 00677, fvars: 00001 }
00687: AppFnToArg
00688:   Return
00689: LoadVar(00000)
00690: LoadVar(00001)
00691: AppFnToArg
00692:   Return
00693: LoadFn { code: 00689, fvars: 00001 }
00694:   Return
00695: LoadFn { code: 00693, fvars: 00000 }
00696:   Return
00697: LoadVar(00000)
00698:   Return
00699: LoadFn { code: 00697, fvars: 00000 }
00700:   Return
00701: LoadVar(00002)
00702: LoadVar(00001)
00703: LoadVar(00000)
00704: Unpack
00705: AppArgToFn
00706: AppArgToFn
00707:   Return
00708: LoadFn { code: 00701, fvars: 00002 }
00709:   Return
00710: LoadFn { code: 00708, fvars: 00001 }
00711:   Return
00712: LoadVar(00000)
00713:   Return
00714: LoadFn { code: 00712, fvars: 00000 }
00715:   Return
00716: LoadVar(00000)
00717:   Return
00718: LoadFn { code: 00716, fvars: 00000 }
00719:   Return
00720: LoadVar(00001)
00721:   Return
00722: LoadFn { code: 00710, fvars: 00000 }
00723: LoadVar(00000)
00724: AppFnToArg
00725: LoadFn { code: 00714, fvars: 00000 }
00726: PushString("")
00727: PushString(""x"")
00728: AppFnToArg
00729: PushString(""_"")
00730: AppFnToArg
00731: AppFnToArg
00732: LoadFn { code: 00718, fvars: 00000 }
00733: AppFnToArg
00734: AppFnToArg
00735: LoadFn { code: 00720, fvars: 00001 }
00736: AppFnToArg
00737:   Return
00738: LoadVar(00000)
00739: LoadVar(00001)
00740: AppFnToArg
00741:   Return
00742: LoadFn { code: 00738, fvars: 00001 }
00743:   Return
00744: LoadFn { code: 00742, fvars: 00000 }
00745:   Return
00746: LoadVar(00000)
00747:   Return
00748: LoadFn { code: 00746, fvars: 00000 }
00749:   Return
00750: LoadVar(00002)
00751: LoadVar(00001)
00752: LoadVar(00000)
00753: Unpack
00754: AppArgToFn
00755: AppArgToFn
00756:   Return
00757: LoadFn { code: 00750, fvars: 00002 }
00758:   Return
00759: LoadFn { code: 00757, fvars: 00001 }
00760:   Return
00761: LoadVar(00000)
00762:   Return
00763: LoadFn { code: 00761, fvars: 00000 }
00764:   Return
00765: LoadVar(00003)
00766: LoadVar(00001)
00767: AppFnToArg
00768:   Return
00769: LoadFn { code: 00765, fvars: 00003 }
00770:   Return
00771: LoadVar(00001)
00772:   Return
00773: LoadFn { code: 00759, fvars: 00000 }
00774: LoadVar(00000)
00775: AppFnToArg
00776: LoadFn { code: 00763, fvars: 00000 }
00777: PushString("")
00778: PushString(""_"")
00779: AppFnToArg
00780: PushString(""xs"")
00781: AppFnToArg
00782: AppFnToArg
00783: LoadFn { code: 00769, fvars: 00002 }
00784: AppFnToArg
00785: AppFnToArg
00786: LoadFn { code: 00771, fvars: 00001 }
00787: AppFnToArg
00788:   Return
00789: LoadVar(00000)
00790: LoadVar(00001)
00791: AppFnToArg
00792:   Return
00793: LoadFn { code: 00789, fvars: 00001 }
00794:   Return
00795: LoadFn { code: 00793, fvars: 00000 }
00796:   Return
00797: LoadVar(00000)
00798:   Return
00799: LoadFn { code: 00797, fvars: 00000 }
00800:   Return
00801: LoadVar(00000)
00802: LoadVar(00001)
00803: AppFnToArg
00804:   Return
00805: LoadFn { code: 00801, fvars: 00001 }
00806:   Return
00807: LoadFn { code: 00805, fvars: 00000 }
00808:   Return
00809: LoadVar(00000)
00810: LoadVar(00001)
00811: AppFnToArg
00812:   Return
00813: LoadFn { code: 00809, fvars: 00001 }
00814:   Return
00815: LoadFn { code: 00813, fvars: 00000 }
00816:   Return
00817: LoadVar(00004)
00818: LoadVar(00003)
00819: AppFnToArg
00820:   Return
00821: LoadVar(00000)
00822:   Return
00823: LoadFn { code: 00821, fvars: 00000 }
00824:   Return
00825: LoadVar(00000)
00826: LoadVar(00001)
00827: AppFnToArg
00828:   Return
00829: LoadFn { code: 00825, fvars: 00001 }
00830:   Return
00831: LoadFn { code: 00829, fvars: 00000 }
00832:   Return
00833: LoadVar(00000)
00834: LoadVar(00001)
00835: AppFnToArg
00836:   Return
00837: LoadFn { code: 00833, fvars: 00001 }
00838:   Return
00839: LoadFn { code: 00837, fvars: 00000 }
00840:   Return
00841: LoadVar(00003)
00842: LoadVar(00002)
00843: LoadVar(00001)
00844: LoadVar(00000)
00845: Cmp
00846: AppArgToFn
00847:   Return
00848: LoadFn { code: 00841, fvars: 00003 }
00849:   Return
00850: LoadFn { code: 00848, fvars: 00002 }
00851:   Return
00852: LoadFn { code: 00850, fvars: 00001 }
00853:   Return
00854: LoadVar(00003)
00855: LoadVar(00002)
00856: LoadVar(00001)
00857: LoadVar(00000)
00858: Cmp
00859: AppArgToFn
00860:   Return
00861: LoadFn { code: 00854, fvars: 00003 }
00862:   Return
00863: LoadFn { code: 00861, fvars: 00002 }
00864:   Return
00865: LoadFn { code: 00863, fvars: 00001 }
00866:   Return
00867: PushEffect("no-match")
00868: PushString("")
00869: PushString("")
00870: LoadVar(00002)
00871: AppFnToArg
00872: LoadVar(00003)
00873: AppFnToArg
00874: AppFnToArg
00875: PushString("")
00876: LoadVar(00006)
00877: AppFnToArg
00878: LoadVar(00007)
00879: AppFnToArg
00880: AppFnToArg
00881: AppFnToArg
00882:   Return
00883: PushString("")
00884:   Return
00885: LoadFn { code: 00865, fvars: 00000 }
00886: LoadVar(00011)
00887: LoadVar(00005)
00888: AppFnToArg
00889: LoadVar(00001)
00890: AppFnToArg
00891: AppFnToArg
00892: PushString("False")
00893: AppFnToArg
00894: LoadFn { code: 00867, fvars: 00007 }
00895: AppFnToArg
00896: LoadFn { code: 00883, fvars: 00000 }
00897: AppFnToArg
00898:   Return
00899: PushString("")
00900:   Return
00901: LoadFn { code: 00852, fvars: 00000 }
00902: LoadVar(00005)
00903: AppFnToArg
00904: LoadVar(00001)
00905: AppFnToArg
00906: LoadFn { code: 00885, fvars: 00011 }
00907: AppFnToArg
00908: LoadFn { code: 00899, fvars: 00000 }
00909: AppFnToArg
00910:   Return
00911: LoadFn { code: 00839, fvars: 00000 }
00912: PushString(""yval"")
00913: AppFnToArg
00914: LoadVar(00007)
00915: LoadVar(00001)
00916: AppFnToArg
00917: AppFnToArg
00918: LoadFn { code: 00901, fvars: 00010 }
00919: AppFnToArg
00920:   Return
00921: LoadFn { code: 00831, fvars: 00000 }
00922: PushString(""yvar"")
00923: AppFnToArg
00924: LoadVar(00007)
00925: LoadVar(00000)
00926: AppFnToArg
00927: AppFnToArg
00928: LoadFn { code: 00911, fvars: 00009 }
00929: AppFnToArg
00930:   Return
00931: LoadFn { code: 00921, fvars: 00008 }
00932:   Return
00933: LoadFn { code: 00817, fvars: 00004 }
00934: LoadVar(00014)
00935: LoadFn { code: 00823, fvars: 00000 }
00936: PushString("")
00937: PushString(""pair"")
00938: AppFnToArg
00939: PushString(""_"")
00940: AppFnToArg
00941: AppFnToArg
00942: LoadFn { code: 00931, fvars: 00007 }
00943: AppFnToArg
00944: AppFnToArg
00945: PushString("")
00946: AppFnToArg
00947: LoadVar(00003)
00948: AppFnToArg
00949: AppFnToArg
00950:   Return
00951: LoadFn { code: 00815, fvars: 00000 }
00952: PushString(""xval"")
00953: AppFnToArg
00954: LoadVar(00003)
00955: LoadVar(00001)
00956: AppFnToArg
00957: AppFnToArg
00958: LoadFn { code: 00933, fvars: 00014 }
00959: AppFnToArg
00960:   Return
00961: LoadFn { code: 00807, fvars: 00000 }
00962: PushString(""xvar"")
00963: AppFnToArg
00964: LoadVar(00003)
00965: LoadVar(00000)
00966: AppFnToArg
00967: AppFnToArg
00968: LoadFn { code: 00951, fvars: 00013 }
00969: AppFnToArg
00970:   Return
00971: LoadFn { code: 00961, fvars: 00012 }
00972:   Return
00973: LoadVar(00000)
00974: LoadVar(00001)
00975: AppFnToArg
00976:   Return
00977: LoadFn { code: 00973, fvars: 00001 }
00978:   Return
00979: LoadFn { code: 00977, fvars: 00000 }
00980:   Return
00981: LoadVar(00000)
00982: LoadFn { code: 00000, fvars: 00000 }
00983: AppArgToFn
00984:   Return
00985: LoadFn { code: 00981, fvars: 00000 }
00986:   Return
00987: LoadVar(00000)
00988:   Return
00989: LoadFn { code: 00987, fvars: 00000 }
00990:   Return
00991: LoadVar(00002)
00992: LoadVar(00001)
00993: LoadVar(00000)
00994: Unpack
00995: AppArgToFn
00996: AppArgToFn
00997:   Return
00998: LoadFn { code: 00991, fvars: 00002 }
00999:   Return
01000: LoadFn { code: 00998, fvars: 00001 }
01001:   Return
01002: LoadVar(00000)
01003:   Return
01004: LoadFn { code: 01002, fvars: 00000 }
01005:   Return
01006: LoadVar(00003)
01007: LoadVar(00002)
01008: LoadVar(00001)
01009: LoadVar(00000)
01010: Cmp
01011: AppArgToFn
01012:   Return
01013: LoadFn { code: 01006, fvars: 00003 }
01014:   Return
01015: LoadFn { code: 01013, fvars: 00002 }
01016:   Return
01017: LoadFn { code: 01015, fvars: 00001 }
01018:   Return
01019: PushString("")
01020: PushString("")
01021: LoadVar(00003)
01022: AppFnToArg
01023: LoadVar(00001)
01024: AppFnToArg
01025: AppFnToArg
01026:   Return
01027: LoadVar(00003)
01028: LoadVar(00002)
01029: LoadVar(00001)
01030: LoadVar(00000)
01031: Cmp
01032: AppArgToFn
01033:   Return
01034: LoadFn { code: 01027, fvars: 00003 }
01035:   Return
01036: LoadFn { code: 01034, fvars: 00002 }
01037:   Return
01038: LoadFn { code: 01036, fvars: 00001 }
01039:   Return
01040: LoadVar(00000)
01041: LoadVar(00001)
01042: AppFnToArg
01043:   Return
01044: LoadFn { code: 01040, fvars: 00001 }
01045:   Return
01046: LoadFn { code: 01044, fvars: 00000 }
01047:   Return
01048: LoadVar(00003)
01049: LoadVar(00002)
01050: LoadVar(00001)
01051: LoadVar(00000)
01052: Cmp
01053: AppArgToFn
01054:   Return
01055: LoadFn { code: 01048, fvars: 00003 }
01056:   Return
01057: LoadFn { code: 01055, fvars: 00002 }
01058:   Return
01059: LoadFn { code: 01057, fvars: 00001 }
01060:   Return
01061: PushEffect("no-match")
01062: PushString("")
01063: LoadVar(00006)
01064: AppFnToArg
01065: LoadVar(00005)
01066: LoadVar(00004)
01067: AppFnToArg
01068: AppFnToArg
01069: AppFnToArg
01070:   Return
01071: LoadVar(00009)
01072: LoadVar(00016)
01073: LoadVar(00017)
01074: LoadVar(00019)
01075: LoadVar(00008)
01076: AppFnToArg
01077: AppFnToArg
01078: LoadVar(00001)
01079: AppFnToArg
01080: AppFnToArg
01081: AppFnToArg
01082:   Return
01083: LoadFn { code: 01059, fvars: 00000 }
01084: LoadVar(00000)
01085: AppFnToArg
01086: PushString("")
01087: AppFnToArg
01088: LoadFn { code: 01061, fvars: 00006 }
01089: AppFnToArg
01090: LoadFn { code: 01071, fvars: 00019 }
01091: AppFnToArg
01092:   Return
01093: LoadFn { code: 01046, fvars: 00000 }
01094: PushString(""zipped"")
01095: AppFnToArg
01096: LoadVar(00012)
01097: LoadVar(00002)
01098: AppFnToArg
01099: LoadVar(00004)
01100: AppFnToArg
01101: AppFnToArg
01102: LoadFn { code: 01083, fvars: 00018 }
01103: AppFnToArg
01104:   Return
01105: LoadVar(00002)
01106: LoadVar(00001)
01107: LoadVar(00000)
01108: Unpack
01109: AppArgToFn
01110: AppArgToFn
01111:   Return
01112: LoadFn { code: 01105, fvars: 00002 }
01113:   Return
01114: LoadFn { code: 01112, fvars: 00001 }
01115:   Return
01116: LoadVar(00000)
01117:   Return
01118: LoadFn { code: 01116, fvars: 00000 }
01119:   Return
01120: LoadVar(00003)
01121: LoadVar(00002)
01122: LoadVar(00001)
01123: LoadVar(00000)
01124: Cmp
01125: AppArgToFn
01126:   Return
01127: LoadFn { code: 01120, fvars: 00003 }
01128:   Return
01129: LoadFn { code: 01127, fvars: 00002 }
01130:   Return
01131: LoadFn { code: 01129, fvars: 00001 }
01132:   Return
01133: LoadVar(00000)
01134: LoadVar(00001)
01135: AppFnToArg
01136:   Return
01137: LoadFn { code: 01133, fvars: 00001 }
01138:   Return
01139: LoadFn { code: 01137, fvars: 00000 }
01140:   Return
01141: LoadVar(00000)
01142: LoadVar(00001)
01143: AppFnToArg
01144:   Return
01145: LoadFn { code: 01141, fvars: 00001 }
01146:   Return
01147: LoadFn { code: 01145, fvars: 00000 }
01148:   Return
01149: LoadVar(00000)
01150: LoadVar(00001)
01151: AppFnToArg
01152:   Return
01153: LoadFn { code: 01149, fvars: 00001 }
01154:   Return
01155: LoadFn { code: 01153, fvars: 00000 }
01156:   Return
01157: LoadVar(00000)
01158: LoadVar(00001)
01159: AppFnToArg
01160:   Return
01161: LoadFn { code: 01157, fvars: 00001 }
01162:   Return
01163: LoadFn { code: 01161, fvars: 00000 }
01164:   Return
01165: LoadVar(00003)
01166: LoadVar(00002)
01167: LoadVar(00001)
01168: LoadVar(00000)
01169: Cmp
01170: AppArgToFn
01171:   Return
01172: LoadFn { code: 01165, fvars: 00003 }
01173:   Return
01174: LoadFn { code: 01172, fvars: 00002 }
01175:   Return
01176: LoadFn { code: 01174, fvars: 00001 }
01177:   Return
01178: PushEffect("no-match")
01179: PushString("")
01180: LoadVar(00012)
01181: AppFnToArg
01182: LoadVar(00007)
01183: LoadVar(00006)
01184: AppFnToArg
01185: LoadVar(00010)
01186: AppFnToArg
01187: AppFnToArg
01188: AppFnToArg
01189:   Return
01190: LoadVar(00015)
01191: LoadVar(00022)
01192: LoadVar(00023)
01193: LoadVar(00025)
01194: LoadVar(00014)
01195: AppFnToArg
01196: AppFnToArg
01197: LoadVar(00001)
01198: AppFnToArg
01199: AppFnToArg
01200: AppFnToArg
01201:   Return
01202: LoadFn { code: 01176, fvars: 00000 }
01203: LoadVar(00000)
01204: AppFnToArg
01205: PushString("")
01206: AppFnToArg
01207: LoadFn { code: 01178, fvars: 00012 }
01208: AppFnToArg
01209: LoadFn { code: 01190, fvars: 00025 }
01210: AppFnToArg
01211:   Return
01212: LoadFn { code: 01163, fvars: 00000 }
01213: PushString(""zipped"")
01214: AppFnToArg
01215: LoadVar(00022)
01216: LoadVar(00018)
01217: LoadVar(00008)
01218: LoadVar(00004)
01219: AppFnToArg
01220: AppFnToArg
01221: LoadVar(00000)
01222: LoadVar(00001)
01223: AppFnToArg
01224: AppFnToArg
01225: AppFnToArg
01226: AppFnToArg
01227: LoadFn { code: 01202, fvars: 00024 }
01228: AppFnToArg
01229:   Return
01230: LoadFn { code: 01155, fvars: 00000 }
01231: PushString(""vargs"")
01232: AppFnToArg
01233: LoadVar(00013)
01234: LoadVar(00001)
01235: AppFnToArg
01236: AppFnToArg
01237: LoadFn { code: 01212, fvars: 00023 }
01238: AppFnToArg
01239:   Return
01240: LoadFn { code: 01147, fvars: 00000 }
01241: PushString(""vf"")
01242: AppFnToArg
01243: LoadVar(00013)
01244: LoadVar(00000)
01245: AppFnToArg
01246: AppFnToArg
01247: LoadFn { code: 01230, fvars: 00022 }
01248: AppFnToArg
01249:   Return
01250: LoadFn { code: 01139, fvars: 00000 }
01251: PushString(""v"")
01252: AppFnToArg
01253: LoadVar(00014)
01254: LoadVar(00007)
01255: AppFnToArg
01256: AppFnToArg
01257: LoadFn { code: 01240, fvars: 00021 }
01258: AppFnToArg
01259:   Return
01260: PushEffect("invalid")
01261: LoadVar(00002)
01262: LoadVar(00001)
01263: AppFnToArg
01264: LoadVar(00005)
01265: AppFnToArg
01266: AppFnToArg
01267:   Return
01268: LoadFn { code: 01131, fvars: 00000 }
01269: LoadVar(00001)
01270: AppFnToArg
01271: PushString("Compound")
01272: AppFnToArg
01273: LoadFn { code: 01250, fvars: 00020 }
01274: AppFnToArg
01275: LoadFn { code: 01260, fvars: 00005 }
01276: AppFnToArg
01277:   Return
01278: LoadFn { code: 01268, fvars: 00019 }
01279:   Return
01280: LoadVar(00003)
01281: LoadVar(00002)
01282: LoadVar(00001)
01283: LoadVar(00000)
01284: Cmp
01285: AppArgToFn
01286:   Return
01287: LoadFn { code: 01280, fvars: 00003 }
01288:   Return
01289: LoadFn { code: 01287, fvars: 00002 }
01290:   Return
01291: LoadFn { code: 01289, fvars: 00001 }
01292:   Return
01293: PushString("")
01294:   Return
01295: PushEffect("no-match")
01296: PushString("")
01297: LoadVar(00006)
01298: AppFnToArg
01299: LoadVar(00004)
01300: AppFnToArg
01301: AppFnToArg
01302:   Return
01303: LoadFn { code: 01291, fvars: 00000 }
01304: LoadVar(00011)
01305: LoadVar(00003)
01306: AppFnToArg
01307: LoadVar(00005)
01308: AppFnToArg
01309: AppFnToArg
01310: PushString("True")
01311: AppFnToArg
01312: LoadFn { code: 01293, fvars: 00000 }
01313: AppFnToArg
01314: LoadFn { code: 01295, fvars: 00006 }
01315: AppFnToArg
01316:   Return
01317: LoadFn { code: 01114, fvars: 00000 }
01318: LoadVar(00003)
01319: AppFnToArg
01320: LoadFn { code: 01118, fvars: 00000 }
01321: PushString("")
01322: PushString(""f"")
01323: AppFnToArg
01324: PushString(""type"")
01325: AppFnToArg
01326: AppFnToArg
01327: LoadFn { code: 01278, fvars: 00018 }
01328: AppFnToArg
01329: AppFnToArg
01330: LoadFn { code: 01303, fvars: 00011 }
01331: AppFnToArg
01332:   Return
01333: LoadFn { code: 01038, fvars: 00000 }
01334: LoadVar(00002)
01335: AppFnToArg
01336: PushString("List")
01337: AppFnToArg
01338: LoadFn { code: 01093, fvars: 00017 }
01339: AppFnToArg
01340: LoadFn { code: 01317, fvars: 00017 }
01341: AppFnToArg
01342:   Return
01343: LoadFn { code: 01017, fvars: 00000 }
01344: LoadVar(00001)
01345: AppFnToArg
01346: PushString("Binding")
01347: AppFnToArg
01348: LoadFn { code: 01019, fvars: 00003 }
01349: AppFnToArg
01350: LoadFn { code: 01333, fvars: 00016 }
01351: AppFnToArg
01352:   Return
01353: LoadFn { code: 01343, fvars: 00015 }
01354:   Return
01355: PushEffect("invalid")
01356: LoadVar(00002)
01357: AppFnToArg
01358:   Return
01359: LoadFn { code: 01000, fvars: 00000 }
01360: LoadVar(00001)
01361: AppFnToArg
01362: LoadFn { code: 01004, fvars: 00000 }
01363: PushString("")
01364: PushString(""pattern"")
01365: AppFnToArg
01366: PushString(""type"")
01367: AppFnToArg
01368: AppFnToArg
01369: LoadFn { code: 01353, fvars: 00014 }
01370: AppFnToArg
01371: AppFnToArg
01372: LoadFn { code: 01355, fvars: 00002 }
01373: AppFnToArg
01374:   Return
01375: LoadFn { code: 01359, fvars: 00013 }
01376:   Return
01377: LoadFn { code: 00989, fvars: 00000 }
01378: PushString("")
01379: PushString(""value"")
01380: AppFnToArg
01381: PushString(""pattern"")
01382: AppFnToArg
01383: AppFnToArg
01384: LoadFn { code: 01375, fvars: 00012 }
01385: AppFnToArg
01386:   Return
01387: LoadVar(00000)
01388: LoadVar(00001)
01389: AppFnToArg
01390:   Return
01391: LoadFn { code: 01387, fvars: 00001 }
01392:   Return
01393: LoadFn { code: 01391, fvars: 00000 }
01394:   Return
01395: LoadVar(00000)
01396:   Return
01397: LoadFn { code: 01395, fvars: 00000 }
01398:   Return
01399: LoadVar(00002)
01400: LoadVar(00001)
01401: LoadVar(00000)
01402: Try
01403: AppArgToFn
01404: Unwind
01405: AppArgToFn
01406: AppArgToFn
01407:   Return
01408: LoadFn { code: 01399, fvars: 00002 }
01409:   Return
01410: LoadFn { code: 01408, fvars: 00001 }
01411:   Return
01412: LoadVar(00000)
01413: LoadVar(00001)
01414: AppFnToArg
01415:   Return
01416: LoadFn { code: 01412, fvars: 00001 }
01417:   Return
01418: LoadFn { code: 01416, fvars: 00000 }
01419:   Return
01420: LoadVar(00003)
01421: LoadVar(00002)
01422: LoadVar(00001)
01423: LoadVar(00000)
01424: Cmp
01425: AppArgToFn
01426:   Return
01427: LoadFn { code: 01420, fvars: 00003 }
01428:   Return
01429: LoadFn { code: 01427, fvars: 00002 }
01430:   Return
01431: LoadFn { code: 01429, fvars: 00001 }
01432:   Return
01433: LoadVar(00004)
01434: PushString("")
01435: AppFnToArg
01436:   Return
01437: LoadVar(00017)
01438: LoadVar(00004)
01439: AppFnToArg
01440: LoadVar(00001)
01441: AppFnToArg
01442:   Return
01443: LoadFn { code: 01431, fvars: 00000 }
01444: LoadVar(00000)
01445: AppFnToArg
01446: PushString("")
01447: AppFnToArg
01448: LoadFn { code: 01433, fvars: 00004 }
01449: AppFnToArg
01450: LoadFn { code: 01437, fvars: 00017 }
01451: AppFnToArg
01452:   Return
01453: LoadFn { code: 01418, fvars: 00000 }
01454: PushString(""args"")
01455: AppFnToArg
01456: LoadVar(00013)
01457: LoadVar(00006)
01458: AppFnToArg
01459: LoadVar(00004)
01460: LoadVar(00003)
01461: AppFnToArg
01462: LoadVar(00001)
01463: AppFnToArg
01464: AppFnToArg
01465: AppFnToArg
01466: LoadFn { code: 01443, fvars: 00016 }
01467: AppFnToArg
01468:   Return
01469: LoadVar(00000)
01470:   Return
01471: LoadFn { code: 01469, fvars: 00000 }
01472:   Return
01473: PushEffect("no-match")
01474: LoadVar(00000)
01475: AppFnToArg
01476:   Return
01477: LoadFn { code: 01473, fvars: 00000 }
01478:   Return
01479: LoadFn { code: 01410, fvars: 00000 }
01480: LoadFn { code: 01453, fvars: 00015 }
01481: AppFnToArg
01482: PushEffect("no-match")
01483: AppFnToArg
01484: LoadFn { code: 01471, fvars: 00000 }
01485: PushString("")
01486: PushString(""arg"")
01487: AppFnToArg
01488: PushString(""_"")
01489: AppFnToArg
01490: AppFnToArg
01491: LoadFn { code: 01477, fvars: 00000 }
01492: AppFnToArg
01493: AppFnToArg
01494:   Return
01495: LoadFn { code: 01479, fvars: 00014 }
01496:   Return
01497: LoadFn { code: 01495, fvars: 00013 }
01498:   Return
01499: LoadVar(00002)
01500: LoadVar(00001)
01501: LoadVar(00000)
01502: Try
01503: AppArgToFn
01504: Unwind
01505: AppArgToFn
01506: AppArgToFn
01507:   Return
01508: LoadFn { code: 01499, fvars: 00002 }
01509:   Return
01510: LoadFn { code: 01508, fvars: 00001 }
01511:   Return
01512: LoadVar(00000)
01513:   Return
01514: LoadFn { code: 01512, fvars: 00000 }
01515:   Return
01516: LoadVar(00001)
01517:   Return
01518: LoadFn { code: 01516, fvars: 00001 }
01519:   Return
01520: LoadVar(00001)
01521:   Return
01522: LoadFn { code: 01520, fvars: 00001 }
01523:   Return
01524: LoadFn { code: 01522, fvars: 00000 }
01525:   Return
01526: LoadVar(00000)
01527:   Return
01528: LoadFn { code: 01526, fvars: 00000 }
01529:   Return
01530: LoadVar(00000)
01531:   Return
01532: LoadVar(00000)
01533:   Return
01534: LoadFn { code: 01532, fvars: 00000 }
01535:   Return
01536: PushString("Foo")
01537:   Return
01538: PushString("Bar")
01539:   Return
01540: LoadVar(00000)
01541:   Return
01542: PushString("Bar")
01543:   Return
01544: PushString("")
01545: LoadVar(00001)
01546: PushString("Compound")
01547: PushString("Value")
01548: PushString("Pair")
01549: AppFnToArg
01550: AppFnToArg
01551: PushString("")
01552: PushString("Binding")
01553: PushString(""x"")
01554: AppFnToArg
01555: AppFnToArg
01556: PushString("Binding")
01557: PushString(""x"")
01558: AppFnToArg
01559: AppFnToArg
01560: AppFnToArg
01561: AppFnToArg
01562: LoadFn { code: 01514, fvars: 00000 }
01563: AppFnToArg
01564: PushString("Pair")
01565: PushString("Foo")
01566: AppFnToArg
01567: PushString("Bar")
01568: AppFnToArg
01569: AppFnToArg
01570: AppFnToArg
01571: LoadVar(00001)
01572: PushString("List")
01573: PushString("")
01574: PushString("Binding")
01575: PushString(""y"")
01576: AppFnToArg
01577: AppFnToArg
01578: PushString("Binding")
01579: PushString(""x"")
01580: AppFnToArg
01581: AppFnToArg
01582: AppFnToArg
01583: AppFnToArg
01584: LoadFn { code: 01518, fvars: 00000 }
01585: AppFnToArg
01586: PushString("")
01587: PushString("Bar")
01588: AppFnToArg
01589: PushString("Foo")
01590: AppFnToArg
01591: AppFnToArg
01592: AppFnToArg
01593: LoadVar(00001)
01594: PushString("Compound")
01595: PushString("Binding")
01596: PushString(""foo"")
01597: AppFnToArg
01598: AppFnToArg
01599: PushString("")
01600: PushString("Binding")
01601: PushString(""y"")
01602: AppFnToArg
01603: AppFnToArg
01604: PushString("Binding")
01605: PushString(""x"")
01606: AppFnToArg
01607: AppFnToArg
01608: AppFnToArg
01609: AppFnToArg
01610: LoadFn { code: 01524, fvars: 00000 }
01611: AppFnToArg
01612: PushString("Pair")
01613: PushString("Foo")
01614: AppFnToArg
01615: PushString("Bar")
01616: AppFnToArg
01617: AppFnToArg
01618: AppFnToArg
01619: LoadVar(00001)
01620: PushString("Compound")
01621: PushString("Value")
01622: PushString("Pair")
01623: AppFnToArg
01624: AppFnToArg
01625: PushString("")
01626: PushString("Binding")
01627: PushString(""x"")
01628: AppFnToArg
01629: AppFnToArg
01630: PushString("Binding")
01631: PushString(""x"")
01632: AppFnToArg
01633: AppFnToArg
01634: AppFnToArg
01635: AppFnToArg
01636: LoadFn { code: 01528, fvars: 00000 }
01637: AppFnToArg
01638: PushString("Pair")
01639: PushString("Bar")
01640: AppFnToArg
01641: PushString("Bar")
01642: AppFnToArg
01643: AppFnToArg
01644: AppFnToArg
01645: LoadVar(00001)
01646: PushString("Compound")
01647: PushString("Value")
01648: PushString("Pair")
01649: AppFnToArg
01650: AppFnToArg
01651: PushString("")
01652: PushString("Value")
01653: PushString("Bar")
01654: AppFnToArg
01655: AppFnToArg
01656: PushString("Binding")
01657: PushString(""x"")
01658: AppFnToArg
01659: AppFnToArg
01660: AppFnToArg
01661: AppFnToArg
01662: LoadFn { code: 01530, fvars: 00000 }
01663: AppFnToArg
01664: PushString("Pair")
01665: PushString("Foo")
01666: AppFnToArg
01667: PushString("Bar")
01668: AppFnToArg
01669: AppFnToArg
01670: AppFnToArg
01671: LoadVar(00001)
01672: PushString("Compound")
01673: PushString("Value")
01674: PushString("Pair")
01675: AppFnToArg
01676: AppFnToArg
01677: PushString("")
01678: PushString("Binding")
01679: PushString(""y"")
01680: AppFnToArg
01681: AppFnToArg
01682: PushString("Binding")
01683: PushString(""x"")
01684: AppFnToArg
01685: AppFnToArg
01686: AppFnToArg
01687: AppFnToArg
01688: LoadFn { code: 01534, fvars: 00000 }
01689: AppFnToArg
01690: PushString("Pair")
01691: PushString("Foo")
01692: AppFnToArg
01693: PushString("Bar")
01694: AppFnToArg
01695: AppFnToArg
01696: AppFnToArg
01697: LoadVar(00001)
01698: PushString("Value")
01699: PushString("Pair")
01700: PushString("Foo")
01701: AppFnToArg
01702: PushString("Bar")
01703: AppFnToArg
01704: AppFnToArg
01705: AppFnToArg
01706: LoadFn { code: 01536, fvars: 00000 }
01707: AppFnToArg
01708: PushString("Pair")
01709: PushString("Foo")
01710: AppFnToArg
01711: PushString("Bar")
01712: AppFnToArg
01713: AppFnToArg
01714: AppFnToArg
01715: LoadVar(00001)
01716: PushString("Binding")
01717: PushString(""x"")
01718: AppFnToArg
01719: AppFnToArg
01720: LoadFn { code: 01538, fvars: 00000 }
01721: AppFnToArg
01722: PushString("Foo")
01723: AppFnToArg
01724: AppFnToArg
01725: LoadVar(00001)
01726: PushString("Binding")
01727: PushString(""x"")
01728: AppFnToArg
01729: AppFnToArg
01730: LoadFn { code: 01540, fvars: 00000 }
01731: AppFnToArg
01732: PushString("Foo")
01733: AppFnToArg
01734: AppFnToArg
01735: LoadVar(00001)
01736: PushString("Value")
01737: PushString("Foo")
01738: AppFnToArg
01739: AppFnToArg
01740: LoadFn { code: 01542, fvars: 00000 }
01741: AppFnToArg
01742: PushString("Foo")
01743: AppFnToArg
01744: AppFnToArg
01745:   Return
01746: LoadVar(00000)
01747:   Return
01748: LoadFn { code: 01746, fvars: 00000 }
01749:   Return
01750: LoadVar(00001)
01751: PushString("NoMatch")
01752: LoadVar(00000)
01753: AppFnToArg
01754: AppFnToArg
01755:   Return
01756: LoadFn { code: 01750, fvars: 00001 }
01757:   Return
01758: LoadFn { code: 01510, fvars: 00000 }
01759: LoadFn { code: 01544, fvars: 00001 }
01760: AppFnToArg
01761: PushEffect("no-match")
01762: AppFnToArg
01763: LoadFn { code: 01748, fvars: 00000 }
01764: PushString("")
01765: PushString(""arg"")
01766: AppFnToArg
01767: PushString(""r"")
01768: AppFnToArg
01769: AppFnToArg
01770: LoadFn { code: 01756, fvars: 00000 }
01771: AppFnToArg
01772: AppFnToArg
01773:   Return
01774: LoadFn { code: 01393, fvars: 00000 }
01775: PushString(""->"")
01776: AppFnToArg
01777: LoadFn { code: 01397, fvars: 00000 }
01778: PushString("")
01779: PushString(""value"")
01780: AppFnToArg
01781: PushString(""body"")
01782: AppFnToArg
01783: PushString(""pattern"")
01784: AppFnToArg
01785: AppFnToArg
01786: LoadFn { code: 01497, fvars: 00012 }
01787: AppFnToArg
01788: AppFnToArg
01789: LoadFn { code: 01758, fvars: 00000 }
01790: AppFnToArg
01791:   Return
01792: LoadFn { code: 00979, fvars: 00000 }
01793: PushString(""unify"")
01794: AppFnToArg
01795: LoadFn { code: 00985, fvars: 00000 }
01796: PushString(""unify"")
01797: AppFnToArg
01798: LoadFn { code: 01377, fvars: 00011 }
01799: AppFnToArg
01800: AppFnToArg
01801: LoadFn { code: 01774, fvars: 00011 }
01802: AppFnToArg
01803:   Return
01804: LoadFn { code: 00795, fvars: 00000 }
01805: PushString(""join"")
01806: AppFnToArg
01807: LoadVar(00010)
01808: LoadFn { code: 00799, fvars: 00000 }
01809: PushString("")
01810: PushString(""pair"")
01811: AppFnToArg
01812: PushString(""acc"")
01813: AppFnToArg
01814: AppFnToArg
01815: LoadFn { code: 00971, fvars: 00011 }
01816: AppFnToArg
01817: AppFnToArg
01818: PushString("")
01819: AppFnToArg
01820: AppFnToArg
01821: LoadFn { code: 01792, fvars: 00010 }
01822: AppFnToArg
01823:   Return
01824: LoadFn { code: 00744, fvars: 00000 }
01825: PushString(""second"")
01826: AppFnToArg
01827: LoadFn { code: 00748, fvars: 00000 }
01828: PushString(""xs"")
01829: AppFnToArg
01830: LoadFn { code: 00773, fvars: 00001 }
01831: AppFnToArg
01832: AppFnToArg
01833: LoadFn { code: 01804, fvars: 00010 }
01834: AppFnToArg
01835:   Return
01836: LoadFn { code: 00695, fvars: 00000 }
01837: PushString(""first"")
01838: AppFnToArg
01839: LoadFn { code: 00699, fvars: 00000 }
01840: PushString(""xs"")
01841: AppFnToArg
01842: LoadFn { code: 00722, fvars: 00000 }
01843: AppFnToArg
01844: AppFnToArg
01845: LoadFn { code: 01824, fvars: 00009 }
01846: AppFnToArg
01847:   Return
01848: LoadFn { code: 00535, fvars: 00000 }
01849: PushString(""=="")
01850: AppFnToArg
01851: LoadFn { code: 00541, fvars: 00000 }
01852: PushString(""=="")
01853: AppFnToArg
01854: LoadFn { code: 00679, fvars: 00000 }
01855: AppFnToArg
01856: AppFnToArg
01857: LoadFn { code: 01836, fvars: 00008 }
01858: AppFnToArg
01859:   Return
01860: LoadFn { code: 00458, fvars: 00000 }
01861: PushString(""destructure"")
01862: AppFnToArg
01863: LoadFn { code: 00464, fvars: 00000 }
01864: PushString(""destructure"")
01865: AppFnToArg
01866: LoadFn { code: 00519, fvars: 00000 }
01867: AppFnToArg
01868: PushString("")
01869: AppFnToArg
01870: AppFnToArg
01871: LoadFn { code: 01848, fvars: 00007 }
01872: AppFnToArg
01873:   Return
01874: LoadFn { code: 00434, fvars: 00000 }
01875: PushString(""zip"")
01876: AppFnToArg
01877: LoadFn { code: 00438, fvars: 00000 }
01878: PushString("")
01879: PushString(""ys"")
01880: AppFnToArg
01881: PushString(""xs"")
01882: AppFnToArg
01883: AppFnToArg
01884: LoadFn { code: 00450, fvars: 00004 }
01885: AppFnToArg
01886: AppFnToArg
01887: LoadFn { code: 01860, fvars: 00006 }
01888: AppFnToArg
01889:   Return
01890: LoadFn { code: 00281, fvars: 00000 }
01891: PushString(""zip"")
01892: AppFnToArg
01893: LoadFn { code: 00287, fvars: 00000 }
01894: PushString(""zip"")
01895: AppFnToArg
01896: LoadFn { code: 00416, fvars: 00000 }
01897: AppFnToArg
01898: AppFnToArg
01899: LoadFn { code: 01874, fvars: 00005 }
01900: AppFnToArg
01901:   Return
01902: LoadFn { code: 00219, fvars: 00000 }
01903: PushString(""flatten"")
01904: AppFnToArg
01905: LoadFn { code: 00223, fvars: 00000 }
01906: PushString(""xs"")
01907: AppFnToArg
01908: LoadFn { code: 00257, fvars: 00004 }
01909: AppFnToArg
01910: AppFnToArg
01911: LoadFn { code: 01890, fvars: 00004 }
01912: AppFnToArg
01913:   Return
01914: LoadFn { code: 00175, fvars: 00000 }
01915: PushString(""map"")
01916: AppFnToArg
01917: LoadFn { code: 00179, fvars: 00000 }
01918: PushString("")
01919: PushString(""xs"")
01920: AppFnToArg
01921: PushString(""f"")
01922: AppFnToArg
01923: AppFnToArg
01924: LoadFn { code: 00211, fvars: 00003 }
01925: AppFnToArg
01926: AppFnToArg
01927: LoadFn { code: 01902, fvars: 00003 }
01928: AppFnToArg
01929:   Return
01930: LoadFn { code: 00137, fvars: 00000 }
01931: PushString(""reverse"")
01932: AppFnToArg
01933: LoadFn { code: 00141, fvars: 00000 }
01934: PushString(""xs"")
01935: AppFnToArg
01936: LoadFn { code: 00153, fvars: 00002 }
01937: AppFnToArg
01938: AppFnToArg
01939: LoadFn { code: 01914, fvars: 00002 }
01940: AppFnToArg
01941:   Return
01942: LoadFn { code: 00097, fvars: 00000 }
01943: PushString(""apply"")
01944: AppFnToArg
01945: LoadFn { code: 00101, fvars: 00000 }
01946: PushString("")
01947: PushString(""xs"")
01948: AppFnToArg
01949: PushString(""f"")
01950: AppFnToArg
01951: AppFnToArg
01952: LoadFn { code: 00129, fvars: 00001 }
01953: AppFnToArg
01954: AppFnToArg
01955: LoadFn { code: 01930, fvars: 00001 }
01956: AppFnToArg
01957:   Return
01958: LoadFn { code: 00016, fvars: 00000 }
01959: PushString(""fold"")
01960: AppFnToArg
01961: LoadFn { code: 00022, fvars: 00000 }
01962: PushString(""fold"")
01963: AppFnToArg
01964: LoadFn { code: 00079, fvars: 00000 }
01965: AppFnToArg
01966: AppFnToArg
01967: LoadFn { code: 01942, fvars: 00000 }
01968: AppFnToArg
01969:   Return

[Bar, Foo, Bar, Foo, Bar, Foo, Bar, Foo, Bar, NoMatch([["x", Foo], ["x", Bar]])]

---

:fold = (:fold ~> { [:f, :acc, :xs] => {
    __unpack(xs, [:xs, :x] => {
        fold(f, f(acc, x), xs)
    }, {
        acc
    })
}})
:apply = ([:f, :xs] => {
    fold([:f, :x] => { f(x) }, f, xs)
})
:reverse = (:xs => {
    fold([:xs, :x] => { xs(x) }, [], xs)
})
:map = ([:f, :xs] => {
    fold([:xs, :x] => { xs(f(x)) }, [], reverse(xs))
})
:flatten = (:xs => {
    reverse(fold([:acc, :x] => {
        fold([:acc, :x] => { acc(x) }, acc, x)
    }, [], xs))
})
:zip = (:zip ~> { [:acc, :xs, :ys] => {
    __unpack(xs, [:xs, :x] => {
        __unpack(ys, [:ys, :y] => { zip(acc([x, y]), xs, ys) }, {})
    }, {
        __unpack(ys, [:ys, :y] => {}, { acc })
    })
}})
:zip = ([:xs, :ys] => {
    reverse(zip([], xs, ys))
})
:destructure = (:destructure ~> { [:acc, :compound] => {
    __unpack(compound, [:xs, :x] => {
        destructure(acc(x), xs)
    }, {
        [compound, acc]
    })
} })([])
:== = (:== ~> { [:a, :b] => {
    __unpack(a, [:xs, :x] => {
        __unpack(b, [:ys, :y] => {
            __compare(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        __compare(a, b, { True }, { False })
    })
}})
:first = (:xs => {
    __unpack(xs, [:_, :x] => { x }, { xs })
})
:second = (:xs => {
    __unpack(xs, [:xs, :_] => { first(xs) }, { xs })
})
:join = fold([:acc, :pair] => {
    :xvar = first(pair)
    :xval = second(pair)
    fold([:_, :pair] => {
        :yvar = first(pair)
        :yval = second(pair)
        __compare(xvar, yvar, {
            __compare(xval == yval, False, {
                no-match!([[xvar, xval], [yvar, yval]])
            }, {})
        }, {})
    }, [], acc)
    acc(pair)
}, [])
:unify = (:unify ~> { [:pattern, :value] => {
    __unpack(pattern, [:type, :pattern] => {
        __compare(type, Binding, {
            [[pattern, value]]
        }, {
            __compare(type, List, {
                :zipped = zip(pattern, value)
                __compare(zipped, [], {
                    no-match!([type(pattern), value])
                }, {
                    join(flatten(map(apply(unify), zipped)))
                })
            }, {
                __unpack(type, [:type, :f] => {
                    __compare(type, Compound, {
                        :v = destructure(value)
                        :vf = first(v)
                        :vargs = second(v)
                        :zipped = reverse(zip(pattern(f), vargs(vf)))
                        __compare(zipped, [], {
                            no-match!([type(f, pattern), value])
                        }, {
                            join(flatten(map(apply(unify), zipped)))
                        })
                    }, {
                        invalid!(type(f, pattern))
                    })
                }, {
                    __compare(pattern == value, True, {}, {
                        no-match!([pattern, value])
                    })
                })
            })
        })
    }, {
        invalid!(pattern)
    })
}})
:-> = ([:pattern, :body, :value] => {
    __handle( {
        :args = map(second, unify(pattern, value))
        __compare(args, [], {
            body()
        }, {
            apply(body, args)
        })
    }, no-match!, [:_, :arg] => {
        no-match!(arg)
    })
})
:match = ([:value, :clauses] => {
    :result = fold([:result, :clause] => {
        __compare(result, [], {
            __handle({
                Match(clause(value))
            }, no-match!, [:r, :arg] => {})
        }, {
            result
        })
    }, [], clauses)
    __unpack(result, [:_, :result] => {
        result
    }, {
        no-match!(value)
    })
})
[
    match(Pair(Foo, Bar), [
        Pair(:x, :x) -> { Twice(x, x) }
        Pair(:x, Foo) -> { SecondIsFoo }
        Pair(:x, :y) -> { y }
        :_ -> { throw!(InvalidPair) }
    ])
    __handle({
        match(Foo, [
            Pair(:x, :x) -> { Twice(x, x) }
            Pair(:x, Foo) -> { SecondIsFoo }
            Pair(:x, :y) -> { y }
        ])
    }, no-match!, [:_, :arg] => {
        NoMatch(arg)
    })
]

(=
  :fold
  (~>
    :fold
    { (=>
        [ :f
          :acc
          :xs ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (fold
                  f
                  (f
                    acc
                    x)
                  xs) })
            { acc }) }) }))
(=
  :apply
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :f
            :x ]
          { (f
              x) })
        f
        xs) }))
(=
  :reverse
  (=>
    :xs
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              x) })
        [  ]
        xs) }))
(=
  :map
  (=>
    [ :f
      :xs ]
    { (fold
        (=>
          [ :xs
            :x ]
          { (xs
              (f
                x)) })
        [  ]
        (reverse
          xs)) }))
(=
  :flatten
  (=>
    :xs
    { (reverse
        (fold
          (=>
            [ :acc
              :x ]
            { (fold
                (=>
                  [ :acc
                    :x ]
                  { (acc
                      x) })
                acc
                x) })
          [  ]
          xs)) }))
(=
  :zip
  (~>
    :zip
    { (=>
        [ :acc
          :xs
          :ys ]
        { (__unpack
            xs
            (=>
              [ :xs
                :x ]
              { (__unpack
                  ys
                  (=>
                    [ :ys
                      :y ]
                    { (zip
                        (acc
                          [ x
                            y ])
                        xs
                        ys) })
                  {  }) })
            { (__unpack
                ys
                (=>
                  [ :ys
                    :y ]
                  {  })
                { acc }) }) }) }))
(=
  :zip
  (=>
    [ :xs
      :ys ]
    { (reverse
        (zip
          [  ]
          xs
          ys)) }))
(=
  :destructure
  ((~>
    :destructure
    { (=>
        [ :acc
          :compound ]
        { (__unpack
            compound
            (=>
              [ :xs
                :x ]
              { (destructure
                  (acc
                    x)
                  xs) })
            { [ compound
                acc ] }) }) })
    [  ]))
(=
  :==
  (~>
    :==
    { (=>
        [ :a
          :b ]
        { (__unpack
            a
            (=>
              [ :xs
                :x ]
              { (__unpack
                  b
                  (=>
                    [ :ys
                      :y ]
                    { (__compare
                        (==
                          x
                          y)
                        True
                        { (==
                            xs
                            ys) }
                        { False }) })
                  { False }) })
            { (__compare
                a
                b
                { True }
                { False }) }) }) }))
(=
  :first
  (=>
    :xs
    { (__unpack
        xs
        (=>
          [ :_
            :x ]
          { x })
        { xs }) }))
(=
  :second
  (=>
    :xs
    { (__unpack
        xs
        (=>
          [ :xs
            :_ ]
          { (first
              xs) })
        { xs }) }))
(=
  :join
  (fold
    (=>
      [ :acc
        :pair ]
      { (=
          :xvar
          (first
            pair))
        (=
          :xval
          (second
            pair))
        (fold
          (=>
            [ :_
              :pair ]
            { (=
                :yvar
                (first
                  pair))
              (=
                :yval
                (second
                  pair))
              (__compare
                xvar
                yvar
                { (__compare
                    (==
                      xval
                      yval)
                    False
                    { (no-match!
                        [ [ xvar
                            xval ]
                          [ yvar
                            yval ] ]) }
                    {  }) }
                {  }) })
          [  ]
          acc)
        (acc
          pair) })
    [  ]))
(=
  :unify
  (~>
    :unify
    { (=>
        [ :pattern
          :value ]
        { (__unpack
            pattern
            (=>
              [ :type
                :pattern ]
              { (__compare
                  type
                  Binding
                  { [ [ pattern
                        value ] ] }
                  { (__compare
                      type
                      List
                      { (=
                          :zipped
                          (zip
                            pattern
                            value))
                        (__compare
                          zipped
                          [  ]
                          { (no-match!
                              [ (type
                                  pattern)
                                value ]) }
                          { (join
                              (flatten
                                (map
                                  (apply
                                    unify)
                                  zipped))) }) }
                      { (__unpack
                          type
                          (=>
                            [ :type
                              :f ]
                            { (__compare
                                type
                                Compound
                                { (=
                                    :v
                                    (destructure
                                      value))
                                  (=
                                    :vf
                                    (first
                                      v))
                                  (=
                                    :vargs
                                    (second
                                      v))
                                  (=
                                    :zipped
                                    (reverse
                                      (zip
                                        (pattern
                                          f)
                                        (vargs
                                          vf))))
                                  (__compare
                                    zipped
                                    [  ]
                                    { (no-match!
                                        [ (type
                                            f
                                            pattern)
                                          value ]) }
                                    { (join
                                        (flatten
                                          (map
                                            (apply
                                              unify)
                                            zipped))) }) }
                                { (invalid!
                                    (type
                                      f
                                      pattern)) }) })
                          { (__compare
                              (==
                                pattern
                                value)
                              True
                              {  }
                              { (no-match!
                                  [ pattern
                                    value ]) }) }) }) }) })
            { (invalid!
                pattern) }) }) }))
(=
  :->
  (=>
    [ :pattern
      :body
      :value ]
    { (__handle
        { (=
            :args
            (map
              second
              (unify
                pattern
                value)))
          (__compare
            args
            [  ]
            { (body) }
            { (apply
                body
                args) }) }
        no-match!
        (=>
          [ :_
            :arg ]
          { (no-match!
              arg) })) }))
(=
  :match
  (=>
    [ :value
      :clauses ]
    { (=
        :result
        (fold
          (=>
            [ :result
              :clause ]
            { (__compare
                result
                [  ]
                { (__handle
                    { (Match
                        (clause
                          value)) }
                    no-match!
                    (=>
                      [ :r
                        :arg ]
                      {  })) }
                { result }) })
          [  ]
          clauses))
      (__unpack
        result
        (=>
          [ :_
            :result ]
          { result })
        { (no-match!
            value) }) }))
[ (match
    (Pair
      Foo
      Bar)
    [ (->
        (Pair
          :x
          :x)
        { (Twice
            x
            x) })
      (->
        (Pair
          :x
          Foo)
        { SecondIsFoo })
      (->
        (Pair
          :x
          :y)
        { y })
      (->
        :_
        { (throw!
            InvalidPair) }) ])
  (__handle
    { (match
        Foo
        [ (->
            (Pair
              :x
              :x)
            { (Twice
                x
                x) })
          (->
            (Pair
              :x
              Foo)
            { SecondIsFoo })
          (->
            (Pair
              :x
              :y)
            { y }) ]) }
    no-match!
    (=>
      [ :_
        :arg ]
      { (NoMatch
          arg) })) ]

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "fold" )
    ( ( =>
          =>
            ~>
              0
        "fold" )
      =>
        ( ( =>
              =>
                0
            ( ( ( []
                  "xs" )
                "acc" )
              "f" ) )
          =>
            =>
              =>
                ( ( ( =>
                        =>
                          =>
                            ( pop
                              2
                              1
                              0 )
                      0 )
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "xs" ) )
                      =>
                        =>
                          ( ( ( 5
                                4 )
                              ( ( 4
                                  3 )
                                0 ) )
                            1 ) ) )
                  =>
                    2 ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "apply" )
        ( ( =>
              =>
                0
            ( ( []
                "xs" )
              "f" ) )
          =>
            =>
              ( ( ( 2
                    ( ( =>
                          =>
                            0
                        ( ( []
                            "x" )
                          "f" ) )
                      =>
                        =>
                          ( 1
                            0 ) ) )
                  1 )
                0 ) ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "reverse" )
            ( ( =>
                  =>
                    0
                "xs" )
              =>
                ( ( ( 2
                      ( ( =>
                            =>
                              0
                          ( ( []
                              "x" )
                            "xs" ) )
                        =>
                          =>
                            ( 1
                              0 ) ) )
                    [] )
                  0 ) ) )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( 0
                          1 )
                  "map" )
                ( ( =>
                      =>
                        0
                    ( ( []
                        "xs" )
                      "f" ) )
                  =>
                    =>
                      ( ( ( 4
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "x" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 1
                                    ( 3
                                      0 ) ) ) )
                          [] )
                        ( 2
                          0 ) ) ) )
              =>
                ( ( ( =>
                        =>
                          =>
                            ( 0
                              1 )
                      "flatten" )
                    ( ( =>
                          =>
                            0
                        "xs" )
                      =>
                        ( 2
                          ( ( ( 4
                                ( ( =>
                                      =>
                                        0
                                    ( ( []
                                        "x" )
                                      "acc" ) )
                                  =>
                                    =>
                                      ( ( ( 6
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "x" )
                                                  "acc" ) )
                                              =>
                                                =>
                                                  ( 1
                                                    0 ) ) )
                                          1 )
                                        0 ) ) )
                              [] )
                            0 ) ) ) )
                  =>
                    ( ( ( =>
                            =>
                              =>
                                ( 0
                                  1 )
                          "zip" )
                        ( ( =>
                              =>
                                ~>
                                  0
                            "zip" )
                          =>
                            ( ( =>
                                  =>
                                    0
                                ( ( ( []
                                      "ys" )
                                    "xs" )
                                  "acc" ) )
                              =>
                                =>
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( pop
                                                  2
                                                  1
                                                  0 )
                                          1 )
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "x" )
                                              "xs" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    2 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "y" )
                                                        "ys" ) )
                                                    =>
                                                      =>
                                                        ( ( ( 7
                                                              ( 6
                                                                ( ( []
                                                                    0 )
                                                                  2 ) ) )
                                                            3 )
                                                          1 ) ) )
                                                =>
                                                  [] ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( pop
                                                      2
                                                      1
                                                      0 )
                                              1 )
                                            ( ( =>
                                                  =>
                                                    0
                                                ( ( []
                                                    "y" )
                                                  "ys" ) )
                                              =>
                                                =>
                                                  [] ) )
                                          =>
                                            4 ) ) ) ) )
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( 0
                                      1 )
                              "zip" )
                            ( ( =>
                                  =>
                                    0
                                ( ( []
                                    "ys" )
                                  "xs" ) )
                              =>
                                =>
                                  ( 5
                                    ( ( ( 2
                                          [] )
                                        1 )
                                      0 ) ) ) )
                          =>
                            ( ( ( =>
                                    =>
                                      =>
                                        ( 0
                                          1 )
                                  "destructure" )
                                ( ( ( =>
                                        =>
                                          ~>
                                            0
                                      "destructure" )
                                    =>
                                      ( ( =>
                                            =>
                                              0
                                          ( ( []
                                              "compound" )
                                            "acc" ) )
                                        =>
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "x" )
                                                      "xs" ) )
                                                  =>
                                                    =>
                                                      ( ( 4
                                                          ( 3
                                                            0 ) )
                                                        1 ) ) )
                                              =>
                                                ( ( []
                                                    2 )
                                                  1 ) ) ) )
                                  [] ) )
                              =>
                                ( ( ( =>
                                        =>
                                          =>
                                            ( 0
                                              1 )
                                      "==" )
                                    ( ( =>
                                          =>
                                            ~>
                                              0
                                        "==" )
                                      =>
                                        ( ( =>
                                              =>
                                                0
                                            ( ( []
                                                "b" )
                                              "a" ) )
                                          =>
                                            =>
                                              ( ( ( =>
                                                      =>
                                                        =>
                                                          ( pop
                                                            2
                                                            1
                                                            0 )
                                                    1 )
                                                  ( ( =>
                                                        =>
                                                          0
                                                      ( ( []
                                                          "x" )
                                                        "xs" ) )
                                                    =>
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( pop
                                                                      2
                                                                      1
                                                                      0 )
                                                              2 )
                                                            ( ( =>
                                                                  =>
                                                                    0
                                                                ( ( []
                                                                    "y" )
                                                                  "ys" ) )
                                                              =>
                                                                =>
                                                                  ( ( ( ( =>
                                                                            =>
                                                                              =>
                                                                                =>
                                                                                  ( if
                                                                                    3
                                                                                    2
                                                                                    1
                                                                                    0 )
                                                                          ( ( 6
                                                                              2 )
                                                                            0 ) )
                                                                        True )
                                                                      =>
                                                                        ( ( 7
                                                                            4 )
                                                                          2 ) )
                                                                    =>
                                                                      False ) ) )
                                                          =>
                                                            False ) ) )
                                                =>
                                                  ( ( ( ( =>
                                                            =>
                                                              =>
                                                                =>
                                                                  ( if
                                                                    3
                                                                    2
                                                                    1
                                                                    0 )
                                                          2 )
                                                        1 )
                                                      =>
                                                        True )
                                                    =>
                                                      False ) ) ) ) )
                                  =>
                                    ( ( ( =>
                                            =>
                                              =>
                                                ( 0
                                                  1 )
                                          "first" )
                                        ( ( =>
                                              =>
                                                0
                                            "xs" )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( pop
                                                          2
                                                          1
                                                          0 )
                                                  0 )
                                                ( ( =>
                                                      =>
                                                        0
                                                    ( ( []
                                                        "x" )
                                                      "_" ) )
                                                  =>
                                                    =>
                                                      0 ) )
                                              =>
                                                1 ) ) )
                                      =>
                                        ( ( ( =>
                                                =>
                                                  =>
                                                    ( 0
                                                      1 )
                                              "second" )
                                            ( ( =>
                                                  =>
                                                    0
                                                "xs" )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( pop
                                                              2
                                                              1
                                                              0 )
                                                      0 )
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "_" )
                                                          "xs" ) )
                                                      =>
                                                        =>
                                                          ( 3
                                                            1 ) ) )
                                                  =>
                                                    1 ) ) )
                                          =>
                                            ( ( ( =>
                                                    =>
                                                      =>
                                                        ( 0
                                                          1 )
                                                  "join" )
                                                ( ( 10
                                                    ( ( =>
                                                          =>
                                                            0
                                                        ( ( []
                                                            "pair" )
                                                          "acc" ) )
                                                      =>
                                                        =>
                                                          ( ( ( =>
                                                                  =>
                                                                    =>
                                                                      ( 0
                                                                        1 )
                                                                "xvar" )
                                                              ( 3
                                                                0 ) )
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( 0
                                                                            1 )
                                                                    "xval" )
                                                                  ( 3
                                                                    1 ) )
                                                                =>
                                                                  ( =>
                                                                      ( 4
                                                                        3 )
                                                                    ( ( ( 14
                                                                          ( ( =>
                                                                                =>
                                                                                  0
                                                                              ( ( []
                                                                                  "pair" )
                                                                                "_" ) )
                                                                            =>
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( 0
                                                                                              1 )
                                                                                      "yvar" )
                                                                                    ( 7
                                                                                      0 ) )
                                                                                  =>
                                                                                    ( ( ( =>
                                                                                            =>
                                                                                              =>
                                                                                                ( 0
                                                                                                  1 )
                                                                                          "yval" )
                                                                                        ( 7
                                                                                          1 ) )
                                                                                      =>
                                                                                        ( ( ( ( =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        ( if
                                                                                                          3
                                                                                                          2
                                                                                                          1
                                                                                                          0 )
                                                                                                5 )
                                                                                              1 )
                                                                                            =>
                                                                                              ( ( ( ( =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            =>
                                                                                                              ( if
                                                                                                                3
                                                                                                                2
                                                                                                                1
                                                                                                                0 )
                                                                                                      ( ( 11
                                                                                                          5 )
                                                                                                        1 ) )
                                                                                                    False )
                                                                                                  =>
                                                                                                    ( no-match!
                                                                                                      ( ( []
                                                                                                          ( ( []
                                                                                                              2 )
                                                                                                            3 ) )
                                                                                                        ( ( []
                                                                                                            6 )
                                                                                                          7 ) ) ) )
                                                                                                =>
                                                                                                  [] ) )
                                                                                          =>
                                                                                            [] ) ) ) ) )
                                                                        [] )
                                                                      3 ) ) ) ) ) )
                                                  [] ) )
                                              =>
                                                ( ( ( =>
                                                        =>
                                                          =>
                                                            ( 0
                                                              1 )
                                                      "unify" )
                                                    ( ( =>
                                                          =>
                                                            ~>
                                                              0
                                                        "unify" )
                                                      =>
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( []
                                                                "value" )
                                                              "pattern" ) )
                                                          =>
                                                            =>
                                                              ( ( ( =>
                                                                      =>
                                                                        =>
                                                                          ( pop
                                                                            2
                                                                            1
                                                                            0 )
                                                                    1 )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "pattern" )
                                                                        "type" ) )
                                                                    =>
                                                                      =>
                                                                        ( ( ( ( =>
                                                                                  =>
                                                                                    =>
                                                                                      =>
                                                                                        ( if
                                                                                          3
                                                                                          2
                                                                                          1
                                                                                          0 )
                                                                                1 )
                                                                              Binding )
                                                                            =>
                                                                              ( []
                                                                                ( ( []
                                                                                    3 )
                                                                                  1 ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    2 )
                                                                                  List )
                                                                                =>
                                                                                  ( ( ( =>
                                                                                          =>
                                                                                            =>
                                                                                              ( 0
                                                                                                1 )
                                                                                        "zipped" )
                                                                                      ( ( 12
                                                                                          2 )
                                                                                        4 ) )
                                                                                    =>
                                                                                      ( ( ( ( =>
                                                                                                =>
                                                                                                  =>
                                                                                                    =>
                                                                                                      ( if
                                                                                                        3
                                                                                                        2
                                                                                                        1
                                                                                                        0 )
                                                                                              0 )
                                                                                            [] )
                                                                                          =>
                                                                                            ( no-match!
                                                                                              ( ( []
                                                                                                  6 )
                                                                                                ( 5
                                                                                                  4 ) ) ) )
                                                                                        =>
                                                                                          ( 9
                                                                                            ( 16
                                                                                              ( ( 17
                                                                                                  ( 19
                                                                                                    8 ) )
                                                                                                1 ) ) ) ) ) )
                                                                              =>
                                                                                ( ( ( =>
                                                                                        =>
                                                                                          =>
                                                                                            ( pop
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                      3 )
                                                                                    ( ( =>
                                                                                          =>
                                                                                            0
                                                                                        ( ( []
                                                                                            "f" )
                                                                                          "type" ) )
                                                                                      =>
                                                                                        =>
                                                                                          ( ( ( ( =>
                                                                                                    =>
                                                                                                      =>
                                                                                                        =>
                                                                                                          ( if
                                                                                                            3
                                                                                                            2
                                                                                                            1
                                                                                                            0 )
                                                                                                  1 )
                                                                                                Compound )
                                                                                              =>
                                                                                                ( ( ( =>
                                                                                                        =>
                                                                                                          =>
                                                                                                            ( 0
                                                                                                              1 )
                                                                                                      "v" )
                                                                                                    ( 14
                                                                                                      7 ) )
                                                                                                  =>
                                                                                                    ( ( ( =>
                                                                                                            =>
                                                                                                              =>
                                                                                                                ( 0
                                                                                                                  1 )
                                                                                                          "vf" )
                                                                                                        ( 13
                                                                                                          0 ) )
                                                                                                      =>
                                                                                                        ( ( ( =>
                                                                                                                =>
                                                                                                                  =>
                                                                                                                    ( 0
                                                                                                                      1 )
                                                                                                              "vargs" )
                                                                                                            ( 13
                                                                                                              1 ) )
                                                                                                          =>
                                                                                                            ( ( ( =>
                                                                                                                    =>
                                                                                                                      =>
                                                                                                                        ( 0
                                                                                                                          1 )
                                                                                                                  "zipped" )
                                                                                                                ( 22
                                                                                                                  ( ( 18
                                                                                                                      ( 8
                                                                                                                        4 ) )
                                                                                                                    ( 0
                                                                                                                      1 ) ) ) )
                                                                                                              =>
                                                                                                                ( ( ( ( =>
                                                                                                                          =>
                                                                                                                            =>
                                                                                                                              =>
                                                                                                                                ( if
                                                                                                                                  3
                                                                                                                                  2
                                                                                                                                  1
                                                                                                                                  0 )
                                                                                                                        0 )
                                                                                                                      [] )
                                                                                                                    =>
                                                                                                                      ( no-match!
                                                                                                                        ( ( []
                                                                                                                            12 )
                                                                                                                          ( ( 7
                                                                                                                              6 )
                                                                                                                            10 ) ) ) )
                                                                                                                  =>
                                                                                                                    ( 15
                                                                                                                      ( 22
                                                                                                                        ( ( 23
                                                                                                                            ( 25
                                                                                                                              14 ) )
                                                                                                                          1 ) ) ) ) ) ) ) ) )
                                                                                            =>
                                                                                              ( invalid!
                                                                                                ( ( 2
                                                                                                    1 )
                                                                                                  5 ) ) ) ) )
                                                                                  =>
                                                                                    ( ( ( ( =>
                                                                                              =>
                                                                                                =>
                                                                                                  =>
                                                                                                    ( if
                                                                                                      3
                                                                                                      2
                                                                                                      1
                                                                                                      0 )
                                                                                            ( ( 11
                                                                                                3 )
                                                                                              5 ) )
                                                                                          True )
                                                                                        =>
                                                                                          [] )
                                                                                      =>
                                                                                        ( no-match!
                                                                                          ( ( []
                                                                                              6 )
                                                                                            4 ) ) ) ) ) ) ) )
                                                                =>
                                                                  ( invalid!
                                                                    2 ) ) ) ) )
                                                  =>
                                                    ( ( ( =>
                                                            =>
                                                              =>
                                                                ( 0
                                                                  1 )
                                                          "->" )
                                                        ( ( =>
                                                              =>
                                                                0
                                                            ( ( ( []
                                                                  "value" )
                                                                "body" )
                                                              "pattern" ) )
                                                          =>
                                                            =>
                                                              =>
                                                                ( ( ( =>
                                                                        =>
                                                                          =>
                                                                            ( try
                                                                              2
                                                                              1
                                                                              0 )
                                                                      =>
                                                                        ( ( ( =>
                                                                                =>
                                                                                  =>
                                                                                    ( 0
                                                                                      1 )
                                                                              "args" )
                                                                            ( ( 13
                                                                                6 )
                                                                              ( ( 4
                                                                                  3 )
                                                                                1 ) ) )
                                                                          =>
                                                                            ( ( ( ( =>
                                                                                      =>
                                                                                        =>
                                                                                          =>
                                                                                            ( if
                                                                                              3
                                                                                              2
                                                                                              1
                                                                                              0 )
                                                                                    0 )
                                                                                  [] )
                                                                                =>
                                                                                  ( 4
                                                                                    [] ) )
                                                                              =>
                                                                                ( ( 17
                                                                                    4 )
                                                                                  1 ) ) ) )
                                                                    no-match! )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "arg" )
                                                                        "_" ) )
                                                                    =>
                                                                      =>
                                                                        ( no-match!
                                                                          0 ) ) ) ) )
                                                      =>
                                                        ( ( ( =>
                                                                =>
                                                                  =>
                                                                    ( 0
                                                                      1 )
                                                              "match" )
                                                            ( ( =>
                                                                  =>
                                                                    0
                                                                ( ( []
                                                                    "clauses" )
                                                                  "value" ) )
                                                              =>
                                                                =>
                                                                  ( ( ( =>
                                                                          =>
                                                                            =>
                                                                              ( 0
                                                                                1 )
                                                                        "result" )
                                                                      ( ( ( 15
                                                                            ( ( =>
                                                                                  =>
                                                                                    0
                                                                                ( ( []
                                                                                    "clause" )
                                                                                  "result" ) )
                                                                              =>
                                                                                =>
                                                                                  ( ( ( ( =>
                                                                                            =>
                                                                                              =>
                                                                                                =>
                                                                                                  ( if
                                                                                                    3
                                                                                                    2
                                                                                                    1
                                                                                                    0 )
                                                                                          1 )
                                                                                        [] )
                                                                                      =>
                                                                                        ( ( ( =>
                                                                                                =>
                                                                                                  =>
                                                                                                    ( try
                                                                                                      2
                                                                                                      1
                                                                                                      0 )
                                                                                              =>
                                                                                                ( Match
                                                                                                  ( 2
                                                                                                    5 ) ) )
                                                                                            no-match! )
                                                                                          ( ( =>
                                                                                                =>
                                                                                                  0
                                                                                              ( ( []
                                                                                                  "arg" )
                                                                                                "r" ) )
                                                                                            =>
                                                                                              =>
                                                                                                [] ) ) )
                                                                                    =>
                                                                                      2 ) ) )
                                                                          [] )
                                                                        0 ) )
                                                                    =>
                                                                      ( ( ( =>
                                                                              =>
                                                                                =>
                                                                                  ( pop
                                                                                    2
                                                                                    1
                                                                                    0 )
                                                                            0 )
                                                                          ( ( =>
                                                                                =>
                                                                                  0
                                                                              ( ( []
                                                                                  "result" )
                                                                                "_" ) )
                                                                            =>
                                                                              =>
                                                                                0 ) )
                                                                        =>
                                                                          ( no-match!
                                                                            3 ) ) ) ) )
                                                          =>
                                                            ( ( []
                                                                ( ( ( =>
                                                                        =>
                                                                          =>
                                                                            ( try
                                                                              2
                                                                              1
                                                                              0 )
                                                                      =>
                                                                        ( ( 1
                                                                            Foo )
                                                                          ( ( ( []
                                                                                ( ( 2
                                                                                    ( ( Compound
                                                                                        ( Value
                                                                                          Pair ) )
                                                                                      ( ( []
                                                                                          ( Binding
                                                                                            "y" ) )
                                                                                        ( Binding
                                                                                          "x" ) ) ) )
                                                                                  =>
                                                                                    =>
                                                                                      0 ) )
                                                                              ( ( 2
                                                                                  ( ( Compound
                                                                                      ( Value
                                                                                        Pair ) )
                                                                                    ( ( []
                                                                                        ( Value
                                                                                          Foo ) )
                                                                                      ( Binding
                                                                                        "x" ) ) ) )
                                                                                =>
                                                                                  SecondIsFoo ) )
                                                                            ( ( 2
                                                                                ( ( Compound
                                                                                    ( Value
                                                                                      Pair ) )
                                                                                  ( ( []
                                                                                      ( Binding
                                                                                        "x" ) )
                                                                                    ( Binding
                                                                                      "x" ) ) ) )
                                                                              =>
                                                                                =>
                                                                                  ( ( Twice
                                                                                      0 )
                                                                                    0 ) ) ) ) )
                                                                    no-match! )
                                                                  ( ( =>
                                                                        =>
                                                                          0
                                                                      ( ( []
                                                                          "arg" )
                                                                        "_" ) )
                                                                    =>
                                                                      =>
                                                                        ( NoMatch
                                                                          0 ) ) ) )
                                                              ( ( 0
                                                                  ( ( Pair
                                                                      Foo )
                                                                    Bar ) )
                                                                ( ( ( ( []
                                                                        ( ( 1
                                                                            ( Binding
                                                                              "_" ) )
                                                                          =>
                                                                            ( throw!
                                                                              InvalidPair ) ) )
                                                                      ( ( 1
                                                                          ( ( Compound
                                                                              ( Value
                                                                                Pair ) )
                                                                            ( ( []
                                                                                ( Binding
                                                                                  "y" ) )
                                                                              ( Binding
                                                                                "x" ) ) ) )
                                                                        =>
                                                                          =>
                                                                            0 ) )
                                                                    ( ( 1
                                                                        ( ( Compound
                                                                            ( Value
                                                                              Pair ) )
                                                                          ( ( []
                                                                              ( Value
                                                                                Foo ) )
                                                                            ( Binding
                                                                              "x" ) ) ) )
                                                                      =>
                                                                        SecondIsFoo ) )
                                                                  ( ( 1
                                                                      ( ( Compound
                                                                          ( Value
                                                                            Pair ) )
                                                                        ( ( []
                                                                            ( Binding
                                                                              "x" ) )
                                                                          ( Binding
                                                                            "x" ) ) ) )
                                                                    =>
                                                                      =>
                                                                        ( ( Twice
                                                                            0 )
                                                                          0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: AppArgToFn
00006: LoadVar(00001)
00007: AppArgToFn
00008: AppArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: AppFnToArg
00013:   Return
00014: LoadFn { code: 00010, fvars: 00001 }
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadVar(00000)
00019: LoadFn { code: 00000, fvars: 00000 }
00020: AppArgToFn
00021:   Return
00022: LoadFn { code: 00018, fvars: 00000 }
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: AppArgToFn
00033: AppArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadVar(00000)
00040:   Return
00041: LoadFn { code: 00039, fvars: 00000 }
00042:   Return
00043: LoadVar(00005)
00044: LoadVar(00004)
00045: AppFnToArg
00046: LoadVar(00004)
00047: LoadVar(00003)
00048: AppFnToArg
00049: LoadVar(00000)
00050: AppFnToArg
00051: AppFnToArg
00052: LoadVar(00001)
00053: AppFnToArg
00054:   Return
00055: LoadFn { code: 00043, fvars: 00005 }
00056:   Return
00057: LoadVar(00002)
00058:   Return
00059: LoadFn { code: 00037, fvars: 00000 }
00060: LoadVar(00000)
00061: AppFnToArg
00062: LoadFn { code: 00041, fvars: 00000 }
00063: PushString("")
00064: PushString(""x"")
00065: AppFnToArg
00066: PushString(""xs"")
00067: AppFnToArg
00068: AppFnToArg
00069: LoadFn { code: 00055, fvars: 00004 }
00070: AppFnToArg
00071: AppFnToArg
00072: LoadFn { code: 00057, fvars: 00002 }
00073: AppFnToArg
00074:   Return
00075: LoadFn { code: 00059, fvars: 00003 }
00076:   Return
00077: LoadFn { code: 00075, fvars: 00002 }
00078:   Return
00079: LoadFn { code: 00026, fvars: 00000 }
00080: PushString("")
00081: PushString(""xs"")
00082: AppFnToArg
00083: PushString(""acc"")
00084: AppFnToArg
00085: PushString(""f"")
00086: AppFnToArg
00087: AppFnToArg
00088: LoadFn { code: 00077, fvars: 00001 }
00089: AppFnToArg
00090:   Return
00091: LoadVar(00000)
00092: LoadVar(00001)
00093: AppFnToArg
00094:   Return
00095: LoadFn { code: 00091, fvars: 00001 }
00096:   Return
00097: LoadFn { code: 00095, fvars: 00000 }
00098:   Return
00099: LoadVar(00000)
00100:   Return
00101: LoadFn { code: 00099, fvars: 00000 }
00102:   Return
00103: LoadVar(00000)
00104:   Return
00105: LoadFn { code: 00103, fvars: 00000 }
00106:   Return
00107: LoadVar(00001)
00108: LoadVar(00000)
00109: AppFnToArg
00110:   Return
00111: LoadFn { code: 00107, fvars: 00001 }
00112:   Return
00113: LoadVar(00002)
00114: LoadFn { code: 00105, fvars: 00000 }
00115: PushString("")
00116: PushString(""x"")
00117: AppFnToArg
00118: PushString(""f"")
00119: AppFnToArg
00120: AppFnToArg
00121: LoadFn { code: 00111, fvars: 00000 }
00122: AppFnToArg
00123: AppFnToArg
00124: LoadVar(00001)
00125: AppFnToArg
00126: LoadVar(00000)
00127: AppFnToArg
00128:   Return
00129: LoadFn { code: 00113, fvars: 00002 }
00130:   Return
00131: LoadVar(00000)
00132: LoadVar(00001)
00133: AppFnToArg
00134:   Return
00135: LoadFn { code: 00131, fvars: 00001 }
00136:   Return
00137: LoadFn { code: 00135, fvars: 00000 }
00138:   Return
00139: LoadVar(00000)
00140:   Return
00141: LoadFn { code: 00139, fvars: 00000 }
00142:   Return
00143: LoadVar(00000)
00144:   Return
00145: LoadFn { code: 00143, fvars: 00000 }
00146:   Return
00147: LoadVar(00001)
00148: LoadVar(00000)
00149: AppFnToArg
00150:   Return
00151: LoadFn { code: 00147, fvars: 00001 }
00152:   Return
00153: LoadVar(00002)
00154: LoadFn { code: 00145, fvars: 00000 }
00155: PushString("")
00156: PushString(""x"")
00157: AppFnToArg
00158: PushString(""xs"")
00159: AppFnToArg
00160: AppFnToArg
00161: LoadFn { code: 00151, fvars: 00000 }
00162: AppFnToArg
00163: AppFnToArg
00164: PushString("")
00165: AppFnToArg
00166: LoadVar(00000)
00167: AppFnToArg
00168:   Return
00169: LoadVar(00000)
00170: LoadVar(00001)
00171: AppFnToArg
00172:   Return
00173: LoadFn { code: 00169, fvars: 00001 }
00174:   Return
00175: LoadFn { code: 00173, fvars: 00000 }
00176:   Return
00177: LoadVar(00000)
00178:   Return
00179: LoadFn { code: 00177, fvars: 00000 }
00180:   Return
00181: LoadVar(00000)
00182:   Return
00183: LoadFn { code: 00181, fvars: 00000 }
00184:   Return
00185: LoadVar(00001)
00186: LoadVar(00003)
00187: LoadVar(00000)
00188: AppFnToArg
00189: AppFnToArg
00190:   Return
00191: LoadFn { code: 00185, fvars: 00003 }
00192:   Return
00193: LoadVar(00004)
00194: LoadFn { code: 00183, fvars: 00000 }
00195: PushString("")
00196: PushString(""x"")
00197: AppFnToArg
00198: PushString(""xs"")
00199: AppFnToArg
00200: AppFnToArg
00201: LoadFn { code: 00191, fvars: 00002 }
00202: AppFnToArg
00203: AppFnToArg
00204: PushString("")
00205: AppFnToArg
00206: LoadVar(00002)
00207: LoadVar(00000)
00208: AppFnToArg
00209: AppFnToArg
00210:   Return
00211: LoadFn { code: 00193, fvars: 00004 }
00212:   Return
00213: LoadVar(00000)
00214: LoadVar(00001)
00215: AppFnToArg
00216:   Return
00217: LoadFn { code: 00213, fvars: 00001 }
00218:   Return
00219: LoadFn { code: 00217, fvars: 00000 }
00220:   Return
00221: LoadVar(00000)
00222:   Return
00223: LoadFn { code: 00221, fvars: 00000 }
00224:   Return
00225: LoadVar(00000)
00226:   Return
00227: LoadFn { code: 00225, fvars: 00000 }
00228:   Return
00229: LoadVar(00000)
00230:   Return
00231: LoadFn { code: 00229, fvars: 00000 }
00232:   Return
00233: LoadVar(00001)
00234: LoadVar(00000)
00235: AppFnToArg
00236:   Return
00237: LoadFn { code: 00233, fvars: 00001 }
00238:   Return
00239: LoadVar(00006)
00240: LoadFn { code: 00231, fvars: 00000 }
00241: PushString("")
00242: PushString(""x"")
00243: AppFnToArg
00244: PushString(""acc"")
00245: AppFnToArg
00246: AppFnToArg
00247: LoadFn { code: 00237, fvars: 00000 }
00248: AppFnToArg
00249: AppFnToArg
00250: LoadVar(00001)
00251: AppFnToArg
00252: LoadVar(00000)
00253: AppFnToArg
00254:   Return
00255: LoadFn { code: 00239, fvars: 00006 }
00256:   Return
00257: LoadVar(00002)
00258: LoadVar(00004)
00259: LoadFn { code: 00227, fvars: 00000 }
00260: PushString("")
00261: PushString(""x"")
00262: AppFnToArg
00263: PushString(""acc"")
00264: AppFnToArg
00265: AppFnToArg
00266: LoadFn { code: 00255, fvars: 00005 }
00267: AppFnToArg
00268: AppFnToArg
00269: PushString("")
00270: AppFnToArg
00271: LoadVar(00000)
00272: AppFnToArg
00273: AppFnToArg
00274:   Return
00275: LoadVar(00000)
00276: LoadVar(00001)
00277: AppFnToArg
00278:   Return
00279: LoadFn { code: 00275, fvars: 00001 }
00280:   Return
00281: LoadFn { code: 00279, fvars: 00000 }
00282:   Return
00283: LoadVar(00000)
00284: LoadFn { code: 00000, fvars: 00000 }
00285: AppArgToFn
00286:   Return
00287: LoadFn { code: 00283, fvars: 00000 }
00288:   Return
00289: LoadVar(00000)
00290:   Return
00291: LoadFn { code: 00289, fvars: 00000 }
00292:   Return
00293: LoadVar(00002)
00294: LoadVar(00001)
00295: LoadVar(00000)
00296: Unpack
00297: AppArgToFn
00298: AppArgToFn
00299:   Return
00300: LoadFn { code: 00293, fvars: 00002 }
00301:   Return
00302: LoadFn { code: 00300, fvars: 00001 }
00303:   Return
00304: LoadVar(00000)
00305:   Return
00306: LoadFn { code: 00304, fvars: 00000 }
00307:   Return
00308: LoadVar(00002)
00309: LoadVar(00001)
00310: LoadVar(00000)
00311: Unpack
00312: AppArgToFn
00313: AppArgToFn
00314:   Return
00315: LoadFn { code: 00308, fvars: 00002 }
00316:   Return
00317: LoadFn { code: 00315, fvars: 00001 }
00318:   Return
00319: LoadVar(00000)
00320:   Return
00321: LoadFn { code: 00319, fvars: 00000 }
00322:   Return
00323: LoadVar(00007)
00324: LoadVar(00006)
00325: PushString("")
00326: LoadVar(00000)
00327: AppFnToArg
00328: LoadVar(00002)
00329: AppFnToArg
00330: AppFnToArg
00331: AppFnToArg
00332: LoadVar(00003)
00333: AppFnToArg
00334: LoadVar(00001)
00335: AppFnToArg
00336:   Return
00337: LoadFn { code: 00323, fvars: 00007 }
00338:   Return
00339: PushString("")
00340:   Return
00341: LoadFn { code: 00317, fvars: 00000 }
00342: LoadVar(00002)
00343: AppFnToArg
00344: LoadFn { code: 00321, fvars: 00000 }
00345: PushString("")
00346: PushString(""y"")
00347: AppFnToArg
00348: PushString(""ys"")
00349: AppFnToArg
00350: AppFnToArg
00351: LoadFn { code: 00337, fvars: 00006 }
00352: AppFnToArg
00353: AppFnToArg
00354: LoadFn { code: 00339, fvars: 00000 }
00355: AppFnToArg
00356:   Return
00357: LoadFn { code: 00341, fvars: 00005 }
00358:   Return
00359: LoadVar(00002)
00360: LoadVar(00001)
00361: LoadVar(00000)
00362: Unpack
00363: AppArgToFn
00364: AppArgToFn
00365:   Return
00366: LoadFn { code: 00359, fvars: 00002 }
00367:   Return
00368: LoadFn { code: 00366, fvars: 00001 }
00369:   Return
00370: LoadVar(00000)
00371:   Return
00372: LoadFn { code: 00370, fvars: 00000 }
00373:   Return
00374: PushString("")
00375:   Return
00376: LoadFn { code: 00374, fvars: 00000 }
00377:   Return
00378: LoadVar(00004)
00379:   Return
00380: LoadFn { code: 00368, fvars: 00000 }
00381: LoadVar(00001)
00382: AppFnToArg
00383: LoadFn { code: 00372, fvars: 00000 }
00384: PushString("")
00385: PushString(""y"")
00386: AppFnToArg
00387: PushString(""ys"")
00388: AppFnToArg
00389: AppFnToArg
00390: LoadFn { code: 00376, fvars: 00000 }
00391: AppFnToArg
00392: AppFnToArg
00393: LoadFn { code: 00378, fvars: 00004 }
00394: AppFnToArg
00395:   Return
00396: LoadFn { code: 00302, fvars: 00000 }
00397: LoadVar(00001)
00398: AppFnToArg
00399: LoadFn { code: 00306, fvars: 00000 }
00400: PushString("")
00401: PushString(""x"")
00402: AppFnToArg
00403: PushString(""xs"")
00404: AppFnToArg
00405: AppFnToArg
00406: LoadFn { code: 00357, fvars: 00004 }
00407: AppFnToArg
00408: AppFnToArg
00409: LoadFn { code: 00380, fvars: 00003 }
00410: AppFnToArg
00411:   Return
00412: LoadFn { code: 00396, fvars: 00003 }
00413:   Return
00414: LoadFn { code: 00412, fvars: 00002 }
00415:   Return
00416: LoadFn { code: 00291, fvars: 00000 }
00417: PushString("")
00418: PushString(""ys"")
00419: AppFnToArg
00420: PushString(""xs"")
00421: AppFnToArg
00422: PushString(""acc"")
00423: AppFnToArg
00424: AppFnToArg
00425: LoadFn { code: 00414, fvars: 00001 }
00426: AppFnToArg
00427:   Return
00428: LoadVar(00000)
00429: LoadVar(00001)
00430: AppFnToArg
00431:   Return
00432: LoadFn { code: 00428, fvars: 00001 }
00433:   Return
00434: LoadFn { code: 00432, fvars: 00000 }
00435:   Return
00436: LoadVar(00000)
00437:   Return
00438: LoadFn { code: 00436, fvars: 00000 }
00439:   Return
00440: LoadVar(00005)
00441: LoadVar(00002)
00442: PushString("")
00443: AppFnToArg
00444: LoadVar(00001)
00445: AppFnToArg
00446: LoadVar(00000)
00447: AppFnToArg
00448: AppFnToArg
00449:   Return
00450: LoadFn { code: 00440, fvars: 00005 }
00451:   Return
00452: LoadVar(00000)
00453: LoadVar(00001)
00454: AppFnToArg
00455:   Return
00456: LoadFn { code: 00452, fvars: 00001 }
00457:   Return
00458: LoadFn { code: 00456, fvars: 00000 }
00459:   Return
00460: LoadVar(00000)
00461: LoadFn { code: 00000, fvars: 00000 }
00462: AppArgToFn
00463:   Return
00464: LoadFn { code: 00460, fvars: 00000 }
00465:   Return
00466: LoadVar(00000)
00467:   Return
00468: LoadFn { code: 00466, fvars: 00000 }
00469:   Return
00470: LoadVar(00002)
00471: LoadVar(00001)
00472: LoadVar(00000)
00473: Unpack
00474: AppArgToFn
00475: AppArgToFn
00476:   Return
00477: LoadFn { code: 00470, fvars: 00002 }
00478:   Return
00479: LoadFn { code: 00477, fvars: 00001 }
00480:   Return
00481: LoadVar(00000)
00482:   Return
00483: LoadFn { code: 00481, fvars: 00000 }
00484:   Return
00485: LoadVar(00004)
00486: LoadVar(00003)
00487: LoadVar(00000)
00488: AppFnToArg
00489: AppFnToArg
00490: LoadVar(00001)
00491: AppFnToArg
00492:   Return
00493: LoadFn { code: 00485, fvars: 00004 }
00494:   Return
00495: PushString("")
00496: LoadVar(00002)
00497: AppFnToArg
00498: LoadVar(00001)
00499: AppFnToArg
00500:   Return
00501: LoadFn { code: 00479, fvars: 00000 }
00502: LoadVar(00000)
00503: AppFnToArg
00504: LoadFn { code: 00483, fvars: 00000 }
00505: PushString("")
00506: PushString(""x"")
00507: AppFnToArg
00508: PushString(""xs"")
00509: AppFnToArg
00510: AppFnToArg
00511: LoadFn { code: 00493, fvars: 00003 }
00512: AppFnToArg
00513: AppFnToArg
00514: LoadFn { code: 00495, fvars: 00002 }
00515: AppFnToArg
00516:   Return
00517: LoadFn { code: 00501, fvars: 00002 }
00518:   Return
00519: LoadFn { code: 00468, fvars: 00000 }
00520: PushString("")
00521: PushString(""compound"")
00522: AppFnToArg
00523: PushString(""acc"")
00524: AppFnToArg
00525: AppFnToArg
00526: LoadFn { code: 00517, fvars: 00001 }
00527: AppFnToArg
00528:   Return
00529: LoadVar(00000)
00530: LoadVar(00001)
00531: AppFnToArg
00532:   Return
00533: LoadFn { code: 00529, fvars: 00001 }
00534:   Return
00535: LoadFn { code: 00533, fvars: 00000 }
00536:   Return
00537: LoadVar(00000)
00538: LoadFn { code: 00000, fvars: 00000 }
00539: AppArgToFn
00540:   Return
00541: LoadFn { code: 00537, fvars: 00000 }
00542:   Return
00543: LoadVar(00000)
00544:   Return
00545: LoadFn { code: 00543, fvars: 00000 }
00546:   Return
00547: LoadVar(00002)
00548: LoadVar(00001)
00549: LoadVar(00000)
00550: Unpack
00551: AppArgToFn
00552: AppArgToFn
00553:   Return
00554: LoadFn { code: 00547, fvars: 00002 }
00555:   Return
00556: LoadFn { code: 00554, fvars: 00001 }
00557:   Return
00558: LoadVar(00000)
00559:   Return
00560: LoadFn { code: 00558, fvars: 00000 }
00561:   Return
00562: LoadVar(00002)
00563: LoadVar(00001)
00564: LoadVar(00000)
00565: Unpack
00566: AppArgToFn
00567: AppArgToFn
00568:   Return
00569: LoadFn { code: 00562, fvars: 00002 }
00570:   Return
00571: LoadFn { code: 00569, fvars: 00001 }
00572:   Return
00573: LoadVar(00000)
00574:   Return
00575: LoadFn { code: 00573, fvars: 00000 }
00576:   Return
00577: LoadVar(00003)
00578: LoadVar(00002)
00579: LoadVar(00001)
00580: LoadVar(00000)
00581: Cmp
00582: AppArgToFn
00583:   Return
00584: LoadFn { code: 00577, fvars: 00003 }
00585:   Return
00586: LoadFn { code: 00584, fvars: 00002 }
00587:   Return
00588: LoadFn { code: 00586, fvars: 00001 }
00589:   Return
00590: LoadVar(00007)
00591: LoadVar(00004)
00592: AppFnToArg
00593: LoadVar(00002)
00594: AppFnToArg
00595:   Return
00596: PushString("False")
00597:   Return
00598: LoadFn { code: 00588, fvars: 00000 }
00599: LoadVar(00006)
00600: LoadVar(00002)
00601: AppFnToArg
00602: LoadVar(00000)
00603: AppFnToArg
00604: AppFnToArg
00605: PushString("True")
00606: AppFnToArg
00607: LoadFn { code: 00590, fvars: 00007 }
00608: AppFnToArg
00609: LoadFn { code: 00596, fvars: 00000 }
00610: AppFnToArg
00611:   Return
00612: LoadFn { code: 00598, fvars: 00006 }
00613:   Return
00614: PushString("False")
00615:   Return
00616: LoadFn { code: 00571, fvars: 00000 }
00617: LoadVar(00002)
00618: AppFnToArg
00619: LoadFn { code: 00575, fvars: 00000 }
00620: PushString("")
00621: PushString(""y"")
00622: AppFnToArg
00623: PushString(""ys"")
00624: AppFnToArg
00625: AppFnToArg
00626: LoadFn { code: 00612, fvars: 00005 }
00627: AppFnToArg
00628: AppFnToArg
00629: LoadFn { code: 00614, fvars: 00000 }
00630: AppFnToArg
00631:   Return
00632: LoadFn { code: 00616, fvars: 00004 }
00633:   Return
00634: LoadVar(00003)
00635: LoadVar(00002)
00636: LoadVar(00001)
00637: LoadVar(00000)
00638: Cmp
00639: AppArgToFn
00640:   Return
00641: LoadFn { code: 00634, fvars: 00003 }
00642:   Return
00643: LoadFn { code: 00641, fvars: 00002 }
00644:   Return
00645: LoadFn { code: 00643, fvars: 00001 }
00646:   Return
00647: PushString("True")
00648:   Return
00649: PushString("False")
00650:   Return
00651: LoadFn { code: 00645, fvars: 00000 }
00652: LoadVar(00002)
00653: AppFnToArg
00654: LoadVar(00001)
00655: AppFnToArg
00656: LoadFn { code: 00647, fvars: 00000 }
00657: AppFnToArg
00658: LoadFn { code: 00649, fvars: 00000 }
00659: AppFnToArg
00660:   Return
00661: LoadFn { code: 00556, fvars: 00000 }
00662: LoadVar(00001)
00663: AppFnToArg
00664: LoadFn { code: 00560, fvars: 00000 }
00665: PushString("")
00666: PushString(""x"")
00667: AppFnToArg
00668: PushString(""xs"")
00669: AppFnToArg
00670: AppFnToArg
00671: LoadFn { code: 00632, fvars: 00003 }
00672: AppFnToArg
00673: AppFnToArg
00674: LoadFn { code: 00651, fvars: 00002 }
00675: AppFnToArg
00676:   Return
00677: LoadFn { code: 00661, fvars: 00002 }
00678:   Return
00679: LoadFn { code: 00545, fvars: 00000 }
00680: PushString("")
00681: PushString(""b"")
00682: AppFnToArg
00683: PushString(""a"")
00684: AppFnToArg
00685: AppFnToArg
00686: LoadFn { code: 00677, fvars: 00001 }
00687: AppFnToArg
00688:   Return
00689: LoadVar(00000)
00690: LoadVar(00001)
00691: AppFnToArg
00692:   Return
00693: LoadFn { code: 00689, fvars: 00001 }
00694:   Return
00695: LoadFn { code: 00693, fvars: 00000 }
00696:   Return
00697: LoadVar(00000)
00698:   Return
00699: LoadFn { code: 00697, fvars: 00000 }
00700:   Return
00701: LoadVar(00002)
00702: LoadVar(00001)
00703: LoadVar(00000)
00704: Unpack
00705: AppArgToFn
00706: AppArgToFn
00707:   Return
00708: LoadFn { code: 00701, fvars: 00002 }
00709:   Return
00710: LoadFn { code: 00708, fvars: 00001 }
00711:   Return
00712: LoadVar(00000)
00713:   Return
00714: LoadFn { code: 00712, fvars: 00000 }
00715:   Return
00716: LoadVar(00000)
00717:   Return
00718: LoadFn { code: 00716, fvars: 00000 }
00719:   Return
00720: LoadVar(00001)
00721:   Return
00722: LoadFn { code: 00710, fvars: 00000 }
00723: LoadVar(00000)
00724: AppFnToArg
00725: LoadFn { code: 00714, fvars: 00000 }
00726: PushString("")
00727: PushString(""x"")
00728: AppFnToArg
00729: PushString(""_"")
00730: AppFnToArg
00731: AppFnToArg
00732: LoadFn { code: 00718, fvars: 00000 }
00733: AppFnToArg
00734: AppFnToArg
00735: LoadFn { code: 00720, fvars: 00001 }
00736: AppFnToArg
00737:   Return
00738: LoadVar(00000)
00739: LoadVar(00001)
00740: AppFnToArg
00741:   Return
00742: LoadFn { code: 00738, fvars: 00001 }
00743:   Return
00744: LoadFn { code: 00742, fvars: 00000 }
00745:   Return
00746: LoadVar(00000)
00747:   Return
00748: LoadFn { code: 00746, fvars: 00000 }
00749:   Return
00750: LoadVar(00002)
00751: LoadVar(00001)
00752: LoadVar(00000)
00753: Unpack
00754: AppArgToFn
00755: AppArgToFn
00756:   Return
00757: LoadFn { code: 00750, fvars: 00002 }
00758:   Return
00759: LoadFn { code: 00757, fvars: 00001 }
00760:   Return
00761: LoadVar(00000)
00762:   Return
00763: LoadFn { code: 00761, fvars: 00000 }
00764:   Return
00765: LoadVar(00003)
00766: LoadVar(00001)
00767: AppFnToArg
00768:   Return
00769: LoadFn { code: 00765, fvars: 00003 }
00770:   Return
00771: LoadVar(00001)
00772:   Return
00773: LoadFn { code: 00759, fvars: 00000 }
00774: LoadVar(00000)
00775: AppFnToArg
00776: LoadFn { code: 00763, fvars: 00000 }
00777: PushString("")
00778: PushString(""_"")
00779: AppFnToArg
00780: PushString(""xs"")
00781: AppFnToArg
00782: AppFnToArg
00783: LoadFn { code: 00769, fvars: 00002 }
00784: AppFnToArg
00785: AppFnToArg
00786: LoadFn { code: 00771, fvars: 00001 }
00787: AppFnToArg
00788:   Return
00789: LoadVar(00000)
00790: LoadVar(00001)
00791: AppFnToArg
00792:   Return
00793: LoadFn { code: 00789, fvars: 00001 }
00794:   Return
00795: LoadFn { code: 00793, fvars: 00000 }
00796:   Return
00797: LoadVar(00000)
00798:   Return
00799: LoadFn { code: 00797, fvars: 00000 }
00800:   Return
00801: LoadVar(00000)
00802: LoadVar(00001)
00803: AppFnToArg
00804:   Return
00805: LoadFn { code: 00801, fvars: 00001 }
00806:   Return
00807: LoadFn { code: 00805, fvars: 00000 }
00808:   Return
00809: LoadVar(00000)
00810: LoadVar(00001)
00811: AppFnToArg
00812:   Return
00813: LoadFn { code: 00809, fvars: 00001 }
00814:   Return
00815: LoadFn { code: 00813, fvars: 00000 }
00816:   Return
00817: LoadVar(00004)
00818: LoadVar(00003)
00819: AppFnToArg
00820:   Return
00821: LoadVar(00000)
00822:   Return
00823: LoadFn { code: 00821, fvars: 00000 }
00824:   Return
00825: LoadVar(00000)
00826: LoadVar(00001)
00827: AppFnToArg
00828:   Return
00829: LoadFn { code: 00825, fvars: 00001 }
00830:   Return
00831: LoadFn { code: 00829, fvars: 00000 }
00832:   Return
00833: LoadVar(00000)
00834: LoadVar(00001)
00835: AppFnToArg
00836:   Return
00837: LoadFn { code: 00833, fvars: 00001 }
00838:   Return
00839: LoadFn { code: 00837, fvars: 00000 }
00840:   Return
00841: LoadVar(00003)
00842: LoadVar(00002)
00843: LoadVar(00001)
00844: LoadVar(00000)
00845: Cmp
00846: AppArgToFn
00847:   Return
00848: LoadFn { code: 00841, fvars: 00003 }
00849:   Return
00850: LoadFn { code: 00848, fvars: 00002 }
00851:   Return
00852: LoadFn { code: 00850, fvars: 00001 }
00853:   Return
00854: LoadVar(00003)
00855: LoadVar(00002)
00856: LoadVar(00001)
00857: LoadVar(00000)
00858: Cmp
00859: AppArgToFn
00860:   Return
00861: LoadFn { code: 00854, fvars: 00003 }
00862:   Return
00863: LoadFn { code: 00861, fvars: 00002 }
00864:   Return
00865: LoadFn { code: 00863, fvars: 00001 }
00866:   Return
00867: PushEffect("no-match")
00868: PushString("")
00869: PushString("")
00870: LoadVar(00002)
00871: AppFnToArg
00872: LoadVar(00003)
00873: AppFnToArg
00874: AppFnToArg
00875: PushString("")
00876: LoadVar(00006)
00877: AppFnToArg
00878: LoadVar(00007)
00879: AppFnToArg
00880: AppFnToArg
00881: AppFnToArg
00882:   Return
00883: PushString("")
00884:   Return
00885: LoadFn { code: 00865, fvars: 00000 }
00886: LoadVar(00011)
00887: LoadVar(00005)
00888: AppFnToArg
00889: LoadVar(00001)
00890: AppFnToArg
00891: AppFnToArg
00892: PushString("False")
00893: AppFnToArg
00894: LoadFn { code: 00867, fvars: 00007 }
00895: AppFnToArg
00896: LoadFn { code: 00883, fvars: 00000 }
00897: AppFnToArg
00898:   Return
00899: PushString("")
00900:   Return
00901: LoadFn { code: 00852, fvars: 00000 }
00902: LoadVar(00005)
00903: AppFnToArg
00904: LoadVar(00001)
00905: AppFnToArg
00906: LoadFn { code: 00885, fvars: 00011 }
00907: AppFnToArg
00908: LoadFn { code: 00899, fvars: 00000 }
00909: AppFnToArg
00910:   Return
00911: LoadFn { code: 00839, fvars: 00000 }
00912: PushString(""yval"")
00913: AppFnToArg
00914: LoadVar(00007)
00915: LoadVar(00001)
00916: AppFnToArg
00917: AppFnToArg
00918: LoadFn { code: 00901, fvars: 00010 }
00919: AppFnToArg
00920:   Return
00921: LoadFn { code: 00831, fvars: 00000 }
00922: PushString(""yvar"")
00923: AppFnToArg
00924: LoadVar(00007)
00925: LoadVar(00000)
00926: AppFnToArg
00927: AppFnToArg
00928: LoadFn { code: 00911, fvars: 00009 }
00929: AppFnToArg
00930:   Return
00931: LoadFn { code: 00921, fvars: 00008 }
00932:   Return
00933: LoadFn { code: 00817, fvars: 00004 }
00934: LoadVar(00014)
00935: LoadFn { code: 00823, fvars: 00000 }
00936: PushString("")
00937: PushString(""pair"")
00938: AppFnToArg
00939: PushString(""_"")
00940: AppFnToArg
00941: AppFnToArg
00942: LoadFn { code: 00931, fvars: 00007 }
00943: AppFnToArg
00944: AppFnToArg
00945: PushString("")
00946: AppFnToArg
00947: LoadVar(00003)
00948: AppFnToArg
00949: AppFnToArg
00950:   Return
00951: LoadFn { code: 00815, fvars: 00000 }
00952: PushString(""xval"")
00953: AppFnToArg
00954: LoadVar(00003)
00955: LoadVar(00001)
00956: AppFnToArg
00957: AppFnToArg
00958: LoadFn { code: 00933, fvars: 00014 }
00959: AppFnToArg
00960:   Return
00961: LoadFn { code: 00807, fvars: 00000 }
00962: PushString(""xvar"")
00963: AppFnToArg
00964: LoadVar(00003)
00965: LoadVar(00000)
00966: AppFnToArg
00967: AppFnToArg
00968: LoadFn { code: 00951, fvars: 00013 }
00969: AppFnToArg
00970:   Return
00971: LoadFn { code: 00961, fvars: 00012 }
00972:   Return
00973: LoadVar(00000)
00974: LoadVar(00001)
00975: AppFnToArg
00976:   Return
00977: LoadFn { code: 00973, fvars: 00001 }
00978:   Return
00979: LoadFn { code: 00977, fvars: 00000 }
00980:   Return
00981: LoadVar(00000)
00982: LoadFn { code: 00000, fvars: 00000 }
00983: AppArgToFn
00984:   Return
00985: LoadFn { code: 00981, fvars: 00000 }
00986:   Return
00987: LoadVar(00000)
00988:   Return
00989: LoadFn { code: 00987, fvars: 00000 }
00990:   Return
00991: LoadVar(00002)
00992: LoadVar(00001)
00993: LoadVar(00000)
00994: Unpack
00995: AppArgToFn
00996: AppArgToFn
00997:   Return
00998: LoadFn { code: 00991, fvars: 00002 }
00999:   Return
01000: LoadFn { code: 00998, fvars: 00001 }
01001:   Return
01002: LoadVar(00000)
01003:   Return
01004: LoadFn { code: 01002, fvars: 00000 }
01005:   Return
01006: LoadVar(00003)
01007: LoadVar(00002)
01008: LoadVar(00001)
01009: LoadVar(00000)
01010: Cmp
01011: AppArgToFn
01012:   Return
01013: LoadFn { code: 01006, fvars: 00003 }
01014:   Return
01015: LoadFn { code: 01013, fvars: 00002 }
01016:   Return
01017: LoadFn { code: 01015, fvars: 00001 }
01018:   Return
01019: PushString("")
01020: PushString("")
01021: LoadVar(00003)
01022: AppFnToArg
01023: LoadVar(00001)
01024: AppFnToArg
01025: AppFnToArg
01026:   Return
01027: LoadVar(00003)
01028: LoadVar(00002)
01029: LoadVar(00001)
01030: LoadVar(00000)
01031: Cmp
01032: AppArgToFn
01033:   Return
01034: LoadFn { code: 01027, fvars: 00003 }
01035:   Return
01036: LoadFn { code: 01034, fvars: 00002 }
01037:   Return
01038: LoadFn { code: 01036, fvars: 00001 }
01039:   Return
01040: LoadVar(00000)
01041: LoadVar(00001)
01042: AppFnToArg
01043:   Return
01044: LoadFn { code: 01040, fvars: 00001 }
01045:   Return
01046: LoadFn { code: 01044, fvars: 00000 }
01047:   Return
01048: LoadVar(00003)
01049: LoadVar(00002)
01050: LoadVar(00001)
01051: LoadVar(00000)
01052: Cmp
01053: AppArgToFn
01054:   Return
01055: LoadFn { code: 01048, fvars: 00003 }
01056:   Return
01057: LoadFn { code: 01055, fvars: 00002 }
01058:   Return
01059: LoadFn { code: 01057, fvars: 00001 }
01060:   Return
01061: PushEffect("no-match")
01062: PushString("")
01063: LoadVar(00006)
01064: AppFnToArg
01065: LoadVar(00005)
01066: LoadVar(00004)
01067: AppFnToArg
01068: AppFnToArg
01069: AppFnToArg
01070:   Return
01071: LoadVar(00009)
01072: LoadVar(00016)
01073: LoadVar(00017)
01074: LoadVar(00019)
01075: LoadVar(00008)
01076: AppFnToArg
01077: AppFnToArg
01078: LoadVar(00001)
01079: AppFnToArg
01080: AppFnToArg
01081: AppFnToArg
01082:   Return
01083: LoadFn { code: 01059, fvars: 00000 }
01084: LoadVar(00000)
01085: AppFnToArg
01086: PushString("")
01087: AppFnToArg
01088: LoadFn { code: 01061, fvars: 00006 }
01089: AppFnToArg
01090: LoadFn { code: 01071, fvars: 00019 }
01091: AppFnToArg
01092:   Return
01093: LoadFn { code: 01046, fvars: 00000 }
01094: PushString(""zipped"")
01095: AppFnToArg
01096: LoadVar(00012)
01097: LoadVar(00002)
01098: AppFnToArg
01099: LoadVar(00004)
01100: AppFnToArg
01101: AppFnToArg
01102: LoadFn { code: 01083, fvars: 00018 }
01103: AppFnToArg
01104:   Return
01105: LoadVar(00002)
01106: LoadVar(00001)
01107: LoadVar(00000)
01108: Unpack
01109: AppArgToFn
01110: AppArgToFn
01111:   Return
01112: LoadFn { code: 01105, fvars: 00002 }
01113:   Return
01114: LoadFn { code: 01112, fvars: 00001 }
01115:   Return
01116: LoadVar(00000)
01117:   Return
01118: LoadFn { code: 01116, fvars: 00000 }
01119:   Return
01120: LoadVar(00003)
01121: LoadVar(00002)
01122: LoadVar(00001)
01123: LoadVar(00000)
01124: Cmp
01125: AppArgToFn
01126:   Return
01127: LoadFn { code: 01120, fvars: 00003 }
01128:   Return
01129: LoadFn { code: 01127, fvars: 00002 }
01130:   Return
01131: LoadFn { code: 01129, fvars: 00001 }
01132:   Return
01133: LoadVar(00000)
01134: LoadVar(00001)
01135: AppFnToArg
01136:   Return
01137: LoadFn { code: 01133, fvars: 00001 }
01138:   Return
01139: LoadFn { code: 01137, fvars: 00000 }
01140:   Return
01141: LoadVar(00000)
01142: LoadVar(00001)
01143: AppFnToArg
01144:   Return
01145: LoadFn { code: 01141, fvars: 00001 }
01146:   Return
01147: LoadFn { code: 01145, fvars: 00000 }
01148:   Return
01149: LoadVar(00000)
01150: LoadVar(00001)
01151: AppFnToArg
01152:   Return
01153: LoadFn { code: 01149, fvars: 00001 }
01154:   Return
01155: LoadFn { code: 01153, fvars: 00000 }
01156:   Return
01157: LoadVar(00000)
01158: LoadVar(00001)
01159: AppFnToArg
01160:   Return
01161: LoadFn { code: 01157, fvars: 00001 }
01162:   Return
01163: LoadFn { code: 01161, fvars: 00000 }
01164:   Return
01165: LoadVar(00003)
01166: LoadVar(00002)
01167: LoadVar(00001)
01168: LoadVar(00000)
01169: Cmp
01170: AppArgToFn
01171:   Return
01172: LoadFn { code: 01165, fvars: 00003 }
01173:   Return
01174: LoadFn { code: 01172, fvars: 00002 }
01175:   Return
01176: LoadFn { code: 01174, fvars: 00001 }
01177:   Return
01178: PushEffect("no-match")
01179: PushString("")
01180: LoadVar(00012)
01181: AppFnToArg
01182: LoadVar(00007)
01183: LoadVar(00006)
01184: AppFnToArg
01185: LoadVar(00010)
01186: AppFnToArg
01187: AppFnToArg
01188: AppFnToArg
01189:   Return
01190: LoadVar(00015)
01191: LoadVar(00022)
01192: LoadVar(00023)
01193: LoadVar(00025)
01194: LoadVar(00014)
01195: AppFnToArg
01196: AppFnToArg
01197: LoadVar(00001)
01198: AppFnToArg
01199: AppFnToArg
01200: AppFnToArg
01201:   Return
01202: LoadFn { code: 01176, fvars: 00000 }
01203: LoadVar(00000)
01204: AppFnToArg
01205: PushString("")
01206: AppFnToArg
01207: LoadFn { code: 01178, fvars: 00012 }
01208: AppFnToArg
01209: LoadFn { code: 01190, fvars: 00025 }
01210: AppFnToArg
01211:   Return
01212: LoadFn { code: 01163, fvars: 00000 }
01213: PushString(""zipped"")
01214: AppFnToArg
01215: LoadVar(00022)
01216: LoadVar(00018)
01217: LoadVar(00008)
01218: LoadVar(00004)
01219: AppFnToArg
01220: AppFnToArg
01221: LoadVar(00000)
01222: LoadVar(00001)
01223: AppFnToArg
01224: AppFnToArg
01225: AppFnToArg
01226: AppFnToArg
01227: LoadFn { code: 01202, fvars: 00024 }
01228: AppFnToArg
01229:   Return
01230: LoadFn { code: 01155, fvars: 00000 }
01231: PushString(""vargs"")
01232: AppFnToArg
01233: LoadVar(00013)
01234: LoadVar(00001)
01235: AppFnToArg
01236: AppFnToArg
01237: LoadFn { code: 01212, fvars: 00023 }
01238: AppFnToArg
01239:   Return
01240: LoadFn { code: 01147, fvars: 00000 }
01241: PushString(""vf"")
01242: AppFnToArg
01243: LoadVar(00013)
01244: LoadVar(00000)
01245: AppFnToArg
01246: AppFnToArg
01247: LoadFn { code: 01230, fvars: 00022 }
01248: AppFnToArg
01249:   Return
01250: LoadFn { code: 01139, fvars: 00000 }
01251: PushString(""v"")
01252: AppFnToArg
01253: LoadVar(00014)
01254: LoadVar(00007)
01255: AppFnToArg
01256: AppFnToArg
01257: LoadFn { code: 01240, fvars: 00021 }
01258: AppFnToArg
01259:   Return
01260: PushEffect("invalid")
01261: LoadVar(00002)
01262: LoadVar(00001)
01263: AppFnToArg
01264: LoadVar(00005)
01265: AppFnToArg
01266: AppFnToArg
01267:   Return
01268: LoadFn { code: 01131, fvars: 00000 }
01269: LoadVar(00001)
01270: AppFnToArg
01271: PushString("Compound")
01272: AppFnToArg
01273: LoadFn { code: 01250, fvars: 00020 }
01274: AppFnToArg
01275: LoadFn { code: 01260, fvars: 00005 }
01276: AppFnToArg
01277:   Return
01278: LoadFn { code: 01268, fvars: 00019 }
01279:   Return
01280: LoadVar(00003)
01281: LoadVar(00002)
01282: LoadVar(00001)
01283: LoadVar(00000)
01284: Cmp
01285: AppArgToFn
01286:   Return
01287: LoadFn { code: 01280, fvars: 00003 }
01288:   Return
01289: LoadFn { code: 01287, fvars: 00002 }
01290:   Return
01291: LoadFn { code: 01289, fvars: 00001 }
01292:   Return
01293: PushString("")
01294:   Return
01295: PushEffect("no-match")
01296: PushString("")
01297: LoadVar(00006)
01298: AppFnToArg
01299: LoadVar(00004)
01300: AppFnToArg
01301: AppFnToArg
01302:   Return
01303: LoadFn { code: 01291, fvars: 00000 }
01304: LoadVar(00011)
01305: LoadVar(00003)
01306: AppFnToArg
01307: LoadVar(00005)
01308: AppFnToArg
01309: AppFnToArg
01310: PushString("True")
01311: AppFnToArg
01312: LoadFn { code: 01293, fvars: 00000 }
01313: AppFnToArg
01314: LoadFn { code: 01295, fvars: 00006 }
01315: AppFnToArg
01316:   Return
01317: LoadFn { code: 01114, fvars: 00000 }
01318: LoadVar(00003)
01319: AppFnToArg
01320: LoadFn { code: 01118, fvars: 00000 }
01321: PushString("")
01322: PushString(""f"")
01323: AppFnToArg
01324: PushString(""type"")
01325: AppFnToArg
01326: AppFnToArg
01327: LoadFn { code: 01278, fvars: 00018 }
01328: AppFnToArg
01329: AppFnToArg
01330: LoadFn { code: 01303, fvars: 00011 }
01331: AppFnToArg
01332:   Return
01333: LoadFn { code: 01038, fvars: 00000 }
01334: LoadVar(00002)
01335: AppFnToArg
01336: PushString("List")
01337: AppFnToArg
01338: LoadFn { code: 01093, fvars: 00017 }
01339: AppFnToArg
01340: LoadFn { code: 01317, fvars: 00017 }
01341: AppFnToArg
01342:   Return
01343: LoadFn { code: 01017, fvars: 00000 }
01344: LoadVar(00001)
01345: AppFnToArg
01346: PushString("Binding")
01347: AppFnToArg
01348: LoadFn { code: 01019, fvars: 00003 }
01349: AppFnToArg
01350: LoadFn { code: 01333, fvars: 00016 }
01351: AppFnToArg
01352:   Return
01353: LoadFn { code: 01343, fvars: 00015 }
01354:   Return
01355: PushEffect("invalid")
01356: LoadVar(00002)
01357: AppFnToArg
01358:   Return
01359: LoadFn { code: 01000, fvars: 00000 }
01360: LoadVar(00001)
01361: AppFnToArg
01362: LoadFn { code: 01004, fvars: 00000 }
01363: PushString("")
01364: PushString(""pattern"")
01365: AppFnToArg
01366: PushString(""type"")
01367: AppFnToArg
01368: AppFnToArg
01369: LoadFn { code: 01353, fvars: 00014 }
01370: AppFnToArg
01371: AppFnToArg
01372: LoadFn { code: 01355, fvars: 00002 }
01373: AppFnToArg
01374:   Return
01375: LoadFn { code: 01359, fvars: 00013 }
01376:   Return
01377: LoadFn { code: 00989, fvars: 00000 }
01378: PushString("")
01379: PushString(""value"")
01380: AppFnToArg
01381: PushString(""pattern"")
01382: AppFnToArg
01383: AppFnToArg
01384: LoadFn { code: 01375, fvars: 00012 }
01385: AppFnToArg
01386:   Return
01387: LoadVar(00000)
01388: LoadVar(00001)
01389: AppFnToArg
01390:   Return
01391: LoadFn { code: 01387, fvars: 00001 }
01392:   Return
01393: LoadFn { code: 01391, fvars: 00000 }
01394:   Return
01395: LoadVar(00000)
01396:   Return
01397: LoadFn { code: 01395, fvars: 00000 }
01398:   Return
01399: LoadVar(00002)
01400: LoadVar(00001)
01401: LoadVar(00000)
01402: Try
01403: AppArgToFn
01404: Unwind
01405: AppArgToFn
01406: AppArgToFn
01407:   Return
01408: LoadFn { code: 01399, fvars: 00002 }
01409:   Return
01410: LoadFn { code: 01408, fvars: 00001 }
01411:   Return
01412: LoadVar(00000)
01413: LoadVar(00001)
01414: AppFnToArg
01415:   Return
01416: LoadFn { code: 01412, fvars: 00001 }
01417:   Return
01418: LoadFn { code: 01416, fvars: 00000 }
01419:   Return
01420: LoadVar(00003)
01421: LoadVar(00002)
01422: LoadVar(00001)
01423: LoadVar(00000)
01424: Cmp
01425: AppArgToFn
01426:   Return
01427: LoadFn { code: 01420, fvars: 00003 }
01428:   Return
01429: LoadFn { code: 01427, fvars: 00002 }
01430:   Return
01431: LoadFn { code: 01429, fvars: 00001 }
01432:   Return
01433: LoadVar(00004)
01434: PushString("")
01435: AppFnToArg
01436:   Return
01437: LoadVar(00017)
01438: LoadVar(00004)
01439: AppFnToArg
01440: LoadVar(00001)
01441: AppFnToArg
01442:   Return
01443: LoadFn { code: 01431, fvars: 00000 }
01444: LoadVar(00000)
01445: AppFnToArg
01446: PushString("")
01447: AppFnToArg
01448: LoadFn { code: 01433, fvars: 00004 }
01449: AppFnToArg
01450: LoadFn { code: 01437, fvars: 00017 }
01451: AppFnToArg
01452:   Return
01453: LoadFn { code: 01418, fvars: 00000 }
01454: PushString(""args"")
01455: AppFnToArg
01456: LoadVar(00013)
01457: LoadVar(00006)
01458: AppFnToArg
01459: LoadVar(00004)
01460: LoadVar(00003)
01461: AppFnToArg
01462: LoadVar(00001)
01463: AppFnToArg
01464: AppFnToArg
01465: AppFnToArg
01466: LoadFn { code: 01443, fvars: 00016 }
01467: AppFnToArg
01468:   Return
01469: LoadVar(00000)
01470:   Return
01471: LoadFn { code: 01469, fvars: 00000 }
01472:   Return
01473: PushEffect("no-match")
01474: LoadVar(00000)
01475: AppFnToArg
01476:   Return
01477: LoadFn { code: 01473, fvars: 00000 }
01478:   Return
01479: LoadFn { code: 01410, fvars: 00000 }
01480: LoadFn { code: 01453, fvars: 00015 }
01481: AppFnToArg
01482: PushEffect("no-match")
01483: AppFnToArg
01484: LoadFn { code: 01471, fvars: 00000 }
01485: PushString("")
01486: PushString(""arg"")
01487: AppFnToArg
01488: PushString(""_"")
01489: AppFnToArg
01490: AppFnToArg
01491: LoadFn { code: 01477, fvars: 00000 }
01492: AppFnToArg
01493: AppFnToArg
01494:   Return
01495: LoadFn { code: 01479, fvars: 00014 }
01496:   Return
01497: LoadFn { code: 01495, fvars: 00013 }
01498:   Return
01499: LoadVar(00000)
01500: LoadVar(00001)
01501: AppFnToArg
01502:   Return
01503: LoadFn { code: 01499, fvars: 00001 }
01504:   Return
01505: LoadFn { code: 01503, fvars: 00000 }
01506:   Return
01507: LoadVar(00000)
01508:   Return
01509: LoadFn { code: 01507, fvars: 00000 }
01510:   Return
01511: LoadVar(00000)
01512: LoadVar(00001)
01513: AppFnToArg
01514:   Return
01515: LoadFn { code: 01511, fvars: 00001 }
01516:   Return
01517: LoadFn { code: 01515, fvars: 00000 }
01518:   Return
01519: LoadVar(00000)
01520:   Return
01521: LoadFn { code: 01519, fvars: 00000 }
01522:   Return
01523: LoadVar(00003)
01524: LoadVar(00002)
01525: LoadVar(00001)
01526: LoadVar(00000)
01527: Cmp
01528: AppArgToFn
01529:   Return
01530: LoadFn { code: 01523, fvars: 00003 }
01531:   Return
01532: LoadFn { code: 01530, fvars: 00002 }
01533:   Return
01534: LoadFn { code: 01532, fvars: 00001 }
01535:   Return
01536: LoadVar(00002)
01537: LoadVar(00001)
01538: LoadVar(00000)
01539: Try
01540: AppArgToFn
01541: Unwind
01542: AppArgToFn
01543: AppArgToFn
01544:   Return
01545: LoadFn { code: 01536, fvars: 00002 }
01546:   Return
01547: LoadFn { code: 01545, fvars: 00001 }
01548:   Return
01549: PushString("Match")
01550: LoadVar(00002)
01551: LoadVar(00005)
01552: AppFnToArg
01553: AppFnToArg
01554:   Return
01555: LoadVar(00000)
01556:   Return
01557: LoadFn { code: 01555, fvars: 00000 }
01558:   Return
01559: PushString("")
01560:   Return
01561: LoadFn { code: 01559, fvars: 00000 }
01562:   Return
01563: LoadFn { code: 01547, fvars: 00000 }
01564: LoadFn { code: 01549, fvars: 00005 }
01565: AppFnToArg
01566: PushEffect("no-match")
01567: AppFnToArg
01568: LoadFn { code: 01557, fvars: 00000 }
01569: PushString("")
01570: PushString(""arg"")
01571: AppFnToArg
01572: PushString(""r"")
01573: AppFnToArg
01574: AppFnToArg
01575: LoadFn { code: 01561, fvars: 00000 }
01576: AppFnToArg
01577: AppFnToArg
01578:   Return
01579: LoadVar(00002)
01580:   Return
01581: LoadFn { code: 01534, fvars: 00000 }
01582: LoadVar(00001)
01583: AppFnToArg
01584: PushString("")
01585: AppFnToArg
01586: LoadFn { code: 01563, fvars: 00004 }
01587: AppFnToArg
01588: LoadFn { code: 01579, fvars: 00002 }
01589: AppFnToArg
01590:   Return
01591: LoadFn { code: 01581, fvars: 00003 }
01592:   Return
01593: LoadVar(00002)
01594: LoadVar(00001)
01595: LoadVar(00000)
01596: Unpack
01597: AppArgToFn
01598: AppArgToFn
01599:   Return
01600: LoadFn { code: 01593, fvars: 00002 }
01601:   Return
01602: LoadFn { code: 01600, fvars: 00001 }
01603:   Return
01604: LoadVar(00000)
01605:   Return
01606: LoadFn { code: 01604, fvars: 00000 }
01607:   Return
01608: LoadVar(00000)
01609:   Return
01610: LoadFn { code: 01608, fvars: 00000 }
01611:   Return
01612: PushEffect("no-match")
01613: LoadVar(00003)
01614: AppFnToArg
01615:   Return
01616: LoadFn { code: 01602, fvars: 00000 }
01617: LoadVar(00000)
01618: AppFnToArg
01619: LoadFn { code: 01606, fvars: 00000 }
01620: PushString("")
01621: PushString(""result"")
01622: AppFnToArg
01623: PushString(""_"")
01624: AppFnToArg
01625: AppFnToArg
01626: LoadFn { code: 01610, fvars: 00000 }
01627: AppFnToArg
01628: AppFnToArg
01629: LoadFn { code: 01612, fvars: 00003 }
01630: AppFnToArg
01631:   Return
01632: LoadFn { code: 01517, fvars: 00000 }
01633: PushString(""result"")
01634: AppFnToArg
01635: LoadVar(00015)
01636: LoadFn { code: 01521, fvars: 00000 }
01637: PushString("")
01638: PushString(""clause"")
01639: AppFnToArg
01640: PushString(""result"")
01641: AppFnToArg
01642: AppFnToArg
01643: LoadFn { code: 01591, fvars: 00002 }
01644: AppFnToArg
01645: AppFnToArg
01646: PushString("")
01647: AppFnToArg
01648: LoadVar(00000)
01649: AppFnToArg
01650: AppFnToArg
01651: LoadFn { code: 01616, fvars: 00002 }
01652: AppFnToArg
01653:   Return
01654: LoadFn { code: 01632, fvars: 00015 }
01655:   Return
01656: LoadVar(00002)
01657: LoadVar(00001)
01658: LoadVar(00000)
01659: Try
01660: AppArgToFn
01661: Unwind
01662: AppArgToFn
01663: AppArgToFn
01664:   Return
01665: LoadFn { code: 01656, fvars: 00002 }
01666:   Return
01667: LoadFn { code: 01665, fvars: 00001 }
01668:   Return
01669: LoadVar(00000)
01670:   Return
01671: LoadFn { code: 01669, fvars: 00000 }
01672:   Return
01673: PushString("SecondIsFoo")
01674:   Return
01675: PushString("Twice")
01676: LoadVar(00000)
01677: AppFnToArg
01678: LoadVar(00000)
01679: AppFnToArg
01680:   Return
01681: LoadFn { code: 01675, fvars: 00000 }
01682:   Return
01683: LoadVar(00001)
01684: PushString("Foo")
01685: AppFnToArg
01686: PushString("")
01687: LoadVar(00002)
01688: PushString("Compound")
01689: PushString("Value")
01690: PushString("Pair")
01691: AppFnToArg
01692: AppFnToArg
01693: PushString("")
01694: PushString("Binding")
01695: PushString(""y"")
01696: AppFnToArg
01697: AppFnToArg
01698: PushString("Binding")
01699: PushString(""x"")
01700: AppFnToArg
01701: AppFnToArg
01702: AppFnToArg
01703: AppFnToArg
01704: LoadFn { code: 01671, fvars: 00000 }
01705: AppFnToArg
01706: AppFnToArg
01707: LoadVar(00002)
01708: PushString("Compound")
01709: PushString("Value")
01710: PushString("Pair")
01711: AppFnToArg
01712: AppFnToArg
01713: PushString("")
01714: PushString("Value")
01715: PushString("Foo")
01716: AppFnToArg
01717: AppFnToArg
01718: PushString("Binding")
01719: PushString(""x"")
01720: AppFnToArg
01721: AppFnToArg
01722: AppFnToArg
01723: AppFnToArg
01724: LoadFn { code: 01673, fvars: 00000 }
01725: AppFnToArg
01726: AppFnToArg
01727: LoadVar(00002)
01728: PushString("Compound")
01729: PushString("Value")
01730: PushString("Pair")
01731: AppFnToArg
01732: AppFnToArg
01733: PushString("")
01734: PushString("Binding")
01735: PushString(""x"")
01736: AppFnToArg
01737: AppFnToArg
01738: PushString("Binding")
01739: PushString(""x"")
01740: AppFnToArg
01741: AppFnToArg
01742: AppFnToArg
01743: AppFnToArg
01744: LoadFn { code: 01681, fvars: 00000 }
01745: AppFnToArg
01746: AppFnToArg
01747: AppFnToArg
01748:   Return
01749: LoadVar(00000)
01750:   Return
01751: LoadFn { code: 01749, fvars: 00000 }
01752:   Return
01753: PushString("NoMatch")
01754: LoadVar(00000)
01755: AppFnToArg
01756:   Return
01757: LoadFn { code: 01753, fvars: 00000 }
01758:   Return
01759: PushEffect("throw")
01760: PushString("InvalidPair")
01761: AppFnToArg
01762:   Return
01763: LoadVar(00000)
01764:   Return
01765: LoadFn { code: 01763, fvars: 00000 }
01766:   Return
01767: PushString("SecondIsFoo")
01768:   Return
01769: PushString("Twice")
01770: LoadVar(00000)
01771: AppFnToArg
01772: LoadVar(00000)
01773: AppFnToArg
01774:   Return
01775: LoadFn { code: 01769, fvars: 00000 }
01776:   Return
01777: PushString("")
01778: LoadFn { code: 01667, fvars: 00000 }
01779: LoadFn { code: 01683, fvars: 00002 }
01780: AppFnToArg
01781: PushEffect("no-match")
01782: AppFnToArg
01783: LoadFn { code: 01751, fvars: 00000 }
01784: PushString("")
01785: PushString(""arg"")
01786: AppFnToArg
01787: PushString(""_"")
01788: AppFnToArg
01789: AppFnToArg
01790: LoadFn { code: 01757, fvars: 00000 }
01791: AppFnToArg
01792: AppFnToArg
01793: AppFnToArg
01794: LoadVar(00000)
01795: PushString("Pair")
01796: PushString("Foo")
01797: AppFnToArg
01798: PushString("Bar")
01799: AppFnToArg
01800: AppFnToArg
01801: PushString("")
01802: LoadVar(00001)
01803: PushString("Binding")
01804: PushString(""_"")
01805: AppFnToArg
01806: AppFnToArg
01807: LoadFn { code: 01759, fvars: 00000 }
01808: AppFnToArg
01809: AppFnToArg
01810: LoadVar(00001)
01811: PushString("Compound")
01812: PushString("Value")
01813: PushString("Pair")
01814: AppFnToArg
01815: AppFnToArg
01816: PushString("")
01817: PushString("Binding")
01818: PushString(""y"")
01819: AppFnToArg
01820: AppFnToArg
01821: PushString("Binding")
01822: PushString(""x"")
01823: AppFnToArg
01824: AppFnToArg
01825: AppFnToArg
01826: AppFnToArg
01827: LoadFn { code: 01765, fvars: 00000 }
01828: AppFnToArg
01829: AppFnToArg
01830: LoadVar(00001)
01831: PushString("Compound")
01832: PushString("Value")
01833: PushString("Pair")
01834: AppFnToArg
01835: AppFnToArg
01836: PushString("")
01837: PushString("Value")
01838: PushString("Foo")
01839: AppFnToArg
01840: AppFnToArg
01841: PushString("Binding")
01842: PushString(""x"")
01843: AppFnToArg
01844: AppFnToArg
01845: AppFnToArg
01846: AppFnToArg
01847: LoadFn { code: 01767, fvars: 00000 }
01848: AppFnToArg
01849: AppFnToArg
01850: LoadVar(00001)
01851: PushString("Compound")
01852: PushString("Value")
01853: PushString("Pair")
01854: AppFnToArg
01855: AppFnToArg
01856: PushString("")
01857: PushString("Binding")
01858: PushString(""x"")
01859: AppFnToArg
01860: AppFnToArg
01861: PushString("Binding")
01862: PushString(""x"")
01863: AppFnToArg
01864: AppFnToArg
01865: AppFnToArg
01866: AppFnToArg
01867: LoadFn { code: 01775, fvars: 00000 }
01868: AppFnToArg
01869: AppFnToArg
01870: AppFnToArg
01871: AppFnToArg
01872:   Return
01873: LoadFn { code: 01505, fvars: 00000 }
01874: PushString(""match"")
01875: AppFnToArg
01876: LoadFn { code: 01509, fvars: 00000 }
01877: PushString("")
01878: PushString(""clauses"")
01879: AppFnToArg
01880: PushString(""value"")
01881: AppFnToArg
01882: AppFnToArg
01883: LoadFn { code: 01654, fvars: 00014 }
01884: AppFnToArg
01885: AppFnToArg
01886: LoadFn { code: 01777, fvars: 00001 }
01887: AppFnToArg
01888:   Return
01889: LoadFn { code: 01393, fvars: 00000 }
01890: PushString(""->"")
01891: AppFnToArg
01892: LoadFn { code: 01397, fvars: 00000 }
01893: PushString("")
01894: PushString(""value"")
01895: AppFnToArg
01896: PushString(""body"")
01897: AppFnToArg
01898: PushString(""pattern"")
01899: AppFnToArg
01900: AppFnToArg
01901: LoadFn { code: 01497, fvars: 00012 }
01902: AppFnToArg
01903: AppFnToArg
01904: LoadFn { code: 01873, fvars: 00013 }
01905: AppFnToArg
01906:   Return
01907: LoadFn { code: 00979, fvars: 00000 }
01908: PushString(""unify"")
01909: AppFnToArg
01910: LoadFn { code: 00985, fvars: 00000 }
01911: PushString(""unify"")
01912: AppFnToArg
01913: LoadFn { code: 01377, fvars: 00011 }
01914: AppFnToArg
01915: AppFnToArg
01916: LoadFn { code: 01889, fvars: 00012 }
01917: AppFnToArg
01918:   Return
01919: LoadFn { code: 00795, fvars: 00000 }
01920: PushString(""join"")
01921: AppFnToArg
01922: LoadVar(00010)
01923: LoadFn { code: 00799, fvars: 00000 }
01924: PushString("")
01925: PushString(""pair"")
01926: AppFnToArg
01927: PushString(""acc"")
01928: AppFnToArg
01929: AppFnToArg
01930: LoadFn { code: 00971, fvars: 00011 }
01931: AppFnToArg
01932: AppFnToArg
01933: PushString("")
01934: AppFnToArg
01935: AppFnToArg
01936: LoadFn { code: 01907, fvars: 00011 }
01937: AppFnToArg
01938:   Return
01939: LoadFn { code: 00744, fvars: 00000 }
01940: PushString(""second"")
01941: AppFnToArg
01942: LoadFn { code: 00748, fvars: 00000 }
01943: PushString(""xs"")
01944: AppFnToArg
01945: LoadFn { code: 00773, fvars: 00001 }
01946: AppFnToArg
01947: AppFnToArg
01948: LoadFn { code: 01919, fvars: 00010 }
01949: AppFnToArg
01950:   Return
01951: LoadFn { code: 00695, fvars: 00000 }
01952: PushString(""first"")
01953: AppFnToArg
01954: LoadFn { code: 00699, fvars: 00000 }
01955: PushString(""xs"")
01956: AppFnToArg
01957: LoadFn { code: 00722, fvars: 00000 }
01958: AppFnToArg
01959: AppFnToArg
01960: LoadFn { code: 01939, fvars: 00009 }
01961: AppFnToArg
01962:   Return
01963: LoadFn { code: 00535, fvars: 00000 }
01964: PushString(""=="")
01965: AppFnToArg
01966: LoadFn { code: 00541, fvars: 00000 }
01967: PushString(""=="")
01968: AppFnToArg
01969: LoadFn { code: 00679, fvars: 00000 }
01970: AppFnToArg
01971: AppFnToArg
01972: LoadFn { code: 01951, fvars: 00008 }
01973: AppFnToArg
01974:   Return
01975: LoadFn { code: 00458, fvars: 00000 }
01976: PushString(""destructure"")
01977: AppFnToArg
01978: LoadFn { code: 00464, fvars: 00000 }
01979: PushString(""destructure"")
01980: AppFnToArg
01981: LoadFn { code: 00519, fvars: 00000 }
01982: AppFnToArg
01983: PushString("")
01984: AppFnToArg
01985: AppFnToArg
01986: LoadFn { code: 01963, fvars: 00007 }
01987: AppFnToArg
01988:   Return
01989: LoadFn { code: 00434, fvars: 00000 }
01990: PushString(""zip"")
01991: AppFnToArg
01992: LoadFn { code: 00438, fvars: 00000 }
01993: PushString("")
01994: PushString(""ys"")
01995: AppFnToArg
01996: PushString(""xs"")
01997: AppFnToArg
01998: AppFnToArg
01999: LoadFn { code: 00450, fvars: 00004 }
02000: AppFnToArg
02001: AppFnToArg
02002: LoadFn { code: 01975, fvars: 00006 }
02003: AppFnToArg
02004:   Return
02005: LoadFn { code: 00281, fvars: 00000 }
02006: PushString(""zip"")
02007: AppFnToArg
02008: LoadFn { code: 00287, fvars: 00000 }
02009: PushString(""zip"")
02010: AppFnToArg
02011: LoadFn { code: 00416, fvars: 00000 }
02012: AppFnToArg
02013: AppFnToArg
02014: LoadFn { code: 01989, fvars: 00005 }
02015: AppFnToArg
02016:   Return
02017: LoadFn { code: 00219, fvars: 00000 }
02018: PushString(""flatten"")
02019: AppFnToArg
02020: LoadFn { code: 00223, fvars: 00000 }
02021: PushString(""xs"")
02022: AppFnToArg
02023: LoadFn { code: 00257, fvars: 00004 }
02024: AppFnToArg
02025: AppFnToArg
02026: LoadFn { code: 02005, fvars: 00004 }
02027: AppFnToArg
02028:   Return
02029: LoadFn { code: 00175, fvars: 00000 }
02030: PushString(""map"")
02031: AppFnToArg
02032: LoadFn { code: 00179, fvars: 00000 }
02033: PushString("")
02034: PushString(""xs"")
02035: AppFnToArg
02036: PushString(""f"")
02037: AppFnToArg
02038: AppFnToArg
02039: LoadFn { code: 00211, fvars: 00003 }
02040: AppFnToArg
02041: AppFnToArg
02042: LoadFn { code: 02017, fvars: 00003 }
02043: AppFnToArg
02044:   Return
02045: LoadFn { code: 00137, fvars: 00000 }
02046: PushString(""reverse"")
02047: AppFnToArg
02048: LoadFn { code: 00141, fvars: 00000 }
02049: PushString(""xs"")
02050: AppFnToArg
02051: LoadFn { code: 00153, fvars: 00002 }
02052: AppFnToArg
02053: AppFnToArg
02054: LoadFn { code: 02029, fvars: 00002 }
02055: AppFnToArg
02056:   Return
02057: LoadFn { code: 00097, fvars: 00000 }
02058: PushString(""apply"")
02059: AppFnToArg
02060: LoadFn { code: 00101, fvars: 00000 }
02061: PushString("")
02062: PushString(""xs"")
02063: AppFnToArg
02064: PushString(""f"")
02065: AppFnToArg
02066: AppFnToArg
02067: LoadFn { code: 00129, fvars: 00001 }
02068: AppFnToArg
02069: AppFnToArg
02070: LoadFn { code: 02045, fvars: 00001 }
02071: AppFnToArg
02072:   Return
02073: LoadFn { code: 00016, fvars: 00000 }
02074: PushString(""fold"")
02075: AppFnToArg
02076: LoadFn { code: 00022, fvars: 00000 }
02077: PushString(""fold"")
02078: AppFnToArg
02079: LoadFn { code: 00079, fvars: 00000 }
02080: AppFnToArg
02081: AppFnToArg
02082: LoadFn { code: 02057, fvars: 00000 }
02083: AppFnToArg
02084:   Return

[Bar, NoMatch(Foo)]