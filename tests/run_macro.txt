([:x, :_] => { x })(Foo, {})

((=>
  [ :x
    :_ ]
  { x })
  Foo
  {  })

( ( ( ( =>
          =>
            0
        ( ( []
            "_" )
          "x" ) )
      =>
        =>
          1 )
    ( Value
      Foo ) )
  =>
    [] )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn { code: 00010, fvars: 00000 }
00013:   Return
00014: LoadVar(00001)
00015:   Return
00016: LoadFn { code: 00014, fvars: 00001 }
00017:   Return
00018: PushString("")
00019:   Return
00020: LoadFn { code: 00012, fvars: 00000 }
00021: PushString("")
00022: PushString(""_"")
00023: ApplyFnToArg
00024: PushString(""x"")
00025: ApplyFnToArg
00026: ApplyFnToArg
00027: LoadFn { code: 00016, fvars: 00000 }
00028: ApplyFnToArg
00029: PushString("Value")
00030: PushString("Foo")
00031: ApplyFnToArg
00032: ApplyFnToArg
00033: LoadFn { code: 00018, fvars: 00000 }
00034: ApplyFnToArg
00035:   Return

Value(Foo)

---

([:x, :_] => { x })(:binding, {})

((=>
  [ :x
    :_ ]
  { x })
  :binding
  {  })

( ( ( ( =>
          =>
            0
        ( ( []
            "_" )
          "x" ) )
      =>
        =>
          1 )
    ( Binding
      "binding" ) )
  =>
    [] )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn { code: 00010, fvars: 00000 }
00013:   Return
00014: LoadVar(00001)
00015:   Return
00016: LoadFn { code: 00014, fvars: 00001 }
00017:   Return
00018: PushString("")
00019:   Return
00020: LoadFn { code: 00012, fvars: 00000 }
00021: PushString("")
00022: PushString(""_"")
00023: ApplyFnToArg
00024: PushString(""x"")
00025: ApplyFnToArg
00026: ApplyFnToArg
00027: LoadFn { code: 00016, fvars: 00000 }
00028: ApplyFnToArg
00029: PushString("Binding")
00030: PushString(""binding"")
00031: ApplyFnToArg
00032: ApplyFnToArg
00033: LoadFn { code: 00018, fvars: 00000 }
00034: ApplyFnToArg
00035:   Return

Binding("binding")

---

([:x, :_] => { x })(Foo(Bar, Baz), {})

((=>
  [ :x
    :_ ]
  { x })
  (Foo
    Bar
    Baz)
  {  })

( ( ( ( =>
          =>
            0
        ( ( []
            "_" )
          "x" ) )
      =>
        =>
          1 )
    ( Value
      ( ( Foo
          Bar )
        Baz ) ) )
  =>
    [] )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn { code: 00010, fvars: 00000 }
00013:   Return
00014: LoadVar(00001)
00015:   Return
00016: LoadFn { code: 00014, fvars: 00001 }
00017:   Return
00018: PushString("")
00019:   Return
00020: LoadFn { code: 00012, fvars: 00000 }
00021: PushString("")
00022: PushString(""_"")
00023: ApplyFnToArg
00024: PushString(""x"")
00025: ApplyFnToArg
00026: ApplyFnToArg
00027: LoadFn { code: 00016, fvars: 00000 }
00028: ApplyFnToArg
00029: PushString("Value")
00030: PushString("Foo")
00031: PushString("Bar")
00032: ApplyFnToArg
00033: PushString("Baz")
00034: ApplyFnToArg
00035: ApplyFnToArg
00036: ApplyFnToArg
00037: LoadFn { code: 00018, fvars: 00000 }
00038: ApplyFnToArg
00039:   Return

Value(Foo(Bar, Baz))

---

([:x, :_] => { x })(Foo(Bar, :baz), {})

((=>
  [ :x
    :_ ]
  { x })
  (Foo
    Bar
    :baz)
  {  })

( ( ( ( =>
          =>
            0
        ( ( []
            "_" )
          "x" ) )
      =>
        =>
          1 )
    ( ( Compound
        ( Value
          Foo ) )
      ( ( []
          ( Binding
            "baz" ) )
        ( Value
          Bar ) ) ) )
  =>
    [] )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn { code: 00010, fvars: 00000 }
00013:   Return
00014: LoadVar(00001)
00015:   Return
00016: LoadFn { code: 00014, fvars: 00001 }
00017:   Return
00018: PushString("")
00019:   Return
00020: LoadFn { code: 00012, fvars: 00000 }
00021: PushString("")
00022: PushString(""_"")
00023: ApplyFnToArg
00024: PushString(""x"")
00025: ApplyFnToArg
00026: ApplyFnToArg
00027: LoadFn { code: 00016, fvars: 00000 }
00028: ApplyFnToArg
00029: PushString("Compound")
00030: PushString("Value")
00031: PushString("Foo")
00032: ApplyFnToArg
00033: ApplyFnToArg
00034: PushString("")
00035: PushString("Binding")
00036: PushString(""baz"")
00037: ApplyFnToArg
00038: ApplyFnToArg
00039: PushString("Value")
00040: PushString("Bar")
00041: ApplyFnToArg
00042: ApplyFnToArg
00043: ApplyFnToArg
00044: ApplyFnToArg
00045: LoadFn { code: 00018, fvars: 00000 }
00046: ApplyFnToArg
00047:   Return

Compound(Value(Foo), [Value(Bar), Binding("baz")])

---

([:x, :_] => { x })(:foo(Bar, :baz), {})

((=>
  [ :x
    :_ ]
  { x })
  (:foo
    Bar
    :baz)
  {  })

( ( ( ( =>
          =>
            0
        ( ( []
            "_" )
          "x" ) )
      =>
        =>
          1 )
    ( ( Compound
        ( Binding
          "foo" ) )
      ( ( []
          ( Binding
            "baz" ) )
        ( Value
          Bar ) ) ) )
  =>
    =>
      [] )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn { code: 00010, fvars: 00000 }
00013:   Return
00014: LoadVar(00001)
00015:   Return
00016: LoadFn { code: 00014, fvars: 00001 }
00017:   Return
00018: PushString("")
00019:   Return
00020: LoadFn { code: 00018, fvars: 00000 }
00021:   Return
00022: LoadFn { code: 00012, fvars: 00000 }
00023: PushString("")
00024: PushString(""_"")
00025: ApplyFnToArg
00026: PushString(""x"")
00027: ApplyFnToArg
00028: ApplyFnToArg
00029: LoadFn { code: 00016, fvars: 00000 }
00030: ApplyFnToArg
00031: PushString("Compound")
00032: PushString("Binding")
00033: PushString(""foo"")
00034: ApplyFnToArg
00035: ApplyFnToArg
00036: PushString("")
00037: PushString("Binding")
00038: PushString(""baz"")
00039: ApplyFnToArg
00040: ApplyFnToArg
00041: PushString("Value")
00042: PushString("Bar")
00043: ApplyFnToArg
00044: ApplyFnToArg
00045: ApplyFnToArg
00046: ApplyFnToArg
00047: LoadFn { code: 00020, fvars: 00000 }
00048: ApplyFnToArg
00049:   Return

Compound(Binding("foo"), [Value(Bar), Binding("baz")])

---

([:x, :_] => { x })([A, B, [C, :foo]], {})

((=>
  [ :x
    :_ ]
  { x })
  [ A
    B
    [ C
      :foo ] ]
  {  })

( ( ( ( =>
          =>
            0
        ( ( []
            "_" )
          "x" ) )
      =>
        =>
          1 )
    ( List
      ( ( ( []
            ( List
              ( ( []
                  ( Binding
                    "foo" ) )
                ( Value
                  C ) ) ) )
          ( Value
            B ) )
        ( Value
          A ) ) ) )
  =>
    [] )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn { code: 00010, fvars: 00000 }
00013:   Return
00014: LoadVar(00001)
00015:   Return
00016: LoadFn { code: 00014, fvars: 00001 }
00017:   Return
00018: PushString("")
00019:   Return
00020: LoadFn { code: 00012, fvars: 00000 }
00021: PushString("")
00022: PushString(""_"")
00023: ApplyFnToArg
00024: PushString(""x"")
00025: ApplyFnToArg
00026: ApplyFnToArg
00027: LoadFn { code: 00016, fvars: 00000 }
00028: ApplyFnToArg
00029: PushString("List")
00030: PushString("")
00031: PushString("List")
00032: PushString("")
00033: PushString("Binding")
00034: PushString(""foo"")
00035: ApplyFnToArg
00036: ApplyFnToArg
00037: PushString("Value")
00038: PushString("C")
00039: ApplyFnToArg
00040: ApplyFnToArg
00041: ApplyFnToArg
00042: ApplyFnToArg
00043: PushString("Value")
00044: PushString("B")
00045: ApplyFnToArg
00046: ApplyFnToArg
00047: PushString("Value")
00048: PushString("A")
00049: ApplyFnToArg
00050: ApplyFnToArg
00051: ApplyFnToArg
00052: ApplyFnToArg
00053: LoadFn { code: 00018, fvars: 00000 }
00054: ApplyFnToArg
00055:   Return

List([Value(A), Value(B), List([Value(C), Binding("foo")])])