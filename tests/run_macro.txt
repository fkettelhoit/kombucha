'=> = ('binding => { 'block => {
    pop(binding, 'xs => { 'x => {
        if(xs, Binding, {
            block
        }, {
            throw!(ExpectedBindingButFound(xs(x)))
        })
    }}, {
        throw!(MustBeCalledAsMacroButFound(binding, block))
    })
}})
'f = ('x => { x })
f(Foo)

(=
  '=>
  (=>
    'binding
    {
      (=>
        'block
        {
          (pop
            binding
            (=>
              'xs
              {
                (=>
                  'x
                  {
                    (if
                      xs
                      Binding
                      {
                        block}
                      {
                        (throw!
                          (ExpectedBindingButFound
                            (xs
                              x)))})})})
            {
              (throw!
                (MustBeCalledAsMacroButFound
                  binding
                  block))})})}))
(=
  'f
  (=>
    'x
    {
      x}))
(f
  Foo)

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "=>" )
    ( ( =>
          =>
            0
        "binding" )
      =>
        ( ( =>
              =>
                0
            "block" )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( pop
                          2
                          1
                          0 )
                  1 )
                ( ( =>
                      =>
                        0
                    "xs" )
                  =>
                    ( ( =>
                          =>
                            0
                        "x" )
                      =>
                        ( ( ( ( =>
                                  =>
                                    =>
                                      =>
                                        ( if
                                          3
                                          2
                                          1
                                          0 )
                                1 )
                              "Binding" )
                            =>
                              3 )
                          =>
                            ( throw!
                              ( "ExpectedBindingButFound"
                                ( 2
                                  1 ) ) ) ) ) ) )
              =>
                ( throw!
                  ( ( "MustBeCalledAsMacroButFound"
                      2 )
                    1 ) ) ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "f" )
        ( ( 0
            ( "Binding"
              "x" ) )
          =>
            0 ) )
      =>
        ( 0
          "Foo" ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010:   Return
00011: PushFn(00009, 00000)
00012:   Return
00013: PushVar(00000)
00014:   Return
00015: PushFn(00013, 00000)
00016:   Return
00017: PushVar(00002)
00018: PushVar(00001)
00019: PushVar(00000)
00020: Swap(00003)
00021: Pop
00022: Apply
00023: Apply
00024:   Return
00025: PushFn(00017, 00002)
00026:   Return
00027: PushFn(00025, 00001)
00028:   Return
00029: PushVar(00000)
00030:   Return
00031: PushFn(00029, 00000)
00032:   Return
00033: PushVar(00000)
00034:   Return
00035: PushFn(00033, 00000)
00036:   Return
00037: PushVar(00003)
00038: PushVar(00002)
00039: PushVar(00001)
00040: PushVar(00000)
00041: Swap(00004)
00042: If
00043: Apply
00044:   Return
00045: PushFn(00037, 00003)
00046:   Return
00047: PushFn(00045, 00002)
00048:   Return
00049: PushFn(00047, 00001)
00050:   Return
00051: PushVar(00003)
00052:   Return
00053: PushEffect("throw")
00054: PushString("ExpectedBindingButFound")
00055: PushVar(00002)
00056: PushVar(00001)
00057: Swap(00002)
00058: Apply
00059: Swap(00002)
00060: Apply
00061: Swap(00002)
00062: Apply
00063:   Return
00064: PushFn(00049, 00000)
00065: PushVar(00001)
00066: Swap(00002)
00067: Apply
00068: PushString("Binding")
00069: Swap(00002)
00070: Apply
00071: PushFn(00051, 00003)
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00035, 00000)
00079: PushString("x")
00080: Swap(00002)
00081: Apply
00082: PushFn(00064, 00002)
00083: Swap(00002)
00084: Apply
00085:   Return
00086: PushEffect("throw")
00087: PushString("MustBeCalledAsMacroButFound")
00088: PushVar(00002)
00089: Swap(00002)
00090: Apply
00091: PushVar(00001)
00092: Swap(00002)
00093: Apply
00094: Swap(00002)
00095: Apply
00096:   Return
00097: PushFn(00027, 00000)
00098: PushVar(00001)
00099: Swap(00002)
00100: Apply
00101: PushFn(00031, 00000)
00102: PushString("xs")
00103: Swap(00002)
00104: Apply
00105: PushFn(00078, 00001)
00106: Swap(00002)
00107: Apply
00108: Swap(00002)
00109: Apply
00110: PushFn(00086, 00002)
00111: Swap(00002)
00112: Apply
00113:   Return
00114: PushFn(00015, 00000)
00115: PushString("block")
00116: Swap(00002)
00117: Apply
00118: PushFn(00097, 00001)
00119: Swap(00002)
00120: Apply
00121:   Return
00122: PushVar(00000)
00123: PushVar(00001)
00124: Swap(00002)
00125: Apply
00126:   Return
00127: PushFn(00122, 00001)
00128:   Return
00129: PushFn(00127, 00000)
00130:   Return
00131: PushVar(00000)
00132:   Return
00133: PushVar(00000)
00134: PushString("Foo")
00135: Swap(00002)
00136: Apply
00137:   Return
00138: PushFn(00129, 00000)
00139: PushString("f")
00140: Swap(00002)
00141: Apply
00142: PushVar(00000)
00143: PushString("Binding")
00144: PushString("x")
00145: Swap(00002)
00146: Apply
00147: Swap(00002)
00148: Apply
00149: PushFn(00131, 00000)
00150: Swap(00002)
00151: Apply
00152: Swap(00002)
00153: Apply
00154: PushFn(00133, 00000)
00155: Swap(00002)
00156: Apply
00157:   Return
00158: PushFn(00007, 00000)
00159: PushString("=>")
00160: Swap(00002)
00161: Apply
00162: PushFn(00011, 00000)
00163: PushString("binding")
00164: Swap(00002)
00165: Apply
00166: PushFn(00114, 00000)
00167: Swap(00002)
00168: Apply
00169: Swap(00002)
00170: Apply
00171: PushFn(00138, 00000)
00172: Swap(00002)
00173: Apply

Foo

---

'=> = ('binding => { 'block => {
    pop(binding, 'xs => { 'x => {
        if(xs, Binding, {
            block
        }, {
            throw!(ExpectedBindingButFound(xs(x)))
        })
    }}, {
        throw!(MustBeCalledAsMacroButFound(binding, block))
    })
}})
'f = ('x => { x })
'will-throw = (Foo => { f })
f(Foo)

(=
  '=>
  (=>
    'binding
    {
      (=>
        'block
        {
          (pop
            binding
            (=>
              'xs
              {
                (=>
                  'x
                  {
                    (if
                      xs
                      Binding
                      {
                        block}
                      {
                        (throw!
                          (ExpectedBindingButFound
                            (xs
                              x)))})})})
            {
              (throw!
                (MustBeCalledAsMacroButFound
                  binding
                  block))})})}))
(=
  'f
  (=>
    'x
    {
      x}))
(=
  'will-throw
  (=>
    Foo
    {
      f}))
(f
  Foo)

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "=>" )
    ( ( =>
          =>
            0
        "binding" )
      =>
        ( ( =>
              =>
                0
            "block" )
          =>
            ( ( ( =>
                    =>
                      =>
                        ( pop
                          2
                          1
                          0 )
                  1 )
                ( ( =>
                      =>
                        0
                    "xs" )
                  =>
                    ( ( =>
                          =>
                            0
                        "x" )
                      =>
                        ( ( ( ( =>
                                  =>
                                    =>
                                      =>
                                        ( if
                                          3
                                          2
                                          1
                                          0 )
                                1 )
                              "Binding" )
                            =>
                              3 )
                          =>
                            ( throw!
                              ( "ExpectedBindingButFound"
                                ( 2
                                  1 ) ) ) ) ) ) )
              =>
                ( throw!
                  ( ( "MustBeCalledAsMacroButFound"
                      2 )
                    1 ) ) ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( 0
                  1 )
          "f" )
        ( ( 0
            ( "Binding"
              "x" ) )
          =>
            0 ) )
      =>
        ( ( ( =>
                =>
                  =>
                    ( 0
                      1 )
              "will-throw" )
            ( ( 1
                ( "Value"
                  "Foo" ) )
              =>
                1 ) )
          =>
            ( 1
              "Foo" ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010:   Return
00011: PushFn(00009, 00000)
00012:   Return
00013: PushVar(00000)
00014:   Return
00015: PushFn(00013, 00000)
00016:   Return
00017: PushVar(00002)
00018: PushVar(00001)
00019: PushVar(00000)
00020: Swap(00003)
00021: Pop
00022: Apply
00023: Apply
00024:   Return
00025: PushFn(00017, 00002)
00026:   Return
00027: PushFn(00025, 00001)
00028:   Return
00029: PushVar(00000)
00030:   Return
00031: PushFn(00029, 00000)
00032:   Return
00033: PushVar(00000)
00034:   Return
00035: PushFn(00033, 00000)
00036:   Return
00037: PushVar(00003)
00038: PushVar(00002)
00039: PushVar(00001)
00040: PushVar(00000)
00041: Swap(00004)
00042: If
00043: Apply
00044:   Return
00045: PushFn(00037, 00003)
00046:   Return
00047: PushFn(00045, 00002)
00048:   Return
00049: PushFn(00047, 00001)
00050:   Return
00051: PushVar(00003)
00052:   Return
00053: PushEffect("throw")
00054: PushString("ExpectedBindingButFound")
00055: PushVar(00002)
00056: PushVar(00001)
00057: Swap(00002)
00058: Apply
00059: Swap(00002)
00060: Apply
00061: Swap(00002)
00062: Apply
00063:   Return
00064: PushFn(00049, 00000)
00065: PushVar(00001)
00066: Swap(00002)
00067: Apply
00068: PushString("Binding")
00069: Swap(00002)
00070: Apply
00071: PushFn(00051, 00003)
00072: Swap(00002)
00073: Apply
00074: PushFn(00053, 00002)
00075: Swap(00002)
00076: Apply
00077:   Return
00078: PushFn(00035, 00000)
00079: PushString("x")
00080: Swap(00002)
00081: Apply
00082: PushFn(00064, 00002)
00083: Swap(00002)
00084: Apply
00085:   Return
00086: PushEffect("throw")
00087: PushString("MustBeCalledAsMacroButFound")
00088: PushVar(00002)
00089: Swap(00002)
00090: Apply
00091: PushVar(00001)
00092: Swap(00002)
00093: Apply
00094: Swap(00002)
00095: Apply
00096:   Return
00097: PushFn(00027, 00000)
00098: PushVar(00001)
00099: Swap(00002)
00100: Apply
00101: PushFn(00031, 00000)
00102: PushString("xs")
00103: Swap(00002)
00104: Apply
00105: PushFn(00078, 00001)
00106: Swap(00002)
00107: Apply
00108: Swap(00002)
00109: Apply
00110: PushFn(00086, 00002)
00111: Swap(00002)
00112: Apply
00113:   Return
00114: PushFn(00015, 00000)
00115: PushString("block")
00116: Swap(00002)
00117: Apply
00118: PushFn(00097, 00001)
00119: Swap(00002)
00120: Apply
00121:   Return
00122: PushVar(00000)
00123: PushVar(00001)
00124: Swap(00002)
00125: Apply
00126:   Return
00127: PushFn(00122, 00001)
00128:   Return
00129: PushFn(00127, 00000)
00130:   Return
00131: PushVar(00000)
00132:   Return
00133: PushVar(00000)
00134: PushVar(00001)
00135: Swap(00002)
00136: Apply
00137:   Return
00138: PushFn(00133, 00001)
00139:   Return
00140: PushFn(00138, 00000)
00141:   Return
00142: PushVar(00001)
00143:   Return
00144: PushVar(00001)
00145: PushString("Foo")
00146: Swap(00002)
00147: Apply
00148:   Return
00149: PushFn(00140, 00000)
00150: PushString("will-throw")
00151: Swap(00002)
00152: Apply
00153: PushVar(00001)
00154: PushString("Value")
00155: PushString("Foo")
00156: Swap(00002)
00157: Apply
00158: Swap(00002)
00159: Apply
00160: PushFn(00142, 00001)
00161: Swap(00002)
00162: Apply
00163: Swap(00002)
00164: Apply
00165: PushFn(00144, 00001)
00166: Swap(00002)
00167: Apply
00168:   Return
00169: PushFn(00129, 00000)
00170: PushString("f")
00171: Swap(00002)
00172: Apply
00173: PushVar(00000)
00174: PushString("Binding")
00175: PushString("x")
00176: Swap(00002)
00177: Apply
00178: Swap(00002)
00179: Apply
00180: PushFn(00131, 00000)
00181: Swap(00002)
00182: Apply
00183: Swap(00002)
00184: Apply
00185: PushFn(00149, 00001)
00186: Swap(00002)
00187: Apply
00188:   Return
00189: PushFn(00007, 00000)
00190: PushString("=>")
00191: Swap(00002)
00192: Apply
00193: PushFn(00011, 00000)
00194: PushString("binding")
00195: Swap(00002)
00196: Apply
00197: PushFn(00114, 00000)
00198: Swap(00002)
00199: Apply
00200: Swap(00002)
00201: Apply
00202: PushFn(00169, 00000)
00203: Swap(00002)
00204: Apply

throw!(ExpectedBindingButFound(Value(Foo)))

---

'== = ('== ~> { ('a, 'b) => {
    pop(a, ('xs, 'x) => {
        pop(b, ('ys, 'y) => {
            if(x == y, True, { xs == ys }, { False })
        }, {
            False
        })
    }, {
        if(a, b, { True }, { False })
    })
}})
List(
    Foo == Foo
    Foo == Bar
    Foo(Bar) == Foo(Bar)
    Foo(Bar) == Foo(Baz)
    'a == 'a
    'a == 'b
    'f('a) == 'f('a)
    'f('a) == 'g('a)
)

(=
  '==
  (~>
    '==
    {
      (=>
        (
          'a
          'b)
        {
          (pop
            a
            (=>
              (
                'xs
                'x)
              {
                (pop
                  b
                  (=>
                    (
                      'ys
                      'y)
                    {
                      (if
                        (==
                          x
                          y)
                        True
                        {
                          (==
                            xs
                            ys)}
                        {
                          False})})
                  {
                    False})})
            {
              (if
                a
                b
                {
                  True}
                {
                  False})})})}))
(List
  (==
    Foo
    Foo)
  (==
    Foo
    Bar)
  (==
    (Foo
      Bar)
    (Foo
      Bar))
  (==
    (Foo
      Bar)
    (Foo
      Baz))
  (==
    'a
    'a)
  (==
    'a
    'b)
  (==
    ('f
      'a)
    ('f
      'a))
  (==
    ('f
      'a)
    ('g
      'a)))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "==" )
    ( ( =>
          =>
            ~>
              0
        "==" )
      =>
        ( ( =>
              =>
                0
            ( ( ""
                "a" )
              "b" ) )
          =>
            =>
              ( ( ( =>
                      =>
                        =>
                          ( pop
                            2
                            1
                            0 )
                    1 )
                  ( ( =>
                        =>
                          0
                      ( ( ""
                          "xs" )
                        "x" ) )
                    =>
                      =>
                        ( ( ( =>
                                =>
                                  =>
                                    ( pop
                                      2
                                      1
                                      0 )
                              2 )
                            ( ( =>
                                  =>
                                    0
                                ( ( ""
                                    "ys" )
                                  "y" ) )
                              =>
                                =>
                                  ( ( ( ( =>
                                            =>
                                              =>
                                                =>
                                                  ( if
                                                    3
                                                    2
                                                    1
                                                    0 )
                                          ( ( 6
                                              2 )
                                            0 ) )
                                        "True" )
                                      =>
                                        ( ( 7
                                            4 )
                                          2 ) )
                                    =>
                                      "False" ) ) )
                          =>
                            "False" ) ) )
                =>
                  ( ( ( ( =>
                            =>
                              =>
                                =>
                                  ( if
                                    3
                                    2
                                    1
                                    0 )
                          2 )
                        1 )
                      =>
                        "True" )
                    =>
                      "False" ) ) ) ) )
  =>
    ( ( ( ( ( ( ( ( "List"
                    ( ( 0
                        "Foo" )
                      "Foo" ) )
                  ( ( 0
                      "Foo" )
                    "Bar" ) )
                ( ( 0
                    ( "Foo"
                      "Bar" ) )
                  ( "Foo"
                    "Bar" ) ) )
              ( ( 0
                  ( "Foo"
                    "Bar" ) )
                ( "Foo"
                  "Baz" ) ) )
            ( ( 0
                "a" )
              "a" ) )
          ( ( 0
              "a" )
            "b" ) )
        ( ( 0
            ( "f"
              "a" ) )
          ( "f"
            "a" ) ) )
      ( ( 0
          ( "f"
            "a" ) )
        ( "g"
          "a" ) ) ) )

00000: PushVar(00000)
00001: PushVar(00001)
00002: Swap(00002)
00003: Apply
00004:   Return
00005: PushFn(00000, 00001)
00006:   Return
00007: PushFn(00005, 00000)
00008:   Return
00009: PushVar(00000)
00010: Rec
00011:   Return
00012: PushFn(00009, 00000)
00013:   Return
00014: PushVar(00000)
00015:   Return
00016: PushFn(00014, 00000)
00017:   Return
00018: PushVar(00002)
00019: PushVar(00001)
00020: PushVar(00000)
00021: Swap(00003)
00022: Pop
00023: Apply
00024: Apply
00025:   Return
00026: PushFn(00018, 00002)
00027:   Return
00028: PushFn(00026, 00001)
00029:   Return
00030: PushVar(00000)
00031:   Return
00032: PushFn(00030, 00000)
00033:   Return
00034: PushVar(00002)
00035: PushVar(00001)
00036: PushVar(00000)
00037: Swap(00003)
00038: Pop
00039: Apply
00040: Apply
00041:   Return
00042: PushFn(00034, 00002)
00043:   Return
00044: PushFn(00042, 00001)
00045:   Return
00046: PushVar(00000)
00047:   Return
00048: PushFn(00046, 00000)
00049:   Return
00050: PushVar(00003)
00051: PushVar(00002)
00052: PushVar(00001)
00053: PushVar(00000)
00054: Swap(00004)
00055: If
00056: Apply
00057:   Return
00058: PushFn(00050, 00003)
00059:   Return
00060: PushFn(00058, 00002)
00061:   Return
00062: PushFn(00060, 00001)
00063:   Return
00064: PushVar(00007)
00065: PushVar(00004)
00066: Swap(00002)
00067: Apply
00068: PushVar(00002)
00069: Swap(00002)
00070: Apply
00071:   Return
00072: PushString("False")
00073:   Return
00074: PushFn(00062, 00000)
00075: PushVar(00006)
00076: PushVar(00002)
00077: Swap(00002)
00078: Apply
00079: PushVar(00000)
00080: Swap(00002)
00081: Apply
00082: Swap(00002)
00083: Apply
00084: PushString("True")
00085: Swap(00002)
00086: Apply
00087: PushFn(00064, 00007)
00088: Swap(00002)
00089: Apply
00090: PushFn(00072, 00000)
00091: Swap(00002)
00092: Apply
00093:   Return
00094: PushFn(00074, 00006)
00095:   Return
00096: PushString("False")
00097:   Return
00098: PushFn(00044, 00000)
00099: PushVar(00002)
00100: Swap(00002)
00101: Apply
00102: PushFn(00048, 00000)
00103: PushString("")
00104: PushString("ys")
00105: Swap(00002)
00106: Apply
00107: PushString("y")
00108: Swap(00002)
00109: Apply
00110: Swap(00002)
00111: Apply
00112: PushFn(00094, 00005)
00113: Swap(00002)
00114: Apply
00115: Swap(00002)
00116: Apply
00117: PushFn(00096, 00000)
00118: Swap(00002)
00119: Apply
00120:   Return
00121: PushFn(00098, 00004)
00122:   Return
00123: PushVar(00003)
00124: PushVar(00002)
00125: PushVar(00001)
00126: PushVar(00000)
00127: Swap(00004)
00128: If
00129: Apply
00130:   Return
00131: PushFn(00123, 00003)
00132:   Return
00133: PushFn(00131, 00002)
00134:   Return
00135: PushFn(00133, 00001)
00136:   Return
00137: PushString("True")
00138:   Return
00139: PushString("False")
00140:   Return
00141: PushFn(00135, 00000)
00142: PushVar(00002)
00143: Swap(00002)
00144: Apply
00145: PushVar(00001)
00146: Swap(00002)
00147: Apply
00148: PushFn(00137, 00000)
00149: Swap(00002)
00150: Apply
00151: PushFn(00139, 00000)
00152: Swap(00002)
00153: Apply
00154:   Return
00155: PushFn(00028, 00000)
00156: PushVar(00001)
00157: Swap(00002)
00158: Apply
00159: PushFn(00032, 00000)
00160: PushString("")
00161: PushString("xs")
00162: Swap(00002)
00163: Apply
00164: PushString("x")
00165: Swap(00002)
00166: Apply
00167: Swap(00002)
00168: Apply
00169: PushFn(00121, 00003)
00170: Swap(00002)
00171: Apply
00172: Swap(00002)
00173: Apply
00174: PushFn(00141, 00002)
00175: Swap(00002)
00176: Apply
00177:   Return
00178: PushFn(00155, 00002)
00179:   Return
00180: PushFn(00016, 00000)
00181: PushString("")
00182: PushString("a")
00183: Swap(00002)
00184: Apply
00185: PushString("b")
00186: Swap(00002)
00187: Apply
00188: Swap(00002)
00189: Apply
00190: PushFn(00178, 00001)
00191: Swap(00002)
00192: Apply
00193:   Return
00194: PushString("List")
00195: PushVar(00000)
00196: PushString("Foo")
00197: Swap(00002)
00198: Apply
00199: PushString("Foo")
00200: Swap(00002)
00201: Apply
00202: Swap(00002)
00203: Apply
00204: PushVar(00000)
00205: PushString("Foo")
00206: Swap(00002)
00207: Apply
00208: PushString("Bar")
00209: Swap(00002)
00210: Apply
00211: Swap(00002)
00212: Apply
00213: PushVar(00000)
00214: PushString("Foo")
00215: PushString("Bar")
00216: Swap(00002)
00217: Apply
00218: Swap(00002)
00219: Apply
00220: PushString("Foo")
00221: PushString("Bar")
00222: Swap(00002)
00223: Apply
00224: Swap(00002)
00225: Apply
00226: Swap(00002)
00227: Apply
00228: PushVar(00000)
00229: PushString("Foo")
00230: PushString("Bar")
00231: Swap(00002)
00232: Apply
00233: Swap(00002)
00234: Apply
00235: PushString("Foo")
00236: PushString("Baz")
00237: Swap(00002)
00238: Apply
00239: Swap(00002)
00240: Apply
00241: Swap(00002)
00242: Apply
00243: PushVar(00000)
00244: PushString("a")
00245: Swap(00002)
00246: Apply
00247: PushString("a")
00248: Swap(00002)
00249: Apply
00250: Swap(00002)
00251: Apply
00252: PushVar(00000)
00253: PushString("a")
00254: Swap(00002)
00255: Apply
00256: PushString("b")
00257: Swap(00002)
00258: Apply
00259: Swap(00002)
00260: Apply
00261: PushVar(00000)
00262: PushString("f")
00263: PushString("a")
00264: Swap(00002)
00265: Apply
00266: Swap(00002)
00267: Apply
00268: PushString("f")
00269: PushString("a")
00270: Swap(00002)
00271: Apply
00272: Swap(00002)
00273: Apply
00274: Swap(00002)
00275: Apply
00276: PushVar(00000)
00277: PushString("f")
00278: PushString("a")
00279: Swap(00002)
00280: Apply
00281: Swap(00002)
00282: Apply
00283: PushString("g")
00284: PushString("a")
00285: Swap(00002)
00286: Apply
00287: Swap(00002)
00288: Apply
00289: Swap(00002)
00290: Apply
00291:   Return
00292: PushFn(00007, 00000)
00293: PushString("==")
00294: Swap(00002)
00295: Apply
00296: PushFn(00012, 00000)
00297: PushString("==")
00298: Swap(00002)
00299: Apply
00300: PushFn(00180, 00000)
00301: Swap(00002)
00302: Apply
00303: Swap(00002)
00304: Apply
00305: PushFn(00194, 00000)
00306: Swap(00002)
00307: Apply

List(True, False, True, False, True, False, True, False)