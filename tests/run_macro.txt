(['x, '_] => { x })(Foo, {})

((=>
  ( 'x
    '_ )
  { x })
  Foo
  {  })

( ( ( ( =>
          =>
            0
        ( ( []
            "_" )
          "x" ) )
      =>
        =>
          1 )
    ( Value
      Foo ) )
  =>
    [] )

00000: LoadClosure { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn(00010)
00013:   Return
00014: LoadVar(00001)
00015:   Return
00016: LoadClosure { code: 00014, fvars: 00001 }
00017:   Return
00018: PushString("")
00019:   Return
00020: LoadFn(00012)
00021: PushString("")
00022: PushString(""_"")
00023: ApplyFnToArg
00024: PushString(""x"")
00025: ApplyFnToArg
00026: ApplyFnToArg
00027: LoadFn(00016)
00028: ApplyFnToArg
00029: PushString("Value")
00030: PushString("Foo")
00031: ApplyFnToArg
00032: ApplyFnToArg
00033: LoadFn(00018)
00034: ApplyFnToArg

Value(Foo)

---

(['x, '_] => { x })('binding, {})

((=>
  ( 'x
    '_ )
  { x })
  'binding
  {  })

( ( ( ( =>
          =>
            0
        ( ( []
            "_" )
          "x" ) )
      =>
        =>
          1 )
    ( Binding
      "binding" ) )
  =>
    [] )

00000: LoadClosure { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn(00010)
00013:   Return
00014: LoadVar(00001)
00015:   Return
00016: LoadClosure { code: 00014, fvars: 00001 }
00017:   Return
00018: PushString("")
00019:   Return
00020: LoadFn(00012)
00021: PushString("")
00022: PushString(""_"")
00023: ApplyFnToArg
00024: PushString(""x"")
00025: ApplyFnToArg
00026: ApplyFnToArg
00027: LoadFn(00016)
00028: ApplyFnToArg
00029: PushString("Binding")
00030: PushString(""binding"")
00031: ApplyFnToArg
00032: ApplyFnToArg
00033: LoadFn(00018)
00034: ApplyFnToArg

Binding("binding")

---

(['x, '_] => { x })(Foo(Bar, Baz), {})

((=>
  ( 'x
    '_ )
  { x })
  (Foo
    Bar
    Baz)
  {  })

( ( ( ( =>
          =>
            0
        ( ( []
            "_" )
          "x" ) )
      =>
        =>
          1 )
    ( Value
      ( ( Foo
          Bar )
        Baz ) ) )
  =>
    [] )

00000: LoadClosure { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn(00010)
00013:   Return
00014: LoadVar(00001)
00015:   Return
00016: LoadClosure { code: 00014, fvars: 00001 }
00017:   Return
00018: PushString("")
00019:   Return
00020: LoadFn(00012)
00021: PushString("")
00022: PushString(""_"")
00023: ApplyFnToArg
00024: PushString(""x"")
00025: ApplyFnToArg
00026: ApplyFnToArg
00027: LoadFn(00016)
00028: ApplyFnToArg
00029: PushString("Value")
00030: PushString("Foo")
00031: PushString("Bar")
00032: ApplyFnToArg
00033: PushString("Baz")
00034: ApplyFnToArg
00035: ApplyFnToArg
00036: ApplyFnToArg
00037: LoadFn(00018)
00038: ApplyFnToArg

Value(Foo(Bar, Baz))

---

(['x, '_] => { x })(Foo(Bar, 'baz), {})

((=>
  ( 'x
    '_ )
  { x })
  (Foo
    Bar
    'baz)
  {  })

( ( ( ( =>
          =>
            0
        ( ( []
            "_" )
          "x" ) )
      =>
        =>
          1 )
    ( Compound
      ( ( Foo
          ( Value
            Bar ) )
        ( Binding
          "baz" ) ) ) )
  =>
    [] )

00000: LoadClosure { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn(00010)
00013:   Return
00014: LoadVar(00001)
00015:   Return
00016: LoadClosure { code: 00014, fvars: 00001 }
00017:   Return
00018: PushString("")
00019:   Return
00020: LoadFn(00012)
00021: PushString("")
00022: PushString(""_"")
00023: ApplyFnToArg
00024: PushString(""x"")
00025: ApplyFnToArg
00026: ApplyFnToArg
00027: LoadFn(00016)
00028: ApplyFnToArg
00029: PushString("Compound")
00030: PushString("Foo")
00031: PushString("Value")
00032: PushString("Bar")
00033: ApplyFnToArg
00034: ApplyFnToArg
00035: PushString("Binding")
00036: PushString(""baz"")
00037: ApplyFnToArg
00038: ApplyFnToArg
00039: ApplyFnToArg
00040: ApplyFnToArg
00041: LoadFn(00018)
00042: ApplyFnToArg

Compound(Foo(Value(Bar), Binding("baz")))

---

(['x, '_] => { x })('foo(Bar, 'baz), {})

((=>
  ( 'x
    '_ )
  { x })
  ('foo
    Bar
    'baz)
  {  })

( ( ( ( =>
          =>
            0
        ( ( []
            "_" )
          "x" ) )
      =>
        =>
          1 )
    ( Template
      ( ( "foo"
          ( Value
            Bar ) )
        ( Binding
          "baz" ) ) ) )
  =>
    =>
      [] )

00000: LoadClosure { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn(00010)
00013:   Return
00014: LoadVar(00001)
00015:   Return
00016: LoadClosure { code: 00014, fvars: 00001 }
00017:   Return
00018: PushString("")
00019:   Return
00020: LoadFn(00018)
00021:   Return
00022: LoadFn(00012)
00023: PushString("")
00024: PushString(""_"")
00025: ApplyFnToArg
00026: PushString(""x"")
00027: ApplyFnToArg
00028: ApplyFnToArg
00029: LoadFn(00016)
00030: ApplyFnToArg
00031: PushString("Template")
00032: PushString(""foo"")
00033: PushString("Value")
00034: PushString("Bar")
00035: ApplyFnToArg
00036: ApplyFnToArg
00037: PushString("Binding")
00038: PushString(""baz"")
00039: ApplyFnToArg
00040: ApplyFnToArg
00041: ApplyFnToArg
00042: ApplyFnToArg
00043: LoadFn(00020)
00044: ApplyFnToArg

Template("foo"(Value(Bar), Binding("baz")))