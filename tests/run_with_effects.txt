print!(Foo)

(print!
  Foo)

( print!
  Foo )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: PushString("Foo")
00011: PushEffect("print")
00012: ApplyArgToFn

"Foo"
[]

---

print!(Foo), print!(Bar), print!(FooBar)

(print!
  Foo)
(print!
  Bar)
(print!
  FooBar)

( =>
    ( =>
        ( print!
          FooBar )
      ( print!
        Bar ) )
  ( print!
    Foo ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: PushString("FooBar")
00011: PushEffect("print")
00012: ApplyArgToFn
00013:   Return
00014: PushString("Bar")
00015: PushEffect("print")
00016: ApplyArgToFn
00017: LoadFn { code: 00010, fvars: 00000 }
00018: ApplyArgToFn
00019:   Return
00020: PushString("Foo")
00021: PushEffect("print")
00022: ApplyArgToFn
00023: LoadFn { code: 00014, fvars: 00000 }
00024: ApplyArgToFn

"Foo"
"Bar"
"FooBar"
[]

---

'foo = ('x => { 'y => { pair!(Args(x, y)) } })
__handle({ foo(Bar, Baz) }, pair!, 'r => { 'arg => { Pair(arg) } })

(=
  'foo
  (=>
    'x
    { (=>
        'y
        { (pair!
            (Args
              x
              y)) }) }))
(__handle
  { (foo
      Bar
      Baz) }
  pair!
  (=>
    'r
    { (=>
        'arg
        { (Pair
            arg) }) }))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "foo" )
    ( ( =>
          =>
            0
        "x" )
      =>
        ( ( =>
              =>
                0
            "y" )
          =>
            ( pair!
              ( ( Args
                  1 )
                0 ) ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( try
                  2
                  1
                  0 )
          =>
            ( ( 1
                Bar )
              Baz ) )
        pair! )
      ( ( =>
            =>
              0
          "r" )
        =>
          ( ( =>
                =>
                  0
              "arg" )
            =>
              ( Pair
                0 ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00000)
00011: PushString("Pair")
00012: ApplyArgToFn
00013:   Return
00014: LoadVar(00000)
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadFn { code: 00010, fvars: 00000 }
00019: PushString(""arg"")
00020: LoadFn { code: 00016, fvars: 00000 }
00021: ApplyArgToFn
00022: ApplyArgToFn
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: PushString("Bar")
00029: LoadVar(00001)
00030: ApplyArgToFn
00031: PushString("Baz")
00032: ApplyFnToArg
00033:   Return
00034: LoadVar(00002)
00035: LoadVar(00001)
00036: LoadVar(00000)
00037: Try
00038: ApplyArgToFn
00039: Unwind
00040: ApplyArgToFn
00041: ApplyArgToFn
00042:   Return
00043: LoadFn { code: 00034, fvars: 00002 }
00044:   Return
00045: LoadFn { code: 00043, fvars: 00001 }
00046:   Return
00047: LoadFn { code: 00018, fvars: 00000 }
00048: PushString(""r"")
00049: LoadFn { code: 00026, fvars: 00000 }
00050: ApplyArgToFn
00051: ApplyArgToFn
00052: PushEffect("pair")
00053: LoadFn { code: 00028, fvars: 00001 }
00054: LoadFn { code: 00045, fvars: 00000 }
00055: ApplyArgToFn
00056: ApplyArgToFn
00057: ApplyArgToFn
00058:   Return
00059: LoadVar(00000)
00060: LoadVar(00001)
00061: PushString("Args")
00062: ApplyArgToFn
00063: ApplyArgToFn
00064: PushEffect("pair")
00065: ApplyArgToFn
00066:   Return
00067: LoadVar(00000)
00068:   Return
00069: LoadFn { code: 00067, fvars: 00000 }
00070:   Return
00071: LoadFn { code: 00059, fvars: 00001 }
00072: PushString(""y"")
00073: LoadFn { code: 00069, fvars: 00000 }
00074: ApplyArgToFn
00075: ApplyArgToFn
00076:   Return
00077: LoadVar(00000)
00078:   Return
00079: LoadFn { code: 00077, fvars: 00000 }
00080:   Return
00081: LoadVar(00001)
00082: LoadVar(00000)
00083: ApplyArgToFn
00084:   Return
00085: LoadFn { code: 00081, fvars: 00001 }
00086:   Return
00087: LoadFn { code: 00085, fvars: 00000 }
00088:   Return
00089: LoadFn { code: 00047, fvars: 00000 }
00090: LoadFn { code: 00071, fvars: 00000 }
00091: PushString(""x"")
00092: LoadFn { code: 00079, fvars: 00000 }
00093: ApplyArgToFn
00094: ApplyArgToFn
00095: PushString(""foo"")
00096: LoadFn { code: 00087, fvars: 00000 }
00097: ApplyArgToFn
00098: ApplyArgToFn
00099: ApplyArgToFn

Pair(Args(Bar, Baz))

---

__handle({ Foo }, unused!, 'r => { ' => { Error }})

(__handle
  { Foo }
  unused!
  (=>
    'r
    { (=>
        '
        { Error }) }))

( ( ( =>
        =>
          =>
            ( try
              2
              1
              0 )
      =>
        Foo )
    unused! )
  ( ( =>
        =>
          0
      "r" )
    =>
      ( ( =>
            =>
              0
          "" )
        =>
          Error ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: PushString("Error")
00011:   Return
00012: LoadVar(00000)
00013:   Return
00014: LoadFn { code: 00012, fvars: 00000 }
00015:   Return
00016: LoadFn { code: 00010, fvars: 00000 }
00017: PushString("""")
00018: LoadFn { code: 00014, fvars: 00000 }
00019: ApplyArgToFn
00020: ApplyArgToFn
00021:   Return
00022: LoadVar(00000)
00023:   Return
00024: LoadFn { code: 00022, fvars: 00000 }
00025:   Return
00026: PushString("Foo")
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Try
00032: ApplyArgToFn
00033: Unwind
00034: ApplyArgToFn
00035: ApplyArgToFn
00036:   Return
00037: LoadFn { code: 00028, fvars: 00002 }
00038:   Return
00039: LoadFn { code: 00037, fvars: 00001 }
00040:   Return
00041: LoadFn { code: 00016, fvars: 00000 }
00042: PushString(""r"")
00043: LoadFn { code: 00024, fvars: 00000 }
00044: ApplyArgToFn
00045: ApplyArgToFn
00046: PushEffect("unused")
00047: LoadFn { code: 00026, fvars: 00000 }
00048: LoadFn { code: 00039, fvars: 00000 }
00049: ApplyArgToFn
00050: ApplyArgToFn
00051: ApplyArgToFn

Foo

---

__handle({ effect!(Foo) }, effect!, 'r => { 'arg => { arg(r(Bar)) }})

(__handle
  { (effect!
      Foo) }
  effect!
  (=>
    'r
    { (=>
        'arg
        { (arg
            (r
              Bar)) }) }))

( ( ( =>
        =>
          =>
            ( try
              2
              1
              0 )
      =>
        ( effect!
          Foo ) )
    effect! )
  ( ( =>
        =>
          0
      "r" )
    =>
      ( ( =>
            =>
              0
          "arg" )
        =>
          ( 0
            ( 1
              Bar ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: PushString("Bar")
00011: LoadVar(00001)
00012: ApplyArgToFn
00013: LoadVar(00000)
00014: ApplyArgToFn
00015:   Return
00016: LoadVar(00000)
00017:   Return
00018: LoadFn { code: 00016, fvars: 00000 }
00019:   Return
00020: LoadFn { code: 00010, fvars: 00001 }
00021: PushString(""arg"")
00022: LoadFn { code: 00018, fvars: 00000 }
00023: ApplyArgToFn
00024: ApplyArgToFn
00025:   Return
00026: LoadVar(00000)
00027:   Return
00028: LoadFn { code: 00026, fvars: 00000 }
00029:   Return
00030: PushString("Foo")
00031: PushEffect("effect")
00032: ApplyArgToFn
00033:   Return
00034: LoadVar(00002)
00035: LoadVar(00001)
00036: LoadVar(00000)
00037: Try
00038: ApplyArgToFn
00039: Unwind
00040: ApplyArgToFn
00041: ApplyArgToFn
00042:   Return
00043: LoadFn { code: 00034, fvars: 00002 }
00044:   Return
00045: LoadFn { code: 00043, fvars: 00001 }
00046:   Return
00047: LoadFn { code: 00020, fvars: 00000 }
00048: PushString(""r"")
00049: LoadFn { code: 00028, fvars: 00000 }
00050: ApplyArgToFn
00051: ApplyArgToFn
00052: PushEffect("effect")
00053: LoadFn { code: 00030, fvars: 00000 }
00054: LoadFn { code: 00045, fvars: 00000 }
00055: ApplyArgToFn
00056: ApplyArgToFn
00057: ApplyArgToFn

Foo(Bar)

---

__handle({
    Foo(eff!())
}, eff!, 'r => { ' => {
    Pair(r(Bar), r(Baz))
} })

(__handle
  { (Foo
      (eff!)) }
  eff!
  (=>
    'r
    { (=>
        '
        { (Pair
            (r
              Bar)
            (r
              Baz)) }) }))

( ( ( =>
        =>
          =>
            ( try
              2
              1
              0 )
      =>
        ( Foo
          ( eff!
            [] ) ) )
    eff! )
  ( ( =>
        =>
          0
      "r" )
    =>
      ( ( =>
            =>
              0
          "" )
        =>
          ( ( Pair
              ( 1
                Bar ) )
            ( 1
              Baz ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: PushString("Bar")
00011: LoadVar(00001)
00012: ApplyArgToFn
00013: PushString("Pair")
00014: ApplyArgToFn
00015: PushString("Baz")
00016: LoadVar(00001)
00017: ApplyArgToFn
00018: ApplyFnToArg
00019:   Return
00020: LoadVar(00000)
00021:   Return
00022: LoadFn { code: 00020, fvars: 00000 }
00023:   Return
00024: LoadFn { code: 00010, fvars: 00001 }
00025: PushString("""")
00026: LoadFn { code: 00022, fvars: 00000 }
00027: ApplyArgToFn
00028: ApplyArgToFn
00029:   Return
00030: LoadVar(00000)
00031:   Return
00032: LoadFn { code: 00030, fvars: 00000 }
00033:   Return
00034: PushString("")
00035: PushEffect("eff")
00036: ApplyArgToFn
00037: PushString("Foo")
00038: ApplyArgToFn
00039:   Return
00040: LoadVar(00002)
00041: LoadVar(00001)
00042: LoadVar(00000)
00043: Try
00044: ApplyArgToFn
00045: Unwind
00046: ApplyArgToFn
00047: ApplyArgToFn
00048:   Return
00049: LoadFn { code: 00040, fvars: 00002 }
00050:   Return
00051: LoadFn { code: 00049, fvars: 00001 }
00052:   Return
00053: LoadFn { code: 00024, fvars: 00000 }
00054: PushString(""r"")
00055: LoadFn { code: 00032, fvars: 00000 }
00056: ApplyArgToFn
00057: ApplyArgToFn
00058: PushEffect("eff")
00059: LoadFn { code: 00034, fvars: 00000 }
00060: LoadFn { code: 00051, fvars: 00000 }
00061: ApplyArgToFn
00062: ApplyArgToFn
00063: ApplyArgToFn

Pair(Foo(Bar), Foo(Baz))

---

'foo = Foo, __handle({ List(elems!(foo)) }, elems!, 'r => { 'x => { Twice(r(x, x), r(Baz)) } })

(=
  'foo
  Foo)
(__handle
  { (List
      (elems!
        foo)) }
  elems!
  (=>
    'r
    { (=>
        'x
        { (Twice
            (r
              x
              x)
            (r
              Baz)) }) }))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "foo" )
    Foo )
  =>
    ( ( ( =>
            =>
              =>
                ( try
                  2
                  1
                  0 )
          =>
            ( List
              ( elems!
                1 ) ) )
        elems! )
      ( ( =>
            =>
              0
          "r" )
        =>
          ( ( =>
                =>
                  0
              "x" )
            =>
              ( ( Twice
                  ( ( 1
                      0 )
                    0 ) )
                ( 1
                  Baz ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: ApplyArgToFn
00013: LoadVar(00000)
00014: ApplyFnToArg
00015: PushString("Twice")
00016: ApplyArgToFn
00017: PushString("Baz")
00018: LoadVar(00001)
00019: ApplyArgToFn
00020: ApplyFnToArg
00021:   Return
00022: LoadVar(00000)
00023:   Return
00024: LoadFn { code: 00022, fvars: 00000 }
00025:   Return
00026: LoadFn { code: 00010, fvars: 00001 }
00027: PushString(""x"")
00028: LoadFn { code: 00024, fvars: 00000 }
00029: ApplyArgToFn
00030: ApplyArgToFn
00031:   Return
00032: LoadVar(00000)
00033:   Return
00034: LoadFn { code: 00032, fvars: 00000 }
00035:   Return
00036: LoadVar(00001)
00037: PushEffect("elems")
00038: ApplyArgToFn
00039: PushString("List")
00040: ApplyArgToFn
00041:   Return
00042: LoadVar(00002)
00043: LoadVar(00001)
00044: LoadVar(00000)
00045: Try
00046: ApplyArgToFn
00047: Unwind
00048: ApplyArgToFn
00049: ApplyArgToFn
00050:   Return
00051: LoadFn { code: 00042, fvars: 00002 }
00052:   Return
00053: LoadFn { code: 00051, fvars: 00001 }
00054:   Return
00055: LoadFn { code: 00026, fvars: 00000 }
00056: PushString(""r"")
00057: LoadFn { code: 00034, fvars: 00000 }
00058: ApplyArgToFn
00059: ApplyArgToFn
00060: PushEffect("elems")
00061: LoadFn { code: 00036, fvars: 00001 }
00062: LoadFn { code: 00053, fvars: 00000 }
00063: ApplyArgToFn
00064: ApplyArgToFn
00065: ApplyArgToFn
00066:   Return
00067: LoadVar(00001)
00068: LoadVar(00000)
00069: ApplyArgToFn
00070:   Return
00071: LoadFn { code: 00067, fvars: 00001 }
00072:   Return
00073: LoadFn { code: 00071, fvars: 00000 }
00074:   Return
00075: LoadFn { code: 00055, fvars: 00000 }
00076: PushString("Foo")
00077: PushString(""foo"")
00078: LoadFn { code: 00073, fvars: 00000 }
00079: ApplyArgToFn
00080: ApplyArgToFn
00081: ApplyArgToFn

Twice(List(Foo, Foo), List(Baz))

---

Foo(__handle({
  Baz(effect!(), effect!())
}, effect!, 'r => {
  ' => {
    Bar(r(Qux))
  }
}))

(Foo
  (__handle
    { (Baz
        (effect!)
        (effect!)) }
    effect!
    (=>
      'r
      { (=>
          '
          { (Bar
              (r
                Qux)) }) })))

( Foo
  ( ( ( =>
          =>
            =>
              ( try
                2
                1
                0 )
        =>
          ( ( Baz
              ( effect!
                [] ) )
            ( effect!
              [] ) ) )
      effect! )
    ( ( =>
          =>
            0
        "r" )
      =>
        ( ( =>
              =>
                0
            "" )
          =>
            ( Bar
              ( 1
                Qux ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: PushString("Qux")
00011: LoadVar(00001)
00012: ApplyArgToFn
00013: PushString("Bar")
00014: ApplyArgToFn
00015:   Return
00016: LoadVar(00000)
00017:   Return
00018: LoadFn { code: 00016, fvars: 00000 }
00019:   Return
00020: LoadFn { code: 00010, fvars: 00001 }
00021: PushString("""")
00022: LoadFn { code: 00018, fvars: 00000 }
00023: ApplyArgToFn
00024: ApplyArgToFn
00025:   Return
00026: LoadVar(00000)
00027:   Return
00028: LoadFn { code: 00026, fvars: 00000 }
00029:   Return
00030: PushString("")
00031: PushEffect("effect")
00032: ApplyArgToFn
00033: PushString("Baz")
00034: ApplyArgToFn
00035: PushString("")
00036: PushEffect("effect")
00037: ApplyArgToFn
00038: ApplyFnToArg
00039:   Return
00040: LoadVar(00002)
00041: LoadVar(00001)
00042: LoadVar(00000)
00043: Try
00044: ApplyArgToFn
00045: Unwind
00046: ApplyArgToFn
00047: ApplyArgToFn
00048:   Return
00049: LoadFn { code: 00040, fvars: 00002 }
00050:   Return
00051: LoadFn { code: 00049, fvars: 00001 }
00052:   Return
00053: LoadFn { code: 00020, fvars: 00000 }
00054: PushString(""r"")
00055: LoadFn { code: 00028, fvars: 00000 }
00056: ApplyArgToFn
00057: ApplyArgToFn
00058: PushEffect("effect")
00059: LoadFn { code: 00030, fvars: 00000 }
00060: LoadFn { code: 00051, fvars: 00000 }
00061: ApplyArgToFn
00062: ApplyArgToFn
00063: ApplyArgToFn
00064: PushString("Foo")
00065: ApplyArgToFn

effect!([])

---

__handle({
  List(get!(), get!())
}, get!, 'r => {
  ' => {
    __handle({
      r(Foo)
    }, get!, 'r => {
      ' => {
        r(Bar)
      }
    })
  }
})

(__handle
  { (List
      (get!)
      (get!)) }
  get!
  (=>
    'r
    { (=>
        '
        { (__handle
            { (r
                Foo) }
            get!
            (=>
              'r
              { (=>
                  '
                  { (r
                      Bar) }) })) }) }))

( ( ( =>
        =>
          =>
            ( try
              2
              1
              0 )
      =>
        ( ( List
            ( get!
              [] ) )
          ( get!
            [] ) ) )
    get! )
  ( ( =>
        =>
          0
      "r" )
    =>
      ( ( =>
            =>
              0
          "" )
        =>
          ( ( ( =>
                  =>
                    =>
                      ( try
                        2
                        1
                        0 )
                =>
                  ( 2
                    Foo ) )
              get! )
            ( ( =>
                  =>
                    0
                "r" )
              =>
                ( ( =>
                      =>
                        0
                    "" )
                  =>
                    ( 1
                      Bar ) ) ) ) ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: PushString("Bar")
00011: LoadVar(00001)
00012: ApplyArgToFn
00013:   Return
00014: LoadVar(00000)
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadFn { code: 00010, fvars: 00001 }
00019: PushString("""")
00020: LoadFn { code: 00016, fvars: 00000 }
00021: ApplyArgToFn
00022: ApplyArgToFn
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: PushString("Foo")
00029: LoadVar(00002)
00030: ApplyArgToFn
00031:   Return
00032: LoadVar(00002)
00033: LoadVar(00001)
00034: LoadVar(00000)
00035: Try
00036: ApplyArgToFn
00037: Unwind
00038: ApplyArgToFn
00039: ApplyArgToFn
00040:   Return
00041: LoadFn { code: 00032, fvars: 00002 }
00042:   Return
00043: LoadFn { code: 00041, fvars: 00001 }
00044:   Return
00045: LoadFn { code: 00018, fvars: 00000 }
00046: PushString(""r"")
00047: LoadFn { code: 00026, fvars: 00000 }
00048: ApplyArgToFn
00049: ApplyArgToFn
00050: PushEffect("get")
00051: LoadFn { code: 00028, fvars: 00002 }
00052: LoadFn { code: 00043, fvars: 00000 }
00053: ApplyArgToFn
00054: ApplyArgToFn
00055: ApplyArgToFn
00056:   Return
00057: LoadVar(00000)
00058:   Return
00059: LoadFn { code: 00057, fvars: 00000 }
00060:   Return
00061: LoadFn { code: 00045, fvars: 00001 }
00062: PushString("""")
00063: LoadFn { code: 00059, fvars: 00000 }
00064: ApplyArgToFn
00065: ApplyArgToFn
00066:   Return
00067: LoadVar(00000)
00068:   Return
00069: LoadFn { code: 00067, fvars: 00000 }
00070:   Return
00071: PushString("")
00072: PushEffect("get")
00073: ApplyArgToFn
00074: PushString("List")
00075: ApplyArgToFn
00076: PushString("")
00077: PushEffect("get")
00078: ApplyArgToFn
00079: ApplyFnToArg
00080:   Return
00081: LoadVar(00002)
00082: LoadVar(00001)
00083: LoadVar(00000)
00084: Try
00085: ApplyArgToFn
00086: Unwind
00087: ApplyArgToFn
00088: ApplyArgToFn
00089:   Return
00090: LoadFn { code: 00081, fvars: 00002 }
00091:   Return
00092: LoadFn { code: 00090, fvars: 00001 }
00093:   Return
00094: LoadFn { code: 00061, fvars: 00000 }
00095: PushString(""r"")
00096: LoadFn { code: 00069, fvars: 00000 }
00097: ApplyArgToFn
00098: ApplyArgToFn
00099: PushEffect("get")
00100: LoadFn { code: 00071, fvars: 00000 }
00101: LoadFn { code: 00092, fvars: 00000 }
00102: ApplyArgToFn
00103: ApplyArgToFn
00104: ApplyArgToFn

List(Foo, Bar)

---

__handle({
    __handle({ throw!() }, throw!, '_ => { '_ => {}})
    throw!()
}, throw!, '_ => { '_ => {} })

(__handle
  { (__handle
      { (throw!) }
      throw!
      (=>
        '_
        { (=>
            '_
            {  }) }))
    (throw!) }
  throw!
  (=>
    '_
    { (=>
        '_
        {  }) }))

( ( ( =>
        =>
          =>
            ( try
              2
              1
              0 )
      =>
        ( =>
            ( throw!
              [] )
          ( ( ( =>
                  =>
                    =>
                      ( try
                        2
                        1
                        0 )
                =>
                  ( throw!
                    [] ) )
              throw! )
            ( ( =>
                  =>
                    0
                "_" )
              =>
                ( ( =>
                      =>
                        0
                    "_" )
                  =>
                    [] ) ) ) ) )
    throw! )
  ( ( =>
        =>
          0
      "_" )
    =>
      ( ( =>
            =>
              0
          "_" )
        =>
          [] ) ) )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: PushString("")
00011:   Return
00012: LoadVar(00000)
00013:   Return
00014: LoadFn { code: 00012, fvars: 00000 }
00015:   Return
00016: LoadFn { code: 00010, fvars: 00000 }
00017: PushString(""_"")
00018: LoadFn { code: 00014, fvars: 00000 }
00019: ApplyArgToFn
00020: ApplyArgToFn
00021:   Return
00022: LoadVar(00000)
00023:   Return
00024: LoadFn { code: 00022, fvars: 00000 }
00025:   Return
00026: PushString("")
00027:   Return
00028: LoadVar(00000)
00029:   Return
00030: LoadFn { code: 00028, fvars: 00000 }
00031:   Return
00032: LoadFn { code: 00026, fvars: 00000 }
00033: PushString(""_"")
00034: LoadFn { code: 00030, fvars: 00000 }
00035: ApplyArgToFn
00036: ApplyArgToFn
00037:   Return
00038: LoadVar(00000)
00039:   Return
00040: LoadFn { code: 00038, fvars: 00000 }
00041:   Return
00042: PushString("")
00043: PushEffect("throw")
00044: ApplyArgToFn
00045:   Return
00046: LoadVar(00002)
00047: LoadVar(00001)
00048: LoadVar(00000)
00049: Try
00050: ApplyArgToFn
00051: Unwind
00052: ApplyArgToFn
00053: ApplyArgToFn
00054:   Return
00055: LoadFn { code: 00046, fvars: 00002 }
00056:   Return
00057: LoadFn { code: 00055, fvars: 00001 }
00058:   Return
00059: PushString("")
00060: PushEffect("throw")
00061: ApplyArgToFn
00062:   Return
00063: LoadFn { code: 00032, fvars: 00000 }
00064: PushString(""_"")
00065: LoadFn { code: 00040, fvars: 00000 }
00066: ApplyArgToFn
00067: ApplyArgToFn
00068: PushEffect("throw")
00069: LoadFn { code: 00042, fvars: 00000 }
00070: LoadFn { code: 00057, fvars: 00000 }
00071: ApplyArgToFn
00072: ApplyArgToFn
00073: ApplyArgToFn
00074: LoadFn { code: 00059, fvars: 00000 }
00075: ApplyArgToFn
00076:   Return
00077: LoadVar(00002)
00078: LoadVar(00001)
00079: LoadVar(00000)
00080: Try
00081: ApplyArgToFn
00082: Unwind
00083: ApplyArgToFn
00084: ApplyArgToFn
00085:   Return
00086: LoadFn { code: 00077, fvars: 00002 }
00087:   Return
00088: LoadFn { code: 00086, fvars: 00001 }
00089:   Return
00090: LoadFn { code: 00016, fvars: 00000 }
00091: PushString(""_"")
00092: LoadFn { code: 00024, fvars: 00000 }
00093: ApplyArgToFn
00094: ApplyArgToFn
00095: PushEffect("throw")
00096: LoadFn { code: 00063, fvars: 00000 }
00097: LoadFn { code: 00088, fvars: 00000 }
00098: ApplyArgToFn
00099: ApplyArgToFn
00100: ApplyArgToFn

[]