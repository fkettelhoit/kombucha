print!(Foo)

(print!
  Foo)

( print!
  Foo )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: PushEffect("print")
00011: PushString("Foo")
00012: ApplyFnToArg

"Foo"
[]

---

print!(Foo), print!(Bar), print!(FooBar)

(print!
  Foo)
(print!
  Bar)
(print!
  FooBar)

( =>
    ( =>
        ( print!
          FooBar )
      ( print!
        Bar ) )
  ( print!
    Foo ) )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: PushEffect("print")
00011: PushString("FooBar")
00012: ApplyFnToArg
00013:   Return
00014: LoadFn(00010, 00000)
00015: PushEffect("print")
00016: PushString("Bar")
00017: ApplyFnToArg
00018: ApplyFnToArg
00019:   Return
00020: LoadFn(00014, 00000)
00021: PushEffect("print")
00022: PushString("Foo")
00023: ApplyFnToArg
00024: ApplyFnToArg

"Foo"
"Bar"
"FooBar"
[]

---

'foo = ('x => { 'y => { pair!(Args(x, y)) } })
try({ foo(Bar, Baz) }, pair!, 'r => { 'arg => { Pair(arg) } })

(=
  'foo
  (=>
    'x
    { (=>
        'y
        { (pair!
            (Args
              x
              y)) }) }))
(try
  { (foo
      Bar
      Baz) }
  pair!
  (=>
    'r
    { (=>
        'arg
        { (Pair
            arg) }) }))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "foo" )
    ( ( =>
          =>
            0
        "x" )
      =>
        ( ( =>
              =>
                0
            "y" )
          =>
            ( pair!
              ( ( Args
                  1 )
                0 ) ) ) ) )
  =>
    ( ( ( =>
            =>
              =>
                ( try
                  2
                  1
                  0 )
          =>
            ( ( 1
                Bar )
              Baz ) )
        pair! )
      ( ( =>
            =>
              0
          "r" )
        =>
          ( ( =>
                =>
                  0
              "arg" )
            =>
              ( Pair
                0 ) ) ) ) )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: ApplyFnToArg
00013:   Return
00014: LoadFn(00010, 00001)
00015:   Return
00016: LoadFn(00014, 00000)
00017:   Return
00018: LoadVar(00000)
00019:   Return
00020: LoadFn(00018, 00000)
00021:   Return
00022: LoadVar(00000)
00023:   Return
00024: LoadFn(00022, 00000)
00025:   Return
00026: PushEffect("pair")
00027: PushString("Args")
00028: LoadVar(00001)
00029: ApplyFnToArg
00030: LoadVar(00000)
00031: ApplyFnToArg
00032: ApplyFnToArg
00033:   Return
00034: LoadFn(00024, 00000)
00035: PushString(""y"")
00036: ApplyFnToArg
00037: LoadFn(00026, 00001)
00038: ApplyFnToArg
00039:   Return
00040: LoadVar(00002)
00041: LoadVar(00001)
00042: LoadVar(00000)
00043: Try
00044: ApplyArgToFn
00045: Unwind
00046: ApplyArgToFn
00047: ApplyArgToFn
00048:   Return
00049: LoadFn(00040, 00002)
00050:   Return
00051: LoadFn(00049, 00001)
00052:   Return
00053: LoadVar(00001)
00054: PushString("Bar")
00055: ApplyFnToArg
00056: PushString("Baz")
00057: ApplyFnToArg
00058:   Return
00059: LoadVar(00000)
00060:   Return
00061: LoadFn(00059, 00000)
00062:   Return
00063: LoadVar(00000)
00064:   Return
00065: LoadFn(00063, 00000)
00066:   Return
00067: PushString("Pair")
00068: LoadVar(00000)
00069: ApplyFnToArg
00070:   Return
00071: LoadFn(00065, 00000)
00072: PushString(""arg"")
00073: ApplyFnToArg
00074: LoadFn(00067, 00000)
00075: ApplyFnToArg
00076:   Return
00077: LoadFn(00051, 00000)
00078: LoadFn(00053, 00001)
00079: ApplyFnToArg
00080: PushEffect("pair")
00081: ApplyFnToArg
00082: LoadFn(00061, 00000)
00083: PushString(""r"")
00084: ApplyFnToArg
00085: LoadFn(00071, 00000)
00086: ApplyFnToArg
00087: ApplyFnToArg
00088:   Return
00089: LoadFn(00016, 00000)
00090: PushString(""foo"")
00091: ApplyFnToArg
00092: LoadFn(00020, 00000)
00093: PushString(""x"")
00094: ApplyFnToArg
00095: LoadFn(00034, 00000)
00096: ApplyFnToArg
00097: ApplyFnToArg
00098: LoadFn(00077, 00000)
00099: ApplyFnToArg

Pair(Args(Bar, Baz))

---

try({ Foo }, unused!, 'r => { ' => { Error }})

(try
  { Foo }
  unused!
  (=>
    'r
    { (=>
        '
        { Error }) }))

( ( ( =>
        =>
          =>
            ( try
              2
              1
              0 )
      =>
        Foo )
    unused! )
  ( ( =>
        =>
          0
      "r" )
    =>
      ( ( =>
            =>
              0
          "" )
        =>
          Error ) ) )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00002)
00011: LoadVar(00001)
00012: LoadVar(00000)
00013: Try
00014: ApplyArgToFn
00015: Unwind
00016: ApplyArgToFn
00017: ApplyArgToFn
00018:   Return
00019: LoadFn(00010, 00002)
00020:   Return
00021: LoadFn(00019, 00001)
00022:   Return
00023: PushString("Foo")
00024:   Return
00025: LoadVar(00000)
00026:   Return
00027: LoadFn(00025, 00000)
00028:   Return
00029: LoadVar(00000)
00030:   Return
00031: LoadFn(00029, 00000)
00032:   Return
00033: PushString("Error")
00034:   Return
00035: LoadFn(00031, 00000)
00036: PushString("""")
00037: ApplyFnToArg
00038: LoadFn(00033, 00000)
00039: ApplyFnToArg
00040:   Return
00041: LoadFn(00021, 00000)
00042: LoadFn(00023, 00000)
00043: ApplyFnToArg
00044: PushEffect("unused")
00045: ApplyFnToArg
00046: LoadFn(00027, 00000)
00047: PushString(""r"")
00048: ApplyFnToArg
00049: LoadFn(00035, 00000)
00050: ApplyFnToArg
00051: ApplyFnToArg

Foo

---

try({ effect!(Foo) }, effect!, 'r => { 'arg => { arg(r(Bar)) }})

(try
  { (effect!
      Foo) }
  effect!
  (=>
    'r
    { (=>
        'arg
        { (arg
            (r
              Bar)) }) }))

( ( ( =>
        =>
          =>
            ( try
              2
              1
              0 )
      =>
        ( effect!
          Foo ) )
    effect! )
  ( ( =>
        =>
          0
      "r" )
    =>
      ( ( =>
            =>
              0
          "arg" )
        =>
          ( 0
            ( 1
              Bar ) ) ) ) )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00002)
00011: LoadVar(00001)
00012: LoadVar(00000)
00013: Try
00014: ApplyArgToFn
00015: Unwind
00016: ApplyArgToFn
00017: ApplyArgToFn
00018:   Return
00019: LoadFn(00010, 00002)
00020:   Return
00021: LoadFn(00019, 00001)
00022:   Return
00023: PushEffect("effect")
00024: PushString("Foo")
00025: ApplyFnToArg
00026:   Return
00027: LoadVar(00000)
00028:   Return
00029: LoadFn(00027, 00000)
00030:   Return
00031: LoadVar(00000)
00032:   Return
00033: LoadFn(00031, 00000)
00034:   Return
00035: LoadVar(00000)
00036: LoadVar(00001)
00037: PushString("Bar")
00038: ApplyFnToArg
00039: ApplyFnToArg
00040:   Return
00041: LoadFn(00033, 00000)
00042: PushString(""arg"")
00043: ApplyFnToArg
00044: LoadFn(00035, 00001)
00045: ApplyFnToArg
00046:   Return
00047: LoadFn(00021, 00000)
00048: LoadFn(00023, 00000)
00049: ApplyFnToArg
00050: PushEffect("effect")
00051: ApplyFnToArg
00052: LoadFn(00029, 00000)
00053: PushString(""r"")
00054: ApplyFnToArg
00055: LoadFn(00041, 00000)
00056: ApplyFnToArg
00057: ApplyFnToArg

Foo(Bar)

---

try({
    Foo(eff!())
}, eff!, 'r => { ' => {
    Pair(r(Bar), r(Baz))
} })

(try
  { (Foo
      (eff!)) }
  eff!
  (=>
    'r
    { (=>
        '
        { (Pair
            (r
              Bar)
            (r
              Baz)) }) }))

( ( ( =>
        =>
          =>
            ( try
              2
              1
              0 )
      =>
        ( Foo
          ( eff!
            [] ) ) )
    eff! )
  ( ( =>
        =>
          0
      "r" )
    =>
      ( ( =>
            =>
              0
          "" )
        =>
          ( ( Pair
              ( 1
                Bar ) )
            ( 1
              Baz ) ) ) ) )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00002)
00011: LoadVar(00001)
00012: LoadVar(00000)
00013: Try
00014: ApplyArgToFn
00015: Unwind
00016: ApplyArgToFn
00017: ApplyArgToFn
00018:   Return
00019: LoadFn(00010, 00002)
00020:   Return
00021: LoadFn(00019, 00001)
00022:   Return
00023: PushString("Foo")
00024: PushEffect("eff")
00025: PushString("")
00026: ApplyFnToArg
00027: ApplyFnToArg
00028:   Return
00029: LoadVar(00000)
00030:   Return
00031: LoadFn(00029, 00000)
00032:   Return
00033: LoadVar(00000)
00034:   Return
00035: LoadFn(00033, 00000)
00036:   Return
00037: PushString("Pair")
00038: LoadVar(00001)
00039: PushString("Bar")
00040: ApplyFnToArg
00041: ApplyFnToArg
00042: LoadVar(00001)
00043: PushString("Baz")
00044: ApplyFnToArg
00045: ApplyFnToArg
00046:   Return
00047: LoadFn(00035, 00000)
00048: PushString("""")
00049: ApplyFnToArg
00050: LoadFn(00037, 00001)
00051: ApplyFnToArg
00052:   Return
00053: LoadFn(00021, 00000)
00054: LoadFn(00023, 00000)
00055: ApplyFnToArg
00056: PushEffect("eff")
00057: ApplyFnToArg
00058: LoadFn(00031, 00000)
00059: PushString(""r"")
00060: ApplyFnToArg
00061: LoadFn(00047, 00000)
00062: ApplyFnToArg
00063: ApplyFnToArg

Pair(Foo(Bar), Foo(Baz))

---

'foo = Foo, try({ List(elems!(foo)) }, elems!, 'r => { 'x => { Twice(r(x, x), r(Baz)) } })

(=
  'foo
  Foo)
(try
  { (List
      (elems!
        foo)) }
  elems!
  (=>
    'r
    { (=>
        'x
        { (Twice
            (r
              x
              x)
            (r
              Baz)) }) }))

( ( ( =>
        =>
          =>
            ( 0
              1 )
      "foo" )
    Foo )
  =>
    ( ( ( =>
            =>
              =>
                ( try
                  2
                  1
                  0 )
          =>
            ( List
              ( elems!
                1 ) ) )
        elems! )
      ( ( =>
            =>
              0
          "r" )
        =>
          ( ( =>
                =>
                  0
              "x" )
            =>
              ( ( Twice
                  ( ( 1
                      0 )
                    0 ) )
                ( 1
                  Baz ) ) ) ) ) )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00000)
00011: LoadVar(00001)
00012: ApplyFnToArg
00013:   Return
00014: LoadFn(00010, 00001)
00015:   Return
00016: LoadFn(00014, 00000)
00017:   Return
00018: LoadVar(00002)
00019: LoadVar(00001)
00020: LoadVar(00000)
00021: Try
00022: ApplyArgToFn
00023: Unwind
00024: ApplyArgToFn
00025: ApplyArgToFn
00026:   Return
00027: LoadFn(00018, 00002)
00028:   Return
00029: LoadFn(00027, 00001)
00030:   Return
00031: PushString("List")
00032: PushEffect("elems")
00033: LoadVar(00001)
00034: ApplyFnToArg
00035: ApplyFnToArg
00036:   Return
00037: LoadVar(00000)
00038:   Return
00039: LoadFn(00037, 00000)
00040:   Return
00041: LoadVar(00000)
00042:   Return
00043: LoadFn(00041, 00000)
00044:   Return
00045: PushString("Twice")
00046: LoadVar(00001)
00047: LoadVar(00000)
00048: ApplyFnToArg
00049: LoadVar(00000)
00050: ApplyFnToArg
00051: ApplyFnToArg
00052: LoadVar(00001)
00053: PushString("Baz")
00054: ApplyFnToArg
00055: ApplyFnToArg
00056:   Return
00057: LoadFn(00043, 00000)
00058: PushString(""x"")
00059: ApplyFnToArg
00060: LoadFn(00045, 00001)
00061: ApplyFnToArg
00062:   Return
00063: LoadFn(00029, 00000)
00064: LoadFn(00031, 00001)
00065: ApplyFnToArg
00066: PushEffect("elems")
00067: ApplyFnToArg
00068: LoadFn(00039, 00000)
00069: PushString(""r"")
00070: ApplyFnToArg
00071: LoadFn(00057, 00000)
00072: ApplyFnToArg
00073: ApplyFnToArg
00074:   Return
00075: LoadFn(00016, 00000)
00076: PushString(""foo"")
00077: ApplyFnToArg
00078: PushString("Foo")
00079: ApplyFnToArg
00080: LoadFn(00063, 00000)
00081: ApplyFnToArg

Twice(List(Foo, Foo), List(Baz))

---

Foo(try({
  Baz(effect!(), effect!())
}, effect!, 'r => {
  ' => {
    Bar(r(Qux))
  }
}))

(Foo
  (try
    { (Baz
        (effect!)
        (effect!)) }
    effect!
    (=>
      'r
      { (=>
          '
          { (Bar
              (r
                Qux)) }) })))

( Foo
  ( ( ( =>
          =>
            =>
              ( try
                2
                1
                0 )
        =>
          ( ( Baz
              ( effect!
                [] ) )
            ( effect!
              [] ) ) )
      effect! )
    ( ( =>
          =>
            0
        "r" )
      =>
        ( ( =>
              =>
                0
            "" )
          =>
            ( Bar
              ( 1
                Qux ) ) ) ) ) )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00002)
00011: LoadVar(00001)
00012: LoadVar(00000)
00013: Try
00014: ApplyArgToFn
00015: Unwind
00016: ApplyArgToFn
00017: ApplyArgToFn
00018:   Return
00019: LoadFn(00010, 00002)
00020:   Return
00021: LoadFn(00019, 00001)
00022:   Return
00023: PushString("Baz")
00024: PushEffect("effect")
00025: PushString("")
00026: ApplyFnToArg
00027: ApplyFnToArg
00028: PushEffect("effect")
00029: PushString("")
00030: ApplyFnToArg
00031: ApplyFnToArg
00032:   Return
00033: LoadVar(00000)
00034:   Return
00035: LoadFn(00033, 00000)
00036:   Return
00037: LoadVar(00000)
00038:   Return
00039: LoadFn(00037, 00000)
00040:   Return
00041: PushString("Bar")
00042: LoadVar(00001)
00043: PushString("Qux")
00044: ApplyFnToArg
00045: ApplyFnToArg
00046:   Return
00047: LoadFn(00039, 00000)
00048: PushString("""")
00049: ApplyFnToArg
00050: LoadFn(00041, 00001)
00051: ApplyFnToArg
00052:   Return
00053: PushString("Foo")
00054: LoadFn(00021, 00000)
00055: LoadFn(00023, 00000)
00056: ApplyFnToArg
00057: PushEffect("effect")
00058: ApplyFnToArg
00059: LoadFn(00035, 00000)
00060: PushString(""r"")
00061: ApplyFnToArg
00062: LoadFn(00047, 00000)
00063: ApplyFnToArg
00064: ApplyFnToArg
00065: ApplyFnToArg

effect!([])

---

try({
  List(get!(), get!())
}, get!, 'r => {
  ' => {
    try({
      r(Foo)
    }, get!, 'r => {
      ' => {
        r(Bar)
      }
    })
  }
})

(try
  { (List
      (get!)
      (get!)) }
  get!
  (=>
    'r
    { (=>
        '
        { (try
            { (r
                Foo) }
            get!
            (=>
              'r
              { (=>
                  '
                  { (r
                      Bar) }) })) }) }))

( ( ( =>
        =>
          =>
            ( try
              2
              1
              0 )
      =>
        ( ( List
            ( get!
              [] ) )
          ( get!
            [] ) ) )
    get! )
  ( ( =>
        =>
          0
      "r" )
    =>
      ( ( =>
            =>
              0
          "" )
        =>
          ( ( ( =>
                  =>
                    =>
                      ( try
                        2
                        1
                        0 )
                =>
                  ( 2
                    Foo ) )
              get! )
            ( ( =>
                  =>
                    0
                "r" )
              =>
                ( ( =>
                      =>
                        0
                    "" )
                  =>
                    ( 1
                      Bar ) ) ) ) ) ) )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00002)
00011: LoadVar(00001)
00012: LoadVar(00000)
00013: Try
00014: ApplyArgToFn
00015: Unwind
00016: ApplyArgToFn
00017: ApplyArgToFn
00018:   Return
00019: LoadFn(00010, 00002)
00020:   Return
00021: LoadFn(00019, 00001)
00022:   Return
00023: PushString("List")
00024: PushEffect("get")
00025: PushString("")
00026: ApplyFnToArg
00027: ApplyFnToArg
00028: PushEffect("get")
00029: PushString("")
00030: ApplyFnToArg
00031: ApplyFnToArg
00032:   Return
00033: LoadVar(00000)
00034:   Return
00035: LoadFn(00033, 00000)
00036:   Return
00037: LoadVar(00000)
00038:   Return
00039: LoadFn(00037, 00000)
00040:   Return
00041: LoadVar(00002)
00042: LoadVar(00001)
00043: LoadVar(00000)
00044: Try
00045: ApplyArgToFn
00046: Unwind
00047: ApplyArgToFn
00048: ApplyArgToFn
00049:   Return
00050: LoadFn(00041, 00002)
00051:   Return
00052: LoadFn(00050, 00001)
00053:   Return
00054: LoadVar(00002)
00055: PushString("Foo")
00056: ApplyFnToArg
00057:   Return
00058: LoadVar(00000)
00059:   Return
00060: LoadFn(00058, 00000)
00061:   Return
00062: LoadVar(00000)
00063:   Return
00064: LoadFn(00062, 00000)
00065:   Return
00066: LoadVar(00001)
00067: PushString("Bar")
00068: ApplyFnToArg
00069:   Return
00070: LoadFn(00064, 00000)
00071: PushString("""")
00072: ApplyFnToArg
00073: LoadFn(00066, 00001)
00074: ApplyFnToArg
00075:   Return
00076: LoadFn(00052, 00000)
00077: LoadFn(00054, 00002)
00078: ApplyFnToArg
00079: PushEffect("get")
00080: ApplyFnToArg
00081: LoadFn(00060, 00000)
00082: PushString(""r"")
00083: ApplyFnToArg
00084: LoadFn(00070, 00000)
00085: ApplyFnToArg
00086: ApplyFnToArg
00087:   Return
00088: LoadFn(00039, 00000)
00089: PushString("""")
00090: ApplyFnToArg
00091: LoadFn(00076, 00001)
00092: ApplyFnToArg
00093:   Return
00094: LoadFn(00021, 00000)
00095: LoadFn(00023, 00000)
00096: ApplyFnToArg
00097: PushEffect("get")
00098: ApplyFnToArg
00099: LoadFn(00035, 00000)
00100: PushString(""r"")
00101: ApplyFnToArg
00102: LoadFn(00088, 00000)
00103: ApplyFnToArg
00104: ApplyFnToArg

List(Foo, Bar)

---

try({
    try({ throw!() }, throw!, '_ => { '_ => {}})
    throw!()
}, throw!, '_ => { '_ => {} })

(try
  { (try
      { (throw!) }
      throw!
      (=>
        '_
        { (=>
            '_
            {  }) }))
    (throw!) }
  throw!
  (=>
    '_
    { (=>
        '_
        {  }) }))

( ( ( =>
        =>
          =>
            ( try
              2
              1
              0 )
      =>
        ( =>
            ( throw!
              [] )
          ( ( ( =>
                  =>
                    =>
                      ( try
                        2
                        1
                        0 )
                =>
                  ( throw!
                    [] ) )
              throw! )
            ( ( =>
                  =>
                    0
                "_" )
              =>
                ( ( =>
                      =>
                        0
                    "_" )
                  =>
                    [] ) ) ) ) )
    throw! )
  ( ( =>
        =>
          0
      "_" )
    =>
      ( ( =>
            =>
              0
          "_" )
        =>
          [] ) ) )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00002)
00011: LoadVar(00001)
00012: LoadVar(00000)
00013: Try
00014: ApplyArgToFn
00015: Unwind
00016: ApplyArgToFn
00017: ApplyArgToFn
00018:   Return
00019: LoadFn(00010, 00002)
00020:   Return
00021: LoadFn(00019, 00001)
00022:   Return
00023: PushEffect("throw")
00024: PushString("")
00025: ApplyFnToArg
00026:   Return
00027: LoadVar(00002)
00028: LoadVar(00001)
00029: LoadVar(00000)
00030: Try
00031: ApplyArgToFn
00032: Unwind
00033: ApplyArgToFn
00034: ApplyArgToFn
00035:   Return
00036: LoadFn(00027, 00002)
00037:   Return
00038: LoadFn(00036, 00001)
00039:   Return
00040: PushEffect("throw")
00041: PushString("")
00042: ApplyFnToArg
00043:   Return
00044: LoadVar(00000)
00045:   Return
00046: LoadFn(00044, 00000)
00047:   Return
00048: LoadVar(00000)
00049:   Return
00050: LoadFn(00048, 00000)
00051:   Return
00052: PushString("")
00053:   Return
00054: LoadFn(00050, 00000)
00055: PushString(""_"")
00056: ApplyFnToArg
00057: LoadFn(00052, 00000)
00058: ApplyFnToArg
00059:   Return
00060: LoadFn(00023, 00000)
00061: LoadFn(00038, 00000)
00062: LoadFn(00040, 00000)
00063: ApplyFnToArg
00064: PushEffect("throw")
00065: ApplyFnToArg
00066: LoadFn(00046, 00000)
00067: PushString(""_"")
00068: ApplyFnToArg
00069: LoadFn(00054, 00000)
00070: ApplyFnToArg
00071: ApplyFnToArg
00072: ApplyFnToArg
00073:   Return
00074: LoadVar(00000)
00075:   Return
00076: LoadFn(00074, 00000)
00077:   Return
00078: LoadVar(00000)
00079:   Return
00080: LoadFn(00078, 00000)
00081:   Return
00082: PushString("")
00083:   Return
00084: LoadFn(00080, 00000)
00085: PushString(""_"")
00086: ApplyFnToArg
00087: LoadFn(00082, 00000)
00088: ApplyFnToArg
00089:   Return
00090: LoadFn(00021, 00000)
00091: LoadFn(00060, 00000)
00092: ApplyFnToArg
00093: PushEffect("throw")
00094: ApplyFnToArg
00095: LoadFn(00076, 00000)
00096: PushString(""_"")
00097: ApplyFnToArg
00098: LoadFn(00084, 00000)
00099: ApplyFnToArg
00100: ApplyFnToArg

[]