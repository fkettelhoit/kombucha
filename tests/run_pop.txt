__unpack(Foo(Bar, Baz), 'f => { 'x => { x } }, { Error })

(__unpack
  (Foo
    Bar
    Baz)
  (=>
    'f
    { (=>
        'x
        { x }) })
  { Error })

( ( ( =>
        =>
          =>
            ( pop
              2
              1
              0 )
      ( ( Foo
          Bar )
        Baz ) )
    ( ( =>
          =>
            0
        "f" )
      =>
        ( ( =>
              =>
                0
            "x" )
          =>
            0 ) ) )
  =>
    Error )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00002)
00011: LoadVar(00001)
00012: LoadVar(00000)
00013: Unpack
00014: ApplyArgToFn
00015: ApplyArgToFn
00016:   Return
00017: LoadFn(00010, 00002)
00018:   Return
00019: LoadFn(00017, 00001)
00020:   Return
00021: LoadVar(00000)
00022:   Return
00023: LoadFn(00021, 00000)
00024:   Return
00025: LoadVar(00000)
00026:   Return
00027: LoadFn(00025, 00000)
00028:   Return
00029: LoadVar(00000)
00030:   Return
00031: LoadFn(00027, 00000)
00032: PushString(""x"")
00033: ApplyFnToArg
00034: LoadFn(00029, 00000)
00035: ApplyFnToArg
00036:   Return
00037: PushString("Error")
00038:   Return
00039: LoadFn(00019, 00000)
00040: PushString("Foo")
00041: PushString("Bar")
00042: ApplyFnToArg
00043: PushString("Baz")
00044: ApplyFnToArg
00045: ApplyFnToArg
00046: LoadFn(00023, 00000)
00047: PushString(""f"")
00048: ApplyFnToArg
00049: LoadFn(00031, 00000)
00050: ApplyFnToArg
00051: ApplyFnToArg
00052: LoadFn(00037, 00000)
00053: ApplyFnToArg

Baz

---

__unpack(Foo, 'f => { 'x => { x } }, { Error })

(__unpack
  Foo
  (=>
    'f
    { (=>
        'x
        { x }) })
  { Error })

( ( ( =>
        =>
          =>
            ( pop
              2
              1
              0 )
      Foo )
    ( ( =>
          =>
            0
        "f" )
      =>
        ( ( =>
              =>
                0
            "x" )
          =>
            0 ) ) )
  =>
    Error )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00002)
00011: LoadVar(00001)
00012: LoadVar(00000)
00013: Unpack
00014: ApplyArgToFn
00015: ApplyArgToFn
00016:   Return
00017: LoadFn(00010, 00002)
00018:   Return
00019: LoadFn(00017, 00001)
00020:   Return
00021: LoadVar(00000)
00022:   Return
00023: LoadFn(00021, 00000)
00024:   Return
00025: LoadVar(00000)
00026:   Return
00027: LoadFn(00025, 00000)
00028:   Return
00029: LoadVar(00000)
00030:   Return
00031: LoadFn(00027, 00000)
00032: PushString(""x"")
00033: ApplyFnToArg
00034: LoadFn(00029, 00000)
00035: ApplyFnToArg
00036:   Return
00037: PushString("Error")
00038:   Return
00039: LoadFn(00019, 00000)
00040: PushString("Foo")
00041: ApplyFnToArg
00042: LoadFn(00023, 00000)
00043: PushString(""f"")
00044: ApplyFnToArg
00045: LoadFn(00031, 00000)
00046: ApplyFnToArg
00047: ApplyFnToArg
00048: LoadFn(00037, 00000)
00049: ApplyFnToArg

Error

---

__unpack(Foo(Bar, Baz), 'f => { 'x => { f } }, { Error })

(__unpack
  (Foo
    Bar
    Baz)
  (=>
    'f
    { (=>
        'x
        { f }) })
  { Error })

( ( ( =>
        =>
          =>
            ( pop
              2
              1
              0 )
      ( ( Foo
          Bar )
        Baz ) )
    ( ( =>
          =>
            0
        "f" )
      =>
        ( ( =>
              =>
                0
            "x" )
          =>
            1 ) ) )
  =>
    Error )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00002)
00011: LoadVar(00001)
00012: LoadVar(00000)
00013: Unpack
00014: ApplyArgToFn
00015: ApplyArgToFn
00016:   Return
00017: LoadFn(00010, 00002)
00018:   Return
00019: LoadFn(00017, 00001)
00020:   Return
00021: LoadVar(00000)
00022:   Return
00023: LoadFn(00021, 00000)
00024:   Return
00025: LoadVar(00000)
00026:   Return
00027: LoadFn(00025, 00000)
00028:   Return
00029: LoadVar(00001)
00030:   Return
00031: LoadFn(00027, 00000)
00032: PushString(""x"")
00033: ApplyFnToArg
00034: LoadFn(00029, 00001)
00035: ApplyFnToArg
00036:   Return
00037: PushString("Error")
00038:   Return
00039: LoadFn(00019, 00000)
00040: PushString("Foo")
00041: PushString("Bar")
00042: ApplyFnToArg
00043: PushString("Baz")
00044: ApplyFnToArg
00045: ApplyFnToArg
00046: LoadFn(00023, 00000)
00047: PushString(""f"")
00048: ApplyFnToArg
00049: LoadFn(00031, 00000)
00050: ApplyFnToArg
00051: ApplyFnToArg
00052: LoadFn(00037, 00000)
00053: ApplyFnToArg

Foo(Bar)

---

__unpack(Foo(Bar), 'f => { 'x => { f } }, { Error })

(__unpack
  (Foo
    Bar)
  (=>
    'f
    { (=>
        'x
        { f }) })
  { Error })

( ( ( =>
        =>
          =>
            ( pop
              2
              1
              0 )
      ( Foo
        Bar ) )
    ( ( =>
          =>
            0
        "f" )
      =>
        ( ( =>
              =>
                0
            "x" )
          =>
            1 ) ) )
  =>
    Error )

00000: LoadFn(00002, 00001)
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000, 00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00002)
00011: LoadVar(00001)
00012: LoadVar(00000)
00013: Unpack
00014: ApplyArgToFn
00015: ApplyArgToFn
00016:   Return
00017: LoadFn(00010, 00002)
00018:   Return
00019: LoadFn(00017, 00001)
00020:   Return
00021: LoadVar(00000)
00022:   Return
00023: LoadFn(00021, 00000)
00024:   Return
00025: LoadVar(00000)
00026:   Return
00027: LoadFn(00025, 00000)
00028:   Return
00029: LoadVar(00001)
00030:   Return
00031: LoadFn(00027, 00000)
00032: PushString(""x"")
00033: ApplyFnToArg
00034: LoadFn(00029, 00001)
00035: ApplyFnToArg
00036:   Return
00037: PushString("Error")
00038:   Return
00039: LoadFn(00019, 00000)
00040: PushString("Foo")
00041: PushString("Bar")
00042: ApplyFnToArg
00043: ApplyFnToArg
00044: LoadFn(00023, 00000)
00045: PushString(""f"")
00046: ApplyFnToArg
00047: LoadFn(00031, 00000)
00048: ApplyFnToArg
00049: ApplyFnToArg
00050: LoadFn(00037, 00000)
00051: ApplyFnToArg

Foo