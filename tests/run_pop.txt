__unpack(Foo(Bar, Baz), :f => { :x => { x } }, { Error })

(__unpack
  (Foo
    Bar
    Baz)
  (=>
    :f
    { (=>
        :x
        { x }) })
  { Error })

( ( ( =>
        =>
          =>
            ( pop
              2
              1
              0 )
      ( ( Foo
          Bar )
        Baz ) )
    ( ( =>
          =>
            0
        "f" )
      =>
        ( ( =>
              =>
                0
            "x" )
          =>
            0 ) ) )
  =>
    Error )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: PushString("Error")
00011:   Return
00012: LoadVar(00000)
00013:   Return
00014: LoadVar(00000)
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadFn { code: 00012, fvars: 00000 }
00019: PushString(""x"")
00020: LoadFn { code: 00016, fvars: 00000 }
00021: ApplyArgToFn
00022: ApplyArgToFn
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: ApplyArgToFn
00033: ApplyArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadFn { code: 00010, fvars: 00000 }
00040: LoadFn { code: 00018, fvars: 00000 }
00041: PushString(""f"")
00042: LoadFn { code: 00026, fvars: 00000 }
00043: ApplyArgToFn
00044: ApplyArgToFn
00045: PushString("Baz")
00046: PushString("Bar")
00047: PushString("Foo")
00048: ApplyArgToFn
00049: ApplyArgToFn
00050: LoadFn { code: 00037, fvars: 00000 }
00051: ApplyArgToFn
00052: ApplyArgToFn
00053: ApplyArgToFn

Baz

---

__unpack(Foo, :f => { :x => { x } }, { Error })

(__unpack
  Foo
  (=>
    :f
    { (=>
        :x
        { x }) })
  { Error })

( ( ( =>
        =>
          =>
            ( pop
              2
              1
              0 )
      Foo )
    ( ( =>
          =>
            0
        "f" )
      =>
        ( ( =>
              =>
                0
            "x" )
          =>
            0 ) ) )
  =>
    Error )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: PushString("Error")
00011:   Return
00012: LoadVar(00000)
00013:   Return
00014: LoadVar(00000)
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadFn { code: 00012, fvars: 00000 }
00019: PushString(""x"")
00020: LoadFn { code: 00016, fvars: 00000 }
00021: ApplyArgToFn
00022: ApplyArgToFn
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: ApplyArgToFn
00033: ApplyArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadFn { code: 00010, fvars: 00000 }
00040: LoadFn { code: 00018, fvars: 00000 }
00041: PushString(""f"")
00042: LoadFn { code: 00026, fvars: 00000 }
00043: ApplyArgToFn
00044: ApplyArgToFn
00045: PushString("Foo")
00046: LoadFn { code: 00037, fvars: 00000 }
00047: ApplyArgToFn
00048: ApplyArgToFn
00049: ApplyArgToFn

Error

---

__unpack(Foo(Bar, Baz), :f => { :x => { f } }, { Error })

(__unpack
  (Foo
    Bar
    Baz)
  (=>
    :f
    { (=>
        :x
        { f }) })
  { Error })

( ( ( =>
        =>
          =>
            ( pop
              2
              1
              0 )
      ( ( Foo
          Bar )
        Baz ) )
    ( ( =>
          =>
            0
        "f" )
      =>
        ( ( =>
              =>
                0
            "x" )
          =>
            1 ) ) )
  =>
    Error )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: PushString("Error")
00011:   Return
00012: LoadVar(00001)
00013:   Return
00014: LoadVar(00000)
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadFn { code: 00012, fvars: 00001 }
00019: PushString(""x"")
00020: LoadFn { code: 00016, fvars: 00000 }
00021: ApplyArgToFn
00022: ApplyArgToFn
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: ApplyArgToFn
00033: ApplyArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadFn { code: 00010, fvars: 00000 }
00040: LoadFn { code: 00018, fvars: 00000 }
00041: PushString(""f"")
00042: LoadFn { code: 00026, fvars: 00000 }
00043: ApplyArgToFn
00044: ApplyArgToFn
00045: PushString("Baz")
00046: PushString("Bar")
00047: PushString("Foo")
00048: ApplyArgToFn
00049: ApplyArgToFn
00050: LoadFn { code: 00037, fvars: 00000 }
00051: ApplyArgToFn
00052: ApplyArgToFn
00053: ApplyArgToFn

Foo(Bar)

---

__unpack(Foo(Bar), :f => { :x => { f } }, { Error })

(__unpack
  (Foo
    Bar)
  (=>
    :f
    { (=>
        :x
        { f }) })
  { Error })

( ( ( =>
        =>
          =>
            ( pop
              2
              1
              0 )
      ( Foo
        Bar ) )
    ( ( =>
          =>
            0
        "f" )
      =>
        ( ( =>
              =>
                0
            "x" )
          =>
            1 ) ) )
  =>
    Error )

00000: LoadFn { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00000)
00003: LoadVar(00001)
00004: LoadFn { code: 00000, fvars: 00000 }
00005: ApplyArgToFn
00006: LoadVar(00001)
00007: ApplyArgToFn
00008: ApplyArgToFn
00009:   Return
00010: PushString("Error")
00011:   Return
00012: LoadVar(00001)
00013:   Return
00014: LoadVar(00000)
00015:   Return
00016: LoadFn { code: 00014, fvars: 00000 }
00017:   Return
00018: LoadFn { code: 00012, fvars: 00001 }
00019: PushString(""x"")
00020: LoadFn { code: 00016, fvars: 00000 }
00021: ApplyArgToFn
00022: ApplyArgToFn
00023:   Return
00024: LoadVar(00000)
00025:   Return
00026: LoadFn { code: 00024, fvars: 00000 }
00027:   Return
00028: LoadVar(00002)
00029: LoadVar(00001)
00030: LoadVar(00000)
00031: Unpack
00032: ApplyArgToFn
00033: ApplyArgToFn
00034:   Return
00035: LoadFn { code: 00028, fvars: 00002 }
00036:   Return
00037: LoadFn { code: 00035, fvars: 00001 }
00038:   Return
00039: LoadFn { code: 00010, fvars: 00000 }
00040: LoadFn { code: 00018, fvars: 00000 }
00041: PushString(""f"")
00042: LoadFn { code: 00026, fvars: 00000 }
00043: ApplyArgToFn
00044: ApplyArgToFn
00045: PushString("Bar")
00046: PushString("Foo")
00047: ApplyArgToFn
00048: LoadFn { code: 00037, fvars: 00000 }
00049: ApplyArgToFn
00050: ApplyArgToFn
00051: ApplyArgToFn

Foo