// Notes:
// - I don't have a way to check that something is a string
// - There is no pipe syntax like |> or a UFCS .call syntax
// - it's not possible to match on arbitrary structures like 'style('content)
// - how can I build a flatten-all functions that matches on lists vs strings?
// Todo:
// [x] change the AST representation for Compound and Template
// [x] fix pattern matching for compounds
// [ ] make it easy to use the data in Rust (serde?)
// [ ] support keyword call syntax for atoms (possibly ignoring order?)

'escape = ('str => { str })

'gen-inline = ('inline => {
    match: inline with: [
        Em('content) -> { ["<em>", escape(content), "</em>"] }
        Strong('content) -> { ["<strong>", escape(content), "</strong>"] }
        '_ -> { [escape(inline)] }
    ]
})

'gen-block = ('gen-block ~> { 'block => {
    match: block with: [
        Paragraph('inline) -> { flatten([
            ["<p>"], flatten(map(gen-inline, inline)), ["</p>"]
        ]) }
        Unordered('blocks) -> {
            'gen-item = ('item => { flatten([
                ["<li>"]
                gen-block(item)
                ["</li>"]
            ])})
            flatten([
                ["<ul>"]
                flatten(map(gen-item, blocks))
                ["</ul>"]
            ])
        }
    ]
} })

'gen-section = ('section => {
    match: section with: [
        Section('title, 'blocks) -> { flatten([
            ["<h2>", escape(title), "</h2>"]
            flatten(map(gen-block, blocks))
        ]) }
    ]
})

'generate = ('page => {
    match: page with: [
        Page('title, 'sections) -> { flatten([
            [
                "<head>"
                "<title>", escape(title), "</title>"
                "</head>"
                "<body>"
                "<h1>"
                escape(title)
                "</h1>"
            ]
            flatten(map(gen-section, sections))
            [
                "</body>"
            ]
        ]) }
    ]
})

'page = Page("Page Title", [
    Section("Section Title", [
        Paragraph([
            "This is a "
            Strong("paragraph")
            "."
        ])
        Unordered([
            Paragraph(["Another paragraph."])
        ])
    ])
])

generate(page)
