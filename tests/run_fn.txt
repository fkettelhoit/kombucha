('x => { Bar })(Foo)

((=>
  'x
  { Bar })
  Foo)

( ( ( =>
        =>
          0
      "x" )
    =>
      Bar )
  Foo )

00000: LoadClosure { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn(00010)
00013:   Return
00014: PushString("Bar")
00015:   Return
00016: LoadFn(00012)
00017: PushString(""x"")
00018: ApplyFnToArg
00019: LoadFn(00014)
00020: ApplyFnToArg
00021: PushString("Foo")
00022: ApplyFnToArg

Bar

---

('x => { x })(Foo)

((=>
  'x
  { x })
  Foo)

( ( ( =>
        =>
          0
      "x" )
    =>
      0 )
  Foo )

00000: LoadClosure { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn(00010)
00013:   Return
00014: LoadVar(00000)
00015:   Return
00016: LoadFn(00012)
00017: PushString(""x"")
00018: ApplyFnToArg
00019: LoadFn(00014)
00020: ApplyFnToArg
00021: PushString("Foo")
00022: ApplyFnToArg

Foo

---

('x => { 'y => { x } })(Foo, Bar)

((=>
  'x
  { (=>
      'y
      { x }) })
  Foo
  Bar)

( ( ( ( =>
          =>
            0
        "x" )
      =>
        ( ( =>
              =>
                0
            "y" )
          =>
            1 ) )
    Foo )
  Bar )

00000: LoadClosure { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn(00010)
00013:   Return
00014: LoadVar(00000)
00015:   Return
00016: LoadFn(00014)
00017:   Return
00018: LoadVar(00001)
00019:   Return
00020: LoadFn(00016)
00021: PushString(""y"")
00022: ApplyFnToArg
00023: LoadClosure { code: 00018, fvars: 00001 }
00024: ApplyFnToArg
00025:   Return
00026: LoadFn(00012)
00027: PushString(""x"")
00028: ApplyFnToArg
00029: LoadFn(00020)
00030: ApplyFnToArg
00031: PushString("Foo")
00032: ApplyFnToArg
00033: PushString("Bar")
00034: ApplyFnToArg

Foo

---

('x => { 'y => { 'z => { Vec(z, x, z) } } })(Foo, Bar, Baz)

((=>
  'x
  { (=>
      'y
      { (=>
          'z
          { (Vec
              z
              x
              z) }) }) })
  Foo
  Bar
  Baz)

( ( ( ( ( =>
            =>
              0
          "x" )
        =>
          ( ( =>
                =>
                  0
              "y" )
            =>
              ( ( =>
                    =>
                      0
                  "z" )
                =>
                  ( ( ( Vec
                        0 )
                      2 )
                    0 ) ) ) )
      Foo )
    Bar )
  Baz )

00000: LoadClosure { code: 00002, fvars: 00001 }
00001:   Return
00002: LoadVar(00001)
00003: LoadFn(00000)
00004: LoadVar(00001)
00005: ApplyFnToArg
00006: ApplyFnToArg
00007: LoadVar(00000)
00008: ApplyFnToArg
00009:   Return
00010: LoadVar(00000)
00011:   Return
00012: LoadFn(00010)
00013:   Return
00014: LoadVar(00000)
00015:   Return
00016: LoadFn(00014)
00017:   Return
00018: LoadVar(00000)
00019:   Return
00020: LoadFn(00018)
00021:   Return
00022: PushString("Vec")
00023: LoadVar(00000)
00024: ApplyFnToArg
00025: LoadVar(00002)
00026: ApplyFnToArg
00027: LoadVar(00000)
00028: ApplyFnToArg
00029:   Return
00030: LoadFn(00020)
00031: PushString(""z"")
00032: ApplyFnToArg
00033: LoadClosure { code: 00022, fvars: 00002 }
00034: ApplyFnToArg
00035:   Return
00036: LoadFn(00016)
00037: PushString(""y"")
00038: ApplyFnToArg
00039: LoadClosure { code: 00030, fvars: 00001 }
00040: ApplyFnToArg
00041:   Return
00042: LoadFn(00012)
00043: PushString(""x"")
00044: ApplyFnToArg
00045: LoadFn(00036)
00046: ApplyFnToArg
00047: PushString("Foo")
00048: ApplyFnToArg
00049: PushString("Bar")
00050: ApplyFnToArg
00051: PushString("Baz")
00052: ApplyFnToArg

Vec(Baz, Foo, Baz)